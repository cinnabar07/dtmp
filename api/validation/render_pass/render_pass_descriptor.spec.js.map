{"version":3,"file":"render_pass_descriptor.spec.js","names":["description","makeTestGroup","range","kMaxColorAttachmentsToTest","kQueryTypes","GPUConst","computeBytesPerSampleFromFormats","kDepthStencilFormats","kRenderableColorTextureFormats","kTextureFormatInfo","ValidationTest","F","createTestTexture","options","format","dimension","width","height","arrayLayerCount","mipLevelCount","sampleCount","usage","GPUTextureUsage","RENDER_ATTACHMENT","createTextureTracked","size","depthOrArrayLayers","getColorAttachment","texture","textureViewDescriptor","view","createView","clearValue","r","g","b","a","loadOp","storeOp","getDepthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","stencilClearValue","stencilLoadOp","stencilStoreOp","tryRenderPass","success","descriptor","commandEncoder","globalThis","_TRAMPOLINE_","device","createCommandEncoder","renderPass","beginRenderPass","end","expectValidationError","finish","kArrayLayerCount","test","desc","fn","t","colorTexture","colorAttachments","depthStencilTexture","depthStencilAttachment","paramsSubcasesOnly","u","combine","undefined","Array","fill","unclampedColorAttachments","hasDepthStencilAttachment","params","slice","limits","maxColorAttachments","isEmptyColorTargets","i","length","_success","paramsSimple","colorAttachmentsCountVariant","mult","add","colorAttachmentsCount","makeLimitVariant","push","beginSubcases","beforeAllSubcases","skipIfTextureFormatNotSupported","attachmentCount","info","skipIf","shouldError","colorRender","maxColorAttachmentBytesPerSample","combineWithParams","formats","depthSlice","colorAttachment","expand","mipLevel","depthAtMipLevel","Math","max","Set","viewDescriptor","baseMipLevel","baseArrayLayer","passDescriptor","sameDepthSlice","sameTexture","samePass","texDescriptor","encoder","createEncoder","pass","validateFinish","sameMipLevel","colorTexture1x1A","colorTexture1x1B","colorTexture2x2","depthStencilTexture1x1","depthStencilTexture2x2","ARRAY_LAYER_COUNT","MIP_LEVEL_COUNT","COLOR_FORMAT","DEPTH_STENCIL_FORMAT","baseTextureViewDescriptor","resolveTargetTexture","resolveTarget","multisampledColorTexture","multisampledResolveTargetTexture","TextureUsage","COPY_SRC","COPY_DST","STORAGE_BINDING","TEXTURE_BINDING","STORAGE","isValid","resolveTargetTextureView","multisampledDepthStencilTexture","selectDeviceOrSkipTestCase","feature","depthReadOnly","stencilReadOnly","depthAttachment","depthAttachmentView","renderPassDescriptor","hasDepthSettings","hasStencilSettings","hasDepth","depth","hasStencil","stencil","goodAspectSettingsPresent","hasBothDepthOps","hasBothStencilOps","hasNeitherDepthOps","hasNeitherStencilOps","goodDepthCombo","goodStencilCombo","isDepthValueInRange","isInvalid","filter","multisample","resolve","queryType","timestampWrites","querySet","createQuerySetTracked","type","count","beginningOfPassWriteIndex","endOfPassWriteIndex","querySetCount","occlusionQuerySet"],"sources":["../../../../../src/webgpu/api/validation/render_pass/render_pass_descriptor.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nrender pass descriptor validation tests.\n\nTODO: review for completeness\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { range } from '../../../../common/util/util.js';\nimport { kMaxColorAttachmentsToTest, kQueryTypes } from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport {\n  computeBytesPerSampleFromFormats,\n  kDepthStencilFormats,\n  kRenderableColorTextureFormats,\n  kTextureFormatInfo } from\n'../../../format_info.js';\nimport { ValidationTest } from '../validation_test.js';\n\nclass F extends ValidationTest {\n  createTestTexture(\n  options =\n\n\n\n\n\n\n\n\n  {})\n  {\n    const {\n      format = 'rgba8unorm',\n      dimension = '2d',\n      width = 16,\n      height = 16,\n      arrayLayerCount = 1,\n      mipLevelCount = 1,\n      sampleCount = 1,\n      usage = GPUTextureUsage.RENDER_ATTACHMENT\n    } = options;\n\n    return this.createTextureTracked({\n      size: { width, height, depthOrArrayLayers: arrayLayerCount },\n      format,\n      dimension,\n      mipLevelCount,\n      sampleCount,\n      usage\n    });\n  }\n\n  getColorAttachment(\n  texture,\n  textureViewDescriptor)\n  {\n    const view = texture.createView(textureViewDescriptor);\n\n    return {\n      view,\n      clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: 'store'\n    };\n  }\n\n  getDepthStencilAttachment(\n  texture,\n  textureViewDescriptor)\n  {\n    const view = texture.createView(textureViewDescriptor);\n\n    return {\n      view,\n      depthClearValue: 1.0,\n      depthLoadOp: 'clear',\n      depthStoreOp: 'store',\n      stencilClearValue: 0,\n      stencilLoadOp: 'clear',\n      stencilStoreOp: 'store'\n    };\n  }\n\n  tryRenderPass(success, descriptor) {\n    const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", this.device, this.device.createCommandEncoder, [], () => this.device.createCommandEncoder());\n    const renderPass = commandEncoder.beginRenderPass(descriptor);\n    renderPass.end();\n\n    this.expectValidationError(() => {\n      commandEncoder.finish();\n    }, !success);\n  }\n}\n\nexport const g = makeTestGroup(F);\nconst kArrayLayerCount = 10;\n\ng.test('attachments,one_color_attachment').\ndesc(`Test that a render pass works with only one color attachment.`).\nfn((t) => {\n  const colorTexture = t.createTestTexture({ format: 'rgba8unorm' });\n  const descriptor = {\n    colorAttachments: [t.getColorAttachment(colorTexture)]\n  };\n\n  t.tryRenderPass(true, descriptor);\n});\n\ng.test('attachments,one_depth_stencil_attachment').\ndesc(`Test that a render pass works with only one depthStencil attachment.`).\nfn((t) => {\n  const depthStencilTexture = t.createTestTexture({ format: 'depth24plus-stencil8' });\n  const descriptor = {\n    colorAttachments: [],\n    depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture)\n  };\n\n  t.tryRenderPass(true, descriptor);\n});\n\ng.test('color_attachments,empty').\ndesc(\n  `\n  Test that when colorAttachments has all values be 'undefined' or the sequence is empty, the\n  depthStencilAttachment must not be 'undefined'.\n  `\n).\nparamsSubcasesOnly((u) =>\nu.\ncombine('unclampedColorAttachments', [\n[],\n[undefined],\n[undefined, undefined],\nnew Array(8).fill(undefined),\n[{ format: 'rgba8unorm' }]]\n).\ncombine('hasDepthStencilAttachment', [false, true])\n).\nfn((t) => {\n  const { unclampedColorAttachments, hasDepthStencilAttachment } = t.params;\n  const colorAttachments = unclampedColorAttachments.slice(\n    0,\n    t.device.limits.maxColorAttachments\n  );\n\n  let isEmptyColorTargets = true;\n  for (let i = 0; i < colorAttachments.length; i++) {\n    if (colorAttachments[i] !== undefined) {\n      isEmptyColorTargets = false;\n      const colorTexture = t.createTestTexture();\n      colorAttachments[i] = t.getColorAttachment(colorTexture);\n    }\n  }\n\n  const _success = !isEmptyColorTargets || hasDepthStencilAttachment;\n  t.tryRenderPass(_success, {\n    colorAttachments,\n    depthStencilAttachment: hasDepthStencilAttachment ?\n    t.getDepthStencilAttachment(t.createTestTexture({ format: 'depth24plus-stencil8' })) :\n    undefined\n  });\n});\n\ng.test('color_attachments,limits,maxColorAttachments').\ndesc(\n  `\n  Test that the out of bound of color attachment indexes are handled.\n    - a validation error is generated when color attachments exceed the maximum limit(8).\n  `\n).\nparamsSimple([\n{ colorAttachmentsCountVariant: { mult: 1, add: 0 }, _success: true }, // Control case\n{ colorAttachmentsCountVariant: { mult: 1, add: 1 }, _success: false } // Out of bounds\n]).\nfn((t) => {\n  const { colorAttachmentsCountVariant, _success } = t.params;\n  const colorAttachmentsCount = t.makeLimitVariant(\n    'maxColorAttachments',\n    colorAttachmentsCountVariant\n  );\n\n  const colorAttachments = [];\n  for (let i = 0; i < colorAttachmentsCount; i++) {\n    const colorTexture = t.createTestTexture({ format: 'r8unorm' });\n    colorAttachments.push(t.getColorAttachment(colorTexture));\n  }\n\n  t.tryRenderPass(_success, { colorAttachments });\n});\n\ng.test('color_attachments,limits,maxColorAttachmentBytesPerSample,aligned').\ndesc(\n  `\n    Test that the total bytes per sample of the formats of the color attachments must be no greater\n    than maxColorAttachmentBytesPerSample when the components are aligned (same format).\n  `\n).\nparams((u) =>\nu.\ncombine('format', kRenderableColorTextureFormats).\nbeginSubcases().\ncombine(\n  'attachmentCount',\n  range(kMaxColorAttachmentsToTest, (i) => i + 1)\n)\n).\nbeforeAllSubcases((t) => {\n  t.skipIfTextureFormatNotSupported(t.params.format);\n}).\nfn((t) => {\n  const { format, attachmentCount } = t.params;\n  const info = kTextureFormatInfo[format];\n\n  t.skipIf(\n    attachmentCount > t.device.limits.maxColorAttachments,\n    `attachmentCount: ${attachmentCount} > maxColorAttachments: ${t.device.limits.maxColorAttachments}`\n  );\n\n  const colorAttachments = [];\n  for (let i = 0; i < attachmentCount; i++) {\n    const colorTexture = t.createTestTexture({ format });\n    colorAttachments.push(t.getColorAttachment(colorTexture));\n  }\n  const shouldError =\n  info.colorRender === undefined ||\n  computeBytesPerSampleFromFormats(range(attachmentCount, () => format)) >\n  t.device.limits.maxColorAttachmentBytesPerSample;\n\n  t.tryRenderPass(!shouldError, { colorAttachments });\n});\n\ng.test('color_attachments,limits,maxColorAttachmentBytesPerSample,unaligned').\ndesc(\n  `\n    Test that the total bytes per sample of the formats of the color attachments must be no greater\n    than maxColorAttachmentBytesPerSample when the components are (potentially) unaligned.\n  `\n).\nparams((u) =>\nu.combineWithParams([\n// Alignment causes the first 1 byte R8Unorm to become 4 bytes. So even though\n// 1+4+8+16+1 < 32, the 4 byte alignment requirement of R32Float makes the first R8Unorm\n// become 4 and 4+4+8+16+1 > 32. Re-ordering this so the R8Unorm's are at the end, however\n// is allowed: 4+8+16+1+1 < 32.\n{\n  formats: [\n  'r8unorm',\n  'r32float',\n  'rgba8unorm',\n  'rgba32float',\n  'r8unorm']\n\n},\n{\n  formats: [\n  'r32float',\n  'rgba8unorm',\n  'rgba32float',\n  'r8unorm',\n  'r8unorm']\n\n}]\n)\n).\nfn((t) => {\n  const { formats } = t.params;\n\n  t.skipIf(\n    formats.length > t.device.limits.maxColorAttachments,\n    `numColorAttachments: ${formats.length} > maxColorAttachments: ${t.device.limits.maxColorAttachments}`\n  );\n\n  const colorAttachments = [];\n  for (const format of formats) {\n    const colorTexture = t.createTestTexture({ format });\n    colorAttachments.push(t.getColorAttachment(colorTexture));\n  }\n\n  const success =\n  computeBytesPerSampleFromFormats(formats) <= t.device.limits.maxColorAttachmentBytesPerSample;\n\n  t.tryRenderPass(success, { colorAttachments });\n});\n\ng.test('color_attachments,depthSlice,definedness').\ndesc(\n  `\n  Test that depthSlice must be undefined for 2d color attachments and defined for 3d color attachments.\"\n  - The special value '0xFFFFFFFF' is not treated as 'undefined'.\n  `\n).\nparams((u) =>\nu.\ncombine('dimension', ['2d', '3d']).\nbeginSubcases().\ncombine('depthSlice', [undefined, 0, 0xffffffff])\n).\nfn((t) => {\n  const { dimension, depthSlice } = t.params;\n  const texture = t.createTestTexture({ dimension });\n\n  const colorAttachment = t.getColorAttachment(texture);\n  if (depthSlice !== undefined) {\n    colorAttachment.depthSlice = depthSlice;\n  }\n\n  const descriptor = {\n    colorAttachments: [colorAttachment]\n  };\n\n  const success =\n  dimension === '2d' && depthSlice === undefined || dimension === '3d' && depthSlice === 0;\n\n  t.tryRenderPass(success, descriptor);\n});\n\ng.test('color_attachments,depthSlice,bound_check').\ndesc(\n  `\n  Test that depthSlice must be less than the depthOrArrayLayers of 3d texture's subresource at mip levels.\n  - Check depth bounds with 3d texture size [16, 1, 10], which has 5 mip levels with depth [10, 5, 2, 1, 1]\n    for testing more mip level size computation.\n  - Failed if depthSlice >= the depth of each mip level.\n  `\n).\nparams((u) =>\nu.\ncombine('mipLevel', [0, 1, 2, 3, 4]).\nbeginSubcases().\nexpand('depthSlice', ({ mipLevel }) => {\n  const depthAtMipLevel = Math.max(kArrayLayerCount >> mipLevel, 1);\n  // Use Set() to exclude duplicates when the depthAtMipLevel is 1 and 2\n  return [...new Set([0, 1, depthAtMipLevel - 1, depthAtMipLevel])];\n})\n).\nfn((t) => {\n  const { mipLevel, depthSlice } = t.params;\n\n  const texture = t.createTestTexture({\n    dimension: '3d',\n    width: 16,\n    height: 1,\n    arrayLayerCount: kArrayLayerCount,\n    mipLevelCount: mipLevel + 1\n  });\n\n  const viewDescriptor = {\n    baseMipLevel: mipLevel,\n    mipLevelCount: 1,\n    baseArrayLayer: 0,\n    arrayLayerCount: 1\n  };\n\n  const colorAttachment = t.getColorAttachment(texture, viewDescriptor);\n  colorAttachment.depthSlice = depthSlice;\n\n  const passDescriptor = {\n    colorAttachments: [colorAttachment]\n  };\n\n  const success = depthSlice < Math.max(kArrayLayerCount >> mipLevel, 1);\n\n  t.tryRenderPass(success, passDescriptor);\n});\n\ng.test('color_attachments,depthSlice,overlaps,same_miplevel').\ndesc(\n  `\n  Test that the depth slices of 3d color attachments have no overlaps for same texture in a render\n  pass.\n  - Succeed if the depth slices are different, or from different textures, or on different render\n    passes.\n  - Fail if same depth slice from same texture's same mip level is overwritten in a render pass.\n  `\n).\nparams((u) =>\nu.\ncombine('sameDepthSlice', [true, false]).\nbeginSubcases().\ncombine('sameTexture', [true, false]).\ncombine('samePass', [true, false])\n).\nfn((t) => {\n  const { sameDepthSlice, sameTexture, samePass } = t.params;\n  const arrayLayerCount = 4;\n\n  const texDescriptor = {\n    dimension: '3d',\n    arrayLayerCount\n  };\n  const texture = t.createTestTexture(texDescriptor);\n\n  const colorAttachments = [];\n  for (let i = 0; i < arrayLayerCount; i++) {\n    const colorAttachment = t.getColorAttachment(\n      sameTexture ? texture : t.createTestTexture(texDescriptor)\n    );\n    colorAttachment.depthSlice = sameDepthSlice ? 0 : i;\n    colorAttachments.push(colorAttachment);\n  }\n\n  const encoder = t.createEncoder('non-pass');\n  if (samePass) {\n    const pass = encoder.encoder.beginRenderPass({ colorAttachments });\n    pass.end();\n  } else {\n    for (let i = 0; i < arrayLayerCount; i++) {\n      const pass = encoder.encoder.beginRenderPass({ colorAttachments: [colorAttachments[i]] });\n      pass.end();\n    }\n  }\n\n  const success = !sameDepthSlice || !sameTexture || !samePass;\n\n  encoder.validateFinish(success);\n});\n\ng.test('color_attachments,depthSlice,overlaps,diff_miplevel').\ndesc(\n  `\n  Test that the same depth slice from different mip levels of a 3d texture with size [1, 1, N] can\n  be set in a render pass's color attachments.\n  `\n).\nparams((u) => u.combine('sameMipLevel', [true, false])).\nfn((t) => {\n  const { sameMipLevel } = t.params;\n  const mipLevelCount = 4;\n\n  const texDescriptor = {\n    dimension: '3d',\n    width: 1,\n    height: 1,\n    arrayLayerCount: 1 << mipLevelCount,\n    mipLevelCount\n  };\n  const texture = t.createTestTexture(texDescriptor);\n\n  const viewDescriptor = {\n    baseMipLevel: 0,\n    mipLevelCount: 1,\n    baseArrayLayer: 0,\n    arrayLayerCount: 1\n  };\n\n  const colorAttachments = [];\n  for (let i = 0; i < mipLevelCount; i++) {\n    if (!sameMipLevel) {\n      viewDescriptor.baseMipLevel = i;\n    }\n    const colorAttachment = t.getColorAttachment(texture, viewDescriptor);\n    colorAttachment.depthSlice = 0;\n    colorAttachments.push(colorAttachment);\n  }\n\n  const encoder = t.createEncoder('non-pass');\n  const pass = encoder.encoder.beginRenderPass({ colorAttachments });\n  pass.end();\n\n  encoder.validateFinish(!sameMipLevel);\n});\n\ng.test('attachments,same_size').\ndesc(\n  `\n  Test that attachments have the same size. Otherwise, a validation error should be generated.\n    - Succeed if all attachments have the same size.\n    - Fail if one of the color attachments has a different size.\n    - Fail if the depth stencil attachment has a different size.\n  `\n).\nfn((t) => {\n  const colorTexture1x1A = t.createTestTexture({ width: 1, height: 1, format: 'rgba8unorm' });\n  const colorTexture1x1B = t.createTestTexture({ width: 1, height: 1, format: 'rgba8unorm' });\n  const colorTexture2x2 = t.createTestTexture({ width: 2, height: 2, format: 'rgba8unorm' });\n  const depthStencilTexture1x1 = t.createTestTexture({\n    width: 1,\n    height: 1,\n    format: 'depth24plus-stencil8'\n  });\n  const depthStencilTexture2x2 = t.createTestTexture({\n    width: 2,\n    height: 2,\n    format: 'depth24plus-stencil8'\n  });\n\n  {\n    // Control case: all the same size (1x1)\n    const descriptor = {\n      colorAttachments: [\n      t.getColorAttachment(colorTexture1x1A),\n      t.getColorAttachment(colorTexture1x1B)],\n\n      depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture1x1)\n    };\n\n    t.tryRenderPass(true, descriptor);\n  }\n  {\n    // One of the color attachments has a different size\n    const descriptor = {\n      colorAttachments: [\n      t.getColorAttachment(colorTexture1x1A),\n      t.getColorAttachment(colorTexture2x2)]\n\n    };\n\n    t.tryRenderPass(false, descriptor);\n  }\n  {\n    // The depth stencil attachment has a different size\n    const descriptor = {\n      colorAttachments: [\n      t.getColorAttachment(colorTexture1x1A),\n      t.getColorAttachment(colorTexture1x1B)],\n\n      depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture2x2)\n    };\n\n    t.tryRenderPass(false, descriptor);\n  }\n});\n\ng.test('attachments,color_depth_mismatch').\ndesc(`Test that attachments match whether they are used for color or depth stencil.`).\nfn((t) => {\n  const colorTexture = t.createTestTexture({ format: 'rgba8unorm' });\n  const depthStencilTexture = t.createTestTexture({ format: 'depth24plus-stencil8' });\n\n  {\n    // Using depth-stencil for color\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(depthStencilTexture)]\n    };\n\n    t.tryRenderPass(false, descriptor);\n  }\n  {\n    // Using color for depth-stencil\n    const descriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: t.getDepthStencilAttachment(colorTexture)\n    };\n\n    t.tryRenderPass(false, descriptor);\n  }\n});\n\ng.test('attachments,layer_count').\ndesc(\n  `\n  Test the layer counts for color or depth stencil.\n    - Fail if using 2D array texture view with arrayLayerCount > 1.\n    - Succeed if using 2D array texture view that covers the first layer of the texture.\n    - Succeed if using 2D array texture view that covers the last layer for depth stencil.\n  `\n).\nparamsSimple([\n{ arrayLayerCount: 5, baseArrayLayer: 0, _success: false },\n{ arrayLayerCount: 1, baseArrayLayer: 0, _success: true },\n{ arrayLayerCount: 1, baseArrayLayer: 9, _success: true }]\n).\nfn((t) => {\n  const { arrayLayerCount, baseArrayLayer, _success } = t.params;\n\n  const ARRAY_LAYER_COUNT = 10;\n  const MIP_LEVEL_COUNT = 1;\n  const COLOR_FORMAT = 'rgba8unorm';\n  const DEPTH_STENCIL_FORMAT = 'depth24plus-stencil8';\n\n  const colorTexture = t.createTestTexture({\n    format: COLOR_FORMAT,\n    width: 32,\n    height: 32,\n    mipLevelCount: MIP_LEVEL_COUNT,\n    arrayLayerCount: ARRAY_LAYER_COUNT\n  });\n  const depthStencilTexture = t.createTestTexture({\n    format: DEPTH_STENCIL_FORMAT,\n    width: 32,\n    height: 32,\n    mipLevelCount: MIP_LEVEL_COUNT,\n    arrayLayerCount: ARRAY_LAYER_COUNT\n  });\n\n  const baseTextureViewDescriptor = {\n    dimension: '2d-array',\n    baseArrayLayer,\n    arrayLayerCount,\n    baseMipLevel: 0,\n    mipLevelCount: MIP_LEVEL_COUNT\n  };\n\n  {\n    // Check 2D array texture view for color\n    const textureViewDescriptor = {\n      ...baseTextureViewDescriptor,\n      format: COLOR_FORMAT\n    };\n\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture, textureViewDescriptor)]\n    };\n\n    t.tryRenderPass(_success, descriptor);\n  }\n  {\n    // Check 2D array texture view for depth stencil\n    const textureViewDescriptor = {\n      ...baseTextureViewDescriptor,\n      format: DEPTH_STENCIL_FORMAT\n    };\n\n    const descriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: t.getDepthStencilAttachment(\n        depthStencilTexture,\n        textureViewDescriptor\n      )\n    };\n\n    t.tryRenderPass(_success, descriptor);\n  }\n});\n\ng.test('attachments,mip_level_count').\ndesc(\n  `\n  Test the mip level count for color or depth stencil.\n    - Fail if using 2D texture view with mipLevelCount > 1.\n    - Succeed if using 2D texture view that covers the first level of the texture.\n    - Succeed if using 2D texture view that covers the last level of the texture.\n  `\n).\nparamsSimple([\n{ mipLevelCount: 2, baseMipLevel: 0, _success: false },\n{ mipLevelCount: 1, baseMipLevel: 0, _success: true },\n{ mipLevelCount: 1, baseMipLevel: 3, _success: true }]\n).\nfn((t) => {\n  const { mipLevelCount, baseMipLevel, _success } = t.params;\n\n  const ARRAY_LAYER_COUNT = 1;\n  const MIP_LEVEL_COUNT = 4;\n  const COLOR_FORMAT = 'rgba8unorm';\n  const DEPTH_STENCIL_FORMAT = 'depth24plus-stencil8';\n\n  const colorTexture = t.createTestTexture({\n    format: COLOR_FORMAT,\n    width: 32,\n    height: 32,\n    mipLevelCount: MIP_LEVEL_COUNT,\n    arrayLayerCount: ARRAY_LAYER_COUNT\n  });\n  const depthStencilTexture = t.createTestTexture({\n    format: DEPTH_STENCIL_FORMAT,\n    width: 32,\n    height: 32,\n    mipLevelCount: MIP_LEVEL_COUNT,\n    arrayLayerCount: ARRAY_LAYER_COUNT\n  });\n\n  const baseTextureViewDescriptor = {\n    dimension: '2d',\n    baseArrayLayer: 0,\n    arrayLayerCount: ARRAY_LAYER_COUNT,\n    baseMipLevel,\n    mipLevelCount\n  };\n\n  {\n    // Check 2D texture view for color\n    const textureViewDescriptor = {\n      ...baseTextureViewDescriptor,\n      format: COLOR_FORMAT\n    };\n\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture, textureViewDescriptor)]\n    };\n\n    t.tryRenderPass(_success, descriptor);\n  }\n  {\n    // Check 2D texture view for depth stencil\n    const textureViewDescriptor = {\n      ...baseTextureViewDescriptor,\n      format: DEPTH_STENCIL_FORMAT\n    };\n\n    const descriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: t.getDepthStencilAttachment(\n        depthStencilTexture,\n        textureViewDescriptor\n      )\n    };\n\n    t.tryRenderPass(_success, descriptor);\n  }\n});\n\ng.test('color_attachments,non_multisampled').\ndesc(\n  `\n  Test that setting a resolve target is invalid if the color attachments is non multisampled.\n  `\n).\nfn((t) => {\n  const colorTexture = t.createTestTexture({ sampleCount: 1 });\n  const resolveTargetTexture = t.createTestTexture({ sampleCount: 1 });\n\n  const descriptor = {\n    colorAttachments: [\n    {\n      view: colorTexture.createView(),\n      resolveTarget: resolveTargetTexture.createView(),\n      clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: 'store'\n    }]\n\n  };\n\n  t.tryRenderPass(false, descriptor);\n});\n\ng.test('color_attachments,sample_count').\ndesc(\n  `\n  Test the usages of multisampled textures for color attachments.\n    - Succeed if using a multisampled color attachment without setting a resolve target.\n    - Fail if using multiple color attachments with different sample counts.\n  `\n).\nfn((t) => {\n  const colorTexture = t.createTestTexture({ sampleCount: 1 });\n  const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n\n  {\n    // It is allowed to use a multisampled color attachment without setting resolve target\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(multisampledColorTexture)]\n    };\n    t.tryRenderPass(true, descriptor);\n  }\n  {\n    // It is not allowed to use multiple color attachments with different sample counts\n    const descriptor = {\n      colorAttachments: [\n      t.getColorAttachment(colorTexture),\n      t.getColorAttachment(multisampledColorTexture)]\n\n    };\n\n    t.tryRenderPass(false, descriptor);\n  }\n});\n\ng.test('resolveTarget,sample_count').\ndesc(\n  `\n  Test that using multisampled resolve target is invalid for color attachments.\n  `\n).\nfn((t) => {\n  const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n  const multisampledResolveTargetTexture = t.createTestTexture({ sampleCount: 4 });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  colorAttachment.resolveTarget = multisampledResolveTargetTexture.createView();\n\n  const descriptor = {\n    colorAttachments: [colorAttachment]\n  };\n\n  t.tryRenderPass(false, descriptor);\n});\n\ng.test('resolveTarget,array_layer_count').\ndesc(\n  `\n  Test that using a resolve target with array layer count is greater than 1 is invalid for color\n  attachments.\n  `\n).\nfn((t) => {\n  const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n  const resolveTargetTexture = t.createTestTexture({ arrayLayerCount: 2 });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  colorAttachment.resolveTarget = resolveTargetTexture.createView({ dimension: '2d-array' });\n\n  const descriptor = {\n    colorAttachments: [colorAttachment]\n  };\n\n  t.tryRenderPass(false, descriptor);\n});\n\ng.test('resolveTarget,mipmap_level_count').\ndesc(\n  `\n  Test that using a resolve target with that mipmap level count is greater than 1 is invalid for\n  color attachments.\n  `\n).\nfn((t) => {\n  const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n  const resolveTargetTexture = t.createTestTexture({ mipLevelCount: 2 });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n  const descriptor = {\n    colorAttachments: [colorAttachment]\n  };\n\n  t.tryRenderPass(false, descriptor);\n});\n\ng.test('resolveTarget,usage').\ndesc(\n  `\n  Test that using a resolve target whose usage is not RENDER_ATTACHMENT is invalid for color\n  attachments.\n  `\n).\nparamsSimple([\n{ usage: GPUConst.TextureUsage.COPY_SRC | GPUConst.TextureUsage.COPY_DST },\n{ usage: GPUConst.TextureUsage.STORAGE_BINDING | GPUConst.TextureUsage.TEXTURE_BINDING },\n{ usage: GPUConst.TextureUsage.STORAGE_BINDING | GPUConst.TextureUsage.STORAGE },\n{ usage: GPUConst.TextureUsage.RENDER_ATTACHMENT | GPUConst.TextureUsage.TEXTURE_BINDING }]\n).\nfn((t) => {\n  const { usage } = t.params;\n\n  const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n  const resolveTargetTexture = t.createTestTexture({ usage });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n  const descriptor = {\n    colorAttachments: [colorAttachment]\n  };\n\n  const isValid = usage & GPUConst.TextureUsage.RENDER_ATTACHMENT ? true : false;\n  t.tryRenderPass(isValid, descriptor);\n});\n\ng.test('resolveTarget,error_state').\ndesc(`Test that a resolve target that has a error is invalid for color attachments.`).\nfn((t) => {\n  const ARRAY_LAYER_COUNT = 1;\n\n  const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n  const resolveTargetTexture = t.createTestTexture({ arrayLayerCount: ARRAY_LAYER_COUNT });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  t.expectValidationError(() => {\n    colorAttachment.resolveTarget = resolveTargetTexture.createView({\n      dimension: '2d',\n      format: 'rgba8unorm',\n      baseArrayLayer: ARRAY_LAYER_COUNT + 1\n    });\n  });\n\n  const descriptor = {\n    colorAttachments: [colorAttachment]\n  };\n\n  t.tryRenderPass(false, descriptor);\n});\n\ng.test('resolveTarget,single_sample_count').\ndesc(\n  `\n  Test that a resolve target that has multi sample color attachment and a single resolve target is\n  valid.\n  `\n).\nfn((t) => {\n  const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n  const resolveTargetTexture = t.createTestTexture({ sampleCount: 1 });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n  const descriptor = {\n    colorAttachments: [colorAttachment]\n  };\n\n  t.tryRenderPass(true, descriptor);\n});\n\ng.test('resolveTarget,different_format').\ndesc(`Test that a resolve target that has a different format is invalid.`).\nfn((t) => {\n  const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n  const resolveTargetTexture = t.createTestTexture({ format: 'bgra8unorm' });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  colorAttachment.resolveTarget = resolveTargetTexture.createView();\n\n  const descriptor = {\n    colorAttachments: [colorAttachment]\n  };\n\n  t.tryRenderPass(false, descriptor);\n});\n\ng.test('resolveTarget,different_size').\ndesc(\n  `\n  Test that a resolve target that has a different size with the color attachment is invalid.\n  `\n).\nfn((t) => {\n  const size = 16;\n  const multisampledColorTexture = t.createTestTexture({\n    width: size,\n    height: size,\n    sampleCount: 4\n  });\n  const resolveTargetTexture = t.createTestTexture({\n    width: size * 2,\n    height: size * 2,\n    mipLevelCount: 2\n  });\n\n  {\n    const resolveTargetTextureView = resolveTargetTexture.createView({\n      baseMipLevel: 0,\n      mipLevelCount: 1\n    });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTextureView;\n\n    const descriptor = {\n      colorAttachments: [colorAttachment]\n    };\n\n    t.tryRenderPass(false, descriptor);\n  }\n  {\n    const resolveTargetTextureView = resolveTargetTexture.createView({ baseMipLevel: 1 });\n\n    const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n    colorAttachment.resolveTarget = resolveTargetTextureView;\n\n    const descriptor = {\n      colorAttachments: [colorAttachment]\n    };\n\n    t.tryRenderPass(true, descriptor);\n  }\n});\n\ng.test('depth_stencil_attachment,sample_counts_mismatch').\ndesc(\n  `\n  Test that the depth stencil attachment that has different number of samples with the color\n  attachment is invalid.\n  `\n).\nfn((t) => {\n  const multisampledDepthStencilTexture = t.createTestTexture({\n    sampleCount: 4,\n    format: 'depth24plus-stencil8'\n  });\n\n  {\n    // It is not allowed to use a depth stencil attachment whose sample count is different from\n    // the one of the color attachment.\n    const depthStencilTexture = t.createTestTexture({\n      sampleCount: 1,\n      format: 'depth24plus-stencil8'\n    });\n    const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n      depthStencilAttachment: t.getDepthStencilAttachment(depthStencilTexture)\n    };\n\n    t.tryRenderPass(false, descriptor);\n  }\n  {\n    const colorTexture = t.createTestTexture({ sampleCount: 1 });\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(colorTexture)],\n      depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture)\n    };\n\n    t.tryRenderPass(false, descriptor);\n  }\n  {\n    // It is allowed to use a multisampled depth stencil attachment whose sample count is equal to\n    // the one of the color attachment.\n    const multisampledColorTexture = t.createTestTexture({ sampleCount: 4 });\n    const descriptor = {\n      colorAttachments: [t.getColorAttachment(multisampledColorTexture)],\n      depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture)\n    };\n\n    t.tryRenderPass(true, descriptor);\n  }\n  {\n    // It is allowed to use a multisampled depth stencil attachment with no color attachment.\n    const descriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: t.getDepthStencilAttachment(multisampledDepthStencilTexture)\n    };\n\n    t.tryRenderPass(true, descriptor);\n  }\n});\n\ng.test('depth_stencil_attachment,loadOp_storeOp_match_depthReadOnly_stencilReadOnly').\ndesc(\n  `\n  Test GPURenderPassDepthStencilAttachment Usage:\n    - if the format has a depth aspect:\n      - if depthReadOnly is true\n        - depthLoadOp and depthStoreOp must not be provided\n      - else:\n        - depthLoadOp and depthStoreOp must be provided\n    - if the format has a stencil aspect:\n      - if stencilReadOnly is true\n        - stencilLoadOp and stencilStoreOp must not be provided\n      - else:\n        - stencilLoadOp and stencilStoreOp must be provided\n  `\n).\nparams((u) =>\nu.\ncombine('format', kDepthStencilFormats).\nbeginSubcases() // Note: It's easier to debug if you comment this line out as you can then run an individual case.\n.combine('depthReadOnly', [undefined, true, false]).\ncombine('depthLoadOp', [undefined, 'clear', 'load']).\ncombine('depthStoreOp', [undefined, 'discard', 'store']).\ncombine('stencilReadOnly', [undefined, true, false]).\ncombine('stencilLoadOp', [undefined, 'clear', 'load']).\ncombine('stencilStoreOp', [undefined, 'discard', 'store'])\n).\nbeforeAllSubcases((t) => {\n  const info = kTextureFormatInfo[t.params.format];\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const {\n    format,\n    depthReadOnly,\n    depthLoadOp,\n    depthStoreOp,\n    stencilReadOnly,\n    stencilLoadOp,\n    stencilStoreOp\n  } = t.params;\n\n  const depthAttachment = t.createTextureTracked({\n    format,\n    size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n    usage: GPUTextureUsage.RENDER_ATTACHMENT\n  });\n  const depthAttachmentView = depthAttachment.createView();\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n\n  // If depthLoadOp is \"clear\", depthClearValue must be provided and must be between 0.0 and 1.0,\n  // and it will be ignored if depthLoadOp is not \"clear\".\n  const depthClearValue = depthLoadOp === 'clear' ? 0 : undefined;\n  const renderPassDescriptor = {\n    colorAttachments: [],\n    depthStencilAttachment: {\n      view: depthAttachmentView,\n      depthLoadOp,\n      depthStoreOp,\n      depthReadOnly,\n      stencilLoadOp,\n      stencilStoreOp,\n      stencilReadOnly,\n      depthClearValue\n    }\n  };\n  const pass = encoder.beginRenderPass(renderPassDescriptor);\n  pass.end();\n\n  const info = kTextureFormatInfo[format];\n  const hasDepthSettings = !!depthLoadOp && !!depthStoreOp && !depthReadOnly;\n  const hasStencilSettings = !!stencilLoadOp && !!stencilStoreOp && !stencilReadOnly;\n  const hasDepth = info.depth;\n  const hasStencil = info.stencil;\n\n  const goodAspectSettingsPresent =\n  (hasDepthSettings ? hasDepth : true) && (hasStencilSettings ? hasStencil : true);\n\n  const hasBothDepthOps = !!depthLoadOp && !!depthStoreOp;\n  const hasBothStencilOps = !!stencilLoadOp && !!stencilStoreOp;\n  const hasNeitherDepthOps = !depthLoadOp && !depthStoreOp;\n  const hasNeitherStencilOps = !stencilLoadOp && !stencilStoreOp;\n\n  const goodDepthCombo = hasDepth && !depthReadOnly ? hasBothDepthOps : hasNeitherDepthOps;\n  const goodStencilCombo =\n  hasStencil && !stencilReadOnly ? hasBothStencilOps : hasNeitherStencilOps;\n\n  const shouldError = !goodAspectSettingsPresent || !goodDepthCombo || !goodStencilCombo;\n\n  t.expectValidationError(() => {\n    encoder.finish();\n  }, shouldError);\n});\n\ng.test('depth_stencil_attachment,depth_clear_value').\ndesc(\n  `\n  Test that depthClearValue is invalid if the value is out of the range(0.0 and 1.0) only when\n  depthLoadOp is 'clear'.\n  `\n).\nparams((u) =>\nu.\ncombine('depthLoadOp', ['load', 'clear', undefined]).\ncombine('depthClearValue', [undefined, -1.0, 0.0, 0.5, 1.0, 1.5])\n).\nfn((t) => {\n  const { depthLoadOp, depthClearValue } = t.params;\n\n  const depthStencilTexture = t.createTestTexture({\n    format: depthLoadOp === undefined ? 'stencil8' : 'depth24plus-stencil8'\n  });\n  const depthStencilAttachment = t.getDepthStencilAttachment(depthStencilTexture);\n  depthStencilAttachment.depthClearValue = depthClearValue;\n  depthStencilAttachment.depthLoadOp = depthLoadOp;\n  if (depthLoadOp === undefined) {\n    depthStencilAttachment.depthStoreOp = undefined;\n  }\n\n  const descriptor = {\n    colorAttachments: [t.getColorAttachment(t.createTestTexture())],\n    depthStencilAttachment\n  };\n\n  // We can not check for out of range because NaN is not out of range.\n  // So (v < 0.0 || v > 1.0) would return false when depthClearValue is undefined (NaN)\n  const isDepthValueInRange = depthClearValue >= 0.0 && depthClearValue <= 1.0;\n  const isInvalid = depthLoadOp === 'clear' && !isDepthValueInRange;\n\n  t.tryRenderPass(!isInvalid, descriptor);\n});\n\ng.test('resolveTarget,format_supports_resolve').\ndesc(\n  `\n  For all formats that support 'multisample', test that they can be used as a resolveTarget\n  if and only if they support 'resolve'.\n  `\n).\nparams((u) =>\nu.\ncombine('format', kRenderableColorTextureFormats).\nfilter((t) => kTextureFormatInfo[t.format].multisample)\n).\nbeforeAllSubcases((t) => {\n  t.skipIfTextureFormatNotSupported(t.params.format);\n}).\nfn((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n\n  const multisampledColorTexture = t.createTestTexture({ format, sampleCount: 4 });\n  const resolveTarget = t.createTestTexture({ format });\n\n  const colorAttachment = t.getColorAttachment(multisampledColorTexture);\n  colorAttachment.resolveTarget = resolveTarget.createView();\n\n  t.tryRenderPass(!!info.colorRender?.resolve, {\n    colorAttachments: [colorAttachment]\n  });\n});\n\ng.test('timestampWrites,query_set_type').\ndesc(\n  `\n  Test that all entries of the timestampWrites must have type 'timestamp'. If all query types are\n  not 'timestamp', a validation error should be generated.\n  `\n).\nparams((u) =>\nu //\n.combine('queryType', kQueryTypes)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase(['timestamp-query']);\n}).\nfn((t) => {\n  const { queryType } = t.params;\n\n  const timestampWrites = {\n    querySet: t.createQuerySetTracked({ type: queryType, count: 2 }),\n    beginningOfPassWriteIndex: 0,\n    endOfPassWriteIndex: 1\n  };\n\n  const isValid = queryType === 'timestamp';\n\n  const colorTexture = t.createTestTexture();\n  const descriptor = {\n    colorAttachments: [t.getColorAttachment(colorTexture)],\n    timestampWrites\n  };\n\n  t.tryRenderPass(isValid, descriptor);\n});\n\ng.test('timestampWrite,query_index').\ndesc(\n  `Test that querySet.count should be greater than timestampWrite.queryIndex, and that the\n         query indexes are unique.`\n).\nparamsSubcasesOnly((u) =>\nu //\n.combine('beginningOfPassWriteIndex', [undefined, 0, 1, 2, 3]).\ncombine('endOfPassWriteIndex', [undefined, 0, 1, 2, 3])\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase(['timestamp-query']);\n}).\nfn((t) => {\n  const { beginningOfPassWriteIndex, endOfPassWriteIndex } = t.params;\n\n  const querySetCount = 2;\n\n  const timestampWrites = {\n    querySet: t.createQuerySetTracked({ type: 'timestamp', count: querySetCount }),\n    beginningOfPassWriteIndex,\n    endOfPassWriteIndex\n  };\n\n  const isValid =\n  beginningOfPassWriteIndex !== endOfPassWriteIndex && (\n  beginningOfPassWriteIndex === undefined || beginningOfPassWriteIndex < querySetCount) && (\n  endOfPassWriteIndex === undefined || endOfPassWriteIndex < querySetCount);\n\n  const colorTexture = t.createTestTexture();\n  const descriptor = {\n    colorAttachments: [t.getColorAttachment(colorTexture)],\n    timestampWrites\n  };\n\n  t.tryRenderPass(isValid, descriptor);\n});\n\ng.test('occlusionQuerySet,query_set_type').\ndesc(`Test that occlusionQuerySet must have type 'occlusion'.`).\nparams((u) => u.combine('queryType', kQueryTypes)).\nbeforeAllSubcases((t) => {\n  if (t.params.queryType === 'timestamp') {\n    t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  }\n}).\nfn((t) => {\n  const { queryType } = t.params;\n\n  const querySet = t.createQuerySetTracked({\n    type: queryType,\n    count: 1\n  });\n\n  const colorTexture = t.createTestTexture();\n  const descriptor = {\n    colorAttachments: [t.getColorAttachment(colorTexture)],\n    occlusionQuerySet: querySet\n  };\n\n  const isValid = queryType === 'occlusion';\n  t.tryRenderPass(isValid, descriptor);\n});"],"mappings":"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","ignoreList":[]}