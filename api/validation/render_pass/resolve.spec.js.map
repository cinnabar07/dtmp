{"version":3,"file":"resolve.spec.js","names":["description","makeTestGroup","GPUConst","ValidationTest","kNumColorAttachments","g","test","desc","paramsSimple","_valid","colorAttachmentSamples","resolveTargetSamples","resolveTargetUsage","TextureUsage","COPY_SRC","resolveTargetViewBaseMipLevel","resolveTargetHeight","resolveTargetWidth","resolveTargetInvalid","resolveTargetViewMipCount","resolveTargetViewBaseArrayLayer","resolveTargetViewArrayLayerCount","otherAttachmentFormat","colorAttachmentFormat","resolveTargetFormat","colorAttachmentHeight","colorAttachmentWidth","fn","t","GPUTextureUsage","RENDER_ATTACHMENT","params","resolveSlot","renderPassColorAttachmentDescriptors","colorAttachmentSlot","resolveSourceColorAttachment","createTextureTracked","format","size","width","height","depthOrArrayLayers","sampleCount","usage","resolveTarget","mipLevelCount","push","view","createView","loadOp","storeOp","getErrorTextureView","dimension","arrayLayerCount","baseMipLevel","baseArrayLayer","colorAttachment","encoder","globalThis","_TRAMPOLINE_","device","createCommandEncoder","pass","beginRenderPass","colorAttachments","end","expectValidationError","finish"],"sources":["../../../../../src/webgpu/api/validation/render_pass/resolve.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nValidation tests for render pass resolve.\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUConst } from '../../../constants.js';\nimport { ValidationTest } from '../validation_test.js';\n\nconst kNumColorAttachments = 4;\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('resolve_attachment').\ndesc(\n  `\nTest various validation behaviors when a resolveTarget is provided.\n\n- base case (valid).\n- resolve source is not multisampled.\n- resolve target is not single sampled.\n- resolve target missing RENDER_ATTACHMENT usage.\n- resolve target must have exactly one subresource:\n    - base mip level {0, >0}, mip level count {1, >1}.\n    - base array layer {0, >0}, array layer count {1, >1}.\n- resolve target GPUTextureView is invalid\n- resolve source and target have different formats.\n    - rgba8unorm -> {bgra8unorm, rgba8unorm-srgb}\n    - {bgra8unorm, rgba8unorm-srgb} -> rgba8unorm\n    - test with other color attachments having a different format\n- resolve source and target have different sizes.\n`\n).\nparamsSimple([\n// control case should be valid\n{ _valid: true },\n// a single sampled resolve source should cause a validation error.\n{ colorAttachmentSamples: 1, _valid: false },\n// a multisampled resolve target should cause a validation error.\n{ resolveTargetSamples: 4, _valid: false },\n// resolveTargetUsage without RENDER_ATTACHMENT usage should cause a validation error.\n{ resolveTargetUsage: GPUConst.TextureUsage.COPY_SRC, _valid: false },\n// non-zero resolve target base mip level should be valid.\n{\n  resolveTargetViewBaseMipLevel: 1,\n  resolveTargetHeight: 4,\n  resolveTargetWidth: 4,\n  _valid: true\n},\n// a validation error should be created when resolveTarget is invalid.\n{ resolveTargetInvalid: true, _valid: false },\n// a validation error should be created when mip count > 1\n{ resolveTargetViewMipCount: 2, _valid: false },\n{\n  resolveTargetViewBaseMipLevel: 1,\n  resolveTargetViewMipCount: 2,\n  resolveTargetHeight: 4,\n  resolveTargetWidth: 4,\n  _valid: false\n},\n// non-zero resolve target base array layer should be valid.\n{ resolveTargetViewBaseArrayLayer: 1, _valid: true },\n// a validation error should be created when array layer count > 1\n{ resolveTargetViewArrayLayerCount: 2, _valid: false },\n{ resolveTargetViewBaseArrayLayer: 1, resolveTargetViewArrayLayerCount: 2, _valid: false },\n// other color attachments resolving with a different format should be valid.\n{ otherAttachmentFormat: 'bgra8unorm', _valid: true },\n// mismatched colorAttachment and resolveTarget formats should cause a validation error.\n{ colorAttachmentFormat: 'bgra8unorm', _valid: false },\n{ colorAttachmentFormat: 'rgba8unorm-srgb', _valid: false },\n{ resolveTargetFormat: 'bgra8unorm', _valid: false },\n{ resolveTargetFormat: 'rgba8unorm-srgb', _valid: false },\n// mismatched colorAttachment and resolveTarget sizes should cause a validation error.\n{ colorAttachmentHeight: 4, _valid: false },\n{ colorAttachmentWidth: 4, _valid: false },\n{ resolveTargetHeight: 4, _valid: false },\n{ resolveTargetWidth: 4, _valid: false }]\n).\nfn((t) => {\n  const {\n    colorAttachmentFormat = 'rgba8unorm',\n    resolveTargetFormat = 'rgba8unorm',\n    otherAttachmentFormat = 'rgba8unorm',\n    colorAttachmentSamples = 4,\n    resolveTargetSamples = 1,\n    resolveTargetUsage = GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    resolveTargetInvalid = false,\n    resolveTargetViewMipCount = 1,\n    resolveTargetViewBaseMipLevel = 0,\n    resolveTargetViewArrayLayerCount = 1,\n    resolveTargetViewBaseArrayLayer = 0,\n    colorAttachmentHeight = 2,\n    colorAttachmentWidth = 2,\n    resolveTargetHeight = 2,\n    resolveTargetWidth = 2,\n    _valid\n  } = t.params;\n\n  // Run the test in a nested loop such that the configured color attachment with resolve target\n  // is tested while occupying each individual colorAttachment slot.\n  for (let resolveSlot = 0; resolveSlot < kNumColorAttachments; resolveSlot++) {\n    const renderPassColorAttachmentDescriptors = [];\n    for (\n    let colorAttachmentSlot = 0;\n    colorAttachmentSlot < kNumColorAttachments;\n    colorAttachmentSlot++)\n    {\n      // resolveSlot === colorAttachmentSlot denotes the color attachment slot that contains the\n      // color attachment with resolve target.\n      if (resolveSlot === colorAttachmentSlot) {\n        // Create the color attachment with resolve target with the configurable parameters.\n        const resolveSourceColorAttachment = t.createTextureTracked({\n          format: colorAttachmentFormat,\n          size: {\n            width: colorAttachmentWidth,\n            height: colorAttachmentHeight,\n            depthOrArrayLayers: 1\n          },\n          sampleCount: colorAttachmentSamples,\n          usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n        });\n\n        const resolveTarget = t.createTextureTracked({\n          format: resolveTargetFormat,\n          size: {\n            width: resolveTargetWidth,\n            height: resolveTargetHeight,\n            depthOrArrayLayers:\n            resolveTargetViewBaseArrayLayer + resolveTargetViewArrayLayerCount\n          },\n          sampleCount: resolveTargetSamples,\n          mipLevelCount: resolveTargetViewBaseMipLevel + resolveTargetViewMipCount,\n          usage: resolveTargetUsage\n        });\n\n        renderPassColorAttachmentDescriptors.push({\n          view: resolveSourceColorAttachment.createView(),\n          loadOp: 'load',\n          storeOp: 'discard',\n          resolveTarget: resolveTargetInvalid ?\n          t.getErrorTextureView() :\n          resolveTarget.createView({\n            dimension: resolveTargetViewArrayLayerCount === 1 ? '2d' : '2d-array',\n            mipLevelCount: resolveTargetViewMipCount,\n            arrayLayerCount: resolveTargetViewArrayLayerCount,\n            baseMipLevel: resolveTargetViewBaseMipLevel,\n            baseArrayLayer: resolveTargetViewBaseArrayLayer\n          })\n        });\n      } else {\n        // Create a basic texture to fill other color attachment slots. This texture's dimensions\n        // and sample count must match the resolve source color attachment to be valid.\n        const colorAttachment = t.createTextureTracked({\n          format: otherAttachmentFormat,\n          size: {\n            width: colorAttachmentWidth,\n            height: colorAttachmentHeight,\n            depthOrArrayLayers: 1\n          },\n          sampleCount: colorAttachmentSamples,\n          usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n        });\n\n        const resolveTarget = t.createTextureTracked({\n          format: otherAttachmentFormat,\n          size: {\n            width: colorAttachmentWidth,\n            height: colorAttachmentHeight,\n            depthOrArrayLayers: 1\n          },\n          sampleCount: 1,\n          usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n        });\n\n        renderPassColorAttachmentDescriptors.push({\n          view: colorAttachment.createView(),\n          loadOp: 'load',\n          storeOp: 'discard',\n          resolveTarget: resolveTarget.createView()\n        });\n      }\n    }\n    const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n    const pass = encoder.beginRenderPass({\n      colorAttachments: renderPassColorAttachmentDescriptors\n    });\n    pass.end();\n\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !_valid);\n  }\n});"],"mappings":"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","ignoreList":[]}