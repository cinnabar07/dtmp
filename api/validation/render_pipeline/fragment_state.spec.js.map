{"version":3,"file":"fragment_state.spec.js","names":["description","makeTestGroup","assert","range","IsDualSourceBlendingFactor","kBlendFactors","kBlendOperations","kMaxColorAttachmentsToTest","GPUConst","kAllTextureFormats","kRenderableColorTextureFormats","kTextureFormatInfo","computeBytesPerSampleFromFormats","kColorTextureFormats","getFragmentShaderCodeWithOutput","getPlainTypeInfo","kDefaultFragmentShaderCode","kDefaultVertexShaderCode","kTexelRepresentationInfo","CreateRenderPipelineValidationTest","g","values","test","desc","params","u","combine","fn","t","isAsync","goodDescriptor","getDescriptor","targets","format","doCreateRenderPipelineTest","badDescriptor","filter","color","beginSubcases","beforeAllSubcases","info","skipIfTextureFormatNotSupported","selectDeviceOrSkipTestCase","feature","fragOutType","fragmentShaderCode","plainType","componentCount","success","vertex","module","device","createShaderModule","code","entryPoint","fragment","layout","descriptor","colorRender","mult","add","targetsLengthVariant","targetsLength","makeLimitVariant","_i","writeMask","depthStencil","depthWriteEnabled","depthCompare","limits","maxColorAttachments","i","attachmentCount","skipIf","shouldError","undefined","byteCost","maxColorAttachmentBytesPerSample","combineWithParams","formats","length","map","f","hasBlend","blend","alpha","supportsBlend","srcFactor","dstFactor","component","operation","defaultBlendComponent","blendComponentToTest","useDualSourceBlending","_success","expand","p","shaderOutput","selectDeviceForTextureFormatOrSkipTestCase","scalar","count","type","componentOrder","colorSrcFactor","colorDstFactor","alphaSrcFactor","alphaDstFactor","requiredFeatures","push","sampleType","colorBlendReadsSrcAlpha","includes","meetsExtraBlendingRequirement","kDualSourceBlendingFactors","blendFactor","colorTargetsCount","maskOutNonZeroIndexColorTargets","testBlendComponent","colorTargetStates","Array","ColorWrite","ALL","useBlendSrc1"],"sources":["../../../../../src/webgpu/api/validation/render_pipeline/fragment_state.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nThis test dedicatedly tests validation of GPUFragmentState of createRenderPipeline.\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, range } from '../../../../common/util/util.js';\nimport {\n  IsDualSourceBlendingFactor,\n  kBlendFactors,\n  kBlendOperations,\n  kMaxColorAttachmentsToTest } from\n'../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport {\n  kAllTextureFormats,\n  kRenderableColorTextureFormats,\n  kTextureFormatInfo,\n  computeBytesPerSampleFromFormats,\n  kColorTextureFormats } from\n'../../../format_info.js';\nimport {\n  getFragmentShaderCodeWithOutput,\n  getPlainTypeInfo,\n  kDefaultFragmentShaderCode,\n  kDefaultVertexShaderCode } from\n'../../../util/shader.js';\nimport { kTexelRepresentationInfo } from '../../../util/texture/texel_data.js';\n\nimport { CreateRenderPipelineValidationTest } from './common.js';\n\nexport const g = makeTestGroup(CreateRenderPipelineValidationTest);\n\nconst values = [0, 1, 0, 1];\n\ng.test('color_target_exists').\ndesc(`Tests creating a complete render pipeline requires at least one color target state.`).\nparams((u) => u.combine('isAsync', [false, true])).\nfn((t) => {\n  const { isAsync } = t.params;\n\n  const goodDescriptor = t.getDescriptor({\n    targets: [{ format: 'rgba8unorm' }]\n  });\n\n  // Control case\n  t.doCreateRenderPipelineTest(isAsync, true, goodDescriptor);\n\n  // Fail because lack of color states\n  const badDescriptor = t.getDescriptor({\n    targets: []\n  });\n\n  t.doCreateRenderPipelineTest(isAsync, false, badDescriptor);\n});\n\ng.test('targets_format_is_color_format').\ndesc(\n  `Tests that color target state format must be a color format, regardless of how the\n    fragment shader writes to it.`\n).\nparams((u) =>\nu\n// Test all non-color texture formats, plus 'rgba8unorm' as a control case.\n.combine('format', kAllTextureFormats).\nfilter(({ format }) => {\n  return format === 'rgba8unorm' || !kTextureFormatInfo[format].color;\n}).\ncombine('isAsync', [false, true]).\nbeginSubcases().\ncombine('fragOutType', ['f32', 'u32', 'i32'])\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.skipIfTextureFormatNotSupported(t.params.format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { isAsync, format, fragOutType } = t.params;\n\n  const fragmentShaderCode = getFragmentShaderCodeWithOutput([\n  { values, plainType: fragOutType, componentCount: 4 }]\n  );\n\n  const success = format === 'rgba8unorm' && fragOutType === 'f32';\n  t.doCreateRenderPipelineTest(isAsync, success, {\n    vertex: {\n      module: t.device.createShaderModule({ code: kDefaultVertexShaderCode }),\n      entryPoint: 'main'\n    },\n    fragment: {\n      module: t.device.createShaderModule({ code: fragmentShaderCode }),\n      entryPoint: 'main',\n      targets: [{ format }]\n    },\n    layout: 'auto'\n  });\n});\n\ng.test('targets_format_renderable').\ndesc(\n  `Tests that color target state format must have RENDER_ATTACHMENT capability\n    (tests only color formats).`\n).\nparams((u) =>\nu //\n.combine('isAsync', [false, true]).\ncombine('format', kColorTextureFormats)\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.skipIfTextureFormatNotSupported(t.params.format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { isAsync, format } = t.params;\n  const info = kTextureFormatInfo[format];\n\n  const descriptor = t.getDescriptor({ targets: [{ format }] });\n\n  t.doCreateRenderPipelineTest(isAsync, !!info.colorRender, descriptor);\n});\n\ng.test('limits,maxColorAttachments').\ndesc(\n  `Tests that color state targets length must not be larger than device.limits.maxColorAttachments.`\n).\nparams((u) =>\nu.combine('isAsync', [false, true]).combine('targetsLengthVariant', [\n{ mult: 1, add: 0 },\n{ mult: 1, add: 1 }]\n)\n).\nfn((t) => {\n  const { isAsync, targetsLengthVariant } = t.params;\n  const targetsLength = t.makeLimitVariant('maxColorAttachments', targetsLengthVariant);\n\n  const descriptor = t.getDescriptor({\n    targets: range(targetsLength, (_i) => {\n      return { format: 'rg8unorm', writeMask: 0 };\n    }),\n    fragmentShaderCode: kDefaultFragmentShaderCode,\n    // add a depth stencil so that we can set writeMask to 0 for all color attachments\n    depthStencil: {\n      format: 'depth24plus',\n      depthWriteEnabled: true,\n      depthCompare: 'always'\n    }\n  });\n\n  t.doCreateRenderPipelineTest(\n    isAsync,\n    targetsLength <= t.device.limits.maxColorAttachments,\n    descriptor\n  );\n});\n\ng.test('limits,maxColorAttachmentBytesPerSample,aligned').\ndesc(\n  `\n  Tests that the total color attachment bytes per sample must not be larger than\n  maxColorAttachmentBytesPerSample when using the same format for multiple attachments.\n  `\n).\nparams((u) =>\nu.\ncombine('format', kRenderableColorTextureFormats).\nbeginSubcases().\ncombine(\n  'attachmentCount',\n  range(kMaxColorAttachmentsToTest, (i) => i + 1)\n).\ncombine('isAsync', [false, true])\n).\nbeforeAllSubcases((t) => {\n  t.skipIfTextureFormatNotSupported(t.params.format);\n}).\nfn((t) => {\n  const { format, attachmentCount, isAsync } = t.params;\n  const info = kTextureFormatInfo[format];\n\n  t.skipIf(\n    attachmentCount > t.device.limits.maxColorAttachments,\n    `attachmentCount: ${attachmentCount} > maxColorAttachments: ${t.device.limits.maxColorAttachments}`\n  );\n\n  const descriptor = t.getDescriptor({\n    targets: range(attachmentCount, () => {\n      return { format, writeMask: 0 };\n    })\n  });\n  const shouldError =\n  info.colorRender === undefined ||\n  info.colorRender.byteCost * attachmentCount >\n  t.device.limits.maxColorAttachmentBytesPerSample;\n\n  t.doCreateRenderPipelineTest(isAsync, !shouldError, descriptor);\n});\n\ng.test('limits,maxColorAttachmentBytesPerSample,unaligned').\ndesc(\n  `\n  Tests that the total color attachment bytes per sample must not be larger than\n  maxColorAttachmentBytesPerSample when using various sets of (potentially) unaligned formats.\n  `\n).\nparams((u) =>\nu.\ncombineWithParams([\n// Alignment causes the first 1 byte R8Unorm to become 4 bytes. So even though\n// 1+4+8+16+1 < 32, the 4 byte alignment requirement of R32Float makes the first R8Unorm\n// become 4 and 4+4+8+16+1 > 32. Re-ordering this so the R8Unorm's are at the end, however\n// is allowed: 4+8+16+1+1 < 32.\n{\n  formats: ['r8unorm', 'r32float', 'rgba8unorm', 'rgba32float', 'r8unorm']\n},\n{\n  formats: ['r32float', 'rgba8unorm', 'rgba32float', 'r8unorm', 'r8unorm']\n}]\n).\nbeginSubcases().\ncombine('isAsync', [false, true])\n).\nfn((t) => {\n  const { formats, isAsync } = t.params;\n\n  t.skipIf(\n    formats.length > t.device.limits.maxColorAttachments,\n    `numColorAttachments: ${formats.length} > maxColorAttachments: ${t.device.limits.maxColorAttachments}`\n  );\n\n  const success =\n  computeBytesPerSampleFromFormats(formats) <= t.device.limits.maxColorAttachmentBytesPerSample;\n\n  const descriptor = t.getDescriptor({\n    targets: formats.map((f) => {\n      return { format: f, writeMask: 0 };\n    })\n  });\n\n  t.doCreateRenderPipelineTest(isAsync, success, descriptor);\n});\n\ng.test('targets_format_filterable').\ndesc(\n  `\n  Tests that color target state format must be filterable if blend is not undefined.\n  `\n).\nparams((u) =>\nu.\ncombine('isAsync', [false, true]).\ncombine('format', kRenderableColorTextureFormats).\nbeginSubcases().\ncombine('hasBlend', [false, true])\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.skipIfTextureFormatNotSupported(format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { isAsync, format, hasBlend } = t.params;\n  const info = kTextureFormatInfo[format];\n\n  const descriptor = t.getDescriptor({\n    targets: [\n    {\n      format,\n      blend: hasBlend ? { color: {}, alpha: {} } : undefined\n    }]\n\n  });\n\n  const supportsBlend = info.colorRender?.blend;\n  assert(supportsBlend !== undefined);\n  t.doCreateRenderPipelineTest(isAsync, !hasBlend || supportsBlend, descriptor);\n});\n\ng.test('targets_blend').\ndesc(\n  `\n  For the blend components on either GPUBlendState.color or GPUBlendState.alpha:\n  - Tests if the combination of 'srcFactor', 'dstFactor' and 'operation' is valid (if the blend\n    operation is \"min\" or \"max\", srcFactor and dstFactor must be \"one\").\n  `\n).\nparams((u) =>\nu.\ncombine('isAsync', [false, true]).\ncombine('component', ['color', 'alpha']).\ncombine('srcFactor', kBlendFactors).\ncombine('dstFactor', kBlendFactors).\nbeginSubcases().\ncombine('operation', kBlendOperations)\n).\nbeforeAllSubcases((t) => {\n  const { srcFactor, dstFactor } = t.params;\n  if (IsDualSourceBlendingFactor(srcFactor) || IsDualSourceBlendingFactor(dstFactor)) {\n    t.selectDeviceOrSkipTestCase('dual-source-blending');\n  }\n}).\nfn((t) => {\n  const { isAsync, component, srcFactor, dstFactor, operation } = t.params;\n\n  const defaultBlendComponent = {\n    srcFactor: 'src-alpha',\n    dstFactor: 'dst-alpha',\n    operation: 'add'\n  };\n  const blendComponentToTest = {\n    srcFactor,\n    dstFactor,\n    operation\n  };\n  const format = 'rgba8unorm';\n  const useDualSourceBlending =\n  IsDualSourceBlendingFactor(srcFactor) || IsDualSourceBlendingFactor(dstFactor);\n  const fragmentShaderCode = getFragmentShaderCodeWithOutput(\n    [{ values, plainType: 'f32', componentCount: 4 }],\n    null,\n    useDualSourceBlending\n  );\n\n  const descriptor = t.getDescriptor({\n    targets: [\n    {\n      format,\n      blend: {\n        color: component === 'color' ? blendComponentToTest : defaultBlendComponent,\n        alpha: component === 'alpha' ? blendComponentToTest : defaultBlendComponent\n      }\n    }],\n\n    fragmentShaderCode\n  });\n\n  if (operation === 'min' || operation === 'max') {\n    const _success = srcFactor === 'one' && dstFactor === 'one';\n    t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n  } else {\n    t.doCreateRenderPipelineTest(isAsync, true, descriptor);\n  }\n});\n\ng.test('targets_write_mask').\ndesc(`Tests that color target state write mask must be < 16.`).\nparams((u) => u.combine('isAsync', [false, true]).combine('writeMask', [0, 0xf, 0x10, 0x80000001])).\nfn((t) => {\n  const { isAsync, writeMask } = t.params;\n\n  const descriptor = t.getDescriptor({\n    targets: [\n    {\n      format: 'rgba8unorm',\n      writeMask\n    }]\n\n  });\n\n  t.doCreateRenderPipelineTest(isAsync, writeMask < 16, descriptor);\n});\n\ng.test('pipeline_output_targets').\ndesc(\n  `Pipeline fragment output types must be compatible with target color state format\n  - The scalar type (f32, i32, or u32) must match the sample type of the format.\n  - The componentCount of the fragment output (e.g. f32, vec2, vec3, vec4) must not have fewer\n    channels than that of the color attachment texture formats. Extra components are allowed and are discarded.\n\n  Otherwise, color state write mask must be 0.`\n).\nparams((u) =>\nu.\ncombine('isAsync', [false, true]).\ncombine('format', [undefined, ...kRenderableColorTextureFormats]).\nbeginSubcases().\ncombine('shaderOutput', [\nundefined,\n...u.combine('scalar', ['f32', 'u32', 'i32']).combine('count', [1, 2, 3, 4])]\n)\n// We only care about testing writeMask if there is an attachment but no shader output.\n.expand('writeMask', (p) =>\np.format !== undefined && p.shaderOutput !== undefined ? [0, 0x1, 0x2, 0x4, 0x8] : [0xf]\n)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n}).\nfn((t) => {\n  const { isAsync, format, writeMask, shaderOutput } = t.params;\n\n  const descriptor = t.getDescriptor({\n    targets: format ? [{ format, writeMask }] : [],\n    // To have a dummy depthStencil attachment to avoid having no attachment at all which is invalid\n    depthStencil: { format: 'depth24plus', depthWriteEnabled: false, depthCompare: 'always' },\n    fragmentShaderCode: getFragmentShaderCodeWithOutput(\n      shaderOutput ?\n      [{ values, plainType: shaderOutput.scalar, componentCount: shaderOutput.count }] :\n      []\n    )\n  });\n\n  let success = true;\n  if (format) {\n    // There is a color target\n    if (shaderOutput) {\n      // The shader outputs to the color target\n      const info = kTextureFormatInfo[format];\n      success =\n      shaderOutput.scalar === getPlainTypeInfo(info.color.type) &&\n      shaderOutput.count >= kTexelRepresentationInfo[format].componentOrder.length;\n    } else {\n      // The shader does not output to the color target\n      success = writeMask === 0;\n    }\n  }\n\n  t.doCreateRenderPipelineTest(isAsync, success, descriptor);\n});\n\ng.test('pipeline_output_targets,blend').\ndesc(\n  `On top of requirements from pipeline_output_targets, when blending is enabled and alpha channel\n    is read indicated by any color blend factor, an extra requirement is added:\n      - fragment output must be vec4.\n  `\n).\nparams((u) =>\nu.\ncombine('isAsync', [false, true]).\ncombine('format', ['r8unorm', 'rg8unorm', 'rgba8unorm', 'bgra8unorm']).\ncombine('componentCount', [1, 2, 3, 4])\n// The default srcFactor and dstFactor are 'one' and 'zero'. Override just one at a time.\n.combineWithParams([\n...u.combine('colorSrcFactor', kBlendFactors),\n...u.combine('colorDstFactor', kBlendFactors),\n...u.combine('alphaSrcFactor', kBlendFactors),\n...u.combine('alphaDstFactor', kBlendFactors)]\n)\n).\nbeforeAllSubcases((t) => {\n  const { format, colorSrcFactor, colorDstFactor, alphaSrcFactor, alphaDstFactor } = t.params;\n\n  const info = kTextureFormatInfo[format];\n  const requiredFeatures = [info.feature];\n\n  if (\n  IsDualSourceBlendingFactor(colorSrcFactor) ||\n  IsDualSourceBlendingFactor(colorDstFactor) ||\n  IsDualSourceBlendingFactor(alphaSrcFactor) ||\n  IsDualSourceBlendingFactor(alphaDstFactor))\n  {\n    requiredFeatures.push('dual-source-blending');\n  }\n\n  t.selectDeviceOrSkipTestCase(requiredFeatures);\n}).\nfn((t) => {\n  const sampleType = 'float';\n  const {\n    isAsync,\n    format,\n    componentCount,\n    colorSrcFactor,\n    colorDstFactor,\n    alphaSrcFactor,\n    alphaDstFactor\n  } = t.params;\n  const info = kTextureFormatInfo[format];\n\n  const useDualSourceBlending =\n  IsDualSourceBlendingFactor(colorSrcFactor) ||\n  IsDualSourceBlendingFactor(colorDstFactor) ||\n  IsDualSourceBlendingFactor(alphaSrcFactor) ||\n  IsDualSourceBlendingFactor(alphaDstFactor);\n\n  const descriptor = t.getDescriptor({\n    targets: [\n    {\n      format,\n      blend: {\n        color: { srcFactor: colorSrcFactor, dstFactor: colorDstFactor },\n        alpha: { srcFactor: alphaSrcFactor, dstFactor: alphaDstFactor }\n      }\n    }],\n\n    fragmentShaderCode: getFragmentShaderCodeWithOutput(\n      [{ values, plainType: getPlainTypeInfo(sampleType), componentCount }],\n      null,\n      useDualSourceBlending\n    )\n  });\n\n  const colorBlendReadsSrcAlpha =\n  colorSrcFactor?.includes('src-alpha') ||\n  colorDstFactor?.includes('src-alpha') ||\n  colorSrcFactor?.includes('src1-alpha') ||\n  colorDstFactor?.includes('src1-alpha');\n  const meetsExtraBlendingRequirement = !colorBlendReadsSrcAlpha || componentCount === 4;\n  const _success =\n  info.color.type === sampleType &&\n  componentCount >= kTexelRepresentationInfo[format].componentOrder.length &&\n  meetsExtraBlendingRequirement;\n  t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n});\n\nconst kDualSourceBlendingFactors = [\n'src1',\n'one-minus-src1',\n'src1-alpha',\n'one-minus-src1-alpha'];\n\n\ng.test('dual_source_blending,color_target_count').\ndesc(\n  `Test that when the blend factor of color attachment 0 uses src1 (the second input of the\n   corresponding blending unit), there must be exactly one color target.\n`\n).\nbeforeAllSubcases((t) => t.selectDeviceOrSkipTestCase('dual-source-blending')).\nparams((u) =>\nu.\ncombine('blendFactor', kDualSourceBlendingFactors).\ncombine('colorTargetsCount', [1, 2]).\ncombine('maskOutNonZeroIndexColorTargets', [true, false]).\nbeginSubcases().\ncombine('component', ['color', 'alpha'])\n).\nfn((t) => {\n  const { blendFactor, colorTargetsCount, maskOutNonZeroIndexColorTargets, component } = t.params;\n\n  const defaultBlendComponent = {\n    srcFactor: 'src-alpha',\n    dstFactor: 'dst-alpha',\n    operation: 'add'\n  };\n  const testBlendComponent = {\n    srcFactor: blendFactor,\n    dstFactor: blendFactor,\n    operation: 'add'\n  };\n\n  assert(colorTargetsCount >= 1);\n  const colorTargetStates = new Array(colorTargetsCount);\n  colorTargetStates[0] = {\n    format: 'rgba8unorm',\n    blend: {\n      color: component === 'color' ? testBlendComponent : defaultBlendComponent,\n      alpha: component === 'alpha' ? testBlendComponent : defaultBlendComponent\n    }\n  };\n\n  for (let i = 1; i < colorTargetsCount; ++i) {\n    colorTargetStates[i] = {\n      format: 'rgba8unorm',\n      blend: {\n        color: defaultBlendComponent,\n        alpha: defaultBlendComponent\n      },\n      writeMask: maskOutNonZeroIndexColorTargets ? 0 : GPUConst.ColorWrite.ALL\n    };\n  }\n\n  const descriptor = t.getDescriptor({\n    targets: colorTargetStates,\n    fragmentShaderCode: getFragmentShaderCodeWithOutput(\n      [{ values, plainType: 'f32', componentCount: 4 }],\n      null,\n      true\n    )\n  });\n\n  const isAsync = false;\n  const _success = colorTargetsCount === 1;\n  t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n});\n\ng.test('dual_source_blending,use_blend_src').\ndesc(\n  `Test that when the blend factor of color attachment 0 uses src1, dual source blending must be\n    used in the fragment shader, whether the corresponding color write mask is 0 or not. In\n    contrast, when dual source blending is used in the fragment shader, we don't require blend\n    factor must use src1 (the second input of the corresponding blending unit).\n`\n).\nbeforeAllSubcases((t) => t.selectDeviceOrSkipTestCase('dual-source-blending')).\nparams((u) =>\nu.\ncombine('blendFactor', kBlendFactors).\ncombine('useBlendSrc1', [true, false]).\ncombine('writeMask', [0, GPUConst.ColorWrite.ALL]).\nbeginSubcases().\ncombine('component', ['color', 'alpha'])\n).\nfn((t) => {\n  const { blendFactor, useBlendSrc1, writeMask, component } = t.params;\n\n  const defaultBlendComponent = {\n    srcFactor: 'src-alpha',\n    dstFactor: 'dst-alpha',\n    operation: 'add'\n  };\n  const testBlendComponent = {\n    srcFactor: blendFactor,\n    dstFactor: blendFactor,\n    operation: 'add'\n  };\n\n  const descriptor = t.getDescriptor({\n    targets: [\n    {\n      format: 'rgba8unorm',\n      blend: {\n        color: component === 'color' ? testBlendComponent : defaultBlendComponent,\n        alpha: component === 'alpha' ? testBlendComponent : defaultBlendComponent\n      },\n      writeMask\n    }],\n\n    fragmentShaderCode: getFragmentShaderCodeWithOutput(\n      [{ values, plainType: 'f32', componentCount: 4 }],\n      null,\n      useBlendSrc1\n    )\n  });\n\n  const _success = !IsDualSourceBlendingFactor(blendFactor) || useBlendSrc1;\n  const isAsync = false;\n  t.doCreateRenderPipelineTest(isAsync, _success, descriptor);\n});"],"mappings":"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","ignoreList":[]}