{"version":3,"file":"texture_related.spec.js","names":["description","makeTestGroup","assert","kTextureDimensions","kTextureUsages","GPUConst","kColorTextureFormats","kSizedTextureFormats","kTextureFormatInfo","textureDimensionAndFormatCompatible","kResourceStates","align","virtualMipSize","kImageCopyTypes","ImageCopyTest","texelBlockAlignmentTestExpanderForValueToCoordinate","formatCopyableWithMethod","getACopyableAspectWithMethod","g","test","desc","params","u","combine","combineWithParams","dimension","size","fn","t","method","textureState","texture","createTextureWithState","format","usage","GPUTextureUsage","COPY_SRC","COPY_DST","success","submit","testRun","bytesPerRow","width","height","depthOrArrayLayers","dataSize","paramsSubcasesOnly","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","undefined","mismatched","sourceDevice","mismatchedDevice","device","trackForCleanup","createTexture","beginSubcases","unless","usage0","usage1","TextureUsage","RENDER_ATTACHMENT","createTextureTracked","sampleCount","TEXTURE_BINDING","p","mipLevelCount","mipLevel","filter","expand","d","info","skipIfTextureFormatNotSupported","selectDeviceOrSkipTestCase","feature","copyWidthModifier","copyHeightModifier","copyDepthModifier","blockWidth","blockHeight","depth","stencil","levelSize","copySize","aspect","rowsPerImage","coordinateToTest","valueToCoordinate","origin","x","y","z","createAlignedTexture","Math","max","ceil","color","bytes","originValue","copySizeValue","textureSizeValue","textureSize"],"sources":["../../../../../src/webgpu/api/validation/image_copy/texture_related.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `Texture related validation tests for B2T copy and T2B copy and writeTexture.`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport { kTextureDimensions, kTextureUsages } from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport {\n  kColorTextureFormats,\n  kSizedTextureFormats,\n  kTextureFormatInfo,\n  textureDimensionAndFormatCompatible } from\n'../../../format_info.js';\nimport { kResourceStates } from '../../../gpu_test.js';\nimport { align } from '../../../util/math.js';\nimport { virtualMipSize } from '../../../util/texture/base.js';\nimport { kImageCopyTypes } from '../../../util/texture/layout.js';\n\nimport {\n  ImageCopyTest,\n  texelBlockAlignmentTestExpanderForValueToCoordinate,\n  formatCopyableWithMethod,\n  getACopyableAspectWithMethod } from\n'./image_copy.js';\n\nexport const g = makeTestGroup(ImageCopyTest);\n\ng.test('valid').\ndesc(\n  `\nTest that the texture must be valid and not destroyed.\n- for all copy methods\n- for all texture states\n- for various dimensions\n`\n).\nparams((u) =>\nu //\n.combine('method', kImageCopyTypes).\ncombine('textureState', kResourceStates).\ncombineWithParams([\n{ dimension: '1d', size: [4, 1, 1] },\n{ dimension: '2d', size: [4, 4, 1] },\n{ dimension: '2d', size: [4, 4, 3] },\n{ dimension: '3d', size: [4, 4, 3] }]\n)\n).\nfn((t) => {\n  const { method, textureState, size, dimension } = t.params;\n\n  const texture = t.createTextureWithState(textureState, {\n    size,\n    dimension,\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST\n  });\n\n  const success = textureState === 'valid';\n  const submit = textureState !== 'invalid';\n\n  t.testRun(\n    { texture },\n    { bytesPerRow: 0 },\n    { width: 0, height: 0, depthOrArrayLayers: 0 },\n    { dataSize: 1, method, success, submit }\n  );\n});\n\ng.test('texture,device_mismatch').\ndesc('Tests the image copies cannot be called with a texture created from another device').\nparamsSubcasesOnly((u) =>\nu.combine('method', kImageCopyTypes).combine('mismatched', [true, false])\n).\nbeforeAllSubcases((t) => {\n  t.selectMismatchedDeviceOrSkipTestCase(undefined);\n}).\nfn((t) => {\n  const { method, mismatched } = t.params;\n  const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n  const texture = t.trackForCleanup(\n    sourceDevice.createTexture({\n      size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST\n    })\n  );\n\n  t.testRun(\n    { texture },\n    { bytesPerRow: 0 },\n    { width: 0, height: 0, depthOrArrayLayers: 0 },\n    { dataSize: 1, method, success: !mismatched }\n  );\n});\n\ng.test('usage').\ndesc(\n  `\nThe texture must have the appropriate COPY_SRC/COPY_DST usage.\n- for various copy methods\n- for various dimensions\n- for various usages\n`\n).\nparams((u) =>\nu.\ncombine('method', kImageCopyTypes).\ncombineWithParams([\n{ dimension: '1d', size: [4, 1, 1] },\n{ dimension: '2d', size: [4, 4, 1] },\n{ dimension: '2d', size: [4, 4, 3] },\n{ dimension: '3d', size: [4, 4, 3] }]\n).\nbeginSubcases()\n// If usage0 and usage1 are the same, the usage being test is a single usage. Otherwise, it's\n// a combined usage.\n.combine('usage0', kTextureUsages).\ncombine('usage1', kTextureUsages)\n// RENDER_ATTACHMENT is not valid with 1d and 3d textures.\n.unless(\n  ({ usage0, usage1, dimension }) =>\n  ((usage0 | usage1) & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 && (\n  dimension === '1d' || dimension === '3d')\n)\n).\nfn((t) => {\n  const { usage0, usage1, method, size, dimension } = t.params;\n\n  const usage = usage0 | usage1;\n  const texture = t.createTextureTracked({\n    size,\n    dimension,\n    format: 'rgba8unorm',\n    usage\n  });\n\n  const success =\n  method === 'CopyT2B' ?\n  (usage & GPUTextureUsage.COPY_SRC) !== 0 :\n  (usage & GPUTextureUsage.COPY_DST) !== 0;\n\n  t.testRun(\n    { texture },\n    { bytesPerRow: 0 },\n    { width: 0, height: 0, depthOrArrayLayers: 0 },\n    { dataSize: 1, method, success }\n  );\n});\n\ng.test('sample_count').\ndesc(\n  `\nTest that multisampled textures cannot be copied.\n- for various copy methods\n- multisampled or not\n\nNote: we don't test 1D, 2D array and 3D textures because multisample is not supported them.\n`\n).\nparams((u) =>\nu //\n.combine('method', kImageCopyTypes).\nbeginSubcases().\ncombine('sampleCount', [1, 4])\n).\nfn((t) => {\n  const { sampleCount, method } = t.params;\n\n  const texture = t.createTextureTracked({\n    size: { width: 4, height: 4, depthOrArrayLayers: 1 },\n    sampleCount,\n    format: 'rgba8unorm',\n    usage:\n    GPUTextureUsage.COPY_SRC |\n    GPUTextureUsage.COPY_DST |\n    GPUTextureUsage.TEXTURE_BINDING |\n    GPUTextureUsage.RENDER_ATTACHMENT\n  });\n\n  const success = sampleCount === 1;\n\n  t.testRun(\n    { texture },\n    { bytesPerRow: 0 },\n    { width: 0, height: 0, depthOrArrayLayers: 0 },\n    { dataSize: 1, method, success }\n  );\n});\n\ng.test('mip_level').\ndesc(\n  `\nTest that the mipLevel of the copy must be in range of the texture.\n- for various copy methods\n- for various dimensions\n- for several mipLevelCounts\n- for several target/source mipLevels`\n).\nparams((u) =>\nu.\ncombine('method', kImageCopyTypes).\ncombineWithParams([\n{ dimension: '1d', size: [32, 1, 1] },\n{ dimension: '2d', size: [32, 32, 1] },\n{ dimension: '2d', size: [32, 32, 3] },\n{ dimension: '3d', size: [32, 32, 3] }]\n).\nbeginSubcases().\ncombine('mipLevelCount', [1, 3, 5]).\nunless((p) => p.dimension === '1d' && p.mipLevelCount !== 1).\ncombine('mipLevel', [0, 1, 3, 4])\n).\nfn((t) => {\n  const { mipLevelCount, mipLevel, method, size, dimension } = t.params;\n\n  const texture = t.createTextureTracked({\n    size,\n    dimension,\n    mipLevelCount,\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST\n  });\n\n  const success = mipLevel < mipLevelCount;\n\n  t.testRun(\n    { texture, mipLevel },\n    { bytesPerRow: 0 },\n    { width: 0, height: 0, depthOrArrayLayers: 0 },\n    { dataSize: 1, method, success }\n  );\n});\n\ng.test('format').\ndesc(\n  `\nTest the copy must be a full subresource if the texture's format is depth/stencil format.\n- for various copy methods\n- for various dimensions\n- for all sized formats\n- for a couple target/source mipLevels\n- for some modifier (or not) for the full copy size\n`\n).\nparams((u) =>\nu //\n.combine('method', kImageCopyTypes).\ncombineWithParams([\n{ depthOrArrayLayers: 1, dimension: '1d' },\n{ depthOrArrayLayers: 1, dimension: '2d' },\n{ depthOrArrayLayers: 3, dimension: '2d' },\n{ depthOrArrayLayers: 32, dimension: '3d' }]\n).\ncombine('format', kSizedTextureFormats).\nfilter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format)).\nfilter(formatCopyableWithMethod).\nbeginSubcases().\ncombine('mipLevel', [0, 2]).\nunless((p) => p.dimension === '1d' && p.mipLevel !== 0).\ncombine('copyWidthModifier', [0, -1]).\ncombine('copyHeightModifier', [0, -1])\n// If the texture has multiple depth/array slices and it is not a 3D texture, which means it is an array texture,\n// depthModifier is not needed upon the third dimension. Because different layers are different subresources in\n// an array texture. Whether it is a full copy or non-full copy doesn't make sense across different subresources.\n// However, different depth slices on the same mip level are within the same subresource for a 3d texture. So we\n// need to examine depth dimension via copyDepthModifier to determine whether it is a full copy for a 3D texture.\n.expand('copyDepthModifier', ({ dimension: d }) => d === '3d' ? [0, -1] : [0])\n).\nbeforeAllSubcases((t) => {\n  const info = kTextureFormatInfo[t.params.format];\n  t.skipIfTextureFormatNotSupported(t.params.format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const {\n    method,\n    depthOrArrayLayers,\n    dimension,\n    format,\n    mipLevel,\n    copyWidthModifier,\n    copyHeightModifier,\n    copyDepthModifier\n  } = t.params;\n\n  const info = kTextureFormatInfo[format];\n  const size = { width: 32 * info.blockWidth, height: 32 * info.blockHeight, depthOrArrayLayers };\n  if (dimension === '1d') {\n    size.height = 1;\n  }\n\n  const texture = t.createTextureTracked({\n    size,\n    dimension,\n    format,\n    mipLevelCount: dimension === '1d' ? 1 : 5,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST\n  });\n\n  let success = true;\n  if (\n  (info.depth || info.stencil) && (\n  copyWidthModifier !== 0 || copyHeightModifier !== 0 || copyDepthModifier !== 0))\n  {\n    success = false;\n  }\n\n  const levelSize = virtualMipSize(dimension, size, mipLevel);\n  const copySize = [\n  levelSize[0] + copyWidthModifier * info.blockWidth,\n  levelSize[1] + copyHeightModifier * info.blockHeight,\n  // Note that compressed format is not supported for 3D textures yet, so there is no info.blockDepth.\n  levelSize[2] + copyDepthModifier];\n\n\n  t.testRun(\n    { texture, mipLevel, aspect: getACopyableAspectWithMethod({ format, method }) },\n    { bytesPerRow: 512, rowsPerImage: 32 },\n    copySize,\n    {\n      dataSize: 512 * 32 * 32,\n      method,\n      success\n    }\n  );\n});\n\ng.test('origin_alignment').\ndesc(\n  `\nTest that the texture copy origin must be aligned to the format's block size.\n- for various copy methods\n- for all color formats (depth stencil formats require a full copy)\n- for X, Y and Z coordinates\n- for various values for that coordinate depending on the block size\n`\n).\nparams((u) =>\nu.\ncombine('method', kImageCopyTypes)\n// No need to test depth/stencil formats because its copy origin must be [0, 0, 0], which is already aligned with block size.\n.combine('format', kColorTextureFormats).\nfilter(formatCopyableWithMethod).\ncombineWithParams([\n{ depthOrArrayLayers: 1, dimension: '1d' },\n{ depthOrArrayLayers: 1, dimension: '2d' },\n{ depthOrArrayLayers: 3, dimension: '2d' },\n{ depthOrArrayLayers: 3, dimension: '3d' }]\n).\nfilter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format)).\nbeginSubcases().\ncombine('coordinateToTest', ['x', 'y', 'z']).\nunless((p) => p.dimension === '1d' && p.coordinateToTest !== 'x').\nexpand('valueToCoordinate', texelBlockAlignmentTestExpanderForValueToCoordinate)\n).\nbeforeAllSubcases((t) => {\n  const info = kTextureFormatInfo[t.params.format];\n  t.skipIfTextureFormatNotSupported(t.params.format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { valueToCoordinate, coordinateToTest, format, method, depthOrArrayLayers, dimension } =\n  t.params;\n  const info = kTextureFormatInfo[format];\n  const size = { width: 0, height: 0, depthOrArrayLayers };\n  const origin = { x: 0, y: 0, z: 0 };\n  let success = true;\n\n  origin[coordinateToTest] = valueToCoordinate;\n  switch (coordinateToTest) {\n    case 'x':{\n        success = origin.x % info.blockWidth === 0;\n        break;\n      }\n    case 'y':{\n        success = origin.y % info.blockHeight === 0;\n        break;\n      }\n  }\n\n  const texture = t.createAlignedTexture(format, size, origin, dimension);\n\n  t.testRun({ texture, origin }, { bytesPerRow: 0, rowsPerImage: 0 }, size, {\n    dataSize: 1,\n    method,\n    success\n  });\n});\n\ng.test('size_alignment').\ndesc(\n  `\nTest that the copy size must be aligned to the texture's format's block size.\n- for various copy methods\n- for all formats (depth-stencil formats require a full copy)\n- for all texture dimensions\n- for the size's parameters to test (width / height / depth)\n- for various values for that copy size parameters, depending on the block size\n`\n).\nparams((u) =>\nu.\ncombine('method', kImageCopyTypes)\n// No need to test depth/stencil formats because its copy size must be subresource's size, which is already aligned with block size.\n.combine('format', kColorTextureFormats).\nfilter(formatCopyableWithMethod).\ncombine('dimension', kTextureDimensions).\nfilter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format)).\nbeginSubcases().\ncombine('coordinateToTest', ['width', 'height', 'depthOrArrayLayers']).\nunless((p) => p.dimension === '1d' && p.coordinateToTest !== 'width').\nexpand('valueToCoordinate', texelBlockAlignmentTestExpanderForValueToCoordinate)\n).\nbeforeAllSubcases((t) => {\n  const info = kTextureFormatInfo[t.params.format];\n  t.skipIfTextureFormatNotSupported(t.params.format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { valueToCoordinate, coordinateToTest, dimension, format, method } = t.params;\n  const info = kTextureFormatInfo[format];\n  const size = { width: 0, height: 0, depthOrArrayLayers: 0 };\n  const origin = { x: 0, y: 0, z: 0 };\n  let success = true;\n\n  size[coordinateToTest] = valueToCoordinate;\n  switch (coordinateToTest) {\n    case 'width':{\n        success = size.width % info.blockWidth === 0;\n        break;\n      }\n    case 'height':{\n        success = size.height % info.blockHeight === 0;\n        break;\n      }\n  }\n\n  const texture = t.createAlignedTexture(format, size, origin, dimension);\n\n  const bytesPerRow = align(\n    Math.max(1, Math.ceil(size.width / info.blockWidth)) * info.color.bytes,\n    256\n  );\n  const rowsPerImage = Math.ceil(size.height / info.blockHeight);\n  t.testRun({ texture, origin }, { bytesPerRow, rowsPerImage }, size, {\n    dataSize: 1,\n    method,\n    success\n  });\n});\n\ng.test('copy_rectangle').\ndesc(\n  `\nTest that the max corner of the copy rectangle (origin+copySize) must be inside the texture.\n- for various copy methods\n- for all dimensions\n- for the X, Y and Z dimensions\n- for various origin and copy size values (and texture sizes)\n- for various mip levels\n`\n).\nparams((u) =>\nu.\ncombine('method', kImageCopyTypes).\ncombine('dimension', kTextureDimensions).\nbeginSubcases().\ncombine('originValue', [7, 8]).\ncombine('copySizeValue', [7, 8]).\ncombine('textureSizeValue', [14, 15]).\ncombine('mipLevel', [0, 2]).\ncombine('coordinateToTest', [0, 1, 2]).\nunless((p) => p.dimension === '1d' && (p.coordinateToTest !== 0 || p.mipLevel !== 0))\n).\nfn((t) => {\n  const {\n    originValue,\n    copySizeValue,\n    textureSizeValue,\n    mipLevel,\n    coordinateToTest,\n    method,\n    dimension\n  } = t.params;\n  const format = 'rgba8unorm';\n  const info = kTextureFormatInfo[format];\n\n  const origin = [0, 0, 0];\n  const copySize = [0, 0, 0];\n  const textureSize = { width: 16 << mipLevel, height: 16 << mipLevel, depthOrArrayLayers: 16 };\n  if (dimension === '1d') {\n    textureSize.height = 1;\n    textureSize.depthOrArrayLayers = 1;\n  }\n  const success = originValue + copySizeValue <= textureSizeValue;\n\n  origin[coordinateToTest] = originValue;\n  copySize[coordinateToTest] = copySizeValue;\n  switch (coordinateToTest) {\n    case 0:{\n        textureSize.width = textureSizeValue << mipLevel;\n        break;\n      }\n    case 1:{\n        textureSize.height = textureSizeValue << mipLevel;\n        break;\n      }\n    case 2:{\n        textureSize.depthOrArrayLayers =\n        dimension === '3d' ? textureSizeValue << mipLevel : textureSizeValue;\n        break;\n      }\n  }\n\n  const texture = t.createTextureTracked({\n    size: textureSize,\n    dimension,\n    mipLevelCount: dimension === '1d' ? 1 : 3,\n    format,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST\n  });\n\n  assert(copySize[0] % info.blockWidth === 0);\n  const bytesPerRow = align(copySize[0] / info.blockWidth, 256);\n  assert(copySize[1] % info.blockHeight === 0);\n  const rowsPerImage = copySize[1] / info.blockHeight;\n  t.testRun({ texture, origin, mipLevel }, { bytesPerRow, rowsPerImage }, copySize, {\n    dataSize: 1,\n    method,\n    success\n  });\n});"],"mappings":"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","ignoreList":[]}