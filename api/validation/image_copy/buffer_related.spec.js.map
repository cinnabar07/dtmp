{"version":3,"file":"buffer_related.spec.js","names":["description","makeTestGroup","kTextureDimensions","GPUConst","kSizedTextureFormats","kTextureFormatInfo","textureDimensionAndFormatCompatible","kResourceStates","kImageCopyTypes","ImageCopyTest","formatCopyableWithMethod","g","test","desc","params","u","combine","fn","t","method","state","buffer","createBufferWithState","size","usage","GPUBufferUsage","COPY_SRC","COPY_DST","submit","success","texture","createTextureTracked","width","height","depthOrArrayLayers","format","GPUTextureUsage","testBuffer","bytesPerRow","dataSize","paramsSubcasesOnly","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","undefined","mismatched","sourceDevice","mismatchedDevice","device","trackForCleanup","globalThis","_TRAMPOLINE_","createBuffer","beginSubcases","BufferUsage","UNIFORM","createBufferTracked","filter","dimension","expand","p","copyHeightInBlocks","unless","info","depth","stencil","_textureHeightInBlocks","bytesPerBlock","skipIfTextureFormatNotSupported","selectDeviceOrSkipTestCase","feature","blockWidth","blockHeight","copySize"],"sources":["../../../../../src/webgpu/api/validation/image_copy/buffer_related.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `Validation tests for buffer related parameters for buffer <-> texture copies`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kTextureDimensions } from '../../../capability_info.js';\nimport { GPUConst } from '../../../constants.js';\nimport {\n  kSizedTextureFormats,\n  kTextureFormatInfo,\n  textureDimensionAndFormatCompatible } from\n'../../../format_info.js';\nimport { kResourceStates } from '../../../gpu_test.js';\nimport { kImageCopyTypes } from '../../../util/texture/layout.js';\n\nimport { ImageCopyTest, formatCopyableWithMethod } from './image_copy.js';\n\nexport const g = makeTestGroup(ImageCopyTest);\n\ng.test('buffer_state').\ndesc(\n  `\nTest that the buffer must be valid and not destroyed.\n- for all buffer <-> texture copy methods\n- for various buffer states\n`\n).\nparams((u) =>\nu //\n// B2B copy validations are at api,validation,encoding,cmds,copyBufferToBuffer.spec.ts\n.combine('method', ['CopyB2T', 'CopyT2B']).\ncombine('state', kResourceStates)\n).\nfn((t) => {\n  const { method, state } = t.params;\n\n  // A valid buffer.\n  const buffer = t.createBufferWithState(state, {\n    size: 16,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  });\n\n  // Invalid buffer will fail finish, and destroyed buffer will fail submit\n  const submit = state !== 'invalid';\n  const success = state === 'valid';\n\n  const texture = t.createTextureTracked({\n    size: { width: 2, height: 2, depthOrArrayLayers: 1 },\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST\n  });\n\n  t.testBuffer(\n    buffer,\n    texture,\n    { bytesPerRow: 0 },\n    { width: 0, height: 0, depthOrArrayLayers: 0 },\n    { dataSize: 16, method, success, submit }\n  );\n});\n\ng.test('buffer,device_mismatch').\ndesc('Tests the image copies cannot be called with a buffer created from another device').\nparamsSubcasesOnly((u) =>\nu.combine('method', ['CopyB2T', 'CopyT2B']).combine('mismatched', [true, false])\n).\nbeforeAllSubcases((t) => {\n  t.selectMismatchedDeviceOrSkipTestCase(undefined);\n}).\nfn((t) => {\n  const { method, mismatched } = t.params;\n  const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n  const buffer = t.trackForCleanup(globalThis._TRAMPOLINE_(\"createBuffer\",\n  sourceDevice, sourceDevice.createBuffer, [{\n    size: 16,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  }], () => sourceDevice.createBuffer({ size: 16, usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST }))\n  );\n\n  const texture = t.createTextureTracked({\n    size: { width: 2, height: 2, depthOrArrayLayers: 1 },\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST\n  });\n\n  const success = !mismatched;\n\n  // Expect success in both finish and submit, or validation error in finish\n  t.testBuffer(\n    buffer,\n    texture,\n    { bytesPerRow: 0 },\n    { width: 0, height: 0, depthOrArrayLayers: 0 },\n    { dataSize: 16, method, success, submit: success }\n  );\n});\n\ng.test('usage').\ndesc(\n  `\nTest the buffer must have the appropriate COPY_SRC/COPY_DST usage.\nTODO update such that it tests\n- for all buffer source usages\n- for all buffer destination usages\n`\n).\nparams((u) =>\nu\n// B2B copy validations are at api,validation,encoding,cmds,copyBufferToBuffer.spec.ts\n.combine('method', ['CopyB2T', 'CopyT2B']).\nbeginSubcases().\ncombine('usage', [\nGPUConst.BufferUsage.COPY_SRC | GPUConst.BufferUsage.UNIFORM,\nGPUConst.BufferUsage.COPY_DST | GPUConst.BufferUsage.UNIFORM,\nGPUConst.BufferUsage.COPY_SRC | GPUConst.BufferUsage.COPY_DST]\n)\n).\nfn((t) => {\n  const { method, usage } = t.params;\n\n  const buffer = t.createBufferTracked({\n    size: 16,\n    usage\n  });\n\n  const success =\n  method === 'CopyB2T' ?\n  (usage & GPUBufferUsage.COPY_SRC) !== 0 :\n  (usage & GPUBufferUsage.COPY_DST) !== 0;\n\n  const texture = t.createTextureTracked({\n    size: { width: 2, height: 2, depthOrArrayLayers: 1 },\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST\n  });\n\n  // Expect success in both finish and submit, or validation error in finish\n  t.testBuffer(\n    buffer,\n    texture,\n    { bytesPerRow: 0 },\n    { width: 0, height: 0, depthOrArrayLayers: 0 },\n    { dataSize: 16, method, success, submit: success }\n  );\n});\n\ng.test('bytes_per_row_alignment').\ndesc(\n  `\nTest that bytesPerRow must be a multiple of 256 for CopyB2T and CopyT2B if it is required.\n- for all copy methods between linear data and textures\n- for all texture dimensions\n- for all sized formats.\n- for various bytesPerRow aligned to 256 or not\n- for various number of blocks rows copied\n`\n).\nparams((u) =>\nu //\n.combine('method', kImageCopyTypes).\ncombine('format', kSizedTextureFormats).\nfilter(formatCopyableWithMethod).\ncombine('dimension', kTextureDimensions).\nfilter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format)).\nbeginSubcases().\ncombine('bytesPerRow', [undefined, 0, 1, 255, 256, 257, 512]).\ncombine('copyHeightInBlocks', [0, 1, 2, 3]).\nexpand('_textureHeightInBlocks', (p) => [\np.copyHeightInBlocks === 0 ? 1 : p.copyHeightInBlocks]\n).\nunless((p) => p.dimension === '1d' && p.copyHeightInBlocks > 1)\n// Depth/stencil format copies must copy the whole subresource.\n.unless((p) => {\n  const info = kTextureFormatInfo[p.format];\n  return (\n    (!!info.depth || !!info.stencil) && p.copyHeightInBlocks !== p._textureHeightInBlocks);\n\n})\n// bytesPerRow must be specified and it must be equal or greater than the bytes size of each row if we are copying multiple rows.\n// Note that we are copying one single block on each row in this test.\n.filter(\n  ({ format, bytesPerRow, copyHeightInBlocks }) =>\n  bytesPerRow === undefined && copyHeightInBlocks <= 1 ||\n  bytesPerRow !== undefined && bytesPerRow >= kTextureFormatInfo[format].bytesPerBlock\n)\n).\nbeforeAllSubcases((t) => {\n  const info = kTextureFormatInfo[t.params.format];\n  t.skipIfTextureFormatNotSupported(t.params.format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { method, dimension, format, bytesPerRow, copyHeightInBlocks, _textureHeightInBlocks } =\n  t.params;\n\n  const info = kTextureFormatInfo[format];\n\n  const buffer = t.createBufferTracked({\n    size: 512 * 8 * 16,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  });\n\n  let success = false;\n  // writeTexture doesn't require bytesPerRow to be 256-byte aligned.\n  if (method === 'WriteTexture') success = true;\n  // If the copy height <= 1, bytesPerRow is not required.\n  if (copyHeightInBlocks <= 1 && bytesPerRow === undefined) success = true;\n  // If bytesPerRow > 0 and it is a multiple of 256, it will succeed if other parameters are valid.\n  if (bytesPerRow !== undefined && bytesPerRow > 0 && bytesPerRow % 256 === 0) success = true;\n\n  const size = [info.blockWidth, _textureHeightInBlocks * info.blockHeight, 1];\n  const texture = t.createTextureTracked({\n    size,\n    dimension,\n    format,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST\n  });\n\n  const copySize = [info.blockWidth, copyHeightInBlocks * info.blockHeight, 1];\n\n  // Expect success in both finish and submit, or validation error in finish\n  t.testBuffer(buffer, texture, { bytesPerRow }, copySize, {\n    dataSize: 512 * 8 * 16,\n    method,\n    success,\n    submit: success\n  });\n});"],"mappings":"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","ignoreList":[]}