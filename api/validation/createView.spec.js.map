{"version":3,"file":"createView.spec.js","names":["description","kUnitCaseParamsBuilder","makeTestGroup","unreachable","kTextureAspects","kTextureDimensions","kTextureUsages","kTextureViewDimensions","GPUConst","kTextureFormatInfo","kAllTextureFormats","kFeaturesForFormats","filterFormatsByFeature","viewCompatible","kResourceStates","getTextureDimensionFromView","reifyTextureViewDescriptor","viewDimensionsForTextureDimension","reifyExtent3D","ValidationTest","g","kLevels","test","desc","params","u","combine","beginSubcases","expand","textureFormatFeature","viewFormatFeature","undefined","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","textureFormat","viewFormat","useViewFormatList","blockWidth","blockHeight","skipIfTextureFormatNotSupported","compatible","isCompatibility","texture","createTextureTracked","format","size","usage","GPUTextureUsage","TEXTURE_BINDING","viewFormats","success","expectValidationError","createView","skipIfTextureViewDimensionNotSupported","viewDimension","textureDimension","textureDescriptor","dimension","view","reified","selectDeviceForTextureFormatOrSkipTestCase","aspect","info","depth","stencil","kTextureAndViewDimensions","p","validateCreateViewLayersLevels","tex","textureLevels","mipLevelCount","textureLayers","depthOrArrayLayers","baseMipLevel","arrayLayerCount","baseArrayLayer","d","unless","l","Set","lastArrayLayer","kWidth","viewDescriptor","lastMipLevel","debug","paramsSubcasesOnly","state","createTextureWithState","filter","textureUsage0","textureUsage1","textureUsage","TextureUsage","RENDER_ATTACHMENT","color","colorRender","feature","STORAGE_BINDING","skipIfTextureFormatNotUsableAsStorageTexture","textureViewUsage0","textureViewUsage1","textureViewUsage"],"sources":["../../../../src/webgpu/api/validation/createView.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `createView validation tests.`;import { kUnitCaseParamsBuilder } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { unreachable } from '../../../common/util/util.js';\nimport {\n  kTextureAspects,\n  kTextureDimensions,\n  kTextureUsages,\n  kTextureViewDimensions } from\n'../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\nimport {\n  kTextureFormatInfo,\n  kAllTextureFormats,\n  kFeaturesForFormats,\n  filterFormatsByFeature,\n  viewCompatible } from\n'../../format_info.js';\nimport { kResourceStates } from '../../gpu_test.js';\nimport {\n  getTextureDimensionFromView,\n  reifyTextureViewDescriptor,\n  viewDimensionsForTextureDimension } from\n'../../util/texture/base.js';\nimport { reifyExtent3D } from '../../util/unions.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\nconst kLevels = 6;\n\ng.test('format').\ndesc(\n  `Views must have the view format compatible with the base texture, for all {texture format}x{view format}.`\n).\nparams((u) =>\nu.\ncombine('textureFormatFeature', kFeaturesForFormats).\ncombine('viewFormatFeature', kFeaturesForFormats).\nbeginSubcases().\nexpand('textureFormat', ({ textureFormatFeature }) =>\nfilterFormatsByFeature(textureFormatFeature, kAllTextureFormats)\n).\nexpand('viewFormat', ({ viewFormatFeature }) =>\nfilterFormatsByFeature(viewFormatFeature, [undefined, ...kAllTextureFormats])\n).\ncombine('useViewFormatList', [false, true])\n).\nbeforeAllSubcases((t) => {\n  const { textureFormatFeature, viewFormatFeature } = t.params;\n  t.selectDeviceOrSkipTestCase([textureFormatFeature, viewFormatFeature]);\n}).\nfn((t) => {\n  const { textureFormat, viewFormat, useViewFormatList } = t.params;\n  const { blockWidth, blockHeight } = kTextureFormatInfo[textureFormat];\n\n  t.skipIfTextureFormatNotSupported(textureFormat, viewFormat);\n\n  const compatible =\n  viewFormat === undefined || viewCompatible(t.isCompatibility, textureFormat, viewFormat);\n\n  const texture = t.createTextureTracked({\n    format: textureFormat,\n    size: [blockWidth, blockHeight],\n    usage: GPUTextureUsage.TEXTURE_BINDING,\n\n    // This is a test of createView, not createTexture. Don't pass viewFormats here that\n    // are not compatible, as that is tested in createTexture.spec.ts.\n    viewFormats:\n    useViewFormatList && compatible && viewFormat !== undefined ? [viewFormat] : undefined\n  });\n\n  // Successful if there is no view format, no reinterpretation was required, or the formats are compatible\n  // and is was specified in the viewFormats list.\n  const success =\n  viewFormat === undefined || viewFormat === textureFormat || compatible && useViewFormatList;\n  t.expectValidationError(() => {\n    texture.createView({ format: viewFormat });\n  }, !success);\n});\n\ng.test('dimension').\ndesc(\n  `For all {texture dimension}, {view dimension}, test that they must be compatible:\n  - 1d -> 1d\n  - 2d -> 2d, 2d-array, cube, or cube-array\n  - 3d -> 3d`\n).\nparams((u) =>\nu.\ncombine('textureDimension', kTextureDimensions).\ncombine('viewDimension', [...kTextureViewDimensions, undefined])\n).\nbeforeAllSubcases((t) => {\n  t.skipIfTextureViewDimensionNotSupported(t.params.viewDimension);\n}).\nfn((t) => {\n  const { textureDimension, viewDimension } = t.params;\n\n  const size = textureDimension === '1d' ? [4] : [4, 4, 6];\n  const textureDescriptor = {\n    format: 'rgba8unorm',\n    dimension: textureDimension,\n    size,\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  };\n  const texture = t.createTextureTracked(textureDescriptor);\n\n  const view = { dimension: viewDimension };\n  const reified = reifyTextureViewDescriptor(textureDescriptor, view);\n\n  const success = getTextureDimensionFromView(reified.dimension) === textureDimension;\n  t.expectValidationError(() => {\n    texture.createView(view);\n  }, !success);\n});\n\ng.test('aspect').\ndesc(\n  `For every {format}x{aspect}, test that the view aspect must exist in the format:\n  - \"all\" is allowed for any format\n  - \"depth-only\" is allowed only for depth and depth-stencil formats\n  - \"stencil-only\" is allowed only for stencil and depth-stencil formats`\n).\nparams((u) =>\nu //\n.combine('format', kAllTextureFormats).\ncombine('aspect', kTextureAspects)\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  t.selectDeviceForTextureFormatOrSkipTestCase(format);\n}).\nfn((t) => {\n  const { format, aspect } = t.params;\n  const info = kTextureFormatInfo[format];\n\n  const texture = t.createTextureTracked({\n    format,\n    size: [info.blockWidth, info.blockHeight, 1],\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  });\n\n  const success =\n  aspect === 'all' ||\n  aspect === 'depth-only' && info.depth ||\n  aspect === 'stencil-only' && info.stencil;\n  t.expectValidationError(() => {\n    texture.createView({ aspect });\n  }, !success);\n});\n\nconst kTextureAndViewDimensions = kUnitCaseParamsBuilder.\ncombine('textureDimension', kTextureDimensions).\nexpand('viewDimension', (p) => [\nundefined,\n...viewDimensionsForTextureDimension(p.textureDimension)]\n);\n\nfunction validateCreateViewLayersLevels(tex, view) {\n  const textureLevels = tex.mipLevelCount ?? 1;\n  const textureLayers = tex.dimension === '2d' ? reifyExtent3D(tex.size).depthOrArrayLayers : 1;\n  const reified = reifyTextureViewDescriptor(tex, view);\n\n  let success =\n  reified.mipLevelCount > 0 &&\n  reified.baseMipLevel < textureLevels &&\n  reified.baseMipLevel + reified.mipLevelCount <= textureLevels &&\n  reified.arrayLayerCount > 0 &&\n  reified.baseArrayLayer < textureLayers &&\n  reified.baseArrayLayer + reified.arrayLayerCount <= textureLayers;\n  if (reified.dimension === '1d' || reified.dimension === '2d' || reified.dimension === '3d') {\n    success &&= reified.arrayLayerCount === 1;\n  } else if (reified.dimension === 'cube') {\n    success &&= reified.arrayLayerCount === 6;\n  } else if (reified.dimension === 'cube-array') {\n    success &&= reified.arrayLayerCount % 6 === 0;\n  }\n  return success;\n}\n\ng.test('array_layers').\ndesc(\n  `For each texture dimension {1d,2d,3d}, for each possible view dimension for that texture\n    dimension (or undefined, which defaults to the texture dimension), test validation of layer\n    counts:\n  - 1d, 2d, and 3d must have exactly 1 layer\n  - 2d-array must have 1 or more layers\n  - cube must have 6 layers\n  - cube-array must have a positive multiple of 6 layers\n  - Defaulting of baseArrayLayer and arrayLayerCount\n  - baseArrayLayer+arrayLayerCount must be within the texture`\n).\nparams(\n  kTextureAndViewDimensions.\n  beginSubcases().\n  expand('textureLayers', ({ textureDimension: d }) => d === '2d' ? [1, 6, 18] : [1]).\n  combine('textureLevels', [1, kLevels]).\n  unless((p) => p.textureDimension === '1d' && p.textureLevels !== 1).\n  expand(\n    'baseArrayLayer',\n    ({ textureLayers: l }) => new Set([undefined, 0, 1, 5, 6, 7, l - 1, l, l + 1])\n  ).\n  expand('arrayLayerCount', function* ({ textureLayers: l, baseArrayLayer = 0 }) {\n    yield undefined;\n    for (const lastArrayLayer of new Set([0, 1, 5, 6, 7, l - 1, l, l + 1])) {\n      if (baseArrayLayer <= lastArrayLayer) yield lastArrayLayer - baseArrayLayer;\n    }\n  })\n).\nfn((t) => {\n  const {\n    textureDimension,\n    viewDimension,\n    textureLayers,\n    textureLevels,\n    baseArrayLayer,\n    arrayLayerCount\n  } = t.params;\n\n  t.skipIfTextureViewDimensionNotSupported(viewDimension);\n\n  const kWidth = 1 << kLevels - 1; // 32\n  const textureDescriptor = {\n    format: 'rgba8unorm',\n    dimension: textureDimension,\n    size:\n    textureDimension === '1d' ?\n    [kWidth] :\n    textureDimension === '2d' ?\n    [kWidth, kWidth, textureLayers] :\n    textureDimension === '3d' ?\n    [kWidth, kWidth, kWidth] :\n    unreachable(),\n    mipLevelCount: textureLevels,\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  };\n\n  const viewDescriptor = { dimension: viewDimension, baseArrayLayer, arrayLayerCount };\n  const success = validateCreateViewLayersLevels(textureDescriptor, viewDescriptor);\n\n  const texture = t.createTextureTracked(textureDescriptor);\n  t.expectValidationError(() => {\n    texture.createView(viewDescriptor);\n  }, !success);\n});\n\ng.test('mip_levels').\ndesc(\n  `Views must have at least one level, and must be within the level of the base texture.\n\n  - mipLevelCount=0 at various baseMipLevel values\n  - Cases where baseMipLevel+mipLevelCount goes past the end of the texture\n  - Cases with baseMipLevel or mipLevelCount undefined (compares against reference defaulting impl)\n  `\n).\nparams(\n  kTextureAndViewDimensions.\n  beginSubcases().\n  combine('textureLevels', [1, kLevels - 2, kLevels]).\n  unless((p) => p.textureDimension === '1d' && p.textureLevels !== 1).\n  expand(\n    'baseMipLevel',\n    ({ textureLevels: l }) => new Set([undefined, 0, 1, 5, 6, 7, l - 1, l, l + 1])\n  ).\n  expand('mipLevelCount', function* ({ textureLevels: l, baseMipLevel = 0 }) {\n    yield undefined;\n    for (const lastMipLevel of new Set([0, 1, 5, 6, 7, l - 1, l, l + 1])) {\n      if (baseMipLevel <= lastMipLevel) yield lastMipLevel - baseMipLevel;\n    }\n  })\n).\nfn((t) => {\n  const { textureDimension, viewDimension, textureLevels, baseMipLevel, mipLevelCount } =\n  t.params;\n\n  t.skipIfTextureViewDimensionNotSupported(viewDimension);\n\n  const textureDescriptor = {\n    format: 'rgba8unorm',\n    dimension: textureDimension,\n    size:\n    textureDimension === '1d' ? [32] : textureDimension === '3d' ? [32, 32, 32] : [32, 32, 18],\n    mipLevelCount: textureLevels,\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  };\n\n  const viewDescriptor = { dimension: viewDimension, baseMipLevel, mipLevelCount };\n  const success = validateCreateViewLayersLevels(textureDescriptor, viewDescriptor);\n\n  const texture = t.createTextureTracked(textureDescriptor);\n  t.debug(`${mipLevelCount} ${success}`);\n  t.expectValidationError(() => {\n    texture.createView(viewDescriptor);\n  }, !success);\n});\n\ng.test('cube_faces_square').\ndesc(\n  `Test that the X/Y dimensions of cube and cube array textures must be square.\n  - {2d (control case), cube, cube-array}`\n).\nparams((u) =>\nu //\n.combine('dimension', ['2d', 'cube', 'cube-array']).\ncombine('size', [\n[4, 4, 6],\n[5, 5, 6],\n[4, 5, 6],\n[4, 8, 6],\n[8, 4, 6]]\n)\n).\nfn((t) => {\n  const { dimension, size } = t.params;\n\n  t.skipIfTextureViewDimensionNotSupported(dimension);\n\n  const texture = t.createTextureTracked({\n    format: 'rgba8unorm',\n    size,\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  });\n\n  const success = dimension === '2d' || size[0] === size[1];\n  t.expectValidationError(() => {\n    texture.createView({ dimension });\n  }, !success);\n});\n\ng.test('texture_state').\ndesc(`createView should fail if the texture is invalid (but succeed if it is destroyed)`).\nparamsSubcasesOnly((u) => u.combine('state', kResourceStates)).\nfn((t) => {\n  const { state } = t.params;\n  const texture = t.createTextureWithState(state);\n\n  t.expectValidationError(() => {\n    texture.createView();\n  }, state === 'invalid');\n});\n\ng.test('texture_view_usage').\ndesc(\n  `Test texture view usage (single, combined, inherited) for every texture format and texture usage`\n).\nparams((u) =>\nu //\n.combine('format', kAllTextureFormats).\ncombine('textureUsage0', kTextureUsages).\ncombine('textureUsage1', kTextureUsages).\nfilter(({ format, textureUsage0, textureUsage1 }) => {\n  const info = kTextureFormatInfo[format];\n  const textureUsage = textureUsage0 | textureUsage1;\n\n  if (\n  (textureUsage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 &&\n  info.color &&\n  !info.colorRender)\n  {\n    return false;\n  }\n\n  return true;\n}).\nbeginSubcases().\ncombine('textureViewUsage0', [0, ...kTextureUsages]).\ncombine('textureViewUsage1', [0, ...kTextureUsages])\n).\nbeforeAllSubcases((t) => {\n  const { format, textureUsage0, textureUsage1 } = t.params;\n  const info = kTextureFormatInfo[format];\n  const textureUsage = textureUsage0 | textureUsage1;\n  t.skipIfTextureFormatNotSupported(format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n  if (textureUsage & GPUTextureUsage.STORAGE_BINDING) {\n    t.skipIfTextureFormatNotUsableAsStorageTexture(format);\n  }\n}).\nfn((t) => {\n  const { format, textureUsage0, textureUsage1, textureViewUsage0, textureViewUsage1 } = t.params;\n  const info = kTextureFormatInfo[format];\n\n  const size = [info.blockWidth, info.blockHeight, 1];\n  const dimension = '2d';\n  const mipLevelCount = 1;\n  const usage = textureUsage0 | textureUsage1;\n\n  const textureDescriptor = {\n    size,\n    mipLevelCount,\n    dimension,\n    format,\n    usage\n  };\n\n  const texture = t.createTextureTracked(textureDescriptor);\n\n  let success = true;\n\n  const textureViewUsage = textureViewUsage0 | textureViewUsage1;\n\n  // Texture view usage must be a subset of texture usage\n  if ((~usage & textureViewUsage) !== 0) success = false;\n\n  t.expectValidationError(() => {\n    texture.createView({\n      usage: textureViewUsage\n    });\n  }, !success);\n});"],"mappings":"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","ignoreList":[]}