{"version":3,"file":"overrides.spec.js","names":["description","makeTestGroup","ValidationTest","g","test","desc","fn","t","expectValidationError","device","createShaderModule","code"],"sources":["../../../../../src/webgpu/api/validation/shader_module/overrides.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nThis tests overrides numeric identifiers should not conflict.\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('id_conflict').\ndesc(\n  `\nTests that overrides' explicit numeric identifier should not conflict.\n`\n).\nfn((t) => {\n  t.expectValidationError(() => {\n    t.device.createShaderModule({\n      code: `\n@id(1234) override c0: u32;\n@id(4321) override c1: u32;\n\n@compute @workgroup_size(1) fn main() {\n  // make sure the overridable constants are not optimized out\n  _ = c0;\n  _ = c1;\n}\n          `\n    });\n  }, false);\n\n  t.expectValidationError(() => {\n    t.device.createShaderModule({\n      code: `\n@id(1234) override c0: u32;\n@id(1234) override c1: u32;\n\n@compute @workgroup_size(1) fn main() {\n  // make sure the overridable constants are not optimized out\n  _ = c0;\n  _ = c1;\n}\n          `\n    });\n  }, true);\n});\n\ng.test('name_conflict').\ndesc(\n  `\nTests that overrides' variable name should not conflict, regardless of their numeric identifiers.\n`\n).\nfn((t) => {\n  t.expectValidationError(() => {\n    t.device.createShaderModule({\n      code: `\noverride c0: u32;\noverride c0: u32;\n\n@compute @workgroup_size(1) fn main() {\n  // make sure the overridable constants are not optimized out\n  _ = c0;\n}\n          `\n    });\n  }, true);\n\n  t.expectValidationError(() => {\n    t.device.createShaderModule({\n      code: `\n@id(1) override c0: u32;\noverride c0: u32;\n\n@compute @workgroup_size(1) fn main() {\n  // make sure the overridable constants are not optimized out\n  _ = c0;\n}\n          `\n    });\n  }, true);\n\n  t.expectValidationError(() => {\n    t.device.createShaderModule({\n      code: `\n@id(1) override c0: u32;\n@id(2) override c0: u32;\n\n@compute @workgroup_size(1) fn main() {\n  // make sure the overridable constants are not optimized out\n  _ = c0;\n}\n          `\n    });\n  }, true);\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG;AAC9B;AACA,CAAC,CAAC,SAASC,aAAa,QAAQ,4CAA4C,CAC5E,SAASC,cAAc,QAAQ,uBAAuB;AAEtD,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,cAAc,CAAC;;AAE9CC,CAAC,CAACC,IAAI,CAAC,aAAa,CAAC;AACrBC,IAAI;EACF;AACF;AACA;AACA,CAAC;AACDC,EAAE,CAAC,CAACC,CAAC,KAAK;EACRA,CAAC,CAACC,qBAAqB,CAAC,MAAM;IAC5BD,CAAC,CAACE,MAAM,CAACC,kBAAkB,CAAC;MAC1BC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,CAAC,CAAC;EACJ,CAAC,EAAE,KAAK,CAAC;;EAETJ,CAAC,CAACC,qBAAqB,CAAC,MAAM;IAC5BD,CAAC,CAACE,MAAM,CAACC,kBAAkB,CAAC;MAC1BC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,CAAC,CAAC;EACJ,CAAC,EAAE,IAAI,CAAC;AACV,CAAC,CAAC;;AAEFR,CAAC,CAACC,IAAI,CAAC,eAAe,CAAC;AACvBC,IAAI;EACF;AACF;AACA;AACA,CAAC;AACDC,EAAE,CAAC,CAACC,CAAC,KAAK;EACRA,CAAC,CAACC,qBAAqB,CAAC,MAAM;IAC5BD,CAAC,CAACE,MAAM,CAACC,kBAAkB,CAAC;MAC1BC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,CAAC,CAAC;EACJ,CAAC,EAAE,IAAI,CAAC;;EAERJ,CAAC,CAACC,qBAAqB,CAAC,MAAM;IAC5BD,CAAC,CAACE,MAAM,CAACC,kBAAkB,CAAC;MAC1BC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,CAAC,CAAC;EACJ,CAAC,EAAE,IAAI,CAAC;;EAERJ,CAAC,CAACC,qBAAqB,CAAC,MAAM;IAC5BD,CAAC,CAACE,MAAM,CAACC,kBAAkB,CAAC;MAC1BC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,CAAC,CAAC;EACJ,CAAC,EAAE,IAAI,CAAC;AACV,CAAC,CAAC","ignoreList":[]}