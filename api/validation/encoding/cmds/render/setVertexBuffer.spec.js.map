{"version":3,"file":"setVertexBuffer.spec.js","names":["description","makeTestGroup","makeValueTestVariant","GPUConst","kResourceStates","ValidationTest","kRenderEncodeTypeParams","buildBufferOffsetAndSizeOOBTestParams","g","test","desc","paramsSubcasesOnly","combine","mult","add","fn","t","encoderType","slotVariant","params","maxVertexBuffers","device","limits","slot","vertexBuffer","createBufferWithState","size","usage","GPUBufferUsage","VERTEX","encoder","validateFinish","createEncoder","setVertexBuffer","state","validateFinishAndSubmitGivenState","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","undefined","mismatched","sourceDevice","mismatchedDevice","trackForCleanup","globalThis","_TRAMPOLINE_","createBuffer","BufferUsage","COPY_DST","createBufferTracked","offset","finish","_valid"],"sources":["../../../../../../../src/webgpu/api/validation/encoding/cmds/render/setVertexBuffer.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nValidation tests for setVertexBuffer on render pass and render bundle.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { makeValueTestVariant } from '../../../../../../common/util/util.js';\nimport { GPUConst } from '../../../../../constants.js';\nimport { kResourceStates } from '../../../../../gpu_test.js';\nimport { ValidationTest } from '../../../validation_test.js';\n\nimport { kRenderEncodeTypeParams, buildBufferOffsetAndSizeOOBTestParams } from './render.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('slot').\ndesc(\n  `\nTests slot must be less than the maxVertexBuffers in device limits.\n  `\n).\nparamsSubcasesOnly(\n  kRenderEncodeTypeParams.combine('slotVariant', [\n  { mult: 0, add: 0 },\n  { mult: 1, add: -1 },\n  { mult: 1, add: 0 }]\n  )\n).\nfn((t) => {\n  const { encoderType, slotVariant } = t.params;\n  const maxVertexBuffers = t.device.limits.maxVertexBuffers;\n  const slot = makeValueTestVariant(maxVertexBuffers, slotVariant);\n\n  const vertexBuffer = t.createBufferWithState('valid', {\n    size: 16,\n    usage: GPUBufferUsage.VERTEX\n  });\n\n  const { encoder, validateFinish } = t.createEncoder(encoderType);\n  encoder.setVertexBuffer(slot, vertexBuffer);\n  validateFinish(slot < maxVertexBuffers);\n});\n\ng.test('vertex_buffer_state').\ndesc(\n  `\nTests vertex buffer must be valid.\n  `\n).\nparamsSubcasesOnly(kRenderEncodeTypeParams.combine('state', kResourceStates)).\nfn((t) => {\n  const { encoderType, state } = t.params;\n  const vertexBuffer = t.createBufferWithState(state, {\n    size: 16,\n    usage: GPUBufferUsage.VERTEX\n  });\n\n  const { encoder, validateFinishAndSubmitGivenState } = t.createEncoder(encoderType);\n  encoder.setVertexBuffer(0, vertexBuffer);\n  validateFinishAndSubmitGivenState(state);\n});\n\ng.test('vertex_buffer,device_mismatch').\ndesc('Tests setVertexBuffer cannot be called with a vertex buffer created from another device').\nparamsSubcasesOnly(kRenderEncodeTypeParams.combine('mismatched', [true, false])).\nbeforeAllSubcases((t) => {\n  t.selectMismatchedDeviceOrSkipTestCase(undefined);\n}).\nfn((t) => {\n  const { encoderType, mismatched } = t.params;\n  const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n  const vertexBuffer = t.trackForCleanup(globalThis._TRAMPOLINE_(\"createBuffer\",\n  sourceDevice, sourceDevice.createBuffer, [{\n    size: 16,\n    usage: GPUBufferUsage.VERTEX\n  }], () => sourceDevice.createBuffer({ size: 16, usage: GPUBufferUsage.VERTEX }))\n  );\n\n  const { encoder, validateFinish } = t.createEncoder(encoderType);\n  encoder.setVertexBuffer(0, vertexBuffer);\n  validateFinish(!mismatched);\n});\n\ng.test('vertex_buffer_usage').\ndesc(\n  `\nTests vertex buffer must have 'Vertex' usage.\n  `\n).\nparamsSubcasesOnly(\n  kRenderEncodeTypeParams.combine('usage', [\n  GPUConst.BufferUsage.VERTEX, // control case\n  GPUConst.BufferUsage.COPY_DST,\n  GPUConst.BufferUsage.COPY_DST | GPUConst.BufferUsage.VERTEX]\n  )\n).\nfn((t) => {\n  const { encoderType, usage } = t.params;\n  const vertexBuffer = t.createBufferTracked({\n    size: 16,\n    usage\n  });\n\n  const { encoder, validateFinish } = t.createEncoder(encoderType);\n  encoder.setVertexBuffer(0, vertexBuffer);\n  validateFinish((usage & GPUBufferUsage.VERTEX) !== 0);\n});\n\ng.test('offset_alignment').\ndesc(\n  `\nTests offset must be a multiple of 4.\n  `\n).\nparamsSubcasesOnly(kRenderEncodeTypeParams.combine('offset', [0, 2, 4])).\nfn((t) => {\n  const { encoderType, offset } = t.params;\n  const vertexBuffer = t.createBufferTracked({\n    size: 16,\n    usage: GPUBufferUsage.VERTEX\n  });\n\n  const { encoder, validateFinish: finish } = t.createEncoder(encoderType);\n  encoder.setVertexBuffer(0, vertexBuffer, offset);\n  finish(offset % 4 === 0);\n});\n\ng.test('offset_and_size_oob').\ndesc(\n  `\nTests offset and size cannot be larger than vertex buffer size.\n  `\n).\nparamsSubcasesOnly(buildBufferOffsetAndSizeOOBTestParams(4, 256)).\nfn((t) => {\n  const { encoderType, offset, size, _valid } = t.params;\n  const vertexBuffer = t.createBufferTracked({\n    size: 256,\n    usage: GPUBufferUsage.VERTEX\n  });\n\n  const { encoder, validateFinish } = t.createEncoder(encoderType);\n  encoder.setVertexBuffer(0, vertexBuffer, offset, size);\n  validateFinish(_valid);\n});"],"mappings":"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","ignoreList":[]}