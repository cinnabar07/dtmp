{"version":3,"file":"general.spec.js","names":["description","makeTestGroup","kQueryTypes","ValidationTest","createQuerySetWithType","g","test","desc","params","u","combine","undefined","beforeAllSubcases","t","type","selectDeviceForQueryTypeOrSkipTestCase","fn","querySet","encoder","createEncoder","occlusionQuerySet","beginOcclusionQuery","endOcclusionQuery","validateFinish","paramsSubcasesOnly","createQuerySetWithState","querySetState","validateFinishAndSubmitGivenState","queryIndex","beginSubcases","expand","p","queryTypes","push","count","writeTimestamp","ex","skipIf","TypeError","selectMismatchedDeviceOrSkipTestCase","mismatched","sourceDevice","mismatchedDevice","device","trackForCleanup","createQuerySet"],"sources":["../../../../../../src/webgpu/api/validation/encoding/queries/general.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nValidation for encoding queries.\n`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { kQueryTypes } from '../../../../capability_info.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nimport { createQuerySetWithType } from './common.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('occlusion_query,query_type').\ndesc(\n  `\nTests that set occlusion query set with all types in render pass descriptor:\n- type {occlusion (control case), timestamp}\n- {undefined} for occlusion query set in render pass descriptor\n  `\n).\nparams((u) => u.combine('type', [undefined, ...kQueryTypes])).\nbeforeAllSubcases((t) => {\n  const { type } = t.params;\n  if (type) {\n    t.selectDeviceForQueryTypeOrSkipTestCase(type);\n  }\n}).\nfn((t) => {\n  const type = t.params.type;\n  const querySet = type === undefined ? undefined : createQuerySetWithType(t, type, 1);\n\n  const encoder = t.createEncoder('render pass', { occlusionQuerySet: querySet });\n  encoder.encoder.beginOcclusionQuery(0);\n  encoder.encoder.endOcclusionQuery();\n  encoder.validateFinish(type === 'occlusion');\n});\n\ng.test('occlusion_query,invalid_query_set').\ndesc(\n  `\nTests that begin occlusion query with a invalid query set that failed during creation.\n  `\n).\nparamsSubcasesOnly((u) => u.combine('querySetState', ['valid', 'invalid'])).\nfn((t) => {\n  const occlusionQuerySet = t.createQuerySetWithState(t.params.querySetState);\n\n  const encoder = t.createEncoder('render pass', { occlusionQuerySet });\n  encoder.encoder.beginOcclusionQuery(0);\n  encoder.encoder.endOcclusionQuery();\n  encoder.validateFinishAndSubmitGivenState(t.params.querySetState);\n});\n\ng.test('occlusion_query,query_index').\ndesc(\n  `\nTests that begin occlusion query with query index:\n- queryIndex {in, out of} range for GPUQuerySet\n  `\n).\nparamsSubcasesOnly((u) => u.combine('queryIndex', [0, 2])).\nfn((t) => {\n  const occlusionQuerySet = createQuerySetWithType(t, 'occlusion', 2);\n\n  const encoder = t.createEncoder('render pass', { occlusionQuerySet });\n  encoder.encoder.beginOcclusionQuery(t.params.queryIndex);\n  encoder.encoder.endOcclusionQuery();\n  encoder.validateFinish(t.params.queryIndex < 2);\n});\n\ng.test('writeTimestamp,query_type_and_index').\ndesc(\n  `\nTests that write timestamp to all types of query set on all possible encoders:\n- type {occlusion, timestamp}\n- queryIndex {in, out of} range for GPUQuerySet\n- x= {non-pass} encoder\n\nTODO: writeTimestamp is removed from the spec so it's skipped if it TypeErrors.\n`\n).\nparams((u) =>\nu.\ncombine('type', kQueryTypes).\nbeginSubcases().\nexpand('queryIndex', (p) => p.type === 'timestamp' ? [0, 2] : [0])\n).\nbeforeAllSubcases((t) => {\n  const { type } = t.params;\n\n  // writeTimestamp is only available for devices that enable the 'timestamp-query' feature.\n  const queryTypes = ['timestamp'];\n  if (type !== 'timestamp') {\n    queryTypes.push(type);\n  }\n\n  t.selectDeviceForQueryTypeOrSkipTestCase(queryTypes);\n}).\nfn((t) => {\n  const { type, queryIndex } = t.params;\n\n  const count = 2;\n  const querySet = createQuerySetWithType(t, type, count);\n\n  const encoder = t.createEncoder('non-pass');\n  try {\n\n    encoder.encoder.writeTimestamp(querySet, queryIndex);\n  } catch (ex) {\n    t.skipIf(ex instanceof TypeError, 'writeTimestamp is actually not available');\n  }\n  encoder.validateFinish(type === 'timestamp' && queryIndex < count);\n});\n\ng.test('writeTimestamp,invalid_query_set').\ndesc(\n  `\nTests that write timestamp to a invalid query set that failed during creation:\n- x= {non-pass} encoder\n\nTODO: writeTimestamp is removed from the spec so it's skipped if it TypeErrors.\n`\n).\nparamsSubcasesOnly((u) => u.combine('querySetState', ['valid', 'invalid'])).\nbeforeAllSubcases((t) => {\n  t.selectDeviceForQueryTypeOrSkipTestCase('timestamp');\n}).\nfn((t) => {\n  const { querySetState } = t.params;\n\n  const querySet = t.createQuerySetWithState(querySetState, {\n    type: 'timestamp',\n    count: 2\n  });\n\n  const encoder = t.createEncoder('non-pass');\n  try {\n\n    encoder.encoder.writeTimestamp(querySet, 0);\n  } catch (ex) {\n    t.skipIf(ex instanceof TypeError, 'writeTimestamp is actually not available');\n  }\n  encoder.validateFinish(querySetState !== 'invalid');\n});\n\ng.test('writeTimestamp,device_mismatch').\ndesc(\n  `Tests writeTimestamp cannot be called with a query set created from another device\n\n  TODO: writeTimestamp is removed from the spec so it's skipped if it TypeErrors.\n  `\n).\nparamsSubcasesOnly((u) => u.combine('mismatched', [true, false])).\nbeforeAllSubcases((t) => {\n  t.selectDeviceForQueryTypeOrSkipTestCase('timestamp');\n  t.selectMismatchedDeviceOrSkipTestCase('timestamp-query');\n}).\nfn((t) => {\n  const { mismatched } = t.params;\n  const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n  const querySet = t.trackForCleanup(\n    sourceDevice.createQuerySet({\n      type: 'timestamp',\n      count: 2\n    })\n  );\n\n  const encoder = t.createEncoder('non-pass');\n  try {\n\n    encoder.encoder.writeTimestamp(querySet, 0);\n  } catch (ex) {\n    t.skipIf(ex instanceof TypeError, 'writeTimestamp is actually not available');\n  }\n  encoder.validateFinish(!mismatched);\n});"],"mappings":"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","ignoreList":[]}