{"version":3,"file":"begin_end.spec.js","names":["description","makeTestGroup","ValidationTest","beginRenderPassWithQuerySet","createQuerySetWithType","g","test","desc","paramsSubcasesOnly","begin","end","fn","t","params","occlusionQuerySet","encoder","createEncoder","i","beginOcclusionQuery","j","endOcclusionQuery","validateFinishAndSubmit","calls","_valid","u","combine","querySet","globalThis","_TRAMPOLINE_","device","createCommandEncoder","pass","isOnSameRenderPass","otherPass","expectValidationError","finish","nest","unimplemented"],"sources":["../../../../../../src/webgpu/api/validation/encoding/queries/begin_end.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nValidation for encoding begin/endable queries.\n`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nimport { beginRenderPassWithQuerySet, createQuerySetWithType } from './common.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('occlusion_query,begin_end_balance').\ndesc(\n  `\nTests that begin/end occlusion queries mismatch on render pass:\n- begin n queries, then end m queries, for various n and m.\n  `\n).\nparamsSubcasesOnly([\n{ begin: 0, end: 1 },\n{ begin: 1, end: 0 },\n{ begin: 1, end: 1 }, // control case\n{ begin: 1, end: 2 },\n{ begin: 2, end: 1 }]\n).\nfn((t) => {\n  const { begin, end } = t.params;\n\n  const occlusionQuerySet = createQuerySetWithType(t, 'occlusion', 2);\n\n  const encoder = t.createEncoder('render pass', { occlusionQuerySet });\n  for (let i = 0; i < begin; i++) {\n    encoder.encoder.beginOcclusionQuery(i);\n  }\n  for (let j = 0; j < end; j++) {\n    encoder.encoder.endOcclusionQuery();\n  }\n  encoder.validateFinishAndSubmit(begin === end, true);\n});\n\ng.test('occlusion_query,begin_end_invalid_nesting').\ndesc(\n  `\nTests the invalid nesting of begin/end occlusion queries:\n- begin index 0, end, begin index 0, end (control case)\n- begin index 0, begin index 0, end, end\n- begin index 0, begin index 1, end, end\n  `\n).\nparamsSubcasesOnly([\n{ calls: [0, 'end', 1, 'end'], _valid: true }, // control case\n{ calls: [0, 0, 'end', 'end'], _valid: false },\n{ calls: [0, 1, 'end', 'end'], _valid: false }]\n).\nfn((t) => {\n  const { calls, _valid } = t.params;\n\n  const occlusionQuerySet = createQuerySetWithType(t, 'occlusion', 2);\n\n  const encoder = t.createEncoder('render pass', { occlusionQuerySet });\n  for (const i of calls) {\n    if (i !== 'end') {\n      encoder.encoder.beginOcclusionQuery(i);\n    } else {\n      encoder.encoder.endOcclusionQuery();\n    }\n  }\n  encoder.validateFinishAndSubmit(_valid, true);\n});\n\ng.test('occlusion_query,disjoint_queries_with_same_query_index').\ndesc(\n  `\nTests that two disjoint occlusion queries cannot be begun with same query index on same render pass:\n- begin index 0, end, begin index 0, end\n- call on {same (invalid), different (control case)} render pass\n  `\n).\nparamsSubcasesOnly((u) => u.combine('isOnSameRenderPass', [false, true])).\nfn((t) => {\n  const querySet = createQuerySetWithType(t, 'occlusion', 1);\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = beginRenderPassWithQuerySet(t, encoder, querySet);\n  pass.beginOcclusionQuery(0);\n  pass.endOcclusionQuery();\n\n  if (t.params.isOnSameRenderPass) {\n    pass.beginOcclusionQuery(0);\n    pass.endOcclusionQuery();\n    pass.end();\n  } else {\n    pass.end();\n    const otherPass = beginRenderPassWithQuerySet(t, encoder, querySet);\n    otherPass.beginOcclusionQuery(0);\n    otherPass.endOcclusionQuery();\n    otherPass.end();\n  }\n\n  t.expectValidationError(() => {\n    encoder.finish();\n  }, t.params.isOnSameRenderPass);\n});\n\ng.test('nesting').\ndesc(\n  `\nTests that whether it's allowed to nest various types of queries:\n- call {occlusion, timestamp} query in same type or other type.\n  `\n).\nparamsSubcasesOnly([\n{ begin: 'occlusion', nest: 'timestamp', end: 'occlusion', _valid: true },\n{ begin: 'occlusion', nest: 'occlusion', end: 'occlusion', _valid: false },\n{ begin: 'timestamp', nest: 'occlusion', end: 'occlusion', _valid: true }]\n).\nunimplemented();"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG;AAC9B;AACA,CAAC,CAAC,SAASC,aAAa,QAAQ,+CAA+C,CAC/E,SAASC,cAAc,QAAQ,0BAA0B;AAEzD,SAASC,2BAA2B,EAAEC,sBAAsB,QAAQ,aAAa;;AAEjF,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACC,cAAc,CAAC;;AAE9CG,CAAC,CAACC,IAAI,CAAC,mCAAmC,CAAC;AAC3CC,IAAI;EACF;AACF;AACA;AACA;AACA,CAAC;AACDC,kBAAkB,CAAC;AACnB,EAAEC,KAAK,EAAE,CAAC,EAAEC,GAAG,EAAE,CAAC,CAAC,CAAC;AACpB,EAAED,KAAK,EAAE,CAAC,EAAEC,GAAG,EAAE,CAAC,CAAC,CAAC;AACpB,EAAED,KAAK,EAAE,CAAC,EAAEC,GAAG,EAAE,CAAC,CAAC,CAAC,EAAE;AACtB,EAAED,KAAK,EAAE,CAAC,EAAEC,GAAG,EAAE,CAAC,CAAC,CAAC;AACpB,EAAED,KAAK,EAAE,CAAC,EAAEC,GAAG,EAAE,CAAC,CAAC,CAAC;AACpB,CAAC;AACDC,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAM,EAAEH,KAAK,EAAEC,GAAG,CAAC,CAAC,GAAGE,CAAC,CAACC,MAAM;;EAE/B,MAAMC,iBAAiB,GAAGV,sBAAsB,CAACQ,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;;EAEnE,MAAMG,OAAO,GAAGH,CAAC,CAACI,aAAa,CAAC,aAAa,EAAE,EAAEF,iBAAiB,CAAC,CAAC,CAAC;EACrE,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGR,KAAK,EAAEQ,CAAC,EAAE,EAAE;IAC9BF,OAAO,CAACA,OAAO,CAACG,mBAAmB,CAACD,CAAC,CAAC;EACxC;EACA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGT,GAAG,EAAES,CAAC,EAAE,EAAE;IAC5BJ,OAAO,CAACA,OAAO,CAACK,iBAAiB,CAAC,CAAC;EACrC;EACAL,OAAO,CAACM,uBAAuB,CAACZ,KAAK,KAAKC,GAAG,EAAE,IAAI,CAAC;AACtD,CAAC,CAAC;;AAEFL,CAAC,CAACC,IAAI,CAAC,2CAA2C,CAAC;AACnDC,IAAI;EACF;AACF;AACA;AACA;AACA;AACA;AACA,CAAC;AACDC,kBAAkB,CAAC;AACnB,EAAEc,KAAK,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,CAAC,EAAEC,MAAM,EAAE,IAAI,CAAC,CAAC,EAAE;AAC/C,EAAED,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,EAAEC,MAAM,EAAE,KAAK,CAAC,CAAC;AAC9C,EAAED,KAAK,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,KAAK,CAAC,EAAEC,MAAM,EAAE,KAAK,CAAC,CAAC;AAC9C,CAAC;AACDZ,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAM,EAAEU,KAAK,EAAEC,MAAM,CAAC,CAAC,GAAGX,CAAC,CAACC,MAAM;;EAElC,MAAMC,iBAAiB,GAAGV,sBAAsB,CAACQ,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;;EAEnE,MAAMG,OAAO,GAAGH,CAAC,CAACI,aAAa,CAAC,aAAa,EAAE,EAAEF,iBAAiB,CAAC,CAAC,CAAC;EACrE,KAAK,MAAMG,CAAC,IAAIK,KAAK,EAAE;IACrB,IAAIL,CAAC,KAAK,KAAK,EAAE;MACfF,OAAO,CAACA,OAAO,CAACG,mBAAmB,CAACD,CAAC,CAAC;IACxC,CAAC,MAAM;MACLF,OAAO,CAACA,OAAO,CAACK,iBAAiB,CAAC,CAAC;IACrC;EACF;EACAL,OAAO,CAACM,uBAAuB,CAACE,MAAM,EAAE,IAAI,CAAC;AAC/C,CAAC,CAAC;;AAEFlB,CAAC,CAACC,IAAI,CAAC,wDAAwD,CAAC;AAChEC,IAAI;EACF;AACF;AACA;AACA;AACA;AACA,CAAC;AACDC,kBAAkB,CAAC,CAACgB,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,oBAAoB,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;AACzEd,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAMc,QAAQ,GAAGtB,sBAAsB,CAACQ,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;;EAE1D,MAAMG,OAAO,GAAGY,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAEhB,CAAC,CAACiB,MAAM,EAAEjB,CAAC,CAACiB,MAAM,CAACC,oBAAoB,EAAE,EAAE,EAAE,MAAAH,UAAA,CAAAC,YAAA,yBAAMhB,CAAC,CAACiB,MAAM,EAARjB,CAAC,CAACiB,MAAM,CAAAC,oBAAA,YAARlB,CAAC,CAACiB,MAAM,CAACC,oBAAoB,GAAE,CAAC;EACnJ,MAAMC,IAAI,GAAG5B,2BAA2B,CAACS,CAAC,EAAEG,OAAO,EAAEW,QAAQ,CAAC;EAC9DK,IAAI,CAACb,mBAAmB,CAAC,CAAC,CAAC;EAC3Ba,IAAI,CAACX,iBAAiB,CAAC,CAAC;;EAExB,IAAIR,CAAC,CAACC,MAAM,CAACmB,kBAAkB,EAAE;IAC/BD,IAAI,CAACb,mBAAmB,CAAC,CAAC,CAAC;IAC3Ba,IAAI,CAACX,iBAAiB,CAAC,CAAC;IACxBW,IAAI,CAACrB,GAAG,CAAC,CAAC;EACZ,CAAC,MAAM;IACLqB,IAAI,CAACrB,GAAG,CAAC,CAAC;IACV,MAAMuB,SAAS,GAAG9B,2BAA2B,CAACS,CAAC,EAAEG,OAAO,EAAEW,QAAQ,CAAC;IACnEO,SAAS,CAACf,mBAAmB,CAAC,CAAC,CAAC;IAChCe,SAAS,CAACb,iBAAiB,CAAC,CAAC;IAC7Ba,SAAS,CAACvB,GAAG,CAAC,CAAC;EACjB;;EAEAE,CAAC,CAACsB,qBAAqB,CAAC,MAAM;IAC5BnB,OAAO,CAACoB,MAAM,CAAC,CAAC;EAClB,CAAC,EAAEvB,CAAC,CAACC,MAAM,CAACmB,kBAAkB,CAAC;AACjC,CAAC,CAAC;;AAEF3B,CAAC,CAACC,IAAI,CAAC,SAAS,CAAC;AACjBC,IAAI;EACF;AACF;AACA;AACA;AACA,CAAC;AACDC,kBAAkB,CAAC;AACnB,EAAEC,KAAK,EAAE,WAAW,EAAE2B,IAAI,EAAE,WAAW,EAAE1B,GAAG,EAAE,WAAW,EAAEa,MAAM,EAAE,IAAI,CAAC,CAAC;AACzE,EAAEd,KAAK,EAAE,WAAW,EAAE2B,IAAI,EAAE,WAAW,EAAE1B,GAAG,EAAE,WAAW,EAAEa,MAAM,EAAE,KAAK,CAAC,CAAC;AAC1E,EAAEd,KAAK,EAAE,WAAW,EAAE2B,IAAI,EAAE,WAAW,EAAE1B,GAAG,EAAE,WAAW,EAAEa,MAAM,EAAE,IAAI,CAAC,CAAC;AACzE,CAAC;AACDc,aAAa,CAAC,CAAC","ignoreList":[]}