{"version":3,"file":"encoder_state.spec.js","names":["description","makeTestGroup","objectEquals","ValidationTest","F","beginRenderPass","commandEncoder","view","colorAttachments","clearValue","r","g","b","a","loadOp","storeOp","createAttachmentTextureView","texture","createTextureTracked","format","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","RENDER_ATTACHMENT","createView","test","desc","params","u","combine","beginSubcases","unless","p","firstPassEnd","endPasses","includes","fn","t","pass0Type","pass1Type","encoder","globalThis","_TRAMPOLINE_","device","createCommandEncoder","firstPass","beginComputePass","end","secondPass","passes","index","valid","expectValidationError","finish","prePassType","IsEncoderFinished","callCmd","pass","insertDebugMarker","paramsSubcasesOnly","passType","endCount","i","filter","endTwice","secondEndInAnotherPass","pass1"],"sources":["../../../../../src/webgpu/api/validation/encoding/encoder_state.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTODO:\n- createCommandEncoder\n- non-pass command, or beginPass, during {render, compute} pass\n- {before (control case), after} finish()\n    - x= {finish(), ... all non-pass commands}\n- {before (control case), after} end()\n    - x= {render, compute} pass\n    - x= {finish(), ... all relevant pass commands}\n    - x= {\n        - before endPass (control case)\n        - after endPass (no pass open)\n        - after endPass+beginPass (a new pass of the same type is open)\n        - }\n    - should make whole encoder invalid\n- ?\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { objectEquals } from '../../../../common/util/util.js';\nimport { ValidationTest } from '../validation_test.js';\n\nclass F extends ValidationTest {\n  beginRenderPass(commandEncoder, view) {\n    return commandEncoder.beginRenderPass({\n      colorAttachments: [\n      {\n        view,\n        clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n\n    });\n  }\n\n  createAttachmentTextureView() {\n    const texture = this.createTextureTracked({\n      format: 'rgba8unorm',\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.RENDER_ATTACHMENT\n    });\n    return texture.createView();\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('pass_end_invalid_order').\ndesc(\n  `\n  Test that beginning a {compute,render} pass before ending the previous {compute,render} pass\n  causes an error.\n  `\n).\nparams((u) =>\nu.\ncombine('pass0Type', ['compute', 'render']).\ncombine('pass1Type', ['compute', 'render']).\nbeginSubcases().\ncombine('firstPassEnd', [true, false]).\ncombine('endPasses', [[], [0], [1], [0, 1], [1, 0]])\n// Don't end the first pass multiple times (that generates a validation error but doesn't invalidate the encoder)\n.unless((p) => p.firstPassEnd && p.endPasses.includes(0))\n).\nfn((t) => {\n  const { pass0Type, pass1Type, firstPassEnd, endPasses } = t.params;\n\n  const view = t.createAttachmentTextureView();\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n\n  const firstPass =\n  pass0Type === 'compute' ? encoder.beginComputePass() : t.beginRenderPass(encoder, view);\n\n  if (firstPassEnd) firstPass.end();\n\n  // Begin a second pass before ending the previous pass.\n  const secondPass =\n  pass1Type === 'compute' ? encoder.beginComputePass() : t.beginRenderPass(encoder, view);\n\n  const passes = [firstPass, secondPass];\n  for (const index of endPasses) {\n    passes[index].end();\n  }\n\n  // If {endPasses} is '[1]' and {firstPass} ends, it's a control case.\n  const valid = firstPassEnd && objectEquals(endPasses, [1]);\n\n  t.expectValidationError(() => {\n    encoder.finish();\n  }, !valid);\n});\n\ng.test('call_after_successful_finish').\ndesc(`Test that encoding command after a successful finish generates a validation error.`).\nparams((u) =>\nu.\ncombine('callCmd', ['beginComputePass', 'beginRenderPass', 'insertDebugMarker']).\nbeginSubcases().\ncombine('prePassType', ['compute', 'render', 'no-op']).\ncombine('IsEncoderFinished', [false, true])\n).\nfn((t) => {\n  const { prePassType, IsEncoderFinished, callCmd } = t.params;\n\n  const view = t.createAttachmentTextureView();\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n\n  if (prePassType !== 'no-op') {\n    const pass =\n    prePassType === 'compute' ? encoder.beginComputePass() : t.beginRenderPass(encoder, view);\n    pass.end();\n  }\n\n  if (IsEncoderFinished) {\n    encoder.finish();\n  }\n\n  switch (callCmd) {\n    case 'beginComputePass':\n      {\n        let pass;\n        t.expectValidationError(() => {\n          pass = encoder.beginComputePass();\n        }, IsEncoderFinished);\n        t.expectValidationError(() => {\n          pass.end();\n        }, IsEncoderFinished);\n      }\n      break;\n    case 'beginRenderPass':\n      {\n        let pass;\n        t.expectValidationError(() => {\n          pass = t.beginRenderPass(encoder, view);\n        }, IsEncoderFinished);\n        t.expectValidationError(() => {\n          pass.end();\n        }, IsEncoderFinished);\n      }\n      break;\n    case 'insertDebugMarker':\n      t.expectValidationError(() => {\n        encoder.insertDebugMarker('');\n      }, IsEncoderFinished);\n      break;\n  }\n\n  if (!IsEncoderFinished) {\n    encoder.finish();\n  }\n});\n\ng.test('pass_end_none').\ndesc(\n  `\n  Test that ending a {compute,render} pass without ending the passes generates a validation error.\n  `\n).\nparamsSubcasesOnly((u) => u.combine('passType', ['compute', 'render']).combine('endCount', [0, 1])).\nfn((t) => {\n  const { passType, endCount } = t.params;\n\n  const view = t.createAttachmentTextureView();\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n\n  const pass =\n  passType === 'compute' ? encoder.beginComputePass() : t.beginRenderPass(encoder, view);\n\n  for (let i = 0; i < endCount; ++i) {\n    pass.end();\n  }\n\n  t.expectValidationError(() => {\n    encoder.finish();\n  }, endCount === 0);\n});\n\ng.test('pass_end_twice,basic').\ndesc(\n  'Test that ending a {compute,render} pass twice generates a validation error. The parent encoder (command encoder) can be either locked or open.'\n).\nparamsSubcasesOnly((u) =>\nu //\n.combine('passType', ['compute', 'render'])\n// Simply end twice, the parent encoder is open at that time. If the second pass end is in the middle of another pass, the parent encoder is locked. It should generate a validation error in either situation.\n.combine('endTwice', [false, true]).\ncombine('secondEndInAnotherPass', [false, 'compute', 'render']).\nfilter((p) => p.endTwice || !p.secondEndInAnotherPass)\n).\nfn((t) => {\n  const { passType, endTwice, secondEndInAnotherPass } = t.params;\n\n  const view = t.createAttachmentTextureView();\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n\n  const pass =\n  passType === 'compute' ? encoder.beginComputePass() : t.beginRenderPass(encoder, view);\n\n  pass.end();\n\n  if (secondEndInAnotherPass) {\n    const pass1 =\n    secondEndInAnotherPass === 'compute' ?\n    encoder.beginComputePass() :\n    t.beginRenderPass(encoder, view);\n\n    t.expectValidationError(() => {\n      pass.end();\n    });\n\n    pass1.end();\n  } else {\n    if (endTwice) {\n      t.expectValidationError(() => {\n        pass.end();\n      });\n    }\n  }\n\n  encoder.finish();\n});\n\ng.test('pass_end_twice,render_pass_invalid').\ndesc(\n  'Test that ending a render pass twice generates a validation error even if the pass is invalid.'\n).\nparamsSubcasesOnly((u) => u.combine('endTwice', [false, true])).\nfn((t) => {\n  const { endTwice } = t.params;\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  // Pass encoder creation will fail because both color and depth/stencil attachments are empty.\n  const pass = encoder.beginRenderPass({\n    colorAttachments: []\n  });\n\n  pass.end();\n\n  if (endTwice) {\n    t.expectValidationError(() => {\n      pass.end();\n    });\n  }\n\n  t.expectValidationError(() => {\n    encoder.finish();\n  });\n});"],"mappings":"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","ignoreList":[]}