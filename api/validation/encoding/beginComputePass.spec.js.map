{"version":3,"file":"beginComputePass.spec.js","names":["description","makeTestGroup","kQueryTypes","ValidationTest","F","tryComputePass","success","descriptor","encoder","globalThis","_TRAMPOLINE_","device","createCommandEncoder","computePass","beginComputePass","end","expectValidationError","finish","g","test","desc","params","u","combine","beforeAllSubcases","t","selectDeviceForQueryTypeOrSkipTestCase","queryType","fn","isValid","timestampWrites","querySet","createQuerySetTracked","type","count","beginningOfPassWriteIndex","endOfPassWriteIndex","selectDeviceOrSkipTestCase","querySetState","createQuerySetWithState","paramsSubcasesOnly","undefined","querySetCount","selectMismatchedDeviceOrSkipTestCase","mismatched","sourceDevice","mismatchedDevice","timestampQuerySet","trackForCleanup","createQuerySet"],"sources":["../../../../../src/webgpu/api/validation/encoding/beginComputePass.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTests for validation in beginComputePass and GPUComputePassDescriptor as its optional descriptor.\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kQueryTypes } from '../../../capability_info.js';\nimport { ValidationTest } from '../validation_test.js';\n\nclass F extends ValidationTest {\n  tryComputePass(success, descriptor) {\n    const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", this.device, this.device.createCommandEncoder, [], () => this.device.createCommandEncoder());\n    const computePass = encoder.beginComputePass(descriptor);\n    computePass.end();\n\n    this.expectValidationError(() => {\n      encoder.finish();\n    }, !success);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('timestampWrites,query_set_type').\ndesc(\n  `\n  Test that all entries of the timestampWrites must have type 'timestamp'. If all query types are\n  not 'timestamp' in GPUComputePassDescriptor, a validation error should be generated.\n  `\n).\nparams((u) =>\nu //\n.combine('queryType', kQueryTypes)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceForQueryTypeOrSkipTestCase(['timestamp', t.params.queryType]);\n}).\nfn((t) => {\n  const { queryType } = t.params;\n\n  const isValid = queryType === 'timestamp';\n\n  const timestampWrites = {\n    querySet: t.createQuerySetTracked({ type: queryType, count: 2 }),\n    beginningOfPassWriteIndex: 0,\n    endOfPassWriteIndex: 1\n  };\n\n  const descriptor = {\n    timestampWrites\n  };\n\n  t.tryComputePass(isValid, descriptor);\n});\n\ng.test('timestampWrites,invalid_query_set').\ndesc(`Tests that timestampWrite that has an invalid query set generates a validation error.`).\nparams((u) => u.combine('querySetState', ['valid', 'invalid'])).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase(['timestamp-query']);\n}).\nfn((t) => {\n  const { querySetState } = t.params;\n\n  const querySet = t.createQuerySetWithState(querySetState, {\n    type: 'timestamp',\n    count: 1\n  });\n\n  const timestampWrites = {\n    querySet,\n    beginningOfPassWriteIndex: 0\n  };\n\n  const descriptor = {\n    timestampWrites\n  };\n\n  t.tryComputePass(querySetState === 'valid', descriptor);\n});\n\ng.test('timestampWrites,query_index').\ndesc(\n  `Test that querySet.count should be greater than timestampWrite.queryIndex, and that the\n         query indexes are unique.`\n).\nparamsSubcasesOnly((u) =>\nu //\n.combine('beginningOfPassWriteIndex', [undefined, 0, 1, 2, 3]).\ncombine('endOfPassWriteIndex', [undefined, 0, 1, 2, 3])\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase(['timestamp-query']);\n}).\nfn((t) => {\n  const { beginningOfPassWriteIndex, endOfPassWriteIndex } = t.params;\n\n  const querySetCount = 2;\n\n  const timestampWrites = {\n    querySet: t.createQuerySetTracked({ type: 'timestamp', count: querySetCount }),\n    beginningOfPassWriteIndex,\n    endOfPassWriteIndex\n  };\n\n  const isValid =\n  beginningOfPassWriteIndex !== endOfPassWriteIndex && (\n  beginningOfPassWriteIndex === undefined || beginningOfPassWriteIndex < querySetCount) && (\n  endOfPassWriteIndex === undefined || endOfPassWriteIndex < querySetCount);\n\n  const descriptor = {\n    timestampWrites\n  };\n\n  t.tryComputePass(isValid, descriptor);\n});\n\ng.test('timestamp_query_set,device_mismatch').\ndesc(\n  `\n  Tests beginComputePass cannot be called with a timestamp query set created from another device.\n  `\n).\nparamsSubcasesOnly((u) => u.combine('mismatched', [true, false])).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase(['timestamp-query']);\n  t.selectMismatchedDeviceOrSkipTestCase('timestamp-query');\n}).\nfn((t) => {\n  const { mismatched } = t.params;\n  const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n  const timestampQuerySet = t.trackForCleanup(\n    sourceDevice.createQuerySet({\n      type: 'timestamp',\n      count: 1\n    })\n  );\n\n  const timestampWrites = {\n    querySet: timestampQuerySet,\n    beginningOfPassWriteIndex: 0\n  };\n\n  const descriptor = {\n    timestampWrites\n  };\n\n  t.tryComputePass(!mismatched, descriptor);\n});"],"mappings":"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","ignoreList":[]}