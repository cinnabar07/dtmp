{"version":3,"file":"createBindGroupLayout.spec.js","names":["description","kUnitCaseParamsBuilder","makeTestGroup","kShaderStages","kShaderStageCombinations","kStorageTextureAccessValues","kTextureSampleTypes","kTextureViewDimensions","allBindingEntries","bindingTypeInfo","bufferBindingTypeInfo","kBufferBindingTypes","kAllTextureFormats","kTextureFormatInfo","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","desc","paramsSubcasesOnly","bindings","_valid","fn","t","params","entries","binding","push","visibility","GPUShaderStage","COMPUTE","buffer","type","expectValidationError","device","createBindGroupLayout","u","combine","bindingVariant","limits","maxBindingsPerBindGroup","success","beginSubcases","entry","info","validStages","shaderStage","VERTEX","undefined","access","appliedAccess","storageTexture","format","viewDimension","sampleType","texture","multisampled","extraDynamicBuffers","staticBuffers","limitName","perPipelineLimitClass","maxDynamicLimit","bufferCount","getDefaultLimit","dynamicBufferCount","perStageLimit","perStageLimitClass","maxLimit","i","hasDynamicOffset","length","pickExtraBindingTypesForPerStage","extraTypeSame","extra","extraInfo","class","sampler","kMaxResourcesCases","filter","p","maxedEntry","maxedVisibility","expand","extraEntry","extraVisibility","maxedTypeInfo","maxedCount","extraTypeInfo","maxResourceBindings","goodDescriptor","newDescriptor","newBindingCountsTowardSamePerStageLimit","goodLayout","createPipelineLayout","bindGroupLayouts","extraLayout","beforeAllSubcases","selectDeviceForTextureFormatOrSkipTestCase","skipIfTextureFormatNotUsableAsStorageTexture","color","storage","readWriteStorage"],"sources":["../../../../src/webgpu/api/validation/createBindGroupLayout.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\ncreateBindGroupLayout validation tests.\n\nTODO: make sure tests are complete.\n`;import { kUnitCaseParamsBuilder } from '../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport {\n  kShaderStages,\n  kShaderStageCombinations,\n  kStorageTextureAccessValues,\n  kTextureSampleTypes,\n  kTextureViewDimensions,\n  allBindingEntries,\n  bindingTypeInfo,\n  bufferBindingTypeInfo,\n  kBufferBindingTypes } from\n\n'../../capability_info.js';\nimport { kAllTextureFormats, kTextureFormatInfo } from '../../format_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone(descriptor) {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('duplicate_bindings').\ndesc('Test that uniqueness of binding numbers across entries is enforced.').\nparamsSubcasesOnly([\n{ bindings: [0, 1], _valid: true },\n{ bindings: [0, 0], _valid: false }]\n).\nfn((t) => {\n  const { bindings, _valid } = t.params;\n  const entries = [];\n\n  for (const binding of bindings) {\n    entries.push({\n      binding,\n      visibility: GPUShaderStage.COMPUTE,\n      buffer: { type: 'storage' }\n    });\n  }\n\n  t.expectValidationError(() => {\n    t.device.createBindGroupLayout({\n      entries\n    });\n  }, !_valid);\n});\n\ng.test('maximum_binding_limit').\ndesc(\n  `\n  Test that a validation error is generated if the binding number exceeds the maximum binding limit.\n\n  TODO: Need to also test with higher limits enabled on the device, once we have a way to do that.\n  `\n).\nparamsSubcasesOnly((u) =>\nu.combine('bindingVariant', [1, 4, 8, 256, 'default', 'default-minus-one'])\n).\nfn((t) => {\n  const { bindingVariant } = t.params;\n  const entries = [];\n\n  const binding =\n  bindingVariant === 'default' ?\n  t.device.limits.maxBindingsPerBindGroup :\n  bindingVariant === 'default-minus-one' ?\n  t.device.limits.maxBindingsPerBindGroup - 1 :\n  bindingVariant;\n\n  entries.push({\n    binding,\n    visibility: GPUShaderStage.COMPUTE,\n    buffer: { type: 'storage' }\n  });\n\n  const success = binding < t.device.limits.maxBindingsPerBindGroup;\n\n  t.expectValidationError(() => {\n    t.device.createBindGroupLayout({\n      entries\n    });\n  }, !success);\n});\n\ng.test('visibility').\ndesc(\n  `\n    Test that only the appropriate combinations of visibilities are allowed for each resource type.\n    - Test each possible combination of shader stage visibilities.\n    - Test each type of bind group resource.`\n).\nparams((u) =>\nu.\ncombine('visibility', kShaderStageCombinations).\nbeginSubcases().\ncombine('entry', allBindingEntries(false))\n).\nfn((t) => {\n  const { visibility, entry } = t.params;\n  const info = bindingTypeInfo(entry);\n\n  const success = (visibility & ~info.validStages) === 0;\n\n  t.expectValidationError(() => {\n    t.device.createBindGroupLayout({\n      entries: [{ binding: 0, visibility, ...entry }]\n    });\n  }, !success);\n});\n\ng.test('visibility,VERTEX_shader_stage_buffer_type').\ndesc(\n  `\n  Test that a validation error is generated if the buffer type is 'storage' when the\n  visibility of the entry includes VERTEX.\n  `\n).\nparams((u) =>\nu //\n.combine('shaderStage', kShaderStageCombinations).\nbeginSubcases().\ncombine('type', kBufferBindingTypes)\n).\nfn((t) => {\n  const { shaderStage, type } = t.params;\n\n  const success = !(type === 'storage' && shaderStage & GPUShaderStage.VERTEX);\n\n  t.expectValidationError(() => {\n    t.device.createBindGroupLayout({\n      entries: [\n      {\n        binding: 0,\n        visibility: shaderStage,\n        buffer: { type }\n      }]\n\n    });\n  }, !success);\n});\n\ng.test('visibility,VERTEX_shader_stage_storage_texture_access').\ndesc(\n  `\n  Test that a validation error is generated if the access value is 'write-only' when the\n  visibility of the entry includes VERTEX.\n  `\n).\nparams((u) =>\nu //\n.combine('shaderStage', kShaderStageCombinations).\nbeginSubcases().\ncombine('access', [undefined, ...kStorageTextureAccessValues])\n).\nfn((t) => {\n  const { shaderStage, access } = t.params;\n\n  const appliedAccess = access ?? 'write-only';\n  const success = !(\n  // If visibility includes VERETX, storageTexture.access must be \"read-only\"\n  shaderStage & GPUShaderStage.VERTEX && appliedAccess !== 'read-only');\n\n\n  t.expectValidationError(() => {\n    t.device.createBindGroupLayout({\n      entries: [\n      {\n        binding: 0,\n        visibility: shaderStage,\n        storageTexture: { access, format: 'r32uint' }\n      }]\n\n    });\n  }, !success);\n});\n\ng.test('multisampled_validation').\ndesc(\n  `\n  Test that multisampling is only allowed if view dimensions is \"2d\" and the sampleType is not\n  \"float\".\n  `\n).\nparams((u) =>\nu //\n.combine('viewDimension', [undefined, ...kTextureViewDimensions]).\nbeginSubcases().\ncombine('sampleType', [undefined, ...kTextureSampleTypes])\n).\nfn((t) => {\n  const { viewDimension, sampleType } = t.params;\n\n  const success =\n  (viewDimension === '2d' || viewDimension === undefined) &&\n  (sampleType ?? 'float') !== 'float';\n\n  t.expectValidationError(() => {\n    t.device.createBindGroupLayout({\n      entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE,\n        texture: { multisampled: true, viewDimension, sampleType }\n      }]\n\n    });\n  }, !success);\n});\n\ng.test('max_dynamic_buffers').\ndesc(\n  `\n    Test that limits on the maximum number of dynamic buffers are enforced.\n    - Test creation of a bind group layout using the maximum number of dynamic buffers works.\n    - Test creation of a bind group layout using the maximum number of dynamic buffers + 1 fails.\n    - TODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n).\nparams((u) =>\nu.\ncombine('type', kBufferBindingTypes).\nbeginSubcases().\ncombine('extraDynamicBuffers', [0, 1]).\ncombine('staticBuffers', [0, 1])\n).\nfn((t) => {\n  const { type, extraDynamicBuffers, staticBuffers } = t.params;\n  const info = bufferBindingTypeInfo({ type });\n\n  const limitName = info.perPipelineLimitClass.maxDynamicLimit;\n  const bufferCount = limitName ? t.getDefaultLimit(limitName) : 0;\n  const dynamicBufferCount = bufferCount + extraDynamicBuffers;\n  const perStageLimit = t.getDefaultLimit(info.perStageLimitClass.maxLimit);\n\n  const entries = [];\n  for (let i = 0; i < dynamicBufferCount; i++) {\n    entries.push({\n      binding: i,\n      visibility: GPUShaderStage.COMPUTE,\n      buffer: { type, hasDynamicOffset: true }\n    });\n  }\n\n  for (let i = dynamicBufferCount; i < dynamicBufferCount + staticBuffers; i++) {\n    entries.push({\n      binding: i,\n      visibility: GPUShaderStage.COMPUTE,\n      buffer: { type, hasDynamicOffset: false }\n    });\n  }\n\n  const descriptor = {\n    entries\n  };\n\n  t.expectValidationError(\n    () => {\n      t.device.createBindGroupLayout(descriptor);\n    },\n    extraDynamicBuffers > 0 || entries.length > perStageLimit\n  );\n});\n\n/**\n * One bind group layout will be filled with kPerStageBindingLimit[...] of the type |type|.\n * For each item in the array returned here, a case will be generated which tests a pipeline\n * layout with one extra bind group layout with one extra binding. That extra binding will have:\n *\n *   - If extraTypeSame, any of the binding types which counts toward the same limit as |type|.\n *     (i.e. 'storage-buffer' <-> 'readonly-storage-buffer').\n *   - Otherwise, an arbitrary other type.\n */\nfunction* pickExtraBindingTypesForPerStage(entry, extraTypeSame) {\n  if (extraTypeSame) {\n    const info = bindingTypeInfo(entry);\n    for (const extra of allBindingEntries(false)) {\n      const extraInfo = bindingTypeInfo(extra);\n      if (info.perStageLimitClass.class === extraInfo.perStageLimitClass.class) {\n        yield extra;\n      }\n    }\n  } else {\n    yield entry.sampler ? { texture: {} } : { sampler: {} };\n  }\n}\n\nconst kMaxResourcesCases = kUnitCaseParamsBuilder.\ncombine('maxedEntry', allBindingEntries(false)).\nbeginSubcases().\ncombine('maxedVisibility', kShaderStages).\nfilter((p) => (bindingTypeInfo(p.maxedEntry).validStages & p.maxedVisibility) !== 0).\nexpand('extraEntry', (p) => [\n...pickExtraBindingTypesForPerStage(p.maxedEntry, true),\n...pickExtraBindingTypesForPerStage(p.maxedEntry, false)]\n).\ncombine('extraVisibility', kShaderStages).\nfilter((p) => (bindingTypeInfo(p.extraEntry).validStages & p.extraVisibility) !== 0);\n\n// Should never fail unless limitInfo.maxBindingsPerBindGroup.default is exceeded, because the validation for\n// resources-of-type-per-stage is in pipeline layout creation.\ng.test('max_resources_per_stage,in_bind_group_layout').\ndesc(\n  `\n    Test that the maximum number of bindings of a given type per-stage cannot be exceeded in a\n    single bind group layout.\n    - Test each binding type.\n    - Test that creation of a bind group layout using the maximum number of bindings works.\n    - Test that creation of a bind group layout using the maximum number of bindings + 1 fails.\n    - TODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.`\n).\nparams(kMaxResourcesCases).\nfn((t) => {\n  const { maxedEntry, extraEntry, maxedVisibility, extraVisibility } = t.params;\n  const maxedTypeInfo = bindingTypeInfo(maxedEntry);\n  const maxedCount = t.getDefaultLimit(maxedTypeInfo.perStageLimitClass.maxLimit);\n  const extraTypeInfo = bindingTypeInfo(extraEntry);\n\n  const maxResourceBindings = [];\n  for (let i = 0; i < maxedCount; i++) {\n    maxResourceBindings.push({\n      binding: i,\n      visibility: maxedVisibility,\n      ...maxedEntry\n    });\n  }\n\n  const goodDescriptor = { entries: maxResourceBindings };\n\n  // Control\n  t.device.createBindGroupLayout(goodDescriptor);\n\n  // Add an entry counting towards the same limit. It should produce a validation error.\n  const newDescriptor = clone(goodDescriptor);\n  newDescriptor.entries.push({\n    binding: maxedCount,\n    visibility: extraVisibility,\n    ...extraEntry\n  });\n\n  const newBindingCountsTowardSamePerStageLimit =\n  (maxedVisibility & extraVisibility) !== 0 &&\n  maxedTypeInfo.perStageLimitClass.class === extraTypeInfo.perStageLimitClass.class;\n\n  t.expectValidationError(() => {\n    t.device.createBindGroupLayout(newDescriptor);\n  }, newBindingCountsTowardSamePerStageLimit);\n});\n\n// One pipeline layout can have a maximum number of each type of binding *per stage* (which is\n// different for each type). Test that the max works, then add one more binding of same-or-different\n// type and same-or-different visibility.\ng.test('max_resources_per_stage,in_pipeline_layout').\ndesc(\n  `\n    Test that the maximum number of bindings of a given type per-stage cannot be exceeded across\n    multiple bind group layouts when creating a pipeline layout.\n    - Test each binding type.\n    - Test that creation of a pipeline using the maximum number of bindings works.\n    - Test that creation of a pipeline using the maximum number of bindings + 1 fails.\n  `\n).\nparams(kMaxResourcesCases).\nfn((t) => {\n  const { maxedEntry, extraEntry, maxedVisibility, extraVisibility } = t.params;\n  const maxedTypeInfo = bindingTypeInfo(maxedEntry);\n  const maxedCount = t.getDefaultLimit(maxedTypeInfo.perStageLimitClass.maxLimit);\n  const extraTypeInfo = bindingTypeInfo(extraEntry);\n\n  const maxResourceBindings = [];\n  for (let i = 0; i < maxedCount; i++) {\n    maxResourceBindings.push({\n      binding: i,\n      visibility: maxedVisibility,\n      ...maxedEntry\n    });\n  }\n\n  const goodLayout = t.device.createBindGroupLayout({ entries: maxResourceBindings });\n\n  // Control\n  t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout] });\n\n  const extraLayout = t.device.createBindGroupLayout({\n    entries: [\n    {\n      binding: 0,\n      visibility: extraVisibility,\n      ...extraEntry\n    }]\n\n  });\n\n  // Some binding types use the same limit, e.g. 'storage-buffer' and 'readonly-storage-buffer'.\n  const newBindingCountsTowardSamePerStageLimit =\n  (maxedVisibility & extraVisibility) !== 0 &&\n  maxedTypeInfo.perStageLimitClass.class === extraTypeInfo.perStageLimitClass.class;\n\n  t.expectValidationError(() => {\n    t.device.createPipelineLayout({ bindGroupLayouts: [goodLayout, extraLayout] });\n  }, newBindingCountsTowardSamePerStageLimit);\n});\n\ng.test('storage_texture,layout_dimension').\ndesc(\n  `\n  Test that viewDimension is not cube or cube-array if storageTextureLayout is not undefined.\n  `\n).\nparams((u) =>\nu //\n.combine('viewDimension', [undefined, ...kTextureViewDimensions])\n).\nfn((t) => {\n  const { viewDimension } = t.params;\n\n  const success = viewDimension !== 'cube' && viewDimension !== `cube-array`;\n\n  t.expectValidationError(() => {\n    t.device.createBindGroupLayout({\n      entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE,\n        storageTexture: { format: 'rgba8unorm', viewDimension }\n      }]\n\n    });\n  }, !success);\n});\n\ng.test('storage_texture,formats').\ndesc(\n  `\n  Test that a validation error is generated if the format doesn't support the storage usage. A\n  validation error is also generated if the format doesn't support the 'read-write' storage access\n  when the storage access is 'read-write'.\n  `\n).\nparams((u) =>\nu //\n.combine('format', kAllTextureFormats) //\n.combine('access', kStorageTextureAccessValues)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format);\n}).\nfn((t) => {\n  const { format, access } = t.params;\n  const info = kTextureFormatInfo[format];\n\n  const success =\n  info.color?.storage && !(access === 'read-write' && !info.color?.readWriteStorage);\n\n  t.expectValidationError(() => {\n    t.device.createBindGroupLayout({\n      entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.COMPUTE,\n        storageTexture: { format, access }\n      }]\n\n    });\n  }, !success);\n});"],"mappings":"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","ignoreList":[]}