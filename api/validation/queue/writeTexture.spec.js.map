{"version":3,"file":"writeTexture.spec.js","names":["description","makeTestGroup","GPUConst","kResourceStates","ValidationTest","g","test","desc","params","u","combine","fn","t","textureState","texture","createTextureWithState","data","Uint8Array","size","isValid","expectValidationError","device","queue","writeTexture","paramsSubcasesOnly","usage","TextureUsage","COPY_DST","STORAGE_BINDING","COPY_SRC","createTextureTracked","width","height","format","sampleCount","GPUTextureUsage","RENDER_ATTACHMENT","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","undefined","mismatched","sourceDevice","mismatchedDevice","trackForCleanup","createTexture"],"sources":["../../../../../src/webgpu/api/validation/queue/writeTexture.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `Tests writeTexture validation.`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUConst } from '../../../constants.js';\nimport { kResourceStates } from '../../../gpu_test.js';\nimport { ValidationTest } from '../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('texture_state').\ndesc(\n  `\n  Test that the texture used for GPUQueue.writeTexture() must be valid. Tests calling writeTexture\n  with {valid, invalid, destroyed} texture.\n  `\n).\nparams((u) => u.combine('textureState', kResourceStates)).\nfn((t) => {\n  const { textureState } = t.params;\n  const texture = t.createTextureWithState(textureState);\n  const data = new Uint8Array(16);\n  const size = [1, 1];\n\n  const isValid = textureState === 'valid';\n\n  t.expectValidationError(() => {\n    t.device.queue.writeTexture({ texture }, data, {}, size);\n  }, !isValid);\n});\n\ng.test('usages').\ndesc(\n  `\n  Tests calling writeTexture with the texture missed COPY_DST usage.\n    - texture {with, without} COPY DST usage\n  `\n).\nparamsSubcasesOnly([\n{ usage: GPUConst.TextureUsage.COPY_DST }, // control case\n{ usage: GPUConst.TextureUsage.STORAGE_BINDING },\n{ usage: GPUConst.TextureUsage.STORAGE_BINDING | GPUConst.TextureUsage.COPY_SRC },\n{ usage: GPUConst.TextureUsage.STORAGE_BINDING | GPUConst.TextureUsage.COPY_DST }]\n).\nfn((t) => {\n  const { usage } = t.params;\n  const texture = t.createTextureTracked({\n    size: { width: 16, height: 16 },\n    usage,\n    format: 'rgba8unorm'\n  });\n  const data = new Uint8Array(16);\n  const size = [1, 1];\n\n  const isValid = usage & GPUConst.TextureUsage.COPY_DST ? true : false;\n  t.expectValidationError(() => {\n    t.device.queue.writeTexture({ texture }, data, {}, size);\n  }, !isValid);\n});\n\ng.test('sample_count').\ndesc(\n  `\n  Test that the texture sample count. Check that a validation error is generated if sample count is\n  not 1.\n  `\n).\nparams((u) => u.combine('sampleCount', [1, 4])).\nfn((t) => {\n  const { sampleCount } = t.params;\n  const texture = t.createTextureTracked({\n    size: { width: 16, height: 16 },\n    sampleCount,\n    format: 'bgra8unorm',\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT\n  });\n\n  const data = new Uint8Array(16);\n  const size = [1, 1];\n\n  const isValid = sampleCount === 1;\n\n  t.expectValidationError(() => {\n    t.device.queue.writeTexture({ texture }, data, {}, size);\n  }, !isValid);\n});\n\ng.test('texture,device_mismatch').\ndesc('Tests writeTexture cannot be called with a texture created from another device.').\nparamsSubcasesOnly((u) => u.combine('mismatched', [true, false])).\nbeforeAllSubcases((t) => {\n  t.selectMismatchedDeviceOrSkipTestCase(undefined);\n}).\nfn((t) => {\n  const { mismatched } = t.params;\n  const sourceDevice = mismatched ? t.mismatchedDevice : t.device;\n\n  const texture = t.trackForCleanup(\n    sourceDevice.createTexture({\n      size: { width: 16, height: 16 },\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT\n    })\n  );\n\n  const data = new Uint8Array(16);\n  const size = [1, 1];\n\n  t.expectValidationError(() => {\n    t.device.queue.writeTexture({ texture }, data, {}, size);\n  }, mismatched);\n});"],"mappings":"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","ignoreList":[]}