{"version":3,"file":"query_types.spec.js","names":["description","makeTestGroup","ValidationTest","g","test","desc","params","u","combine","beforeAllSubcases","t","featureContainsTimestampQuery","requiredFeatures","push","selectDeviceOrSkipTestCase","fn","type","count","shouldException","shouldThrow","createQuerySetTracked","querySet","expected","encoder","createEncoder","writeTimestamp","finish","beginComputePass","timestampWrites","beginningOfPassWriteIndex","endOfPassWriteIndex","end","expectValidationError","view","createTextureTracked","size","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","createView","beginRenderPass","colorAttachments","loadOp","storeOp"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/features/query_types.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTests for capability checking for features enabling optional query types.\n`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { ValidationTest } from '../../validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('createQuerySet').\ndesc(\n  `\n  Tests that creating a query set throws a type error exception if the features don't contain\n  'timestamp-query'.\n    - createQuerySet\n      - type {occlusion, timestamp}\n      - x= timestamp query {enable, disable}\n  `\n).\nparams((u) =>\nu.\ncombine('type', ['occlusion', 'timestamp']).\ncombine('featureContainsTimestampQuery', [false, true])\n).\nbeforeAllSubcases((t) => {\n  const { featureContainsTimestampQuery } = t.params;\n\n  const requiredFeatures = [];\n  if (featureContainsTimestampQuery) {\n    requiredFeatures.push('timestamp-query');\n  }\n\n  t.selectDeviceOrSkipTestCase({ requiredFeatures });\n}).\nfn((t) => {\n  const { type, featureContainsTimestampQuery } = t.params;\n\n  const count = 1;\n  const shouldException = type === 'timestamp' && !featureContainsTimestampQuery;\n\n  t.shouldThrow(shouldException ? 'TypeError' : false, () => {\n    t.createQuerySetTracked({ type, count });\n  });\n});\n\ng.test('timestamp').\ndesc(\n  `\n  Tests that writing a timestamp throws a type error exception if the features don't contain\n  'timestamp-query'.\n\n  TODO: writeTimestamp test is disabled since it's removed from the spec for now.\n  `\n).\nparams((u) => u.combine('featureContainsTimestampQuery', [false, true])).\nbeforeAllSubcases((t) => {\n  const { featureContainsTimestampQuery } = t.params;\n\n  const requiredFeatures = [];\n  if (featureContainsTimestampQuery) {\n    requiredFeatures.push('timestamp-query');\n  }\n\n  t.selectDeviceOrSkipTestCase({ requiredFeatures });\n}).\nfn((t) => {\n  const { featureContainsTimestampQuery } = t.params;\n\n  const querySet = t.createQuerySetTracked({\n    type: featureContainsTimestampQuery ? 'timestamp' : 'occlusion',\n    count: 2\n  });\n\n  {\n    let expected = featureContainsTimestampQuery ? false : 'TypeError';\n    // writeTimestamp no longer exists and this should always TypeError.\n    expected = 'TypeError';\n\n    const encoder = t.createEncoder('non-pass');\n    t.shouldThrow(expected, () => {\n\n      encoder.encoder.writeTimestamp(querySet, 0);\n    });\n    encoder.finish();\n  }\n\n  {\n    const encoder = t.createEncoder('non-pass');\n    encoder.encoder.\n    beginComputePass({\n      timestampWrites: { querySet, beginningOfPassWriteIndex: 0, endOfPassWriteIndex: 1 }\n    }).\n    end();\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !featureContainsTimestampQuery);\n  }\n\n  {\n    const encoder = t.createEncoder('non-pass');\n    const view = t.\n    createTextureTracked({\n      size: [16, 16, 1],\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT\n    }).\n    createView();\n    encoder.encoder.\n    beginRenderPass({\n      colorAttachments: [{ view, loadOp: 'clear', storeOp: 'discard' }],\n      timestampWrites: { querySet, beginningOfPassWriteIndex: 0, endOfPassWriteIndex: 1 }\n    }).\n    end();\n    t.expectValidationError(() => {\n      encoder.finish();\n    }, !featureContainsTimestampQuery);\n  }\n});"],"mappings":"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","ignoreList":[]}