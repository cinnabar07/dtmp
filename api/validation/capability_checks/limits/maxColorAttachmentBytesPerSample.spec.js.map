{"version":3,"file":"maxColorAttachmentBytesPerSample.spec.js","names":["assert","kTextureSampleCounts","kTextureFormatInfo","align","kMaximumLimitBaseParams","makeLimitTestGroup","kFormatsToUseBySize","kInterleaveFormats","getAttachments","interleaveFormat","testValue","bytesPerSample","targets","addTexture","format","info","newBytesPerSample","colorRender","alignment","byteCost","push","writeMask","getDescription","actualLimit","sampleCount","offset","map","s","padEnd","toString","padStart","join","getPipelineDescriptor","device","code","module","createShaderModule","pipelineDescriptor","layout","vertex","entryPoint","fragment","depthStencil","depthWriteEnabled","depthCompare","multisample","count","createTextures","t","createTextureTracked","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","kExtraLimits","maxColorAttachments","limit","g","description","test","desc","params","combine","fn","limitTest","testValueName","async","testDeviceWithRequestedMaximumLimits","shouldError","result","numTargets","length","limits","testCreateRenderPipeline","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","textures","pass","beginRenderPass","colorAttachments","texture","view","createView","loadOp","storeOp","end","expectValidationError","finish","createRenderBundleEncoder","colorFormats"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxColorAttachmentBytesPerSample.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { assert } from '../../../../../common/util/util.js';import { kTextureSampleCounts } from '../../../../capability_info.js';import { kTextureFormatInfo } from '../../../../format_info.js';\nimport { align } from '../../../../util/math.js';\n\nimport {\n  kMaximumLimitBaseParams,\n\n\n  makeLimitTestGroup } from\n'./limit_utils.js';\n\nconst kFormatsToUseBySize = [\n'rgba32float',\n'rgba16float',\n'rgba8unorm',\n'rg8unorm',\n'r8unorm'];\n\n\nconst kInterleaveFormats = [\n'rgba16float',\n'rg16float',\n'rgba8unorm',\n'rg8unorm',\n'r8unorm'];\n\n\nfunction getAttachments(interleaveFormat, testValue) {\n  let bytesPerSample = 0;\n  const targets = [];\n\n  const addTexture = (format) => {\n    const info = kTextureFormatInfo[format];\n    const newBytesPerSample =\n    align(bytesPerSample, info.colorRender.alignment) + info.colorRender.byteCost;\n    if (newBytesPerSample > testValue) {\n      return false;\n    }\n    targets.push({ format, writeMask: 0 });\n    bytesPerSample = newBytesPerSample;\n    return true;\n  };\n\n  while (bytesPerSample < testValue) {\n    addTexture(interleaveFormat);\n    for (const format of kFormatsToUseBySize) {\n      if (addTexture(format)) {\n        break;\n      }\n    }\n  }\n\n  assert(bytesPerSample === testValue);\n  return targets;\n}\n\nfunction getDescription(\ntestValue,\nactualLimit,\nsampleCount,\ntargets)\n{\n  return `\n    // testValue  : ${testValue}\n    // actualLimit: ${actualLimit}\n    // sampleCount: ${sampleCount}\n    // targets:\n    ${(() => {\n    let offset = 0;\n    return targets.\n    map(({ format }) => {\n      const info = kTextureFormatInfo[format];\n      offset = align(offset, info.colorRender.alignment);\n      const s = `//   ${format.padEnd(11)} (offset: ${offset.toString().padStart(2)}, align: ${\n      info.colorRender.alignment}, size: ${\n      info.colorRender.byteCost})`;\n      offset += info.colorRender.byteCost;\n      return s;\n    }).\n    join('\\n    ');\n  })()}\n  `;\n}\n\nfunction getPipelineDescriptor(\ndevice,\nactualLimit,\ninterleaveFormat,\nsampleCount,\ntestValue)\n{\n  const targets = getAttachments(interleaveFormat, testValue);\n  if (!targets) {\n    return;\n  }\n\n  const code = `\n    ${getDescription(testValue, actualLimit, sampleCount, targets)}\n    @vertex fn vs() -> @builtin(position) vec4f {\n      return vec4f(0);\n    }\n\n    @fragment fn fs() -> @location(0) vec4f {\n      return vec4f(0);\n    }\n  `;\n  const module = device.createShaderModule({ code });\n  const pipelineDescriptor = {\n    layout: 'auto',\n    vertex: {\n      module,\n      entryPoint: 'vs'\n    },\n    fragment: {\n      module,\n      entryPoint: 'fs',\n      targets\n    },\n    // depth should not affect the test so added to make sure the implementation does not consider it\n    depthStencil: {\n      depthWriteEnabled: true,\n      depthCompare: 'less',\n      format: 'depth24plus'\n    },\n    multisample: {\n      count: sampleCount\n    }\n  };\n  return { pipelineDescriptor, code };\n}\n\nfunction createTextures(t, targets) {\n  return targets.map(({ format }) =>\n  t.createTextureTracked({\n    size: [1, 1],\n    format,\n    usage: GPUTextureUsage.RENDER_ATTACHMENT\n  })\n  );\n}\n\nconst kExtraLimits = {\n  maxColorAttachments: 'adapterLimit'\n};\n\nconst limit = 'maxColorAttachmentBytesPerSample';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createRenderPipeline,at_over').\ndesc(`Test using at and over ${limit} limit in createRenderPipeline(Async)`).\nparams(\n  kMaximumLimitBaseParams.\n  combine('async', [false, true]).\n  combine('sampleCount', kTextureSampleCounts).\n  combine('interleaveFormat', kInterleaveFormats)\n).\nfn(async (t) => {\n  const { limitTest, testValueName, async, sampleCount, interleaveFormat } = t.params;\n  await t.testDeviceWithRequestedMaximumLimits(\n    limitTest,\n    testValueName,\n    async ({ device, testValue, actualLimit, shouldError }) => {\n      const result = getPipelineDescriptor(\n        device,\n        actualLimit,\n        interleaveFormat,\n        sampleCount,\n        testValue\n      );\n      if (!result) {\n        return;\n      }\n      const { pipelineDescriptor, code } = result;\n      const numTargets = pipelineDescriptor.fragment.targets.length;\n      if (numTargets > device.limits.maxColorAttachments) {\n        return;\n      }\n\n      await t.testCreateRenderPipeline(pipelineDescriptor, async, shouldError, code);\n    },\n    kExtraLimits\n  );\n});\n\ng.test('beginRenderPass,at_over').\ndesc(`Test using at and over ${limit} limit in beginRenderPass`).\nparams(\n  kMaximumLimitBaseParams.\n  combine('sampleCount', kTextureSampleCounts).\n  combine('interleaveFormat', kInterleaveFormats)\n).\nfn(async (t) => {\n  const { limitTest, testValueName, sampleCount, interleaveFormat } = t.params;\n  await t.testDeviceWithRequestedMaximumLimits(\n    limitTest,\n    testValueName,\n    async ({ device, testValue, actualLimit, shouldError }) => {\n      const targets = getAttachments(interleaveFormat, testValue);\n      if (targets.length > device.limits.maxColorAttachments) {\n        return;\n      }\n\n      const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", device, device.createCommandEncoder, [], () => device.createCommandEncoder());\n      const textures = createTextures(t, targets);\n\n      const pass = encoder.beginRenderPass({\n        colorAttachments: textures.map((texture) => ({\n          view: texture.createView(),\n          loadOp: 'clear',\n          storeOp: 'store'\n        }))\n      });\n      pass.end();\n\n      await t.expectValidationError(\n        () => {\n          encoder.finish();\n        },\n        shouldError,\n        getDescription(testValue, actualLimit, sampleCount, targets)\n      );\n    },\n    kExtraLimits\n  );\n});\n\ng.test('createRenderBundle,at_over').\ndesc(`Test using at and over ${limit} limit in createRenderBundle`).\nparams(\n  kMaximumLimitBaseParams.\n  combine('sampleCount', kTextureSampleCounts).\n  combine('interleaveFormat', kInterleaveFormats)\n).\nfn(async (t) => {\n  const { limitTest, testValueName, sampleCount, interleaveFormat } = t.params;\n  await t.testDeviceWithRequestedMaximumLimits(\n    limitTest,\n    testValueName,\n    async ({ device, testValue, actualLimit, shouldError }) => {\n      const targets = getAttachments(interleaveFormat, testValue);\n      if (targets.length > device.limits.maxColorAttachments) {\n        return;\n      }\n\n      await t.expectValidationError(\n        () => {\n          device.createRenderBundleEncoder({\n            colorFormats: targets.map(({ format }) => format)\n          });\n        },\n        shouldError,\n        getDescription(testValue, actualLimit, sampleCount, targets)\n      );\n    },\n    kExtraLimits\n  );\n});"],"mappings":"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","ignoreList":[]}