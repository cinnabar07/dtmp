{"version":3,"file":"maxStorageBufferBindingSize.spec.js","names":["align","roundDown","kMaximumLimitBaseParams","makeLimitTestGroup","kBufferParts","getSizeAndOffsetForBufferPart","device","bufferPart","size","limits","minUniformBufferOffsetAlignment","offset","kStorageBufferRequiredSizeAlignment","kExtraLimits","maxBufferSize","getDeviceLimitToRequest","limitValueTest","defaultLimit","maximumLimit","Math","floor","getTestValue","testValueName","requestedLimit","getDeviceLimitToRequestAndValueToTest","testValue","limit","g","description","test","desc","params","combine","fn","t","limitTest","adapterLimit","testDeviceWithSpecificLimits","shouldError","bindGroupLayout","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","buffer","type","pushErrorScope","storageBuffer","createBufferTracked","usage","GPUBufferUsage","STORAGE","outOfMemoryError","popErrorScope","expectValidationError","createBindGroup","layout","resource","expect","adapter","getDefaultLimit"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxStorageBufferBindingSize.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { align, roundDown } from '../../../../util/math.js';import {\n  kMaximumLimitBaseParams,\n  makeLimitTestGroup } from\n\n\n\n'./limit_utils.js';\n\nconst kBufferParts = ['wholeBuffer', 'biggerBufferWithOffset'];\n\n\nfunction getSizeAndOffsetForBufferPart(device, bufferPart, size) {\n  const align = device.limits.minUniformBufferOffsetAlignment;\n  switch (bufferPart) {\n    case 'wholeBuffer':\n      return { size, offset: 0 };\n    case 'biggerBufferWithOffset':\n      return { size: size + align, offset: align };\n  }\n}\n\nconst kStorageBufferRequiredSizeAlignment = 4;\n\n// We also need to update the maxBufferSize limit when testing.\nconst kExtraLimits = { maxBufferSize: 'maxLimit' };\n\nfunction getDeviceLimitToRequest(\nlimitValueTest,\ndefaultLimit,\nmaximumLimit)\n{\n  switch (limitValueTest) {\n    case 'atDefault':\n      return defaultLimit;\n    case 'underDefault':\n      return defaultLimit - kStorageBufferRequiredSizeAlignment;\n    case 'betweenDefaultAndMaximum':\n      return Math.floor((defaultLimit + maximumLimit) / 2);\n    case 'atMaximum':\n      return maximumLimit;\n    case 'overMaximum':\n      return maximumLimit + kStorageBufferRequiredSizeAlignment;\n  }\n}\n\nfunction getTestValue(testValueName, requestedLimit) {\n  switch (testValueName) {\n    case 'atLimit':\n      return roundDown(requestedLimit, kStorageBufferRequiredSizeAlignment);\n    case 'overLimit':\n      // Note: the requestedLimit might not meet alignment requirements.\n      return align(\n        requestedLimit + kStorageBufferRequiredSizeAlignment,\n        kStorageBufferRequiredSizeAlignment\n      );\n  }\n}\n\nfunction getDeviceLimitToRequestAndValueToTest(\nlimitValueTest,\ntestValueName,\ndefaultLimit,\nmaximumLimit)\n{\n  const requestedLimit = getDeviceLimitToRequest(limitValueTest, defaultLimit, maximumLimit);\n  return {\n    requestedLimit,\n    testValue: getTestValue(testValueName, requestedLimit)\n  };\n}\n\nconst limit = 'maxStorageBufferBindingSize';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createBindGroup,at_over').\ndesc(`Test using createBindGroup at and over ${limit} limit`).\nparams(kMaximumLimitBaseParams.combine('bufferPart', kBufferParts)).\nfn(async (t) => {\n  const { limitTest, testValueName, bufferPart } = t.params;\n  const { defaultLimit, adapterLimit: maximumLimit } = t;\n  const { requestedLimit, testValue } = getDeviceLimitToRequestAndValueToTest(\n    limitTest,\n    testValueName,\n    defaultLimit,\n    maximumLimit\n  );\n\n  await t.testDeviceWithSpecificLimits(\n    requestedLimit,\n    testValue,\n    async ({ device, testValue, shouldError }) => {\n      const bindGroupLayout = device.createBindGroupLayout({\n        entries: [\n        {\n          binding: 0,\n          visibility: GPUShaderStage.COMPUTE,\n          buffer: { type: 'storage' }\n        }]\n\n      });\n\n      const { size, offset } = getSizeAndOffsetForBufferPart(device, bufferPart, testValue);\n\n      // If the size of the buffer exceeds the related but separate maxBufferSize limit, we can\n      // skip the validation since the allocation will fail with a validation error.\n      if (size > device.limits.maxBufferSize) {\n        return;\n      }\n\n      device.pushErrorScope('out-of-memory');\n      const storageBuffer = t.createBufferTracked({\n        usage: GPUBufferUsage.STORAGE,\n        size\n      });\n      const outOfMemoryError = await device.popErrorScope();\n\n      if (!outOfMemoryError) {\n        await t.expectValidationError(\n          () => {\n            device.createBindGroup({\n              layout: bindGroupLayout,\n              entries: [\n              {\n                binding: 0,\n                resource: {\n                  buffer: storageBuffer,\n                  offset,\n                  size: testValue\n                }\n              }]\n\n            });\n          },\n          shouldError,\n          `size: ${size}, offset: ${offset}, testValue: ${testValue}`\n        );\n      }\n    },\n    kExtraLimits\n  );\n});\n\ng.test('validate').\ndesc(`Test that ${limit} is a multiple of 4 bytes`).\nfn((t) => {\n  const { defaultLimit, adapterLimit } = t;\n  t.expect(defaultLimit % 4 === 0);\n  t.expect(adapterLimit % 4 === 0);\n});\n\ng.test('validate,maxBufferSize').\ndesc(`Test that ${limit} <= maxBufferSize`).\nfn((t) => {\n  const { adapter, defaultLimit, adapterLimit } = t;\n  t.expect(defaultLimit <= t.getDefaultLimit('maxBufferSize'));\n  t.expect(adapterLimit <= adapter.limits.maxBufferSize);\n});"],"mappings":"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","ignoreList":[]}