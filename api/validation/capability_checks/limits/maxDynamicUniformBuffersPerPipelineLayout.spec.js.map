{"version":3,"file":"maxDynamicUniformBuffersPerPipelineLayout.spec.js","names":["range","GPUConst","kMaximumLimitBaseParams","makeLimitTestGroup","limit","g","description","test","desc","params","combine","ShaderStage","VERTEX","FRAGMENT","COMPUTE","fn","t","limitTest","testValueName","visibility","testDeviceWithRequestedMaximumLimits","device","testValue","shouldError","limits","maxUniformBuffersPerShaderStage","expectValidationError","createBindGroupLayout","entries","i","binding","buffer","hasDynamicOffset"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxDynamicUniformBuffersPerPipelineLayout.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { range } from '../../../../../common/util/util.js';import { GPUConst } from '../../../../constants.js';\nimport { kMaximumLimitBaseParams, makeLimitTestGroup } from './limit_utils.js';\n\nconst limit = 'maxDynamicUniformBuffersPerPipelineLayout';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createBindGroupLayout,at_over').\ndesc(`Test using createBindGroupLayout at and over ${limit} limit`).\nparams(\n  kMaximumLimitBaseParams.combine('visibility', [\n  GPUConst.ShaderStage.VERTEX,\n  GPUConst.ShaderStage.FRAGMENT,\n  GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT,\n  GPUConst.ShaderStage.COMPUTE,\n  GPUConst.ShaderStage.COMPUTE | GPUConst.ShaderStage.VERTEX,\n  GPUConst.ShaderStage.COMPUTE | GPUConst.ShaderStage.FRAGMENT,\n  GPUConst.ShaderStage.COMPUTE | GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT]\n  )\n).\nfn(async (t) => {\n  const { limitTest, testValueName, visibility } = t.params;\n  await t.testDeviceWithRequestedMaximumLimits(\n    limitTest,\n    testValueName,\n    async ({ device, testValue, shouldError }) => {\n      shouldError ||= testValue > t.device.limits.maxUniformBuffersPerShaderStage;\n      await t.expectValidationError(() => {\n        device.createBindGroupLayout({\n          entries: range(testValue, (i) => ({\n            binding: i,\n            visibility,\n            buffer: {\n              hasDynamicOffset: true\n            }\n          }))\n        });\n      }, shouldError);\n    }\n  );\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,SAASA,KAAK,QAAQ,oCAAoC,CAAC,SAASC,QAAQ,QAAQ,0BAA0B,CACjH,SAASC,uBAAuB,EAAEC,kBAAkB,QAAQ,kBAAkB;AAE9E,MAAMC,KAAK,GAAG,2CAA2C;AACzD,OAAO,MAAM,EAAEC,CAAC,EAAEC,WAAW,CAAC,CAAC,GAAGH,kBAAkB,CAACC,KAAK,CAAC;;AAE3DC,CAAC,CAACE,IAAI,CAAC,+BAA+B,CAAC;AACvCC,IAAI,CAAC,gDAAgDJ,KAAK,QAAQ,CAAC;AACnEK,MAAM;EACJP,uBAAuB,CAACQ,OAAO,CAAC,YAAY,EAAE;EAC9CT,QAAQ,CAACU,WAAW,CAACC,MAAM;EAC3BX,QAAQ,CAACU,WAAW,CAACE,QAAQ;EAC7BZ,QAAQ,CAACU,WAAW,CAACC,MAAM,GAAGX,QAAQ,CAACU,WAAW,CAACE,QAAQ;EAC3DZ,QAAQ,CAACU,WAAW,CAACG,OAAO;EAC5Bb,QAAQ,CAACU,WAAW,CAACG,OAAO,GAAGb,QAAQ,CAACU,WAAW,CAACC,MAAM;EAC1DX,QAAQ,CAACU,WAAW,CAACG,OAAO,GAAGb,QAAQ,CAACU,WAAW,CAACE,QAAQ;EAC5DZ,QAAQ,CAACU,WAAW,CAACG,OAAO,GAAGb,QAAQ,CAACU,WAAW,CAACC,MAAM,GAAGX,QAAQ,CAACU,WAAW,CAACE,QAAQ;EAC1F;AACF,CAAC;AACDE,EAAE,CAAC,OAAOC,CAAC,KAAK;EACd,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAEC,UAAU,CAAC,CAAC,GAAGH,CAAC,CAACP,MAAM;EACzD,MAAMO,CAAC,CAACI,oCAAoC;IAC1CH,SAAS;IACTC,aAAa;IACb,OAAO,EAAEG,MAAM,EAAEC,SAAS,EAAEC,WAAW,CAAC,CAAC,KAAK;MAC5CA,WAAW,KAAKD,SAAS,GAAGN,CAAC,CAACK,MAAM,CAACG,MAAM,CAACC,+BAA+B;MAC3E,MAAMT,CAAC,CAACU,qBAAqB,CAAC,MAAM;QAClCL,MAAM,CAACM,qBAAqB,CAAC;UAC3BC,OAAO,EAAE5B,KAAK,CAACsB,SAAS,EAAE,CAACO,CAAC,MAAM;YAChCC,OAAO,EAAED,CAAC;YACVV,UAAU;YACVY,MAAM,EAAE;cACNC,gBAAgB,EAAE;YACpB;UACF,CAAC,CAAC;QACJ,CAAC,CAAC;MACJ,CAAC,EAAET,WAAW,CAAC;IACjB;EACF,CAAC;AACH,CAAC,CAAC","ignoreList":[]}