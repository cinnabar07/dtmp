{"version":3,"file":"maxTextureDimension2D.spec.js","names":["getGPU","kAllCanvasTypes","createCanvas","kMaximumLimitBaseParams","makeLimitTestGroup","limit","g","description","test","desc","params","fn","t","limitTest","testValueName","testDeviceWithRequestedMaximumLimits","shouldError","testValue","actualLimit","dimensionIndex","size","testForValidationErrorWithPossibleOutOfMemoryError","texture","createTextureTracked","format","usage","GPUTextureUsage","TEXTURE_BINDING","globalThis","_TRAMPOLINE_","destroy","combine","canvasType","device","canvas","context","getContext","expect","configure","rec","getPreferredCanvasFormat","width","height","getCurrentTexture"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxTextureDimension2D.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { getGPU } from '../../../../../common/util/navigator_gpu.js';import { kAllCanvasTypes, createCanvas } from '../../../../util/create_elements.js';\nimport { kMaximumLimitBaseParams, makeLimitTestGroup } from './limit_utils.js';\n\nconst limit = 'maxTextureDimension2D';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createTexture,at_over').\ndesc(`Test using at and over ${limit} limit`).\nparams(kMaximumLimitBaseParams).\nfn(async (t) => {\n  const { limitTest, testValueName } = t.params;\n  await t.testDeviceWithRequestedMaximumLimits(\n    limitTest,\n    testValueName,\n    async ({ shouldError, testValue, actualLimit }) => {\n      for (let dimensionIndex = 0; dimensionIndex < 2; ++dimensionIndex) {\n        const size = [1, 1, 1];\n        size[dimensionIndex] = testValue;\n\n        await t.testForValidationErrorWithPossibleOutOfMemoryError(\n          () => {\n            const texture = t.createTextureTracked({\n              size,\n              format: 'rgba8unorm',\n              usage: GPUTextureUsage.TEXTURE_BINDING\n            });\n\n            // MAINTENANCE_TODO: Remove this 'if' once the bug in chrome is fixed\n            // This 'if' is only here because of a bug in Chrome\n            // that generates an error calling destroy on an invalid texture.\n            // This doesn't affect the test but the 'if' should be removed\n            // once the Chrome bug is fixed.\n            if (!shouldError) {\n              globalThis._TRAMPOLINE_(\"destroy\", texture, texture.destroy, [], () => texture.destroy());\n            }\n          },\n          shouldError,\n          `size: ${size}, actualLimit: ${actualLimit}`\n        );\n      }\n    }\n  );\n});\n\ng.test('configure,at_over').\ndesc(`Test using at and over ${limit} limit`).\nparams(kMaximumLimitBaseParams.combine('canvasType', kAllCanvasTypes)).\nfn(async (t) => {\n  const { limitTest, testValueName, canvasType } = t.params;\n  await t.testDeviceWithRequestedMaximumLimits(\n    limitTest,\n    testValueName,\n    async ({ device, shouldError, testValue, actualLimit }) => {\n      for (let dimensionIndex = 0; dimensionIndex < 2; ++dimensionIndex) {\n        const size = [1, 1];\n        size[dimensionIndex] = testValue;\n\n        // This should not fail, even if the size is too large but it might fail\n        // if we're in a worker and HTMLCanvasElement does not exist.\n        const canvas = createCanvas(t, canvasType, size[0], size[1]);\n        if (canvas) {\n          const context = canvas.getContext('webgpu');\n          t.expect(!!context, 'should not fail to create context even if size is too large');\n\n          await t.testForValidationErrorWithPossibleOutOfMemoryError(\n            () => {\n              context.configure({\n                device,\n                format: getGPU(t.rec).getPreferredCanvasFormat()\n              });\n            },\n            shouldError,\n            `size: ${size}, actualLimit: ${actualLimit}`\n          );\n        }\n      }\n    }\n  );\n});\n\ng.test('getCurrentTexture,at_over').\ndesc(`Test using at and over ${limit} limit`).\nparams(kMaximumLimitBaseParams.combine('canvasType', kAllCanvasTypes)).\nfn(async (t) => {\n  const { limitTest, testValueName, canvasType } = t.params;\n  await t.testDeviceWithRequestedMaximumLimits(\n    limitTest,\n    testValueName,\n    async ({ device, shouldError, testValue, actualLimit }) => {\n      for (let dimensionIndex = 0; dimensionIndex < 2; ++dimensionIndex) {\n        const size = [1, 1];\n        size[dimensionIndex] = testValue;\n\n        // Start with a small size so configure will succeed.\n        // This should not fail, even if the size is too large but it might fail\n        // if we're in a worker and HTMLCanvasElement does not exist.\n        const canvas = createCanvas(t, canvasType, 1, 1);\n        if (canvas) {\n          const context = canvas.getContext('webgpu');\n          t.expect(!!context, 'should not fail to create context even if size is too large');\n\n          context.configure({\n            device,\n            format: getGPU(t.rec).getPreferredCanvasFormat()\n          });\n\n          if (canvas) {\n            await t.testForValidationErrorWithPossibleOutOfMemoryError(\n              () => {\n                canvas.width = size[0];\n                canvas.height = size[1];\n                const texture = context.getCurrentTexture();\n\n                // MAINTENANCE_TODO: Remove this 'if' once the bug in chrome is fixed\n                // This 'if' is only here because of a bug in Chrome\n                // that generates an error calling destroy on an invalid texture.\n                // This doesn't affect the test but the 'if' should be removed\n                // once the Chrome bug is fixed.\n                if (!shouldError) {\n                  globalThis._TRAMPOLINE_(\"destroy\", texture, texture.destroy, [], () => texture.destroy());\n                }\n              },\n              shouldError,\n              `size: ${size}, actualLimit: ${actualLimit}`\n            );\n          }\n        }\n      }\n    }\n  );\n});"],"mappings":"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","ignoreList":[]}