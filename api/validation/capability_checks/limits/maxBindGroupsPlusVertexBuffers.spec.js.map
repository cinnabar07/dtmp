{"version":3,"file":"maxBindGroupsPlusVertexBuffers.spec.js","names":["kRenderEncoderTypes","kMaximumLimitBaseParams","makeLimitTestGroup","kVertexBufferBindGroupPreferences","kLayoutTypes","getNumBindGroupsAndNumVertexBuffers","device","preference","testValue","numBindGroups","Math","min","limits","maxBindGroups","numVertexBuffers","max","maxVertexBuffers","createLayout","layoutType","bindGroupLayouts","Array","fill","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","buffer","createPipelineLayout","getPipelineDescriptor","layout","bindGroupDecl","bindGroupUsage","attribDecl","attribUsage","code","module","createShaderModule","buffers","arrayStride","attributes","shaderLocation","offset","format","descriptor","vertex","fragment","targets","kExtraLimits","limit","g","description","test","desc","params","combine","beginSubcases","fn","t","limitTest","testValueName","async","testDeviceWithRequestedMaximumLimits","shouldError","actualLimit","maxUsableBindGroupsPlusVertexBuffers","skipIf","testCreateRenderPipeline","encoderType","drawType","maxUsableVertexBuffers","maxVertexAttributes","pipeline","createRenderPipeline","vertexBuffer","createBufferTracked","size","usage","GPUBufferUsage","testGPURenderAndBindingCommandsMixin","bindGroup","passEncoder","setVertexBuffer","setBindGroup","setPipeline","indirectBuffer","INDIRECT","indexBuffer","INDEX","draw","setIndexBuffer","drawIndexed","drawIndirect","drawIndexedIndirect","globalThis","_TRAMPOLINE_","destroy"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxBindGroupsPlusVertexBuffers.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { kRenderEncoderTypes, kMaximumLimitBaseParams,\n  makeLimitTestGroup } from\n\n'./limit_utils.js';\n\nconst kVertexBufferBindGroupPreferences = ['vertexBuffers', 'bindGroups'];\n\n\nconst kLayoutTypes = ['auto', 'explicit'];\n\n\n/**\n * Given testValue, choose more vertex buffers or more bind groups based on preference\n */\nfunction getNumBindGroupsAndNumVertexBuffers(\ndevice,\npreference,\ntestValue)\n{\n  switch (preference) {\n    case 'bindGroups':{\n        const numBindGroups = Math.min(testValue, device.limits.maxBindGroups);\n        const numVertexBuffers = Math.max(0, testValue - numBindGroups);\n        return { numVertexBuffers, numBindGroups };\n      }\n    case 'vertexBuffers':{\n        const numVertexBuffers = Math.min(testValue, device.limits.maxVertexBuffers);\n        const numBindGroups = Math.max(0, testValue - numVertexBuffers);\n        return { numVertexBuffers, numBindGroups };\n      }\n  }\n}\n\nfunction createLayout(device, layoutType, numBindGroups) {\n  switch (layoutType) {\n    case 'auto':\n      return 'auto';\n    case 'explicit':{\n        const bindGroupLayouts = new Array(numBindGroups);\n        if (numBindGroups > 0) {\n          bindGroupLayouts.fill(device.createBindGroupLayout({ entries: [] }));\n          bindGroupLayouts[numBindGroups - 1] = device.createBindGroupLayout({\n            entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.VERTEX,\n              buffer: {}\n            }]\n\n          });\n        }\n        return device.createPipelineLayout({ bindGroupLayouts });\n      }\n  }\n}\n\n/**\n * Generate a render pipeline that can be used to test maxBindGroupsPlusVertexBuffers\n */\nfunction getPipelineDescriptor(\ndevice,\npreference,\ntestValue,\nlayoutType)\n{\n  // Get the numVertexBuffers and numBindGroups we could use given testValue as a total.\n  // We will only use 1 of each but we'll use the last index.\n  const { numVertexBuffers, numBindGroups } = getNumBindGroupsAndNumVertexBuffers(\n    device,\n    preference,\n    testValue\n  );\n\n  const layout = createLayout(device, layoutType, numBindGroups);\n\n  const [bindGroupDecl, bindGroupUsage] =\n  numBindGroups === 0 ?\n  ['', ''] :\n  [`@group(${numBindGroups - 1}) @binding(0) var<uniform> u: f32;`, `_ = u;`];\n\n  const [attribDecl, attribUsage] =\n  numVertexBuffers === 0 ?\n  ['', ''] :\n  ['@location(0) v: vec4f', `_ = v; // will use vertex buffer ${numVertexBuffers - 1}`];\n\n  const code = `\n    ${bindGroupDecl}\n\n    @vertex fn vs(${attribDecl}) -> @builtin(position) vec4f {\n      ${bindGroupUsage}\n      ${attribUsage}\n      return vec4f(0);\n    }\n\n    @fragment fn fs() -> @location(0) vec4f {\n      return vec4f(0);\n    }\n  `;\n\n  const module = device.createShaderModule({ code });\n  const buffers = new Array(numVertexBuffers);\n  if (numVertexBuffers > 0) {\n    buffers[numVertexBuffers - 1] = {\n      arrayStride: 16,\n      attributes: [{ shaderLocation: 0, offset: 0, format: 'float32' }]\n    };\n  }\n\n  return {\n    code,\n    descriptor: {\n      layout,\n      vertex: {\n        module,\n        buffers\n      },\n      fragment: {\n        module,\n        targets: [{ format: 'rgba8unorm' }]\n      }\n    }\n  };\n}\n\nconst kExtraLimits = {\n  maxBindGroups: 'adapterLimit',\n  maxVertexBuffers: 'adapterLimit'\n};\n\nconst limit = 'maxBindGroupsPlusVertexBuffers';\nexport const { g, description } = makeLimitTestGroup(limit);\n\ng.test('createRenderPipeline,at_over').\ndesc(`Test using at and over ${limit} limit in createRenderPipeline(Async).`).\nparams(\n  kMaximumLimitBaseParams.\n  combine('async', [false, true]).\n  beginSubcases().\n  combine('preference', kVertexBufferBindGroupPreferences).\n  combine('layoutType', kLayoutTypes)\n).\nfn(async (t) => {\n  const { limitTest, testValueName, async, preference, layoutType } = t.params;\n  await t.testDeviceWithRequestedMaximumLimits(\n    limitTest,\n    testValueName,\n    async ({ device, testValue, shouldError, actualLimit }) => {\n      const maxUsableBindGroupsPlusVertexBuffers =\n      device.limits.maxBindGroups + device.limits.maxVertexBuffers;\n      t.skipIf(\n        maxUsableBindGroupsPlusVertexBuffers < actualLimit,\n        `can not test because the max usable bindGroups + vertexBuffers (${maxUsableBindGroupsPlusVertexBuffers}) is < maxBindGroupsAndVertexBuffers (${actualLimit})`\n      );\n      t.skipIf(\n        maxUsableBindGroupsPlusVertexBuffers === actualLimit && testValue > actualLimit,\n        `can not test because the max usable bindGroups + vertexBuffers (${maxUsableBindGroupsPlusVertexBuffers}) === maxBindGroupsAndVertexBuffers (${actualLimit})\n           but the testValue (${testValue}) > maxBindGroupsAndVertexBuffers (${actualLimit})`\n      );\n\n      const { code, descriptor } = getPipelineDescriptor(\n        device,\n        preference,\n        testValue,\n        layoutType\n      );\n\n      await t.testCreateRenderPipeline(\n        descriptor,\n        async,\n        shouldError,\n        `testValue: ${testValue}, actualLimit: ${actualLimit}, shouldError: ${shouldError}\\n${code}`\n      );\n    },\n    kExtraLimits\n  );\n});\n\ng.test('draw,at_over').\ndesc(`Test using at and over ${limit} limit draw/drawIndexed/drawIndirect/drawIndexedIndirect`).\nparams(\n  kMaximumLimitBaseParams.\n  combine('encoderType', kRenderEncoderTypes).\n  beginSubcases().\n  combine('preference', kVertexBufferBindGroupPreferences).\n  combine('drawType', ['draw', 'drawIndexed', 'drawIndirect', 'drawIndexedIndirect'])\n).\nfn(async (t) => {\n  const { limitTest, testValueName, encoderType, drawType, preference } = t.params;\n  await t.testDeviceWithRequestedMaximumLimits(\n    limitTest,\n    testValueName,\n    async ({ device, testValue, shouldError, actualLimit }) => {\n      const maxUsableVertexBuffers = Math.min(\n        device.limits.maxVertexBuffers,\n        device.limits.maxVertexAttributes\n      );\n      const maxUsableBindGroupsPlusVertexBuffers =\n      device.limits.maxBindGroups + maxUsableVertexBuffers;\n      t.skipIf(\n        maxUsableBindGroupsPlusVertexBuffers < actualLimit,\n        `can not test because the max usable bindGroups + vertexBuffers (${maxUsableBindGroupsPlusVertexBuffers}) is < maxBindGroupsAndVertexBuffers (${actualLimit})`\n      );\n      t.skipIf(\n        maxUsableBindGroupsPlusVertexBuffers === actualLimit && testValue > actualLimit,\n        `can not test because the max usable bindGroups + vertexBuffers (${maxUsableBindGroupsPlusVertexBuffers}) === maxBindGroupsAndVertexBuffers (${actualLimit})\n           but the testValue (${testValue}) > maxBindGroupsAndVertexBuffers (${actualLimit})`\n      );\n\n      // Get the numVertexBuffers and numBindGroups we could use given testValue as a total.\n      // We will only use 1 of each but we'll use the last index.\n      const { numVertexBuffers, numBindGroups } = getNumBindGroupsAndNumVertexBuffers(\n        device,\n        preference,\n        testValue\n      );\n\n      const module = device.createShaderModule({\n        code: `\n            @vertex fn vs() -> @builtin(position) vec4f {\n              return vec4f(0);\n            }\n            @fragment fn fs() -> @location(0) vec4f {\n              return vec4f(0);\n            }\n            `\n      });\n      const pipeline = device.createRenderPipeline({\n        layout: 'auto',\n        vertex: { module },\n        fragment: { module, targets: [{ format: 'rgba8unorm' }] }\n      });\n\n      const vertexBuffer = t.createBufferTracked({\n        size: 16,\n        usage: GPUBufferUsage.VERTEX\n      });\n\n      await t.testGPURenderAndBindingCommandsMixin(\n        encoderType,\n        ({ bindGroup, passEncoder }) => {\n          // Set the last vertex buffer and clear it. This should have no effect\n          // unless there is a bug in bookkeeping in the implementation.\n          passEncoder.setVertexBuffer(device.limits.maxVertexBuffers - 1, vertexBuffer);\n          passEncoder.setVertexBuffer(device.limits.maxVertexBuffers - 1, null);\n\n          // Set the last bindGroup and clear it. This should have no effect\n          // unless there is a bug in bookkeeping in the implementation.\n          passEncoder.setBindGroup(device.limits.maxBindGroups - 1, bindGroup);\n          passEncoder.setBindGroup(device.limits.maxBindGroups - 1, null);\n\n          if (numVertexBuffers) {\n            passEncoder.setVertexBuffer(numVertexBuffers - 1, vertexBuffer);\n          }\n\n          if (numBindGroups) {\n            passEncoder.setBindGroup(numBindGroups - 1, bindGroup);\n          }\n\n          passEncoder.setPipeline(pipeline);\n\n          const indirectBuffer = t.createBufferTracked({\n            size: 20,\n            usage: GPUBufferUsage.INDIRECT\n          });\n\n          const indexBuffer = t.createBufferTracked({\n            size: 4,\n            usage: GPUBufferUsage.INDEX\n          });\n\n          switch (drawType) {\n            case 'draw':\n              passEncoder.draw(0);\n              break;\n            case 'drawIndexed':\n              passEncoder.setIndexBuffer(indexBuffer, 'uint16');\n              passEncoder.drawIndexed(0);\n              break;\n            case 'drawIndirect':\n              passEncoder.drawIndirect(indirectBuffer, 0);\n              break;\n            case 'drawIndexedIndirect':\n              passEncoder.setIndexBuffer(indexBuffer, 'uint16');\n              passEncoder.drawIndexedIndirect(indirectBuffer, 0);\n              break;\n          }\n        },\n        shouldError,\n        `testValue: ${testValue}, actualLimit: ${actualLimit}, shouldError: ${shouldError}`\n      );\n\n      globalThis._TRAMPOLINE_(\"destroy\", vertexBuffer, vertexBuffer.destroy, [], () => vertexBuffer.destroy());\n    },\n    kExtraLimits\n  );\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,SAASA,mBAAmB,EAAEC,uBAAuB,EACtDC,kBAAkB;AAEpB,kBAAkB;;AAElB,MAAMC,iCAAiC,GAAG,CAAC,eAAe,EAAE,YAAY,CAAC;;;AAGzE,MAAMC,YAAY,GAAG,CAAC,MAAM,EAAE,UAAU,CAAC;;;AAGzC;AACA;AACA;AACA,SAASC,mCAAmCA;AAC5CC,MAAM;AACNC,UAAU;AACVC,SAAS;AACT;EACE,QAAQD,UAAU;IAChB,KAAK,YAAY,CAAC;QACd,MAAME,aAAa,GAAGC,IAAI,CAACC,GAAG,CAACH,SAAS,EAAEF,MAAM,CAACM,MAAM,CAACC,aAAa,CAAC;QACtE,MAAMC,gBAAgB,GAAGJ,IAAI,CAACK,GAAG,CAAC,CAAC,EAAEP,SAAS,GAAGC,aAAa,CAAC;QAC/D,OAAO,EAAEK,gBAAgB,EAAEL,aAAa,CAAC,CAAC;MAC5C;IACF,KAAK,eAAe,CAAC;QACjB,MAAMK,gBAAgB,GAAGJ,IAAI,CAACC,GAAG,CAACH,SAAS,EAAEF,MAAM,CAACM,MAAM,CAACI,gBAAgB,CAAC;QAC5E,MAAMP,aAAa,GAAGC,IAAI,CAACK,GAAG,CAAC,CAAC,EAAEP,SAAS,GAAGM,gBAAgB,CAAC;QAC/D,OAAO,EAAEA,gBAAgB,EAAEL,aAAa,CAAC,CAAC;MAC5C;EACJ;AACF;;AAEA,SAASQ,YAAYA,CAACX,MAAM,EAAEY,UAAU,EAAET,aAAa,EAAE;EACvD,QAAQS,UAAU;IAChB,KAAK,MAAM;MACT,OAAO,MAAM;IACf,KAAK,UAAU,CAAC;QACZ,MAAMC,gBAAgB,GAAG,IAAIC,KAAK,CAACX,aAAa,CAAC;QACjD,IAAIA,aAAa,GAAG,CAAC,EAAE;UACrBU,gBAAgB,CAACE,IAAI,CAACf,MAAM,CAACgB,qBAAqB,CAAC,EAAEC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;UACpEJ,gBAAgB,CAACV,aAAa,GAAG,CAAC,CAAC,GAAGH,MAAM,CAACgB,qBAAqB,CAAC;YACjEC,OAAO,EAAE;YACT;cACEC,OAAO,EAAE,CAAC;cACVC,UAAU,EAAEC,cAAc,CAACC,MAAM;cACjCC,MAAM,EAAE,CAAC;YACX,CAAC;;UAEH,CAAC,CAAC;QACJ;QACA,OAAOtB,MAAM,CAACuB,oBAAoB,CAAC,EAAEV,gBAAgB,CAAC,CAAC,CAAC;MAC1D;EACJ;AACF;;AAEA;AACA;AACA;AACA,SAASW,qBAAqBA;AAC9BxB,MAAM;AACNC,UAAU;AACVC,SAAS;AACTU,UAAU;AACV;EACE;EACA;EACA,MAAM,EAAEJ,gBAAgB,EAAEL,aAAa,CAAC,CAAC,GAAGJ,mCAAmC;IAC7EC,MAAM;IACNC,UAAU;IACVC;EACF,CAAC;;EAED,MAAMuB,MAAM,GAAGd,YAAY,CAACX,MAAM,EAAEY,UAAU,EAAET,aAAa,CAAC;;EAE9D,MAAM,CAACuB,aAAa,EAAEC,cAAc,CAAC;EACrCxB,aAAa,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,EAAE,CAAC;EACR,CAAC,UAAUA,aAAa,GAAG,CAAC,oCAAoC,EAAE,QAAQ,CAAC;;EAE3E,MAAM,CAACyB,UAAU,EAAEC,WAAW,CAAC;EAC/BrB,gBAAgB,KAAK,CAAC;EACtB,CAAC,EAAE,EAAE,EAAE,CAAC;EACR,CAAC,uBAAuB,EAAE,oCAAoCA,gBAAgB,GAAG,CAAC,EAAE,CAAC;;EAErF,MAAMsB,IAAI,GAAG;AACf,MAAMJ,aAAa;AACnB;AACA,oBAAoBE,UAAU;AAC9B,QAAQD,cAAc;AACtB,QAAQE,WAAW;AACnB;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;EAED,MAAME,MAAM,GAAG/B,MAAM,CAACgC,kBAAkB,CAAC,EAAEF,IAAI,CAAC,CAAC,CAAC;EAClD,MAAMG,OAAO,GAAG,IAAInB,KAAK,CAACN,gBAAgB,CAAC;EAC3C,IAAIA,gBAAgB,GAAG,CAAC,EAAE;IACxByB,OAAO,CAACzB,gBAAgB,GAAG,CAAC,CAAC,GAAG;MAC9B0B,WAAW,EAAE,EAAE;MACfC,UAAU,EAAE,CAAC,EAAEC,cAAc,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEC,MAAM,EAAE,SAAS,CAAC,CAAC;IAClE,CAAC;EACH;;EAEA,OAAO;IACLR,IAAI;IACJS,UAAU,EAAE;MACVd,MAAM;MACNe,MAAM,EAAE;QACNT,MAAM;QACNE;MACF,CAAC;MACDQ,QAAQ,EAAE;QACRV,MAAM;QACNW,OAAO,EAAE,CAAC,EAAEJ,MAAM,EAAE,YAAY,CAAC,CAAC;MACpC;IACF;EACF,CAAC;AACH;;AAEA,MAAMK,YAAY,GAAG;EACnBpC,aAAa,EAAE,cAAc;EAC7BG,gBAAgB,EAAE;AACpB,CAAC;;AAED,MAAMkC,KAAK,GAAG,gCAAgC;AAC9C,OAAO,MAAM,EAAEC,CAAC,EAAEC,WAAW,CAAC,CAAC,GAAGlD,kBAAkB,CAACgD,KAAK,CAAC;;AAE3DC,CAAC,CAACE,IAAI,CAAC,8BAA8B,CAAC;AACtCC,IAAI,CAAC,0BAA0BJ,KAAK,wCAAwC,CAAC;AAC7EK,MAAM;EACJtD,uBAAuB;EACvBuD,OAAO,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC;EAC/BC,aAAa,CAAC,CAAC;EACfD,OAAO,CAAC,YAAY,EAAErD,iCAAiC,CAAC;EACxDqD,OAAO,CAAC,YAAY,EAAEpD,YAAY;AACpC,CAAC;AACDsD,EAAE,CAAC,OAAOC,CAAC,KAAK;EACd,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAEC,KAAK,EAAEvD,UAAU,EAAEW,UAAU,CAAC,CAAC,GAAGyC,CAAC,CAACJ,MAAM;EAC5E,MAAMI,CAAC,CAACI,oCAAoC;IAC1CH,SAAS;IACTC,aAAa;IACb,OAAO,EAAEvD,MAAM,EAAEE,SAAS,EAAEwD,WAAW,EAAEC,WAAW,CAAC,CAAC,KAAK;MACzD,MAAMC,oCAAoC;MAC1C5D,MAAM,CAACM,MAAM,CAACC,aAAa,GAAGP,MAAM,CAACM,MAAM,CAACI,gBAAgB;MAC5D2C,CAAC,CAACQ,MAAM;QACND,oCAAoC,GAAGD,WAAW;QAClD,mEAAmEC,oCAAoC,yCAAyCD,WAAW;MAC7J,CAAC;MACDN,CAAC,CAACQ,MAAM;QACND,oCAAoC,KAAKD,WAAW,IAAIzD,SAAS,GAAGyD,WAAW;QAC/E,mEAAmEC,oCAAoC,wCAAwCD,WAAW;AAClK,gCAAgCzD,SAAS,sCAAsCyD,WAAW;MACpF,CAAC;;MAED,MAAM,EAAE7B,IAAI,EAAES,UAAU,CAAC,CAAC,GAAGf,qBAAqB;QAChDxB,MAAM;QACNC,UAAU;QACVC,SAAS;QACTU;MACF,CAAC;;MAED,MAAMyC,CAAC,CAACS,wBAAwB;QAC9BvB,UAAU;QACViB,KAAK;QACLE,WAAW;QACX,cAAcxD,SAAS,kBAAkByD,WAAW,kBAAkBD,WAAW,KAAK5B,IAAI;MAC5F,CAAC;IACH,CAAC;IACDa;EACF,CAAC;AACH,CAAC,CAAC;;AAEFE,CAAC,CAACE,IAAI,CAAC,cAAc,CAAC;AACtBC,IAAI,CAAC,0BAA0BJ,KAAK,0DAA0D,CAAC;AAC/FK,MAAM;EACJtD,uBAAuB;EACvBuD,OAAO,CAAC,aAAa,EAAExD,mBAAmB,CAAC;EAC3CyD,aAAa,CAAC,CAAC;EACfD,OAAO,CAAC,YAAY,EAAErD,iCAAiC,CAAC;EACxDqD,OAAO,CAAC,UAAU,EAAE,CAAC,MAAM,EAAE,aAAa,EAAE,cAAc,EAAE,qBAAqB,CAAC;AACpF,CAAC;AACDE,EAAE,CAAC,OAAOC,CAAC,KAAK;EACd,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAEQ,WAAW,EAAEC,QAAQ,EAAE/D,UAAU,CAAC,CAAC,GAAGoD,CAAC,CAACJ,MAAM;EAChF,MAAMI,CAAC,CAACI,oCAAoC;IAC1CH,SAAS;IACTC,aAAa;IACb,OAAO,EAAEvD,MAAM,EAAEE,SAAS,EAAEwD,WAAW,EAAEC,WAAW,CAAC,CAAC,KAAK;MACzD,MAAMM,sBAAsB,GAAG7D,IAAI,CAACC,GAAG;QACrCL,MAAM,CAACM,MAAM,CAACI,gBAAgB;QAC9BV,MAAM,CAACM,MAAM,CAAC4D;MAChB,CAAC;MACD,MAAMN,oCAAoC;MAC1C5D,MAAM,CAACM,MAAM,CAACC,aAAa,GAAG0D,sBAAsB;MACpDZ,CAAC,CAACQ,MAAM;QACND,oCAAoC,GAAGD,WAAW;QAClD,mEAAmEC,oCAAoC,yCAAyCD,WAAW;MAC7J,CAAC;MACDN,CAAC,CAACQ,MAAM;QACND,oCAAoC,KAAKD,WAAW,IAAIzD,SAAS,GAAGyD,WAAW;QAC/E,mEAAmEC,oCAAoC,wCAAwCD,WAAW;AAClK,gCAAgCzD,SAAS,sCAAsCyD,WAAW;MACpF,CAAC;;MAED;MACA;MACA,MAAM,EAAEnD,gBAAgB,EAAEL,aAAa,CAAC,CAAC,GAAGJ,mCAAmC;QAC7EC,MAAM;QACNC,UAAU;QACVC;MACF,CAAC;;MAED,MAAM6B,MAAM,GAAG/B,MAAM,CAACgC,kBAAkB,CAAC;QACvCF,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC,CAAC;MACF,MAAMqC,QAAQ,GAAGnE,MAAM,CAACoE,oBAAoB,CAAC;QAC3C3C,MAAM,EAAE,MAAM;QACde,MAAM,EAAE,EAAET,MAAM,CAAC,CAAC;QAClBU,QAAQ,EAAE,EAAEV,MAAM,EAAEW,OAAO,EAAE,CAAC,EAAEJ,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC,CAAC;MAC1D,CAAC,CAAC;;MAEF,MAAM+B,YAAY,GAAGhB,CAAC,CAACiB,mBAAmB,CAAC;QACzCC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAEC,cAAc,CAACpD;MACxB,CAAC,CAAC;;MAEF,MAAMgC,CAAC,CAACqB,oCAAoC;QAC1CX,WAAW;QACX,CAAC,EAAEY,SAAS,EAAEC,WAAW,CAAC,CAAC,KAAK;UAC9B;UACA;UACAA,WAAW,CAACC,eAAe,CAAC7E,MAAM,CAACM,MAAM,CAACI,gBAAgB,GAAG,CAAC,EAAE2D,YAAY,CAAC;UAC7EO,WAAW,CAACC,eAAe,CAAC7E,MAAM,CAACM,MAAM,CAACI,gBAAgB,GAAG,CAAC,EAAE,IAAI,CAAC;;UAErE;UACA;UACAkE,WAAW,CAACE,YAAY,CAAC9E,MAAM,CAACM,MAAM,CAACC,aAAa,GAAG,CAAC,EAAEoE,SAAS,CAAC;UACpEC,WAAW,CAACE,YAAY,CAAC9E,MAAM,CAACM,MAAM,CAACC,aAAa,GAAG,CAAC,EAAE,IAAI,CAAC;;UAE/D,IAAIC,gBAAgB,EAAE;YACpBoE,WAAW,CAACC,eAAe,CAACrE,gBAAgB,GAAG,CAAC,EAAE6D,YAAY,CAAC;UACjE;;UAEA,IAAIlE,aAAa,EAAE;YACjByE,WAAW,CAACE,YAAY,CAAC3E,aAAa,GAAG,CAAC,EAAEwE,SAAS,CAAC;UACxD;;UAEAC,WAAW,CAACG,WAAW,CAACZ,QAAQ,CAAC;;UAEjC,MAAMa,cAAc,GAAG3B,CAAC,CAACiB,mBAAmB,CAAC;YAC3CC,IAAI,EAAE,EAAE;YACRC,KAAK,EAAEC,cAAc,CAACQ;UACxB,CAAC,CAAC;;UAEF,MAAMC,WAAW,GAAG7B,CAAC,CAACiB,mBAAmB,CAAC;YACxCC,IAAI,EAAE,CAAC;YACPC,KAAK,EAAEC,cAAc,CAACU;UACxB,CAAC,CAAC;;UAEF,QAAQnB,QAAQ;YACd,KAAK,MAAM;cACTY,WAAW,CAACQ,IAAI,CAAC,CAAC,CAAC;cACnB;YACF,KAAK,aAAa;cAChBR,WAAW,CAACS,cAAc,CAACH,WAAW,EAAE,QAAQ,CAAC;cACjDN,WAAW,CAACU,WAAW,CAAC,CAAC,CAAC;cAC1B;YACF,KAAK,cAAc;cACjBV,WAAW,CAACW,YAAY,CAACP,cAAc,EAAE,CAAC,CAAC;cAC3C;YACF,KAAK,qBAAqB;cACxBJ,WAAW,CAACS,cAAc,CAACH,WAAW,EAAE,QAAQ,CAAC;cACjDN,WAAW,CAACY,mBAAmB,CAACR,cAAc,EAAE,CAAC,CAAC;cAClD;UACJ;QACF,CAAC;QACDtB,WAAW;QACX,cAAcxD,SAAS,kBAAkByD,WAAW,kBAAkBD,WAAW;MACnF,CAAC;;MAED+B,UAAU,CAACC,YAAY,CAAC,SAAS,EAAErB,YAAY,EAAEA,YAAY,CAACsB,OAAO,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,YAAMrB,YAAY,EAAZA,YAAY,CAAAsB,OAAA,YAAZtB,YAAY,CAACsB,OAAO,GAAE,CAAC;IAC1G,CAAC;IACDhD;EACF,CAAC;AACH,CAAC,CAAC","ignoreList":[]}