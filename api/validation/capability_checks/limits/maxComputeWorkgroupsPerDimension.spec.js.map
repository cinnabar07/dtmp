{"version":3,"file":"maxComputeWorkgroupsPerDimension.spec.js","names":["kMaximumLimitBaseParams","makeLimitTestGroup","limit","g","description","kCreateComputePipelineTypes","createComputePipeline","device","descriptor","pipelineType","createComputePipelineAsync","test","desc","params","combine","fn","t","limitTest","testValueName","axis","testDeviceWithRequestedMaximumLimits","testValue","shouldError","counts","buffer","createBufferTracked","size","usage","GPUBufferUsage","STORAGE","module","createShaderModule","code","pipeline","layout","compute","entryPoint","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginComputePass","setPipeline","dispatchWorkgroups","end","expectValidationError","finish","destroy","adapter","defaultLimit","adapterLimit","defaultMaxComputeWorkgroupSizeProduct","getDefaultLimit","maxComputeWorkgroupSizeProduct","limits","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","expect"],"sources":["../../../../../../src/webgpu/api/validation/capability_checks/limits/maxComputeWorkgroupsPerDimension.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { kMaximumLimitBaseParams, makeLimitTestGroup } from './limit_utils.js';const limit = 'maxComputeWorkgroupsPerDimension';\nexport const { g, description } = makeLimitTestGroup(limit);\n\nconst kCreateComputePipelineTypes = [\n'createComputePipeline',\n'createComputePipelineAsync'];\n\n\n\nasync function createComputePipeline(\ndevice,\ndescriptor,\npipelineType)\n{\n  switch (pipelineType) {\n    case 'createComputePipeline':\n      return device.createComputePipeline(descriptor);\n    case 'createComputePipelineAsync':\n      return await device.createComputePipelineAsync(descriptor);\n  }\n}\n\n// Note: dispatchWorkgroupsIndirect is not tested because it's not a validation error if that exceeds the limits\ng.test('dispatchWorkgroups,at_over').\ndesc(`Test using dispatchWorkgroups at and over ${limit} limit`).\nparams(\n  kMaximumLimitBaseParams.\n  combine('pipelineType', kCreateComputePipelineTypes).\n  combine('axis', [0, 1, 2])\n).\nfn(async (t) => {\n  const { limitTest, testValueName, pipelineType, axis } = t.params;\n  await t.testDeviceWithRequestedMaximumLimits(\n    limitTest,\n    testValueName,\n    async ({ device, testValue, shouldError }) => {\n      const counts = [1, 1, 1];\n      counts[axis] = testValue;\n\n      const buffer = t.createBufferTracked({\n        size: 16,\n        usage: GPUBufferUsage.STORAGE\n      });\n\n      const module = device.createShaderModule({\n        code: `\n          @compute @workgroup_size(1) fn main() {\n          }\n          `\n      });\n\n      const pipeline = await createComputePipeline(\n        device,\n        {\n          layout: 'auto',\n          compute: {\n            module,\n            entryPoint: 'main'\n          }\n        },\n        pipelineType\n      );\n\n      const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", device, device.createCommandEncoder, [], () => device.createCommandEncoder());\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.dispatchWorkgroups(counts[0], counts[1], counts[2]);\n      pass.end();\n\n      await t.expectValidationError(() => {\n        encoder.finish();\n      }, shouldError);\n\n      globalThis._TRAMPOLINE_(\"destroy\", buffer, buffer.destroy, [], () => buffer.destroy());\n    }\n  );\n});\n\ng.test('validate').\ndesc(\n  `Test that ${limit} <= maxComputeWorkgroupSizeX x maxComputeWorkgroupSizeY x maxComputeWorkgroupSizeZ`\n).\nfn((t) => {\n  const { adapter, defaultLimit, adapterLimit } = t;\n  const defaultMaxComputeWorkgroupSizeProduct =\n  t.getDefaultLimit('maxComputeWorkgroupSizeX') *\n  t.getDefaultLimit('maxComputeWorkgroupSizeY') *\n  t.getDefaultLimit('maxComputeWorkgroupSizeZ');\n  const maxComputeWorkgroupSizeProduct =\n  adapter.limits.maxComputeWorkgroupSizeX *\n  adapter.limits.maxComputeWorkgroupSizeY *\n  adapter.limits.maxComputeWorkgroupSizeZ;\n  t.expect(defaultLimit <= defaultMaxComputeWorkgroupSizeProduct);\n  t.expect(adapterLimit <= maxComputeWorkgroupSizeProduct);\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,SAASA,uBAAuB,EAAEC,kBAAkB,QAAQ,kBAAkB,CAAC,MAAMC,KAAK,GAAG,kCAAkC,CAClI,OAAO,MAAM,EAAEC,CAAC,EAAEC,WAAW,CAAC,CAAC,GAAGH,kBAAkB,CAACC,KAAK,CAAC;AAE3D,MAAMG,2BAA2B,GAAG;AACpC,uBAAuB;AACvB,4BAA4B,CAAC;;;;AAI7B,eAAeC,qBAAqBA;AACpCC,MAAM;AACNC,UAAU;AACVC,YAAY;AACZ;EACE,QAAQA,YAAY;IAClB,KAAK,uBAAuB;MAC1B,OAAOF,MAAM,CAACD,qBAAqB,CAACE,UAAU,CAAC;IACjD,KAAK,4BAA4B;MAC/B,OAAO,MAAMD,MAAM,CAACG,0BAA0B,CAACF,UAAU,CAAC;EAC9D;AACF;;AAEA;AACAL,CAAC,CAACQ,IAAI,CAAC,4BAA4B,CAAC;AACpCC,IAAI,CAAC,6CAA6CV,KAAK,QAAQ,CAAC;AAChEW,MAAM;EACJb,uBAAuB;EACvBc,OAAO,CAAC,cAAc,EAAET,2BAA2B,CAAC;EACpDS,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC3B,CAAC;AACDC,EAAE,CAAC,OAAOC,CAAC,KAAK;EACd,MAAM,EAAEC,SAAS,EAAEC,aAAa,EAAET,YAAY,EAAEU,IAAI,CAAC,CAAC,GAAGH,CAAC,CAACH,MAAM;EACjE,MAAMG,CAAC,CAACI,oCAAoC;IAC1CH,SAAS;IACTC,aAAa;IACb,OAAO,EAAEX,MAAM,EAAEc,SAAS,EAAEC,WAAW,CAAC,CAAC,KAAK;MAC5C,MAAMC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACxBA,MAAM,CAACJ,IAAI,CAAC,GAAGE,SAAS;;MAExB,MAAMG,MAAM,GAAGR,CAAC,CAACS,mBAAmB,CAAC;QACnCC,IAAI,EAAE,EAAE;QACRC,KAAK,EAAEC,cAAc,CAACC;MACxB,CAAC,CAAC;;MAEF,MAAMC,MAAM,GAAGvB,MAAM,CAACwB,kBAAkB,CAAC;QACvCC,IAAI,EAAE;AACd;AACA;AACA;MACM,CAAC,CAAC;;MAEF,MAAMC,QAAQ,GAAG,MAAM3B,qBAAqB;QAC1CC,MAAM;QACN;UACE2B,MAAM,EAAE,MAAM;UACdC,OAAO,EAAE;YACPL,MAAM;YACNM,UAAU,EAAE;UACd;QACF,CAAC;QACD3B;MACF,CAAC;;MAED,MAAM4B,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAEhC,MAAM,EAAEA,MAAM,CAACiC,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAMhC,MAAM,EAANA,MAAM,CAAAiC,oBAAA,YAANjC,MAAM,CAACiC,oBAAoB,GAAE,CAAC;MAC7I,MAAMC,IAAI,GAAGJ,OAAO,CAACK,gBAAgB,CAAC,CAAC;MACvCD,IAAI,CAACE,WAAW,CAACV,QAAQ,CAAC;MAC1BQ,IAAI,CAACG,kBAAkB,CAACrB,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,EAAEA,MAAM,CAAC,CAAC,CAAC,CAAC;MACxDkB,IAAI,CAACI,GAAG,CAAC,CAAC;;MAEV,MAAM7B,CAAC,CAAC8B,qBAAqB,CAAC,MAAM;QAClCT,OAAO,CAACU,MAAM,CAAC,CAAC;MAClB,CAAC,EAAEzB,WAAW,CAAC;;MAEfgB,UAAU,CAACC,YAAY,CAAC,SAAS,EAAEf,MAAM,EAAEA,MAAM,CAACwB,OAAO,EAAE,EAAE,EAAE,MAAAV,UAAA,CAAAC,YAAA,YAAMf,MAAM,EAANA,MAAM,CAAAwB,OAAA,YAANxB,MAAM,CAACwB,OAAO,GAAE,CAAC;IACxF;EACF,CAAC;AACH,CAAC,CAAC;;AAEF7C,CAAC,CAACQ,IAAI,CAAC,UAAU,CAAC;AAClBC,IAAI;EACF,aAAaV,KAAK;AACpB,CAAC;AACDa,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAM,EAAEiC,OAAO,EAAEC,YAAY,EAAEC,YAAY,CAAC,CAAC,GAAGnC,CAAC;EACjD,MAAMoC,qCAAqC;EAC3CpC,CAAC,CAACqC,eAAe,CAAC,0BAA0B,CAAC;EAC7CrC,CAAC,CAACqC,eAAe,CAAC,0BAA0B,CAAC;EAC7CrC,CAAC,CAACqC,eAAe,CAAC,0BAA0B,CAAC;EAC7C,MAAMC,8BAA8B;EACpCL,OAAO,CAACM,MAAM,CAACC,wBAAwB;EACvCP,OAAO,CAACM,MAAM,CAACE,wBAAwB;EACvCR,OAAO,CAACM,MAAM,CAACG,wBAAwB;EACvC1C,CAAC,CAAC2C,MAAM,CAACT,YAAY,IAAIE,qCAAqC,CAAC;EAC/DpC,CAAC,CAAC2C,MAAM,CAACR,YAAY,IAAIG,8BAA8B,CAAC;AAC1D,CAAC,CAAC","ignoreList":[]}