{"version":3,"file":"createPipelineLayout.spec.js","names":["description","makeTestGroup","bufferBindingTypeInfo","kBufferBindingTypes","ValidationTest","clone","descriptor","JSON","parse","stringify","g","test","desc","paramsSubcasesOnly","u","combine","fn","t","type","visibility","params","info","maxDynamicLimit","perPipelineLimitClass","perStageLimit","getDefaultLimit","perStageLimitClass","maxLimit","maxDynamic","Math","min","maxDynamicBufferBindings","binding","push","buffer","hasDynamicOffset","maxDynamicBufferBindGroupLayout","device","createBindGroupLayout","entries","goodDescriptor","goodPipelineLayoutDescriptor","bindGroupLayouts","createPipelineLayout","badDescriptor","badPipelineLayoutDescriptor","expectValidationError","bindGroupLayoutDescriptor","maxBindGroupLayouts","map","layout0Mismatched","layout1Mismatched","beforeAllSubcases","selectMismatchedDeviceOrSkipTestCase","undefined","mismatched","bglDescriptor","layout0","mismatchedDevice","layout1"],"sources":["../../../../src/webgpu/api/validation/createPipelineLayout.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\ncreatePipelineLayout validation tests.\n\nTODO: review existing tests, write descriptions, and make sure tests are complete.\n`;import { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { bufferBindingTypeInfo, kBufferBindingTypes } from '../../capability_info.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nfunction clone(descriptor) {\n  return JSON.parse(JSON.stringify(descriptor));\n}\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('number_of_dynamic_buffers_exceeds_the_maximum_value').\ndesc(\n  `\n    Test that creating a pipeline layout fails with a validation error if the number of dynamic\n    buffers exceeds the maximum value in the pipeline layout.\n    - Test that creation of a pipeline using the maximum number of dynamic buffers added a dynamic\n      buffer fails.\n\n    TODO(#230): Update to enforce per-stage and per-pipeline-layout limits on BGLs as well.\n  `\n).\nparamsSubcasesOnly((u) =>\nu //\n.combine('visibility', [0, 2, 4, 6]).\ncombine('type', kBufferBindingTypes)\n).\nfn((t) => {\n  const { type, visibility } = t.params;\n  const info = bufferBindingTypeInfo({ type });\n  const { maxDynamicLimit } = info.perPipelineLimitClass;\n  const perStageLimit = t.getDefaultLimit(info.perStageLimitClass.maxLimit);\n  const maxDynamic = Math.min(\n    maxDynamicLimit ? t.getDefaultLimit(maxDynamicLimit) : 0,\n    perStageLimit\n  );\n\n  const maxDynamicBufferBindings = [];\n  for (let binding = 0; binding < maxDynamic; binding++) {\n    maxDynamicBufferBindings.push({\n      binding,\n      visibility,\n      buffer: { type, hasDynamicOffset: true }\n    });\n  }\n\n  const maxDynamicBufferBindGroupLayout = t.device.createBindGroupLayout({\n    entries: maxDynamicBufferBindings\n  });\n\n  const goodDescriptor = {\n    entries: [{ binding: 0, visibility, buffer: { type, hasDynamicOffset: false } }]\n  };\n\n  if (perStageLimit > maxDynamic) {\n    const goodPipelineLayoutDescriptor = {\n      bindGroupLayouts: [\n      maxDynamicBufferBindGroupLayout,\n      t.device.createBindGroupLayout(goodDescriptor)]\n\n    };\n\n    // Control case\n    t.device.createPipelineLayout(goodPipelineLayoutDescriptor);\n  }\n\n  // Check dynamic buffers exceed maximum in pipeline layout.\n  const badDescriptor = clone(goodDescriptor);\n  badDescriptor.entries[0].buffer.hasDynamicOffset = true;\n\n  const badPipelineLayoutDescriptor = {\n    bindGroupLayouts: [\n    maxDynamicBufferBindGroupLayout,\n    t.device.createBindGroupLayout(badDescriptor)]\n\n  };\n\n  t.expectValidationError(() => {\n    t.device.createPipelineLayout(badPipelineLayoutDescriptor);\n  });\n});\n\ng.test('number_of_bind_group_layouts_exceeds_the_maximum_value').\ndesc(\n  `\n    Test that creating a pipeline layout fails with a validation error if the number of bind group\n    layouts exceeds the maximum value in the pipeline layout.\n    - Test that creation of a pipeline using the maximum number of bind groups added a bind group\n      fails.\n  `\n).\nfn((t) => {\n  const bindGroupLayoutDescriptor = {\n    entries: []\n  };\n\n  // 4 is the maximum number of bind group layouts.\n  const maxBindGroupLayouts = [1, 2, 3, 4].map(() =>\n  t.device.createBindGroupLayout(bindGroupLayoutDescriptor)\n  );\n\n  const goodPipelineLayoutDescriptor = {\n    bindGroupLayouts: maxBindGroupLayouts\n  };\n\n  // Control case\n  t.device.createPipelineLayout(goodPipelineLayoutDescriptor);\n\n  // Check bind group layouts exceed maximum in pipeline layout.\n  const badPipelineLayoutDescriptor = {\n    bindGroupLayouts: [\n    ...maxBindGroupLayouts,\n    t.device.createBindGroupLayout(bindGroupLayoutDescriptor)]\n\n  };\n\n  t.expectValidationError(() => {\n    t.device.createPipelineLayout(badPipelineLayoutDescriptor);\n  });\n});\n\ng.test('bind_group_layouts,device_mismatch').\ndesc(\n  `\n    Tests createPipelineLayout cannot be called with bind group layouts created from another device\n    Test with two layouts to make sure all layouts can be validated:\n    - layout0 and layout1 from same device\n    - layout0 and layout1 from different device\n    `\n).\nparamsSubcasesOnly([\n{ layout0Mismatched: false, layout1Mismatched: false }, // control case\n{ layout0Mismatched: true, layout1Mismatched: false },\n{ layout0Mismatched: false, layout1Mismatched: true }]\n).\nbeforeAllSubcases((t) => {\n  t.selectMismatchedDeviceOrSkipTestCase(undefined);\n}).\nfn((t) => {\n  const { layout0Mismatched, layout1Mismatched } = t.params;\n\n  const mismatched = layout0Mismatched || layout1Mismatched;\n\n  const bglDescriptor = {\n    entries: []\n  };\n\n  const layout0 = layout0Mismatched ?\n  t.mismatchedDevice.createBindGroupLayout(bglDescriptor) :\n  t.device.createBindGroupLayout(bglDescriptor);\n  const layout1 = layout1Mismatched ?\n  t.mismatchedDevice.createBindGroupLayout(bglDescriptor) :\n  t.device.createBindGroupLayout(bglDescriptor);\n\n  t.expectValidationError(() => {\n    t.device.createPipelineLayout({ bindGroupLayouts: [layout0, layout1] });\n  }, mismatched);\n});"],"mappings":"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","ignoreList":[]}