{"version":3,"file":"createTexture.spec.js","names":["description","SkipTestCase","makeTestGroup","assert","makeValueTestVariant","kTextureDimensions","kTextureUsages","GPUConst","kAllTextureFormats","kTextureFormatInfo","kCompressedTextureFormats","kUncompressedTextureFormats","kRegularTextureFormats","kFeaturesForFormats","filterFormatsByFeature","viewCompatible","textureDimensionAndFormatCompatible","isTextureFormatUsableAsStorageFormat","maxMipLevelCount","ValidationTest","g","test","desc","params","u","combine","undefined","beginSubcases","filter","dimension","format","beforeAllSubcases","t","info","selectDeviceOrSkipTestCase","feature","fn","zeroArgument","size","blockWidth","blockHeight","mipLevelCount","usage","GPUTextureUsage","TEXTURE_BINDING","descriptor","success","expectValidationError","createTextureTracked","skipIfTextureFormatNotSupported","unless","largestDimension","kTargetMipLevelCount","kTargetLargeSize","largeSize","Math","floor","combineWithParams","sampleCount","RENDER_ATTACHMENT","multisample","arrayLayerCount","expand","usageSet","Set","usage0","usage1","add","TextureUsage","colorRender","STORAGE_BINDING","color","storage","satisfyWithStorageUsageRequirement","isCompatibility","shouldError","expandWithParams","p","_success","mult","widthVariant","height","depthOrArrayLayers","width","makeLimitVariant","device","limits","maxTextureDimension1D","sizeVariant","maxTextureDimension2D","maxTextureArrayLayers","map","limit","ndx","maxTextureDimension3D","variant","appliedDimension","formatFeature","viewFormatFeature","viewFormat","compatible","viewFormats"],"sources":["../../../../src/webgpu/api/validation/createTexture.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `createTexture validation tests.`;import { SkipTestCase } from '../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert, makeValueTestVariant } from '../../../common/util/util.js';\nimport { kTextureDimensions, kTextureUsages } from '../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\nimport {\n  kAllTextureFormats,\n  kTextureFormatInfo,\n  kCompressedTextureFormats,\n  kUncompressedTextureFormats,\n  kRegularTextureFormats,\n  kFeaturesForFormats,\n  filterFormatsByFeature,\n  viewCompatible,\n  textureDimensionAndFormatCompatible,\n  isTextureFormatUsableAsStorageFormat } from\n'../../format_info.js';\nimport { maxMipLevelCount } from '../../util/texture/base.js';\n\nimport { ValidationTest } from './validation_test.js';\n\nexport const g = makeTestGroup(ValidationTest);\n\ng.test('zero_size_and_usage').\ndesc(\n  `Test texture creation with zero or nonzero size of\n    width, height, depthOrArrayLayers and mipLevelCount, usage for every dimension, and\n    representative formats.\n  `\n).\nparams((u) =>\nu.\ncombine('dimension', [undefined, ...kTextureDimensions]).\ncombine('format', [\n'rgba8unorm',\n'rgb10a2unorm',\n'bc1-rgba-unorm',\n'depth24plus-stencil8']\n).\nbeginSubcases().\ncombine('zeroArgument', [\n'none',\n'width',\n'height',\n'depthOrArrayLayers',\n'mipLevelCount',\n'usage']\n)\n// Filter out incompatible dimension type and format combinations.\n.filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { dimension, zeroArgument, format } = t.params;\n  const info = kTextureFormatInfo[format];\n\n  const size = [info.blockWidth, info.blockHeight, 1];\n  let mipLevelCount = 1;\n  let usage = GPUTextureUsage.TEXTURE_BINDING;\n\n  switch (zeroArgument) {\n    case 'width':\n      size[0] = 0;\n      break;\n    case 'height':\n      size[1] = 0;\n      break;\n    case 'depthOrArrayLayers':\n      size[2] = 0;\n      break;\n    case 'mipLevelCount':\n      mipLevelCount = 0;\n      break;\n    case 'usage':\n      usage = 0;\n      break;\n    default:\n      break;\n  }\n\n  const descriptor = {\n    size,\n    mipLevelCount,\n    dimension,\n    format,\n    usage\n  };\n\n  const success = zeroArgument === 'none';\n\n  t.expectValidationError(() => {\n    t.createTextureTracked(descriptor);\n  }, !success);\n});\n\ng.test('dimension_type_and_format_compatibility').\ndesc(\n  `Test every dimension type on every format. Note that compressed formats and depth/stencil formats are not valid for 1D/3D dimension types.`\n).\nparams((u) =>\nu //\n.combine('dimension', [undefined, ...kTextureDimensions]).\ncombine('format', kAllTextureFormats)\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.skipIfTextureFormatNotSupported(format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { dimension, format } = t.params;\n  const info = kTextureFormatInfo[format];\n\n  const descriptor = {\n    size: [info.blockWidth, info.blockHeight, 1],\n    dimension,\n    format,\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  };\n\n  t.expectValidationError(() => {\n    t.createTextureTracked(descriptor);\n  }, !textureDimensionAndFormatCompatible(dimension, format));\n});\n\ng.test('mipLevelCount,format').\ndesc(\n  `Test texture creation with no mipmap chain, partial mipmap chain, full mipmap chain, out-of-bounds mipmap chain\n    for every format with different texture dimension types.`\n).\nparams((u) =>\nu.\ncombine('dimension', [undefined, ...kTextureDimensions]).\ncombine('format', kAllTextureFormats).\nbeginSubcases().\ncombine('mipLevelCount', [1, 2, 3, 6, 7])\n// Filter out incompatible dimension type and format combinations.\n.filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format)).\ncombine('largestDimension', [0, 1, 2]).\nunless(({ dimension, largestDimension }) => dimension === '1d' && largestDimension > 0)\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.skipIfTextureFormatNotSupported(format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { dimension, format, mipLevelCount, largestDimension } = t.params;\n  const info = kTextureFormatInfo[format];\n\n  // Compute dimensions such that the dimensions are in range [17, 32] and aligned with the\n  // format block size so that there will be exactly 6 mip levels.\n  const kTargetMipLevelCount = 5;\n  const kTargetLargeSize = (1 << kTargetMipLevelCount) - 1;\n  const largeSize = [\n  Math.floor(kTargetLargeSize / info.blockWidth) * info.blockWidth,\n  Math.floor(kTargetLargeSize / info.blockHeight) * info.blockHeight,\n  kTargetLargeSize];\n\n  assert(17 <= largeSize[0] && largeSize[0] <= 32);\n  assert(17 <= largeSize[1] && largeSize[1] <= 32);\n\n  // Note that compressed formats are not valid for 1D. They have already been filtered out for 1D\n  // in this test. So there is no dilemma about size.width equals 1 vs\n  // size.width % info.blockHeight equals 0 for 1D compressed formats.\n  const size = [info.blockWidth, info.blockHeight, 1];\n  size[largestDimension] = largeSize[largestDimension];\n\n  const descriptor = {\n    size,\n    mipLevelCount,\n    dimension,\n    format,\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  };\n\n  const success = mipLevelCount <= maxMipLevelCount(descriptor);\n\n  t.expectValidationError(() => {\n    t.createTextureTracked(descriptor);\n  }, !success);\n});\n\ng.test('mipLevelCount,bound_check').\ndesc(\n  `Test mip level count bound check upon different texture size and different texture dimension types.\n    The cases below test: 1) there must be no mip levels after a 1 level (1D texture), or 1x1 level (2D texture), or 1x1x1 level (3D texture), 2) array layers are not mip-mapped, 3) power-of-two, non-power-of-two, and non-square sizes.`\n).\nparams((u) =>\nu //\n.combine('format', ['rgba8unorm', 'bc1-rgba-unorm']).\nbeginSubcases().\ncombineWithParams([\n{ size: [32, 32] }, // Mip level sizes: 32x32, 16x16, 8x8, 4x4, 2x2, 1x1\n{ size: [31, 32] }, // Mip level sizes: 31x32, 15x16, 7x8, 3x4, 1x2, 1x1\n{ size: [28, 32] }, // Mip level sizes: 28x32, 14x16, 7x8, 3x4, 1x2, 1x1\n{ size: [32, 31] }, // Mip level sizes: 32x31, 16x15, 8x7, 4x3, 2x1, 1x1\n{ size: [32, 28] }, // Mip level sizes: 32x28, 16x14, 8x7, 4x3, 2x1, 1x1\n{ size: [31, 31] }, // Mip level sizes: 31x31, 15x15, 7x7, 3x3, 1x1\n{ size: [32], dimension: '1d' }, // Mip level sizes: 32, 16, 8, 4, 2, 1\n{ size: [31], dimension: '1d' }, // Mip level sizes: 31, 15, 7, 3, 1\n{ size: [32, 32, 32], dimension: '3d' }, // Mip level sizes: 32x32x32, 16x16x16, 8x8x8, 4x4x4, 2x2x2, 1x1x1\n{ size: [32, 31, 31], dimension: '3d' }, // Mip level sizes: 32x31x31, 16x15x15, 8x7x7, 4x3x3, 2x1x1, 1x1x1\n{ size: [31, 32, 31], dimension: '3d' }, // Mip level sizes: 31x32x31, 15x16x15, 7x8x7, 3x4x3, 1x2x1, 1x1x1\n{ size: [31, 31, 32], dimension: '3d' }, // Mip level sizes: 31x31x32, 15x15x16, 7x7x8, 3x3x4, 1x1x2, 1x1x1\n{ size: [31, 31, 31], dimension: '3d' }, // Mip level sizes: 31x31x31, 15x15x15, 7x7x7, 3x3x3, 1x1x1\n{ size: [32, 8] }, // Mip levels: 32x8, 16x4, 8x2, 4x1, 2x1, 1x1\n{ size: [32, 32, 64] }, // Mip levels: 32x32x64, 16x16x64, 8x8x64, 4x4x64, 2x2x64, 1x1x64\n{ size: [32, 32, 64], dimension: '3d' } // Mip levels: 32x32x64, 16x16x32, 8x8x16, 4x4x8, 2x2x4, 1x1x2, 1x1x1\n]).\nunless(\n  ({ format, size, dimension }) =>\n  format === 'bc1-rgba-unorm' && (\n  dimension === '1d' ||\n  dimension === '3d' ||\n  size[0] % kTextureFormatInfo[format].blockWidth !== 0 ||\n  size[1] % kTextureFormatInfo[format].blockHeight !== 0)\n)\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { format, size, dimension } = t.params;\n\n  const descriptor = {\n    size,\n    mipLevelCount: 0,\n    dimension,\n    format,\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  };\n\n  const mipLevelCount = maxMipLevelCount(descriptor);\n  descriptor.mipLevelCount = mipLevelCount;\n  t.createTextureTracked(descriptor);\n\n  descriptor.mipLevelCount = mipLevelCount + 1;\n  t.expectValidationError(() => {\n    t.createTextureTracked(descriptor);\n  });\n});\n\ng.test('mipLevelCount,bound_check,bigger_than_integer_bit_width').\ndesc(`Test mip level count bound check when mipLevelCount is bigger than integer bit width`).\nfn((t) => {\n  const descriptor = {\n    size: [32, 32],\n    mipLevelCount: 100,\n    format: 'rgba8unorm',\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  };\n\n  t.expectValidationError(() => {\n    t.createTextureTracked(descriptor);\n  });\n});\n\ng.test('sampleCount,various_sampleCount_with_all_formats').\ndesc(\n  `Test texture creation with various (valid or invalid) sample count and all formats. Note that 1D and 3D textures can't support multisample.`\n).\nparams((u) =>\nu.\ncombine('dimension', [undefined, '2d']).\ncombine('format', kAllTextureFormats).\nbeginSubcases().\ncombine('sampleCount', [0, 1, 2, 4, 8, 16, 32, 256])\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.skipIfTextureFormatNotSupported(format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { dimension, sampleCount, format } = t.params;\n  const info = kTextureFormatInfo[format];\n\n  const usage =\n  sampleCount > 1 ?\n  GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT :\n  GPUTextureUsage.TEXTURE_BINDING;\n  const descriptor = {\n    size: [32 * info.blockWidth, 32 * info.blockHeight, 1],\n    sampleCount,\n    dimension,\n    format,\n    usage\n  };\n\n  const success = sampleCount === 1 || sampleCount === 4 && info.multisample;\n\n  t.expectValidationError(() => {\n    t.createTextureTracked(descriptor);\n  }, !success);\n});\n\ng.test('sampleCount,valid_sampleCount_with_other_parameter_varies').\ndesc(\n  `Test texture creation with valid sample count when dimensions, arrayLayerCount, mipLevelCount,\n     format, and usage varies. Texture can be single sample (sampleCount is 1) or multi-sample\n     (sampleCount is 4). Multisample texture requires that\n     1) its dimension is 2d or undefined,\n     2) its format supports multisample,\n     3) its mipLevelCount and arrayLayerCount are 1,\n     4) its usage doesn't include STORAGE_BINDING,\n     5) its usage includes RENDER_ATTACHMENT.`\n).\nparams((u) =>\nu.\ncombine('dimension', [undefined, ...kTextureDimensions]).\ncombine('format', kAllTextureFormats).\nbeginSubcases().\ncombine('sampleCount', [1, 4]).\ncombine('arrayLayerCount', [1, 2]).\nunless(\n  ({ dimension, arrayLayerCount }) =>\n  arrayLayerCount === 2 && dimension !== '2d' && dimension !== undefined\n).\ncombine('mipLevelCount', [1, 2]).\nexpand('usage', () => {\n  const usageSet = new Set();\n  for (const usage0 of kTextureUsages) {\n    for (const usage1 of kTextureUsages) {\n      usageSet.add(usage0 | usage1);\n    }\n  }\n  return usageSet;\n})\n// Filter out incompatible dimension type and format combinations.\n.filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format)).\nunless(({ usage, format, mipLevelCount, dimension }) => {\n  const info = kTextureFormatInfo[format];\n  return (\n    (usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 && (\n    !info.colorRender || dimension !== '2d') ||\n    (usage & GPUConst.TextureUsage.STORAGE_BINDING) !== 0 && !info.color?.storage ||\n    mipLevelCount !== 1 && dimension === '1d');\n\n})\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.skipIfTextureFormatNotSupported(format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { dimension, sampleCount, format, mipLevelCount, arrayLayerCount, usage } = t.params;\n  const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n\n  const size =\n  dimension === '1d' ?\n  [32 * blockWidth, 1 * blockHeight, 1] :\n  dimension === '2d' || dimension === undefined ?\n  [32 * blockWidth, 32 * blockHeight, arrayLayerCount] :\n  [32 * blockWidth, 32 * blockHeight, 32];\n  const descriptor = {\n    size,\n    mipLevelCount,\n    sampleCount,\n    dimension,\n    format,\n    usage\n  };\n\n  const satisfyWithStorageUsageRequirement =\n  (usage & GPUConst.TextureUsage.STORAGE_BINDING) === 0 ||\n  isTextureFormatUsableAsStorageFormat(format, t.isCompatibility);\n\n  const success =\n  sampleCount === 1 && satisfyWithStorageUsageRequirement ||\n  sampleCount === 4 && (\n  dimension === '2d' || dimension === undefined) &&\n  kTextureFormatInfo[format].multisample &&\n  mipLevelCount === 1 &&\n  arrayLayerCount === 1 &&\n  (usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 &&\n  (usage & GPUConst.TextureUsage.STORAGE_BINDING) === 0;\n\n  t.expectValidationError(() => {\n    t.createTextureTracked(descriptor);\n  }, !success);\n});\n\ng.test('sample_count,1d_2d_array_3d').\ndesc(`Test that you can not create 1d, 2d_array, and 3d multisampled textures`).\nparams((u) =>\nu.combineWithParams([\n{ dimension: '2d', size: [4, 4, 1], shouldError: false },\n{ dimension: '1d', size: [4, 1, 1], shouldError: true },\n{ dimension: '2d', size: [4, 4, 4], shouldError: true },\n{ dimension: '2d', size: [4, 4, 6], shouldError: true },\n{ dimension: '3d', size: [4, 4, 4], shouldError: true }]\n)\n).\nfn((t) => {\n  const { dimension, size, shouldError } = t.params;\n\n  t.expectValidationError(() => {\n    t.createTextureTracked({\n      size,\n      dimension,\n      sampleCount: 4,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT\n    });\n  }, shouldError);\n});\n\ng.test('texture_size,default_value_and_smallest_size,uncompressed_format').\ndesc(\n  `Test default values for height and depthOrArrayLayers for every dimension type and every uncompressed format.\n    It also tests smallest size (lower bound) for every dimension type and every uncompressed format, while other texture_size tests are testing the upper bound.`\n).\nparams((u) =>\nu.\ncombine('dimension', [undefined, ...kTextureDimensions]).\ncombine('format', kUncompressedTextureFormats).\nbeginSubcases().\ncombine('size', [[1], [1, 1], [1, 1, 1]])\n// Filter out incompatible dimension type and format combinations.\n.filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.skipIfTextureFormatNotSupported(format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { dimension, format, size } = t.params;\n\n  const descriptor = {\n    size,\n    dimension,\n    format,\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  };\n\n  t.createTextureTracked(descriptor);\n});\n\ng.test('texture_size,default_value_and_smallest_size,compressed_format').\ndesc(\n  `Test default values for height and depthOrArrayLayers for every dimension type and every compressed format.\n    It also tests smallest size (lower bound) for every dimension type and every compressed format, while other texture_size tests are testing the upper bound.`\n).\nparams((u) =>\nu\n// Compressed formats are invalid for 1D and 3D.\n.combine('dimension', [undefined, '2d']).\ncombine('format', kCompressedTextureFormats).\nbeginSubcases().\nexpandWithParams((p) => {\n  const { blockWidth, blockHeight } = kTextureFormatInfo[p.format];\n  return [\n  { size: [1], _success: false },\n  { size: [blockWidth], _success: false },\n  { size: [1, 1], _success: false },\n  { size: [blockWidth, blockHeight], _success: true },\n  { size: [1, 1, 1], _success: false },\n  { size: [blockWidth, blockHeight, 1], _success: true }];\n\n})\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { dimension, format, size, _success } = t.params;\n\n  const descriptor = {\n    size,\n    dimension,\n    format,\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  };\n\n  t.expectValidationError(() => {\n    t.createTextureTracked(descriptor);\n  }, !_success);\n});\n\ng.test('texture_size,1d_texture').\ndesc(`Test texture size requirement for 1D texture`).\nparams((u) =>\nu //\n// Compressed and depth-stencil textures are invalid for 1D.\n.combine('format', kRegularTextureFormats).\nbeginSubcases().\ncombine('widthVariant', [\n{ mult: 1, add: -1 },\n{ mult: 1, add: 0 },\n{ mult: 1, add: 1 }]\n).\ncombine('height', [1, 2]).\ncombine('depthOrArrayLayers', [1, 2])\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.skipIfTextureFormatNotSupported(format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { format, widthVariant, height, depthOrArrayLayers } = t.params;\n  const width = t.makeLimitVariant('maxTextureDimension1D', widthVariant);\n\n  const descriptor = {\n    size: [width, height, depthOrArrayLayers],\n    dimension: '1d',\n    format,\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  };\n\n  const success =\n  width <= t.device.limits.maxTextureDimension1D && height === 1 && depthOrArrayLayers === 1;\n\n  t.expectValidationError(() => {\n    t.createTextureTracked(descriptor);\n  }, !success);\n});\n\ng.test('texture_size,2d_texture,uncompressed_format').\ndesc(`Test texture size requirement for 2D texture with uncompressed format.`).\nparams((u) =>\nu.\ncombine('dimension', [undefined, '2d']).\ncombine('format', kUncompressedTextureFormats).\ncombine(\n  'sizeVariant',\n  [\n  // Test the bound of width\n  [{ mult: 1, add: -1 }, { mult: 0, add: 1 }, { mult: 0, add: 1 }],\n  [{ mult: 1, add: 0 }, { mult: 0, add: 1 }, { mult: 0, add: 1 }],\n  [{ mult: 1, add: 1 }, { mult: 0, add: 1 }, { mult: 0, add: 1 }],\n  // Test the bound of height\n  [{ mult: 0, add: 1 }, { mult: 1, add: -1 }, { mult: 0, add: 1 }],\n  [{ mult: 0, add: 1 }, { mult: 1, add: 0 }, { mult: 0, add: 1 }],\n  [{ mult: 0, add: 1 }, { mult: 1, add: 1 }, { mult: 0, add: 1 }],\n  // Test the bound of array layers\n  [{ mult: 0, add: 1 }, { mult: 0, add: 1 }, { mult: 1, add: -1 }],\n  [{ mult: 0, add: 1 }, { mult: 0, add: 1 }, { mult: 1, add: 0 }],\n  [{ mult: 0, add: 1 }, { mult: 0, add: 1 }, { mult: 1, add: 1 }]]\n\n)\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.skipIfTextureFormatNotSupported(format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { dimension, format, sizeVariant } = t.params;\n  const size = [\n  t.device.limits.maxTextureDimension2D,\n  t.device.limits.maxTextureDimension2D,\n  t.device.limits.maxTextureArrayLayers].\n  map((limit, ndx) => makeValueTestVariant(limit, sizeVariant[ndx]));\n\n  const descriptor = {\n    size,\n    dimension,\n    format,\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  };\n\n  const success =\n  size[0] <= t.device.limits.maxTextureDimension2D &&\n  size[1] <= t.device.limits.maxTextureDimension2D &&\n  size[2] <= t.device.limits.maxTextureArrayLayers;\n\n  t.expectValidationError(() => {\n    t.createTextureTracked(descriptor);\n  }, !success);\n});\n\ng.test('texture_size,2d_texture,compressed_format').\ndesc(`Test texture size requirement for 2D texture with compressed format.`).\nparams((u) =>\nu.\ncombine('dimension', [undefined, '2d']).\ncombine('format', kCompressedTextureFormats).\nbeginSubcases().\nexpand('sizeVariant', (p) => {\n  const { blockWidth, blockHeight } = kTextureFormatInfo[p.format];\n  return [\n  // Test the bound of width\n  [\n  { mult: 1, add: -1 },\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 1, add: -blockWidth },\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 1, add: -blockWidth },\n  { mult: 0, add: blockHeight },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 1, add: 0 },\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 1, add: 0 },\n  { mult: 0, add: blockHeight },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 1, add: 1 },\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 1, add: blockWidth },\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 1, add: blockWidth },\n  { mult: 0, add: blockHeight },\n  { mult: 0, add: 1 }],\n\n  // Test the bound of height\n  [\n  { mult: 0, add: 1 },\n  { mult: 1, add: -1 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 1, add: -blockHeight },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 1, add: -blockHeight },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 1, add: 0 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 1, add: 0 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 1, add: +1 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 1, add: +blockWidth },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 1, add: +blockHeight },\n  { mult: 0, add: 1 }],\n\n  // Test the bound of array layers\n  [\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 },\n  { mult: 1, add: -1 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 0, add: 1 },\n  { mult: 1, add: -1 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 0, add: blockHeight },\n  { mult: 1, add: -1 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 0, add: blockHeight },\n  { mult: 1, add: -1 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 },\n  { mult: 1, add: 0 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 0, add: 1 },\n  { mult: 1, add: 0 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 0, add: blockHeight },\n  { mult: 1, add: 0 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 0, add: blockHeight },\n  { mult: 1, add: 0 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 },\n  { mult: 1, add: +1 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 0, add: 1 },\n  { mult: 1, add: +1 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 0, add: blockHeight },\n  { mult: 1, add: +1 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 0, add: blockHeight },\n  { mult: 1, add: +1 }]];\n\n\n})\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { dimension, format, sizeVariant } = t.params;\n  const info = kTextureFormatInfo[format];\n  const size = [\n  t.device.limits.maxTextureDimension2D,\n  t.device.limits.maxTextureDimension2D,\n  t.device.limits.maxTextureArrayLayers].\n  map((limit, ndx) => makeValueTestVariant(limit, sizeVariant[ndx]));\n\n  const descriptor = {\n    size,\n    dimension,\n    format,\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  };\n\n  const success =\n  size[0] % info.blockWidth === 0 &&\n  size[1] % info.blockHeight === 0 &&\n  size[0] <= t.device.limits.maxTextureDimension2D &&\n  size[1] <= t.device.limits.maxTextureDimension2D &&\n  size[2] <= t.device.limits.maxTextureArrayLayers;\n\n  t.expectValidationError(() => {\n    t.createTextureTracked(descriptor);\n  }, !success);\n});\n\ng.test('texture_size,3d_texture,uncompressed_format').\ndesc(\n  `Test texture size requirement for 3D texture with uncompressed format. Note that depth/stencil formats are invalid for 3D textures, so we only test regular formats.`\n).\nparams((u) =>\nu //\n.combine('format', kRegularTextureFormats).\nbeginSubcases().\ncombine(\n  'sizeVariant',\n  [\n  // Test the bound of width\n  [{ mult: 1, add: -1 }, { mult: 0, add: 1 }, { mult: 0, add: 1 }],\n  [{ mult: 1, add: 0 }, { mult: 0, add: 1 }, { mult: 0, add: 1 }],\n  [{ mult: 1, add: +1 }, { mult: 0, add: 1 }, { mult: 0, add: 1 }],\n  // Test the bound of height\n  [{ mult: 0, add: 1 }, { mult: 1, add: -1 }, { mult: 0, add: 1 }],\n  [{ mult: 0, add: 1 }, { mult: 1, add: 0 }, { mult: 0, add: 1 }],\n  [{ mult: 0, add: 1 }, { mult: 1, add: +1 }, { mult: 0, add: 1 }],\n  // Test the bound of depth\n  [{ mult: 0, add: 1 }, { mult: 0, add: 1 }, { mult: 1, add: -1 }],\n  [{ mult: 0, add: 1 }, { mult: 0, add: 1 }, { mult: 1, add: 0 }],\n  [{ mult: 0, add: 1 }, { mult: 0, add: 1 }, { mult: 1, add: +1 }]]\n\n)\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.skipIfTextureFormatNotSupported(format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { format, sizeVariant } = t.params;\n  const maxTextureDimension3D = t.device.limits.maxTextureDimension3D;\n  const size = sizeVariant.map((variant) => t.makeLimitVariant('maxTextureDimension3D', variant));\n\n  const descriptor = {\n    size,\n    dimension: '3d',\n    format,\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  };\n\n  const success =\n  size[0] <= maxTextureDimension3D &&\n  size[1] <= maxTextureDimension3D &&\n  size[2] <= maxTextureDimension3D;\n\n  t.expectValidationError(() => {\n    t.createTextureTracked(descriptor);\n  }, !success);\n});\n\ng.test('texture_size,3d_texture,compressed_format').\ndesc(`Test texture size requirement for 3D texture with compressed format.`).\nparams((u) =>\nu //\n.combine('format', kCompressedTextureFormats).\nbeginSubcases().\nexpand('sizeVariant', (p) => {\n  const { blockWidth, blockHeight } = kTextureFormatInfo[p.format];\n  return [\n  // Test the bound of width\n  [\n  { mult: 1, add: -1 },\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 1, add: -blockWidth },\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 1, add: -blockWidth },\n  { mult: 0, add: blockHeight },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 1, add: 0 },\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 1, add: 0 },\n  { mult: 0, add: blockHeight },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 1, add: +1 },\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 1, add: +blockWidth },\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 1, add: +blockWidth },\n  { mult: 0, add: blockHeight },\n  { mult: 0, add: 1 }],\n\n  // Test the bound of height\n  [\n  { mult: 0, add: 1 },\n  { mult: 1, add: -1 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 1, add: -blockHeight },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 1, add: -blockHeight },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 1, add: 0 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 1, add: 0 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 1, add: +1 },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 1, add: +blockWidth },\n  { mult: 0, add: 1 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 1, add: +blockHeight },\n  { mult: 0, add: 1 }],\n\n  // Test the bound of depth\n  [\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 },\n  { mult: 1, add: -1 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 0, add: 1 },\n  { mult: 1, add: -1 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 0, add: blockHeight },\n  { mult: 1, add: -1 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 0, add: blockHeight },\n  { mult: 1, add: -1 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 },\n  { mult: 1, add: 0 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 0, add: 1 },\n  { mult: 1, add: 0 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 0, add: blockHeight },\n  { mult: 1, add: 0 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 0, add: blockHeight },\n  { mult: 1, add: 0 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 0, add: 1 },\n  { mult: 1, add: +1 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 0, add: 1 },\n  { mult: 1, add: +1 }],\n\n  [\n  { mult: 0, add: 1 },\n  { mult: 0, add: blockHeight },\n  { mult: 1, add: +1 }],\n\n  [\n  { mult: 0, add: blockWidth },\n  { mult: 0, add: blockHeight },\n  { mult: 1, add: +1 }]];\n\n\n})\n).\nbeforeAllSubcases((t) => {\n  // Compressed formats are not supported in 3D in WebGPU v1 because they are complicated but not very useful for now.\n  throw new SkipTestCase('Compressed 3D texture is not supported');\n\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { format, sizeVariant } = t.params;\n  const info = kTextureFormatInfo[format];\n\n  const maxTextureDimension3D = t.device.limits.maxTextureDimension3D;\n  const size = sizeVariant.map((variant) => t.makeLimitVariant('maxTextureDimension3D', variant));\n\n  assert(\n    maxTextureDimension3D % info.blockWidth === 0 &&\n    maxTextureDimension3D % info.blockHeight === 0\n  );\n\n  const descriptor = {\n    size,\n    dimension: '3d',\n    format,\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  };\n\n  const success =\n  size[0] % info.blockWidth === 0 &&\n  size[1] % info.blockHeight === 0 &&\n  size[0] <= maxTextureDimension3D &&\n  size[1] <= maxTextureDimension3D &&\n  size[2] <= maxTextureDimension3D;\n\n  t.expectValidationError(() => {\n    t.createTextureTracked(descriptor);\n  }, !success);\n});\n\ng.test('texture_usage').\ndesc(\n  `Test texture usage (single usage or combined usages) for every texture format and every dimension type`\n).\nparams((u) =>\nu.\ncombine('dimension', [undefined, ...kTextureDimensions]).\ncombine('format', kAllTextureFormats).\nbeginSubcases()\n// If usage0 and usage1 are the same, then the usage being test is a single usage. Otherwise, it is a combined usage.\n.combine('usage0', kTextureUsages).\ncombine('usage1', kTextureUsages)\n// Filter out incompatible dimension type and format combinations.\n.filter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format))\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const info = kTextureFormatInfo[format];\n  t.skipIfTextureFormatNotSupported(format);\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { dimension, format, usage0, usage1 } = t.params;\n  const info = kTextureFormatInfo[format];\n\n  const size = [info.blockWidth, info.blockHeight, 1];\n  const usage = usage0 | usage1;\n  const descriptor = {\n    size,\n    dimension,\n    format,\n    usage\n  };\n\n  let success = true;\n  const appliedDimension = dimension ?? '2d';\n  // Note that we unconditionally test copy usages for all formats. We don't check copySrc/copyDst in kTextureFormatInfo in capability_info.js\n  // if (!info.copySrc && (usage & GPUTextureUsage.COPY_SRC) !== 0) success = false;\n  // if (!info.copyDst && (usage & GPUTextureUsage.COPY_DST) !== 0) success = false;\n  if (usage & GPUTextureUsage.STORAGE_BINDING) {\n    if (!isTextureFormatUsableAsStorageFormat(format, t.isCompatibility)) success = false;\n  }\n  if (usage & GPUTextureUsage.RENDER_ATTACHMENT) {\n    if (appliedDimension === '1d') success = false;\n    if (info.color && !info.colorRender) success = false;\n  }\n\n  t.expectValidationError(() => {\n    t.createTextureTracked(descriptor);\n  }, !success);\n});\n\ng.test('viewFormats').\ndesc(\n  `Test creating a texture with viewFormats list for all {texture format}x{view format}. Only compatible view formats should be valid.`\n).\nparams((u) =>\nu.\ncombine('formatFeature', kFeaturesForFormats).\ncombine('viewFormatFeature', kFeaturesForFormats).\nbeginSubcases().\nexpand('format', ({ formatFeature }) =>\nfilterFormatsByFeature(formatFeature, kAllTextureFormats)\n).\nexpand('viewFormat', ({ viewFormatFeature }) =>\nfilterFormatsByFeature(viewFormatFeature, kAllTextureFormats)\n)\n).\nbeforeAllSubcases((t) => {\n  const { formatFeature, viewFormatFeature } = t.params;\n  t.selectDeviceOrSkipTestCase([formatFeature, viewFormatFeature]);\n}).\nfn((t) => {\n  const { format, viewFormat } = t.params;\n  const { blockWidth, blockHeight } = kTextureFormatInfo[format];\n\n  t.skipIfTextureFormatNotSupported(format, viewFormat);\n\n  const compatible = viewCompatible(t.isCompatibility, format, viewFormat);\n\n  // Test the viewFormat in the list.\n  t.expectValidationError(() => {\n    t.createTextureTracked({\n      format,\n      size: [blockWidth, blockHeight],\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n      viewFormats: [viewFormat]\n    });\n  }, !compatible);\n\n  // Test the viewFormat and the texture format in the list.\n  t.expectValidationError(() => {\n    t.createTextureTracked({\n      format,\n      size: [blockWidth, blockHeight],\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n      viewFormats: [viewFormat, format]\n    });\n  }, !compatible);\n\n  // Test the viewFormat multiple times in the list.\n  t.expectValidationError(() => {\n    t.createTextureTracked({\n      format,\n      size: [blockWidth, blockHeight],\n      usage: GPUTextureUsage.TEXTURE_BINDING,\n      viewFormats: [viewFormat, viewFormat]\n    });\n  }, !compatible);\n});"],"mappings":"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","ignoreList":[]}