{"version":3,"file":"by_copy.js","names":["assert","kTextureFormatInfo","virtualMipSize","checkContentsByBufferCopy","t","params","texture","state","subresourceRange","level","mipLevel","layer","each","format","expectSingleColor","size","textureWidth","textureHeight","textureDepth","dimension","slice","layout","aspect","exp","stateToTexelComponents","checkContentsByTextureCopy","width","height","depth","dst","createTextureTracked","usage","GPUTextureUsage","COPY_DST","COPY_SRC","commandEncoder","globalThis","_TRAMPOLINE_","device","createCommandEncoder","copyTextureToTexture","origin","x","y","z","depthOrArrayLayers","queue","submit","finish"],"sources":["../../../../../../src/webgpu/api/operation/resource_init/check_texture/by_copy.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { assert } from '../../../../../common/util/util.js';import { kTextureFormatInfo } from '../../../../format_info.js';import { virtualMipSize } from '../../../../util/texture/base.js';\n\n\n\nexport const checkContentsByBufferCopy = (\nt,\nparams,\ntexture,\nstate,\nsubresourceRange) =>\n{\n  for (const { level: mipLevel, layer } of subresourceRange.each()) {\n    assert(params.format in kTextureFormatInfo);\n    const format = params.format;\n\n    t.expectSingleColor(texture, format, {\n      size: [t.textureWidth, t.textureHeight, t.textureDepth],\n      dimension: params.dimension,\n      slice: params.dimension === '2d' ? layer : 0,\n      layout: { mipLevel, aspect: params.aspect },\n      exp: t.stateToTexelComponents[state]\n    });\n  }\n};\n\nexport const checkContentsByTextureCopy = (\nt,\nparams,\ntexture,\nstate,\nsubresourceRange) =>\n{\n  for (const { level, layer } of subresourceRange.each()) {\n    assert(params.format in kTextureFormatInfo);\n    const format = params.format;\n\n    const [width, height, depth] = virtualMipSize(\n      params.dimension,\n      [t.textureWidth, t.textureHeight, t.textureDepth],\n      level\n    );\n\n    const dst = t.createTextureTracked({\n      dimension: params.dimension,\n      size: [width, height, depth],\n      format: params.format,\n      usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.COPY_SRC\n    });\n\n    const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n    commandEncoder.copyTextureToTexture(\n      { texture, mipLevel: level, origin: { x: 0, y: 0, z: layer } },\n      { texture: dst, mipLevel: 0 },\n      { width, height, depthOrArrayLayers: depth }\n    );\n    globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[commandEncoder.finish()]], () => t.queue.submit([commandEncoder.finish()]));\n\n    t.expectSingleColor(dst, format, {\n      size: [width, height, depth],\n      exp: t.stateToTexelComponents[state],\n      layout: { mipLevel: 0, aspect: params.aspect }\n    });\n  }\n};"],"mappings":"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","ignoreList":[]}