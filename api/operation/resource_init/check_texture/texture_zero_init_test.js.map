{"version":3,"file":"texture_zero_init_test.js","names":["kUnitCaseParamsBuilder","assert","unreachable","kTextureAspects","kTextureDimensions","GPUConst","kTextureFormatInfo","kUncompressedTextureFormats","textureDimensionAndFormatCompatible","GPUTest","virtualMipSize","createTextureUploadBuffer","SubresourceRange","kTexelRepresentationInfo","UninitializeMethod","kUninitializeMethods","Object","keys","ReadMethod","kMipLevelCounts","kUninitializedMipRangesToTest","begin","end","kSampleCounts","kUninitializedLayerRangesToTest","InitializedState","initializedStateAsFloat","Zero","Canary","initializedStateAsUint","initializedStateAsSint","initializedStateAsColor","state","format","value","indexOf","initializedStateAsDepth","initializedStateAsStencil","allAspectsCopyDst","info","color","copyDst","depth","stencil","getRequiredTextureUsage","sampleCount","uninitializeMethod","readMethod","usage","TextureUsage","COPY_DST","Creation","StoreOpClear","RENDER_ATTACHMENT","CopyToBuffer","CopyToTexture","COPY_SRC","Sample","TEXTURE_BINDING","Storage","STORAGE_BINDING","DepthTest","StencilTest","ColorBlending","colorRender","TextureZeroInitTest","constructor","sharedState","rec","params","p","stateToTexelComponents","R","G","B","A","Depth","Stencil","textureWidth","width","mipLevelCount","nonPowerOfTwo","textureHeight","dimension","height","textureDepth","textureDepthOrArrayLayers","layerCount","iterateUninitializedSubresources","mipRange","layerRange","iterateInitializedSubresources","uninitialized","Array","level","length","subresources","layer","each","count","generateTextureViewDescriptorsForRendering","aspect","subresourceRange","viewDescriptor","undefined","baseMipLevel","baseArrayLayer","arrayLayerCount","initializeWithStoreOp","texture","commandEncoder","globalThis","_TRAMPOLINE_","device","createCommandEncoder","pushDebugGroup","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","depthStencilAttachment","depthClearValue","depthLoadOp","depthStoreOp","stencilClearValue","stencilLoadOp","stencilStoreOp","popDebugGroup","queue","submit","finish","initializeWithCopy","firstSubresource","next","textureSize","largestWidth","largestHeight","largestDepth","rep","texelData","Uint8Array","pack","encode","buffer","bytesPerRow","rowsPerImage","copyBufferToTexture","mipLevel","origin","x","y","z","depthOrArrayLayers","destroy","initializeTexture","discardTexture","desc","kTestParams","combine","filter","beginSubcases","unless","formatInfo","expandWithParams","storage","multisample"],"sources":["../../../../../../src/webgpu/api/operation/resource_init/check_texture/texture_zero_init_test.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { kUnitCaseParamsBuilder } from\n\n'../../../../../common/framework/params_builder.js';\nimport { assert, unreachable } from '../../../../../common/util/util.js';\nimport { kTextureAspects, kTextureDimensions } from '../../../../capability_info.js';\nimport { GPUConst } from '../../../../constants.js';\nimport {\n  kTextureFormatInfo,\n  kUncompressedTextureFormats,\n  textureDimensionAndFormatCompatible } from\n\n\n'../../../../format_info.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { virtualMipSize } from '../../../../util/texture/base.js';\nimport { createTextureUploadBuffer } from '../../../../util/texture/layout.js';\nimport { SubresourceRange } from '../../../../util/texture/subresource.js';\nimport {\n\n  kTexelRepresentationInfo } from\n'../../../../util/texture/texel_data.js';\n\nexport let UninitializeMethod = /*#__PURE__*/function (UninitializeMethod) {UninitializeMethod[\"Creation\"] = \"Creation\";UninitializeMethod[\"StoreOpClear\"] = \"StoreOpClear\";return UninitializeMethod;}({});\n\n// The texture was rendered to with GPUStoreOp \"clear\"\n\nconst kUninitializeMethods = Object.keys(UninitializeMethod);\n\nexport let ReadMethod = /*#__PURE__*/function (ReadMethod) {ReadMethod[\"Sample\"] = \"Sample\";ReadMethod[\"CopyToBuffer\"] = \"CopyToBuffer\";ReadMethod[\"CopyToTexture\"] = \"CopyToTexture\";ReadMethod[\"DepthTest\"] = \"DepthTest\";ReadMethod[\"StencilTest\"] = \"StencilTest\";ReadMethod[\"ColorBlending\"] = \"ColorBlending\";ReadMethod[\"Storage\"] = \"Storage\";return ReadMethod;}({});\n\n\n\n\n\n\n// Read the texture as a storage texture\n\n\n// Test with these mip level counts\n\nconst kMipLevelCounts = [1, 5];\n\n// For each mip level count, define the mip ranges to leave uninitialized.\nconst kUninitializedMipRangesToTest = {\n  1: [{ begin: 0, end: 1 }], // Test the only mip\n  5: [\n  { begin: 0, end: 2 },\n  { begin: 3, end: 4 }]\n  // Test a range and a single mip\n};\n\n// Test with these sample counts.\nconst kSampleCounts = [1, 4];\n\n// Test with these layer counts.\n\n\n// For each layer count, define the layers to leave uninitialized.\nconst kUninitializedLayerRangesToTest = {\n  1: [{ begin: 0, end: 1 }], // Test the only layer\n  7: [\n  { begin: 2, end: 4 },\n  { begin: 6, end: 7 }]\n  // Test a range and a single layer\n};\n\n// Enums to abstract over color / depth / stencil values in textures. Depending on the texture format,\n// the data for each value may have a different representation. These enums are converted to a\n// representation such that their values can be compared. ex.) An integer is needed to upload to an\n// unsigned normalized format, but its value is read as a float in the shader.\nexport let InitializedState = /*#__PURE__*/function (InitializedState) {InitializedState[InitializedState[\"Canary\"] = 0] = \"Canary\";InitializedState[InitializedState[\"Zero\"] = 1] = \"Zero\";return InitializedState;}({});\n\n// We check that uninitialized subresources are in this state when read back.\n\n\nconst initializedStateAsFloat = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 1\n};\n\nconst initializedStateAsUint = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 1\n};\n\nconst initializedStateAsSint = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: -1\n};\n\nfunction initializedStateAsColor(\nstate,\nformat)\n{\n  let value;\n  if (format.indexOf('uint') !== -1) {\n    value = initializedStateAsUint[state];\n  } else if (format.indexOf('sint') !== -1) {\n    value = initializedStateAsSint[state];\n  } else {\n    value = initializedStateAsFloat[state];\n  }\n  return [value, value, value, value];\n}\n\nconst initializedStateAsDepth = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 0.8\n};\n\nconst initializedStateAsStencil = {\n  [InitializedState.Zero]: 0,\n  [InitializedState.Canary]: 42\n};\n\nfunction allAspectsCopyDst(info) {\n  return (\n    (!info.color || info.color.copyDst) && (\n    !info.depth || info.depth.copyDst) && (\n    !info.stencil || info.stencil.copyDst));\n\n}\n\nexport function getRequiredTextureUsage(\nformat,\nsampleCount,\nuninitializeMethod,\nreadMethod)\n{\n  let usage = GPUConst.TextureUsage.COPY_DST;\n\n  switch (uninitializeMethod) {\n    case UninitializeMethod.Creation:\n      break;\n    case UninitializeMethod.StoreOpClear:\n      usage |= GPUConst.TextureUsage.RENDER_ATTACHMENT;\n      break;\n    default:\n      unreachable();\n  }\n\n  switch (readMethod) {\n    case ReadMethod.CopyToBuffer:\n    case ReadMethod.CopyToTexture:\n      usage |= GPUConst.TextureUsage.COPY_SRC;\n      break;\n    case ReadMethod.Sample:\n      usage |= GPUConst.TextureUsage.TEXTURE_BINDING;\n      break;\n    case ReadMethod.Storage:\n      usage |= GPUConst.TextureUsage.STORAGE_BINDING;\n      break;\n    case ReadMethod.DepthTest:\n    case ReadMethod.StencilTest:\n    case ReadMethod.ColorBlending:\n      usage |= GPUConst.TextureUsage.RENDER_ATTACHMENT;\n      break;\n    default:\n      unreachable();\n  }\n\n  if (sampleCount > 1) {\n    // Copies to multisampled textures are not allowed. We need OutputAttachment to initialize\n    // canary data in multisampled textures.\n    usage |= GPUConst.TextureUsage.RENDER_ATTACHMENT;\n  }\n\n  const info = kTextureFormatInfo[format];\n  if (!allAspectsCopyDst(info)) {\n    // Copies are not possible. We need OutputAttachment to initialize\n    // canary data.\n    if (info.color) assert(!!info.colorRender, 'not implemented for non-renderable color');\n    usage |= GPUConst.TextureUsage.RENDER_ATTACHMENT;\n  }\n\n  return usage;\n}\n\nexport class TextureZeroInitTest extends GPUTest {\n\n\n\n  constructor(sharedState, rec, params) {\n    super(sharedState, rec, params);\n    this.p = params;\n\n    const stateToTexelComponents = (state) => {\n      const [R, G, B, A] = initializedStateAsColor(state, this.p.format);\n      return {\n        R,\n        G,\n        B,\n        A,\n        Depth: initializedStateAsDepth[state],\n        Stencil: initializedStateAsStencil[state]\n      };\n    };\n\n    this.stateToTexelComponents = {\n      [InitializedState.Zero]: stateToTexelComponents(InitializedState.Zero),\n      [InitializedState.Canary]: stateToTexelComponents(InitializedState.Canary)\n    };\n  }\n\n  get textureWidth() {\n    let width = 1 << this.p.mipLevelCount;\n    if (this.p.nonPowerOfTwo) {\n      width = 2 * width - 1;\n    }\n    return width;\n  }\n\n  get textureHeight() {\n    if (this.p.dimension === '1d') {\n      return 1;\n    }\n\n    let height = 1 << this.p.mipLevelCount;\n    if (this.p.nonPowerOfTwo) {\n      height = 2 * height - 1;\n    }\n    return height;\n  }\n\n  get textureDepth() {\n    return this.p.dimension === '3d' ? 11 : 1;\n  }\n\n  get textureDepthOrArrayLayers() {\n    return this.p.dimension === '2d' ? this.p.layerCount : this.textureDepth;\n  }\n\n  // Used to iterate subresources and check that their uninitialized contents are zero when accessed\n  *iterateUninitializedSubresources() {\n    for (const mipRange of kUninitializedMipRangesToTest[this.p.mipLevelCount]) {\n      for (const layerRange of kUninitializedLayerRangesToTest[this.p.layerCount]) {\n        yield new SubresourceRange({ mipRange, layerRange });\n      }\n    }\n  }\n\n  // Used to iterate and initialize other subresources not checked for zero-initialization.\n  // Zero-initialization of uninitialized subresources should not have side effects on already\n  // initialized subresources.\n  *iterateInitializedSubresources() {\n    const uninitialized = new Array(this.p.mipLevelCount);\n    for (let level = 0; level < uninitialized.length; ++level) {\n      uninitialized[level] = new Array(this.p.layerCount);\n    }\n    for (const subresources of this.iterateUninitializedSubresources()) {\n      for (const { level, layer } of subresources.each()) {\n        uninitialized[level][layer] = true;\n      }\n    }\n    for (let level = 0; level < uninitialized.length; ++level) {\n      for (let layer = 0; layer < uninitialized[level].length; ++layer) {\n        if (!uninitialized[level][layer]) {\n          yield new SubresourceRange({\n            mipRange: { begin: level, count: 1 },\n            layerRange: { begin: layer, count: 1 }\n          });\n        }\n      }\n    }\n  }\n\n  *generateTextureViewDescriptorsForRendering(\n  aspect,\n  subresourceRange)\n  {\n    const viewDescriptor = {\n      dimension: '2d',\n      aspect\n    };\n\n    if (subresourceRange === undefined) {\n      return viewDescriptor;\n    }\n\n    for (const { level, layer } of subresourceRange.each()) {\n      yield {\n        ...viewDescriptor,\n        baseMipLevel: level,\n        mipLevelCount: 1,\n        baseArrayLayer: layer,\n        arrayLayerCount: 1\n      };\n    }\n  }\n\n  initializeWithStoreOp(\n  state,\n  texture,\n  subresourceRange)\n  {\n    const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", this.device, this.device.createCommandEncoder, [], () => this.device.createCommandEncoder());\n    commandEncoder.pushDebugGroup('initializeWithStoreOp');\n\n    for (const viewDescriptor of this.generateTextureViewDescriptorsForRendering(\n      'all',\n      subresourceRange\n    )) {\n      if (kTextureFormatInfo[this.p.format].color) {\n        commandEncoder.\n        beginRenderPass({\n          colorAttachments: [\n          {\n            view: texture.createView(viewDescriptor),\n            clearValue: initializedStateAsColor(state, this.p.format),\n            loadOp: 'clear',\n            storeOp: 'store'\n          }]\n\n        }).\n        end();\n      } else {\n        const depthStencilAttachment = {\n          view: texture.createView(viewDescriptor)\n        };\n        if (kTextureFormatInfo[this.p.format].depth) {\n          depthStencilAttachment.depthClearValue = initializedStateAsDepth[state];\n          depthStencilAttachment.depthLoadOp = 'clear';\n          depthStencilAttachment.depthStoreOp = 'store';\n        }\n        if (kTextureFormatInfo[this.p.format].stencil) {\n          depthStencilAttachment.stencilClearValue = initializedStateAsStencil[state];\n          depthStencilAttachment.stencilLoadOp = 'clear';\n          depthStencilAttachment.stencilStoreOp = 'store';\n        }\n        commandEncoder.\n        beginRenderPass({\n          colorAttachments: [],\n          depthStencilAttachment\n        }).\n        end();\n      }\n    }\n\n    commandEncoder.popDebugGroup();\n    globalThis._TRAMPOLINE_(\"submit\", this, this.queue.submit, [[commandEncoder.finish()]], () => this.queue.submit([commandEncoder.finish()]));\n  }\n\n  initializeWithCopy(\n  texture,\n  state,\n  subresourceRange)\n  {\n    assert(this.p.format in kTextureFormatInfo);\n    const format = this.p.format;\n\n    const firstSubresource = subresourceRange.each().next().value;\n    assert(typeof firstSubresource !== 'undefined');\n\n    const textureSize = [this.textureWidth, this.textureHeight, this.textureDepth];\n    const [largestWidth, largestHeight, largestDepth] = virtualMipSize(\n      this.p.dimension,\n      textureSize,\n      firstSubresource.level\n    );\n\n    const rep = kTexelRepresentationInfo[format];\n    const texelData = new Uint8Array(rep.pack(rep.encode(this.stateToTexelComponents[state])));\n    const { buffer, bytesPerRow, rowsPerImage } = createTextureUploadBuffer(\n      this,\n      texelData,\n      format,\n      this.p.dimension,\n      [largestWidth, largestHeight, largestDepth]\n    );\n\n    const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", this.device, this.device.createCommandEncoder, [], () => this.device.createCommandEncoder());\n\n    for (const { level, layer } of subresourceRange.each()) {\n      const [width, height, depth] = virtualMipSize(this.p.dimension, textureSize, level);\n\n      commandEncoder.copyBufferToTexture(\n        {\n          buffer,\n          bytesPerRow,\n          rowsPerImage\n        },\n        { texture, mipLevel: level, origin: { x: 0, y: 0, z: layer } },\n        { width, height, depthOrArrayLayers: depth }\n      );\n    }\n    globalThis._TRAMPOLINE_(\"submit\", this, this.queue.submit, [[commandEncoder.finish()]], () => this.queue.submit([commandEncoder.finish()]));\n    globalThis._TRAMPOLINE_(\"destroy\", buffer, buffer.destroy, [], () => buffer.destroy());\n  }\n\n  initializeTexture(\n  texture,\n  state,\n  subresourceRange)\n  {\n    const info = kTextureFormatInfo[this.p.format];\n    if (this.p.sampleCount > 1 || !allAspectsCopyDst(info)) {\n      // Copies to multisampled textures not yet specified.\n      // Use a storeOp for now.\n      if (info.color) assert(!!info.colorRender, 'not implemented for non-renderable color');\n      this.initializeWithStoreOp(state, texture, subresourceRange);\n    } else {\n      this.initializeWithCopy(texture, state, subresourceRange);\n    }\n  }\n\n  discardTexture(texture, subresourceRange) {\n    const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", this.device, this.device.createCommandEncoder, [], () => this.device.createCommandEncoder());\n    commandEncoder.pushDebugGroup('discardTexture');\n\n    for (const desc of this.generateTextureViewDescriptorsForRendering('all', subresourceRange)) {\n      if (kTextureFormatInfo[this.p.format].color) {\n        commandEncoder.\n        beginRenderPass({\n          colorAttachments: [\n          {\n            view: texture.createView(desc),\n            loadOp: 'load',\n            storeOp: 'discard'\n          }]\n\n        }).\n        end();\n      } else {\n        const depthStencilAttachment = {\n          view: texture.createView(desc)\n        };\n        if (kTextureFormatInfo[this.p.format].depth) {\n          depthStencilAttachment.depthLoadOp = 'load';\n          depthStencilAttachment.depthStoreOp = 'discard';\n        }\n        if (kTextureFormatInfo[this.p.format].stencil) {\n          depthStencilAttachment.stencilLoadOp = 'load';\n          depthStencilAttachment.stencilStoreOp = 'discard';\n        }\n        commandEncoder.\n        beginRenderPass({\n          colorAttachments: [],\n          depthStencilAttachment\n        }).\n        end();\n      }\n    }\n\n    commandEncoder.popDebugGroup();\n    globalThis._TRAMPOLINE_(\"submit\", this, this.queue.submit, [[commandEncoder.finish()]], () => this.queue.submit([commandEncoder.finish()]));\n  }\n}\n\nexport const kTestParams = kUnitCaseParamsBuilder.\ncombine('dimension', kTextureDimensions).\ncombine('readMethod', [\nReadMethod.CopyToBuffer,\nReadMethod.CopyToTexture,\nReadMethod.Sample,\nReadMethod.DepthTest,\nReadMethod.StencilTest]\n)\n// [3] compressed formats\n.combine('format', kUncompressedTextureFormats).\nfilter(({ dimension, format }) => textureDimensionAndFormatCompatible(dimension, format)).\nbeginSubcases().\ncombine('aspect', kTextureAspects).\nunless(({ readMethod, format, aspect }) => {\n  const info = kTextureFormatInfo[format];\n  return (\n    readMethod === ReadMethod.DepthTest && (!info.depth || aspect === 'stencil-only') ||\n    readMethod === ReadMethod.StencilTest && (!info.stencil || aspect === 'depth-only') ||\n    readMethod === ReadMethod.ColorBlending && !info.color ||\n    // [1]: Test with depth/stencil sampling\n    readMethod === ReadMethod.Sample && (!!info.depth || !!info.stencil) ||\n    aspect === 'depth-only' && !info.depth ||\n    aspect === 'stencil-only' && !info.stencil ||\n    aspect === 'all' && !!info.depth && !!info.stencil ||\n    // Cannot copy from a packed depth format.\n    // [2]: Test copying out of the stencil aspect.\n    (readMethod === ReadMethod.CopyToBuffer || readMethod === ReadMethod.CopyToTexture) && (\n    format === 'depth24plus' || format === 'depth24plus-stencil8'));\n\n}).\ncombine('mipLevelCount', kMipLevelCounts)\n// 1D texture can only have a single mip level\n.unless((p) => p.dimension === '1d' && p.mipLevelCount !== 1).\ncombine('sampleCount', kSampleCounts).\nunless(\n  ({ readMethod, sampleCount }) =>\n  // We can only read from multisampled textures by sampling.\n  sampleCount > 1 && (\n  readMethod === ReadMethod.CopyToBuffer || readMethod === ReadMethod.CopyToTexture)\n)\n// Multisampled textures may only have one mip\n.unless(({ sampleCount, mipLevelCount }) => sampleCount > 1 && mipLevelCount > 1).\ncombine('uninitializeMethod', kUninitializeMethods).\nunless(({ dimension, readMethod, uninitializeMethod, format, sampleCount }) => {\n  const formatInfo = kTextureFormatInfo[format];\n  return (\n    dimension !== '2d' && (\n    sampleCount > 1 ||\n    !!formatInfo.depth ||\n    !!formatInfo.stencil ||\n    readMethod === ReadMethod.DepthTest ||\n    readMethod === ReadMethod.StencilTest ||\n    readMethod === ReadMethod.ColorBlending ||\n    uninitializeMethod === UninitializeMethod.StoreOpClear));\n\n}).\nexpandWithParams(function* ({ dimension }) {\n  switch (dimension) {\n    case '2d':\n      yield { layerCount: 1 };\n      yield { layerCount: 7 };\n      break;\n    case '1d':\n    case '3d':\n      yield { layerCount: 1 };\n      break;\n  }\n})\n// Multisampled 3D / 2D array textures not supported.\n.unless(({ sampleCount, layerCount }) => sampleCount > 1 && layerCount > 1).\nunless(({ format, sampleCount, uninitializeMethod, readMethod }) => {\n  const usage = getRequiredTextureUsage(format, sampleCount, uninitializeMethod, readMethod);\n  const info = kTextureFormatInfo[format];\n\n  return (\n    (usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) !== 0 &&\n    info.color &&\n    !info.colorRender ||\n    (usage & GPUConst.TextureUsage.STORAGE_BINDING) !== 0 && !info.color?.storage ||\n    sampleCount > 1 && !info.multisample);\n\n}).\ncombine('nonPowerOfTwo', [false, true]).\ncombine('canaryOnCreation', [false, true]);"],"mappings":"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","ignoreList":[]}