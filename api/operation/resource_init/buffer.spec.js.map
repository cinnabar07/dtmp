{"version":3,"file":"buffer.spec.js","names":["makeTestGroup","unreachable","GPUConst","GPUTest","getTextureCopyLayout","description","kMapModeOptions","MapMode","READ","WRITE","kBufferUsagesForMappedAtCreationTests","BufferUsage","COPY_DST","MAP_READ","COPY_SRC","MAP_WRITE","F","GetBufferUsageFromMapMode","mapMode","GPUMapMode","GPUBufferUsage","CheckGPUBufferContent","buffer","bufferUsage","expectedData","mappable","expectGPUBufferValuesEqual","method","TestBufferZeroInitInBindGroup","computeShaderModule","bufferOffset","boundBufferSize","computePipeline","device","createComputePipeline","layout","compute","module","entryPoint","outputTexture","createTextureTracked","format","size","usage","GPUTextureUsage","STORAGE_BINDING","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","offset","createView","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","computePass","beginComputePass","setBindGroup","setPipeline","dispatchWorkgroups","end","queue","submit","finish","CheckBufferAndOutputTexture","CreateRenderPipelineForTest","vertexShaderModule","testVertexBuffer","renderPipelineDescriptor","vertex","fragment","createShaderModule","code","targets","primitive","topology","buffers","arrayStride","attributes","shaderLocation","createRenderPipeline","RecordInitializeTextureColor","texture","color","renderPass","beginRenderPass","colorAttachments","view","clearValue","loadOp","storeOp","bufferSize","outputTextureSize","outputTextureColor","R","G","B","A","expectSingleColor","exp","expectedBufferData","Uint8Array","g","test","desc","paramsSubcasesOnly","u","combine","fn","t","params","appliedOffset","createBufferTracked","copySize","writeData","i","writeBuffer","mapAsync","readData","getMappedRange","expect","unmap","beginSubcases","mapSize","mappedData","mappedAtCreation","mapped","mappedSize","textureSize","dstTextureFormat","dstTexture","srcBufferSize","byteLength","srcBufferUsage","srcBuffer","copyBufferToTexture","bytesPerRow","rowsPerImage","QUERY_RESOLVE","dstBuffer","querySet","createQuerySetTracked","type","count","resolveQuerySet","filter","arrayLayerCount","copyMipLevel","srcTextureFormat","srcTexture","RENDER_ATTACHMENT","mipLevelCount","mipLevel","dstBufferSize","Math","abs","layer","baseArrayLayer","baseMipLevel","r","b","a","max","copyTextureToBuffer","mipSize","y","x","UNIFORM","STORAGE","renderPipeline","vertexBuffer","VERTEX","setVertexBuffer","draw","indexBuffer","INDEX","setIndexBuffer","drawIndexed","test_indexed_draw","kDrawIndirectParametersSize","kDrawIndexedIndirectParametersSize","indirectBuffer","INDIRECT","undefined","drawIndexedIndirect","drawIndirect","kDispatchIndirectParametersSize","dispatchWorkgroupsIndirect"],"sources":["../../../../../src/webgpu/api/operation/resource_init/buffer.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { makeTestGroup } from '../../../../common/framework/test_group.js';import { unreachable } from '../../../../common/util/util.js';import { GPUConst } from '../../../constants.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { getTextureCopyLayout } from '../../../util/texture/layout.js';\n\n\nexport const description = `\nTest uninitialized buffers are initialized to zero when read\n(or read-written, e.g. with depth write or atomics).\n\nNote that:\n-  We don't need 'copy_buffer_to_buffer_copy_destination' here because there has already been an\n   operation test 'command_buffer.copyBufferToBuffer.single' that provides the same functionality.\n`;\n\nconst kMapModeOptions = [GPUConst.MapMode.READ, GPUConst.MapMode.WRITE];\nconst kBufferUsagesForMappedAtCreationTests = [\nGPUConst.BufferUsage.COPY_DST | GPUConst.BufferUsage.MAP_READ,\nGPUConst.BufferUsage.COPY_SRC | GPUConst.BufferUsage.MAP_WRITE,\nGPUConst.BufferUsage.COPY_SRC];\n\n\nclass F extends GPUTest {\n  GetBufferUsageFromMapMode(mapMode) {\n    switch (mapMode) {\n      case GPUMapMode.READ:\n        return GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ;\n      case GPUMapMode.WRITE:\n        return GPUBufferUsage.COPY_SRC | GPUBufferUsage.MAP_WRITE;\n      default:\n        unreachable();\n        return 0;\n    }\n  }\n\n  CheckGPUBufferContent(\n  buffer,\n  bufferUsage,\n  expectedData)\n  {\n    const mappable = bufferUsage & GPUBufferUsage.MAP_READ;\n    this.expectGPUBufferValuesEqual(buffer, expectedData, 0, { method: mappable ? 'map' : 'copy' });\n  }\n\n  TestBufferZeroInitInBindGroup(\n  computeShaderModule,\n  buffer,\n  bufferOffset,\n  boundBufferSize)\n  {\n    const computePipeline = this.device.createComputePipeline({\n      layout: 'auto',\n      compute: {\n        module: computeShaderModule,\n        entryPoint: 'main'\n      }\n    });\n    const outputTexture = this.createTextureTracked({\n      format: 'rgba8unorm',\n      size: [1, 1, 1],\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.STORAGE_BINDING\n    });\n    const bindGroup = this.device.createBindGroup({\n      layout: computePipeline.getBindGroupLayout(0),\n      entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer,\n          offset: bufferOffset,\n          size: boundBufferSize\n        }\n      },\n      {\n        binding: 1,\n        resource: outputTexture.createView()\n      }]\n\n    });\n\n    const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", this.device, this.device.createCommandEncoder, [], () => this.device.createCommandEncoder());\n    const computePass = encoder.beginComputePass();\n    computePass.setBindGroup(0, bindGroup);\n    computePass.setPipeline(computePipeline);\n    computePass.dispatchWorkgroups(1);\n    computePass.end();\n    globalThis._TRAMPOLINE_(\"submit\", this, this.queue.submit, [[encoder.finish()]], () => this.queue.submit([encoder.finish()]));\n\n    this.CheckBufferAndOutputTexture(buffer, boundBufferSize + bufferOffset, outputTexture);\n  }\n\n  CreateRenderPipelineForTest(\n  vertexShaderModule,\n  testVertexBuffer)\n  {\n    const renderPipelineDescriptor = {\n      layout: 'auto',\n      vertex: {\n        module: vertexShaderModule,\n        entryPoint: 'main'\n      },\n      fragment: {\n        module: this.device.createShaderModule({\n          code: `\n        @fragment\n        fn main(@location(0) i_color : vec4<f32>) -> @location(0) vec4<f32> {\n            return i_color;\n        }`\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }]\n      },\n      primitive: {\n        topology: 'point-list'\n      }\n    };\n    if (testVertexBuffer) {\n      renderPipelineDescriptor.vertex.buffers = [\n      {\n        arrayStride: 16,\n        attributes: [{ format: 'float32x4', offset: 0, shaderLocation: 0 }]\n      }];\n\n    }\n\n    return this.device.createRenderPipeline(renderPipelineDescriptor);\n  }\n\n  RecordInitializeTextureColor(\n  encoder,\n  texture,\n  color)\n  {\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [\n      {\n        view: texture.createView(),\n        clearValue: color,\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n\n    });\n    renderPass.end();\n  }\n\n  CheckBufferAndOutputTexture(\n  buffer,\n  bufferSize,\n  outputTexture,\n  outputTextureSize = [1, 1, 1],\n  outputTextureColor = { R: 0.0, G: 1.0, B: 0.0, A: 1.0 })\n  {\n    this.expectSingleColor(outputTexture, 'rgba8unorm', {\n      size: outputTextureSize,\n      exp: outputTextureColor\n    });\n\n    const expectedBufferData = new Uint8Array(bufferSize);\n    this.expectGPUBufferValuesEqual(buffer, expectedBufferData);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('partial_write_buffer').\ndesc(\n  `Verify when we upload data to a part of a buffer with writeBuffer() just after the creation of\nthe buffer, the remaining part of that buffer will be initialized to 0.`\n).\nparamsSubcasesOnly((u) => u.combine('offset', [0, 8, -12])).\nfn((t) => {\n  const { offset } = t.params;\n  const bufferSize = 32;\n  const appliedOffset = offset >= 0 ? offset : bufferSize + offset;\n\n  const buffer = t.createBufferTracked({\n    size: bufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  });\n\n  const copySize = 12;\n  const writeData = new Uint8Array(copySize);\n  const expectedData = new Uint8Array(bufferSize);\n  for (let i = 0; i < copySize; ++i) {\n    expectedData[appliedOffset + i] = writeData[i] = i + 1;\n  }\n  t.queue.writeBuffer(buffer, appliedOffset, writeData, 0);\n\n  t.expectGPUBufferValuesEqual(buffer, expectedData);\n});\n\ng.test('map_whole_buffer').\ndesc(\n  `Verify when we map the whole range of a mappable GPUBuffer to a typed array buffer just after\ncreating the GPUBuffer, the contents of both the typed array buffer and the GPUBuffer itself\nhave already been initialized to 0.`\n).\nparams((u) => u.combine('mapMode', kMapModeOptions)).\nfn(async (t) => {\n  const { mapMode } = t.params;\n\n  const bufferSize = 32;\n  const bufferUsage = t.GetBufferUsageFromMapMode(mapMode);\n  const buffer = t.createBufferTracked({\n    size: bufferSize,\n    usage: bufferUsage\n  });\n\n  await globalThis._TRAMPOLINE_(\"mapAsync\", buffer, buffer.mapAsync, [mapMode], () => buffer.mapAsync(mapMode));\n  const readData = new Uint8Array(buffer.getMappedRange());\n  for (let i = 0; i < bufferSize; ++i) {\n    t.expect(readData[i] === 0);\n  }\n  buffer.unmap();\n\n  const expectedData = new Uint8Array(bufferSize);\n  t.CheckGPUBufferContent(buffer, bufferUsage, expectedData);\n});\n\ng.test('map_partial_buffer').\ndesc(\n  `Verify when we map a subrange of a mappable GPUBuffer to a typed array buffer just after the\ncreation of the GPUBuffer, the contents of both the typed array buffer and the GPUBuffer have\nalready been initialized to 0.`\n).\nparams((u) => u.combine('mapMode', kMapModeOptions).beginSubcases().combine('offset', [0, 8, -16])).\nfn(async (t) => {\n  const { mapMode, offset } = t.params;\n  const bufferSize = 32;\n  const appliedOffset = offset >= 0 ? offset : bufferSize + offset;\n\n  const bufferUsage = t.GetBufferUsageFromMapMode(mapMode);\n  const buffer = t.createBufferTracked({\n    size: bufferSize,\n    usage: bufferUsage\n  });\n\n  const expectedData = new Uint8Array(bufferSize);\n  {\n    const mapSize = 16;\n    await globalThis._TRAMPOLINE_(\"mapAsync\", buffer, buffer.mapAsync, [mapMode, appliedOffset, mapSize], () => buffer.mapAsync(mapMode, appliedOffset, mapSize));\n    const mappedData = new Uint8Array(buffer.getMappedRange(appliedOffset, mapSize));\n    for (let i = 0; i < mapSize; ++i) {\n      t.expect(mappedData[i] === 0);\n      if (mapMode === GPUMapMode.WRITE) {\n        mappedData[i] = expectedData[appliedOffset + i] = i + 1;\n      }\n    }\n    buffer.unmap();\n  }\n\n  t.CheckGPUBufferContent(buffer, bufferUsage, expectedData);\n});\n\ng.test('mapped_at_creation_whole_buffer').\ndesc(\n  `Verify when we call getMappedRange() at the whole range of a GPUBuffer created with\nmappedAtCreation === true just after its creation, the contents of both the returned typed\narray buffer of getMappedRange() and the GPUBuffer itself have all been initialized to 0.`\n).\nparams((u) => u.combine('bufferUsage', kBufferUsagesForMappedAtCreationTests)).\nfn((t) => {\n  const { bufferUsage } = t.params;\n\n  const bufferSize = 32;\n  const buffer = t.createBufferTracked({\n    mappedAtCreation: true,\n    size: bufferSize,\n    usage: bufferUsage\n  });\n\n  const mapped = new Uint8Array(buffer.getMappedRange());\n  for (let i = 0; i < bufferSize; ++i) {\n    t.expect(mapped[i] === 0);\n  }\n  buffer.unmap();\n\n  const expectedData = new Uint8Array(bufferSize);\n  t.CheckGPUBufferContent(buffer, bufferUsage, expectedData);\n});\n\ng.test('mapped_at_creation_partial_buffer').\ndesc(\n  `Verify when we call getMappedRange() at a subrange of a GPUBuffer created with\nmappedAtCreation === true just after its creation, the contents of both the returned typed\narray buffer of getMappedRange() and the GPUBuffer itself have all been initialized to 0.`\n).\nparams((u) =>\nu.\ncombine('bufferUsage', kBufferUsagesForMappedAtCreationTests).\nbeginSubcases().\ncombine('offset', [0, 8, -16])\n).\nfn((t) => {\n  const { bufferUsage, offset } = t.params;\n  const bufferSize = 32;\n  const appliedOffset = offset >= 0 ? offset : bufferSize + offset;\n\n  const buffer = t.createBufferTracked({\n    mappedAtCreation: true,\n    size: bufferSize,\n    usage: bufferUsage\n  });\n\n  const expectedData = new Uint8Array(bufferSize);\n  {\n    const mappedSize = 12;\n    const mapped = new Uint8Array(buffer.getMappedRange(appliedOffset, mappedSize));\n    for (let i = 0; i < mappedSize; ++i) {\n      t.expect(mapped[i] === 0);\n      if (!(bufferUsage & GPUBufferUsage.MAP_READ)) {\n        mapped[i] = expectedData[appliedOffset + i] = i + 1;\n      }\n    }\n    buffer.unmap();\n  }\n\n  t.CheckGPUBufferContent(buffer, bufferUsage, expectedData);\n});\n\ng.test('copy_buffer_to_buffer_copy_source').\ndesc(\n  `Verify when the first usage of a GPUBuffer is being used as the source buffer of\nCopyBufferToBuffer(), the contents of the GPUBuffer have already been initialized to 0.`\n).\nfn((t) => {\n  const bufferSize = 32;\n  const bufferUsage = GPUBufferUsage.COPY_SRC;\n  const buffer = t.createBufferTracked({\n    size: bufferSize,\n    usage: bufferUsage\n  });\n\n  const expectedData = new Uint8Array(bufferSize);\n  // copyBufferToBuffer() is called inside t.CheckGPUBufferContent().\n  t.CheckGPUBufferContent(buffer, bufferUsage, expectedData);\n});\n\ng.test('copy_buffer_to_texture').\ndesc(\n  `Verify when the first usage of a GPUBuffer is being used as the source buffer of\nCopyBufferToTexture(), the contents of the GPUBuffer have already been initialized to 0.`\n).\nparamsSubcasesOnly((u) => u.combine('bufferOffset', [0, 8])).\nfn((t) => {\n  const { bufferOffset } = t.params;\n  const textureSize = [8, 8, 1];\n  const dstTextureFormat = 'rgba8unorm';\n\n  const dstTexture = t.createTextureTracked({\n    size: textureSize,\n    format: dstTextureFormat,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST\n  });\n  const layout = getTextureCopyLayout(dstTextureFormat, '2d', textureSize);\n  const srcBufferSize = layout.byteLength + bufferOffset;\n  const srcBufferUsage = GPUBufferUsage.COPY_SRC;\n  const srcBuffer = t.createBufferTracked({\n    size: srcBufferSize,\n    usage: srcBufferUsage\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  encoder.copyBufferToTexture(\n    {\n      buffer: srcBuffer,\n      offset: bufferOffset,\n      bytesPerRow: layout.bytesPerRow,\n      rowsPerImage: layout.rowsPerImage\n    },\n    { texture: dstTexture },\n    textureSize\n  );\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  t.CheckBufferAndOutputTexture(srcBuffer, srcBufferSize, dstTexture, textureSize, {\n    R: 0.0,\n    G: 0.0,\n    B: 0.0,\n    A: 0.0\n  });\n});\n\ng.test('resolve_query_set_to_partial_buffer').\ndesc(\n  `Verify when we resolve a query set into a GPUBuffer just after creating that GPUBuffer, the\nremaining part of it will be initialized to 0.`\n).\nparamsSubcasesOnly((u) => u.combine('bufferOffset', [0, 256])).\nfn((t) => {\n  const { bufferOffset } = t.params;\n  const bufferSize = bufferOffset + 8;\n  const bufferUsage = GPUBufferUsage.COPY_SRC | GPUBufferUsage.QUERY_RESOLVE;\n  const dstBuffer = t.createBufferTracked({\n    size: bufferSize,\n    usage: bufferUsage\n  });\n\n  const querySet = t.createQuerySetTracked({ type: 'occlusion', count: 1 });\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  encoder.resolveQuerySet(querySet, 0, 1, dstBuffer, bufferOffset);\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  const expectedBufferData = new Uint8Array(bufferSize);\n  t.CheckGPUBufferContent(dstBuffer, bufferUsage, expectedBufferData);\n});\n\ng.test('copy_texture_to_partial_buffer').\ndesc(\n  `Verify when we copy from a GPUTexture into a GPUBuffer just after creating that GPUBuffer, the\nremaining part of it will be initialized to 0.`\n).\nparamsSubcasesOnly((u) =>\nu.\ncombine('bufferOffset', [0, 8, -16]).\ncombine('arrayLayerCount', [1, 3]).\ncombine('copyMipLevel', [0, 2]).\ncombine('rowsPerImage', [16, 20]).\nfilter((t) => {\n  // We don't need to test the copies that will cover the whole GPUBuffer.\n  return !(t.bufferOffset === 0 && t.rowsPerImage === 16);\n})\n).\nfn((t) => {\n  const { bufferOffset, arrayLayerCount, copyMipLevel, rowsPerImage } = t.params;\n  const srcTextureFormat = 'r8uint';\n  const textureSize = [32, 16, arrayLayerCount];\n\n  const srcTexture = t.createTextureTracked({\n    format: srcTextureFormat,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    size: textureSize,\n    mipLevelCount: copyMipLevel + 1\n  });\n\n  const bytesPerRow = 256;\n  const layout = getTextureCopyLayout(srcTextureFormat, '2d', textureSize, {\n    mipLevel: copyMipLevel,\n    bytesPerRow,\n    rowsPerImage\n  });\n\n  const dstBufferSize = layout.byteLength + Math.abs(bufferOffset);\n  const dstBuffer = t.createBufferTracked({\n    size: dstBufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n\n  // Initialize srcTexture\n  for (let layer = 0; layer < arrayLayerCount; ++layer) {\n    const renderPass = encoder.beginRenderPass({\n      colorAttachments: [\n      {\n        view: srcTexture.createView({\n          baseArrayLayer: layer,\n          arrayLayerCount: 1,\n          baseMipLevel: copyMipLevel\n        }),\n        clearValue: { r: layer + 1, g: 0, b: 0, a: 0 },\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n\n    });\n    renderPass.end();\n  }\n\n  // Do texture-to-buffer copy\n  const appliedOffset = Math.max(bufferOffset, 0);\n  encoder.copyTextureToBuffer(\n    { texture: srcTexture, mipLevel: copyMipLevel },\n    { buffer: dstBuffer, offset: appliedOffset, bytesPerRow, rowsPerImage },\n    layout.mipSize\n  );\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  // Check if the contents of the destination buffer are what we expect.\n  const expectedData = new Uint8Array(dstBufferSize);\n  for (let layer = 0; layer < arrayLayerCount; ++layer) {\n    for (let y = 0; y < layout.mipSize[1]; ++y) {\n      for (let x = 0; x < layout.mipSize[0]; ++x) {\n        expectedData[appliedOffset + layer * bytesPerRow * rowsPerImage + y * bytesPerRow + x] =\n        layer + 1;\n      }\n    }\n  }\n  t.expectGPUBufferValuesEqual(dstBuffer, expectedData);\n});\n\ng.test('uniform_buffer').\ndesc(\n  `Verify when we use a GPUBuffer as a uniform buffer just after the creation of that GPUBuffer,\n    all the contents in that GPUBuffer have been initialized to 0.`\n).\nparamsSubcasesOnly((u) => u.combine('bufferOffset', [0, 256])).\nfn((t) => {\n  const { bufferOffset } = t.params;\n\n  const boundBufferSize = 16;\n  const buffer = t.createBufferTracked({\n    size: bufferOffset + boundBufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.UNIFORM\n  });\n\n  const computeShaderModule = t.device.createShaderModule({\n    code: `\n  struct UBO {\n    value : vec4<u32>\n  };\n  @group(0) @binding(0) var<uniform> ubo : UBO;\n  @group(0) @binding(1) var outImage : texture_storage_2d<rgba8unorm, write>;\n\n  @compute @workgroup_size(1) fn main() {\n      if (all(ubo.value == vec4<u32>(0u, 0u, 0u, 0u))) {\n          textureStore(outImage, vec2<i32>(0, 0), vec4<f32>(0.0, 1.0, 0.0, 1.0));\n      } else {\n          textureStore(outImage, vec2<i32>(0, 0), vec4<f32>(1.0, 0.0, 0.0, 1.0));\n      }\n  }`\n  });\n\n  // Verify the whole range of the buffer has been initialized to 0 in a compute shader.\n  t.TestBufferZeroInitInBindGroup(computeShaderModule, buffer, bufferOffset, boundBufferSize);\n});\n\ng.test('readonly_storage_buffer').\ndesc(\n  `Verify when we use a GPUBuffer as a read-only storage buffer just after the creation of that\n    GPUBuffer, all the contents in that GPUBuffer have been initialized to 0.`\n).\nparamsSubcasesOnly((u) => u.combine('bufferOffset', [0, 256])).\nfn((t) => {\n  const { bufferOffset } = t.params;\n  const boundBufferSize = 16;\n  const buffer = t.createBufferTracked({\n    size: bufferOffset + boundBufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE\n  });\n\n  const computeShaderModule = t.device.createShaderModule({\n    code: `\n    struct SSBO {\n      value : vec4<u32>\n    };\n    @group(0) @binding(0) var<storage, read> ssbo : SSBO;\n    @group(0) @binding(1) var outImage : texture_storage_2d<rgba8unorm, write>;\n\n    @compute @workgroup_size(1) fn main() {\n        if (all(ssbo.value == vec4<u32>(0u, 0u, 0u, 0u))) {\n            textureStore(outImage, vec2<i32>(0, 0), vec4<f32>(0.0, 1.0, 0.0, 1.0));\n        } else {\n            textureStore(outImage, vec2<i32>(0, 0), vec4<f32>(1.0, 0.0, 0.0, 1.0));\n        }\n    }`\n  });\n\n  // Verify the whole range of the buffer has been initialized to 0 in a compute shader.\n  t.TestBufferZeroInitInBindGroup(computeShaderModule, buffer, bufferOffset, boundBufferSize);\n});\n\ng.test('storage_buffer').\ndesc(\n  `Verify when we use a GPUBuffer as a storage buffer just after the creation of that\n    GPUBuffer, all the contents in that GPUBuffer have been initialized to 0.`\n).\nparamsSubcasesOnly((u) => u.combine('bufferOffset', [0, 256])).\nfn((t) => {\n  const { bufferOffset } = t.params;\n  const boundBufferSize = 16;\n  const buffer = t.createBufferTracked({\n    size: bufferOffset + boundBufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE\n  });\n\n  const computeShaderModule = t.device.createShaderModule({\n    code: `\n    struct SSBO {\n      value : vec4<u32>\n    };\n    @group(0) @binding(0) var<storage, read_write> ssbo : SSBO;\n    @group(0) @binding(1) var outImage : texture_storage_2d<rgba8unorm, write>;\n\n    @compute @workgroup_size(1) fn main() {\n        if (all(ssbo.value == vec4<u32>(0u, 0u, 0u, 0u))) {\n            textureStore(outImage, vec2<i32>(0, 0), vec4<f32>(0.0, 1.0, 0.0, 1.0));\n        } else {\n            textureStore(outImage, vec2<i32>(0, 0), vec4<f32>(1.0, 0.0, 0.0, 1.0));\n        }\n    }`\n  });\n\n  // Verify the whole range of the buffer has been initialized to 0 in a compute shader.\n  t.TestBufferZeroInitInBindGroup(computeShaderModule, buffer, bufferOffset, boundBufferSize);\n});\n\ng.test('vertex_buffer').\ndesc(\n  `Verify when we use a GPUBuffer as a vertex buffer just after the creation of that\n  GPUBuffer, all the contents in that GPUBuffer have been initialized to 0.`\n).\nparamsSubcasesOnly((u) => u.combine('bufferOffset', [0, 16])).\nfn((t) => {\n  const { bufferOffset } = t.params;\n\n  const renderPipeline = t.CreateRenderPipelineForTest(\n    t.device.createShaderModule({\n      code: `\n      struct VertexOut {\n        @location(0) color : vec4<f32>,\n        @builtin(position) position : vec4<f32>,\n      };\n\n      @vertex fn main(@location(0) pos : vec4<f32>) -> VertexOut {\n        var output : VertexOut;\n        if (all(pos == vec4<f32>(0.0, 0.0, 0.0, 0.0))) {\n          output.color = vec4<f32>(0.0, 1.0, 0.0, 1.0);\n        } else {\n          output.color = vec4<f32>(1.0, 0.0, 0.0, 1.0);\n        }\n        output.position = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n        return output;\n      }`\n    }),\n    true\n  );\n\n  const bufferSize = 16 + bufferOffset;\n  const vertexBuffer = t.createBufferTracked({\n    size: bufferSize,\n    usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_SRC\n  });\n\n  const outputTexture = t.createTextureTracked({\n    format: 'rgba8unorm',\n    size: [1, 1, 1],\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const renderPass = encoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: outputTexture.createView(),\n      clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 0.0 },\n      loadOp: 'clear',\n      storeOp: 'store'\n    }]\n\n  });\n  renderPass.setVertexBuffer(0, vertexBuffer, bufferOffset);\n  renderPass.setPipeline(renderPipeline);\n  renderPass.draw(1);\n  renderPass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  t.CheckBufferAndOutputTexture(vertexBuffer, bufferSize, outputTexture);\n});\n\ng.test('index_buffer').\ndesc(\n  `Verify when we use a GPUBuffer as an index buffer just after the creation of that\nGPUBuffer, all the contents in that GPUBuffer have been initialized to 0.`\n).\nparamsSubcasesOnly((u) => u.combine('bufferOffset', [0, 16])).\nfn((t) => {\n  const { bufferOffset } = t.params;\n\n  const renderPipeline = t.CreateRenderPipelineForTest(\n    t.device.createShaderModule({\n      code: `\n    struct VertexOut {\n      @location(0) color : vec4<f32>,\n      @builtin(position) position : vec4<f32>,\n    };\n\n    @vertex\n    fn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOut {\n      var output : VertexOut;\n      if (VertexIndex == 0u) {\n        output.color = vec4<f32>(0.0, 1.0, 0.0, 1.0);\n      } else {\n        output.color = vec4<f32>(1.0, 0.0, 0.0, 1.0);\n      }\n      output.position = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n      return output;\n    }`\n    }),\n    false\n  );\n\n  // The size of GPUBuffer must be at least 4.\n  const bufferSize = 4 + bufferOffset;\n  const indexBuffer = t.createBufferTracked({\n    size: bufferSize,\n    usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_SRC\n  });\n\n  const outputTexture = t.createTextureTracked({\n    format: 'rgba8unorm',\n    size: [1, 1, 1],\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const renderPass = encoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: outputTexture.createView(),\n      clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 0.0 },\n      loadOp: 'clear',\n      storeOp: 'store'\n    }]\n\n  });\n  renderPass.setPipeline(renderPipeline);\n  renderPass.setIndexBuffer(indexBuffer, 'uint16', bufferOffset, 4);\n  renderPass.drawIndexed(1);\n  renderPass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  t.CheckBufferAndOutputTexture(indexBuffer, bufferSize, outputTexture);\n});\n\ng.test('indirect_buffer_for_draw_indirect').\ndesc(\n  `Verify when we use a GPUBuffer as an indirect buffer for drawIndirect() or\ndrawIndexedIndirect() just after the creation of that GPUBuffer, all the contents in that GPUBuffer\nhave been initialized to 0.`\n).\nparams((u) =>\nu.combine('test_indexed_draw', [true, false]).beginSubcases().combine('bufferOffset', [0, 16])\n).\nfn((t) => {\n  const { test_indexed_draw, bufferOffset } = t.params;\n\n  const renderPipeline = t.CreateRenderPipelineForTest(\n    t.device.createShaderModule({\n      code: `\n    struct VertexOut {\n      @location(0) color : vec4<f32>,\n      @builtin(position) position : vec4<f32>,\n    };\n\n    @vertex fn main() -> VertexOut {\n      var output : VertexOut;\n      output.color = vec4<f32>(1.0, 0.0, 0.0, 1.0);\n      output.position = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n      return output;\n    }`\n    }),\n    false\n  );\n\n  const kDrawIndirectParametersSize = 16;\n  const kDrawIndexedIndirectParametersSize = 20;\n  const bufferSize =\n  Math.max(kDrawIndirectParametersSize, kDrawIndexedIndirectParametersSize) + bufferOffset;\n  const indirectBuffer = t.createBufferTracked({\n    size: bufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.INDIRECT\n  });\n\n  const outputTexture = t.createTextureTracked({\n    format: 'rgba8unorm',\n    size: [1, 1, 1],\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n  });\n\n  // Initialize outputTexture to green.\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  t.RecordInitializeTextureColor(encoder, outputTexture, { r: 0.0, g: 1.0, b: 0.0, a: 1.0 });\n\n  const renderPass = encoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: outputTexture.createView(),\n      loadOp: 'load',\n      storeOp: 'store'\n    }]\n\n  });\n  renderPass.setPipeline(renderPipeline);\n\n  let indexBuffer = undefined;\n  if (test_indexed_draw) {\n    indexBuffer = t.createBufferTracked({\n      size: 4,\n      usage: GPUBufferUsage.INDEX\n    });\n    renderPass.setIndexBuffer(indexBuffer, 'uint16');\n    renderPass.drawIndexedIndirect(indirectBuffer, bufferOffset);\n  } else {\n    renderPass.drawIndirect(indirectBuffer, bufferOffset);\n  }\n\n  renderPass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  // The indirect buffer should be lazily cleared to 0, so we actually draw nothing and the color\n  // attachment will keep its original color (green) after we end the render pass.\n  t.CheckBufferAndOutputTexture(indirectBuffer, bufferSize, outputTexture);\n});\n\ng.test('indirect_buffer_for_dispatch_indirect').\ndesc(\n  `Verify when we use a GPUBuffer as an indirect buffer for dispatchWorkgroupsIndirect() just\n    after the creation of that GPUBuffer, all the contents in that GPUBuffer have been initialized\n    to 0.`\n).\nparamsSubcasesOnly((u) => u.combine('bufferOffset', [0, 16])).\nfn((t) => {\n  const { bufferOffset } = t.params;\n\n  const computePipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: `\n        @group(0) @binding(0) var outImage : texture_storage_2d<rgba8unorm, write>;\n\n        @compute @workgroup_size(1) fn main() {\n          textureStore(outImage, vec2<i32>(0, 0), vec4<f32>(1.0, 0.0, 0.0, 1.0));\n        }`\n      }),\n      entryPoint: 'main'\n    }\n  });\n\n  const kDispatchIndirectParametersSize = 12;\n  const bufferSize = kDispatchIndirectParametersSize + bufferOffset;\n  const indirectBuffer = t.createBufferTracked({\n    size: bufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.INDIRECT\n  });\n\n  const outputTexture = t.createTextureTracked({\n    format: 'rgba8unorm',\n    size: [1, 1, 1],\n    usage:\n    GPUTextureUsage.COPY_SRC |\n    GPUTextureUsage.RENDER_ATTACHMENT |\n    GPUTextureUsage.STORAGE_BINDING\n  });\n\n  // Initialize outputTexture to green.\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  t.RecordInitializeTextureColor(encoder, outputTexture, { r: 0.0, g: 1.0, b: 0.0, a: 1.0 });\n\n  const bindGroup = t.device.createBindGroup({\n    layout: computePipeline.getBindGroupLayout(0),\n    entries: [\n    {\n      binding: 0,\n      resource: outputTexture.createView()\n    }]\n\n  });\n\n  // The indirect buffer should be lazily cleared to 0, so we actually don't execute the compute\n  // shader and the output texture should keep its original color (green).\n  const computePass = encoder.beginComputePass();\n  computePass.setBindGroup(0, bindGroup);\n  computePass.setPipeline(computePipeline);\n  computePass.dispatchWorkgroupsIndirect(indirectBuffer, bufferOffset);\n  computePass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  // The indirect buffer should be lazily cleared to 0, so we actually draw nothing and the color\n  // attachment will keep its original color (green) after we end the compute pass.\n  t.CheckBufferAndOutputTexture(indirectBuffer, bufferSize, outputTexture);\n});"],"mappings":"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","ignoreList":[]}