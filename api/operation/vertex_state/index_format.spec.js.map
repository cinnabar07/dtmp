{"version":3,"file":"index_format.spec.js","names":["description","makeTestGroup","GPUTest","getTextureCopyLayout","kHeight","kWidth","kTextureFormat","kBottomLeftTriangle","kSquare","kNothing","byteLength","bytesPerRow","rowsPerImage","IndexFormatTest","MakeRenderPipeline","topology","stripIndexFormat","vertexModule","device","createShaderModule","code","fragmentModule","createRenderPipeline","layout","createPipelineLayout","bindGroupLayouts","vertex","module","entryPoint","fragment","targets","format","primitive","CreateIndexBuffer","indices","indexFormat","typedArrayConstructor","uint16","Uint16Array","uint32","Uint32Array","makeBufferWithContents","GPUBufferUsage","INDEX","run","indexBuffer","indexCount","indexOffset","primitiveTopology","pipeline","colorAttachment","createTextureTracked","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","result","createBufferTracked","COPY_DST","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","setPipeline","setIndexBuffer","drawIndexed","end","copyTextureToBuffer","texture","buffer","queue","submit","finish","CreateExpectedUint8Array","renderShape","arrayBuffer","Uint8Array","row","length","col","texel","kBytesPerTexel","byteOffset","g","test","desc","paramsSubcasesOnly","_indexCount","_expectedShape","fn","t","params","expectedTextureValues","expectGPUBufferValuesEqual","u","combine","expectedShape","indexFormat16","indexFormat32","kPrimitiveTopology","pipeline32","pipeline16","setPipelineBeforeSetIndexBuffer","setIndexBufferBeforeSetPipeline","combineWithParams","_indices"],"sources":["../../../../../src/webgpu/api/operation/vertex_state/index_format.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTest indexing, index format and primitive restart.\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { getTextureCopyLayout } from '../../../util/texture/layout.js';\n\nconst kHeight = 4;\nconst kWidth = 8;\nconst kTextureFormat = 'r8uint';\n\n/** 4x4 grid of r8uint values (each 0 or 1). */\n\n\n\n\n\n\n\n/** Expected 4x4 rasterization of a bottom-left triangle. */\nconst kBottomLeftTriangle = [\n[0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 1, 0, 0, 0],\n[0, 0, 0, 0, 1, 1, 0, 0],\n[0, 0, 0, 0, 1, 1, 1, 0]];\n\n\n/** Expected 4x4 rasterization filling the whole quad. */\nconst kSquare = [\n[0, 0, 0, 0, 1, 1, 1, 1],\n[0, 0, 0, 0, 1, 1, 1, 1],\n[0, 0, 0, 0, 1, 1, 1, 1],\n[0, 0, 0, 0, 1, 1, 1, 1]];\n\n\n/** Expected 4x4 rasterization with no pixels. */\nconst kNothing = [\n[0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0],\n[0, 0, 0, 0, 0, 0, 0, 0]];\n\n\nconst { byteLength, bytesPerRow, rowsPerImage } = getTextureCopyLayout(kTextureFormat, '2d', [\nkWidth,\nkHeight,\n1]\n);\n\nclass IndexFormatTest extends GPUTest {\n  MakeRenderPipeline(\n  topology,\n  stripIndexFormat)\n  {\n    const vertexModule = this.device.createShaderModule({\n      // NOTE: These positions will create triangles that cut right through pixel centers. If this\n      // results in different rasterization results on different hardware, tweak to avoid this.\n      code: `\n        @vertex\n        fn main(@builtin(vertex_index) VertexIndex : u32)\n             -> @builtin(position) vec4<f32> {\n          var pos = array<vec2<f32>, 4>(\n            vec2<f32>(0.01,  0.98),\n            vec2<f32>(0.99, -0.98),\n            vec2<f32>(0.99,  0.98),\n            vec2<f32>(0.01, -0.98));\n\n          if (VertexIndex == 0xFFFFu || VertexIndex == 0xFFFFFFFFu) {\n            return vec4<f32>(-0.99, -0.98, 0.0, 1.0);\n          }\n          return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n        }\n      `\n    });\n\n    const fragmentModule = this.device.createShaderModule({\n      code: `\n        @fragment\n        fn main() -> @location(0) u32 {\n          return 1u;\n        }\n      `\n    });\n\n    return this.device.createRenderPipeline({\n      layout: this.device.createPipelineLayout({ bindGroupLayouts: [] }),\n      vertex: { module: vertexModule, entryPoint: 'main' },\n      fragment: {\n        module: fragmentModule,\n        entryPoint: 'main',\n        targets: [{ format: kTextureFormat }]\n      },\n      primitive: {\n        topology,\n        stripIndexFormat\n      }\n    });\n  }\n\n  CreateIndexBuffer(indices, indexFormat) {\n    const typedArrayConstructor = { uint16: Uint16Array, uint32: Uint32Array }[indexFormat];\n    return this.makeBufferWithContents(new typedArrayConstructor(indices), GPUBufferUsage.INDEX);\n  }\n\n  run(\n  indexBuffer,\n  indexCount,\n  indexFormat,\n  indexOffset = 0,\n  primitiveTopology = 'triangle-list')\n  {\n    let pipeline;\n    // The indexFormat must be set in render pipeline descriptor that specifies a strip primitive\n    // topology for primitive restart testing\n    if (primitiveTopology === 'line-strip' || primitiveTopology === 'triangle-strip') {\n      pipeline = this.MakeRenderPipeline(primitiveTopology, indexFormat);\n    } else {\n      pipeline = this.MakeRenderPipeline(primitiveTopology);\n    }\n\n    const colorAttachment = this.createTextureTracked({\n      format: kTextureFormat,\n      size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n    });\n\n    const result = this.createBufferTracked({\n      size: byteLength,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n    });\n\n    const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", this.device, this.device.createCommandEncoder, [], () => this.device.createCommandEncoder());\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n      {\n        view: colorAttachment.createView(),\n        clearValue: [0, 0, 0, 0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n\n    });\n    pass.setPipeline(pipeline);\n    pass.setIndexBuffer(indexBuffer, indexFormat, indexOffset);\n    pass.drawIndexed(indexCount);\n    pass.end();\n    encoder.copyTextureToBuffer(\n      { texture: colorAttachment },\n      { buffer: result, bytesPerRow, rowsPerImage },\n      [kWidth, kHeight]\n    );\n    globalThis._TRAMPOLINE_(\"submit\", this.device, this.device.queue.submit, [[encoder.finish()]], () => this.device.queue.submit([encoder.finish()]));\n\n    return result;\n  }\n\n  CreateExpectedUint8Array(renderShape) {\n    const arrayBuffer = new Uint8Array(byteLength);\n    for (let row = 0; row < renderShape.length; row++) {\n      for (let col = 0; col < renderShape[row].length; col++) {\n        const texel = renderShape[row][col];\n\n        const kBytesPerTexel = 1; // r8uint\n        const byteOffset = row * bytesPerRow + col * kBytesPerTexel;\n        arrayBuffer[byteOffset] = texel;\n      }\n    }\n    return arrayBuffer;\n  }\n}\n\nexport const g = makeTestGroup(IndexFormatTest);\n\ng.test('index_format,uint16').\ndesc('Test rendering result of indexed draw with index format of uint16.').\nparamsSubcasesOnly([\n{ indexOffset: 0, _indexCount: 10, _expectedShape: kSquare },\n{ indexOffset: 6, _indexCount: 6, _expectedShape: kBottomLeftTriangle },\n{ indexOffset: 18, _indexCount: 0, _expectedShape: kNothing }]\n).\nfn((t) => {\n  const { indexOffset, _indexCount, _expectedShape } = t.params;\n\n  // If this is written as uint16 but interpreted as uint32, it will have index 1 and 2 be both 0\n  // and render nothing.\n  // And the index buffer size - offset must be not less than the size required by triangle\n  // list, otherwise it also render nothing.\n  const indices = [1, 2, 0, 0, 0, 0, 0, 1, 3, 0];\n  const indexBuffer = t.CreateIndexBuffer(indices, 'uint16');\n  const result = t.run(indexBuffer, _indexCount, 'uint16', indexOffset);\n\n  const expectedTextureValues = t.CreateExpectedUint8Array(_expectedShape);\n  t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n});\n\ng.test('index_format,uint32').\ndesc('Test rendering result of indexed draw with index format of uint32.').\nparamsSubcasesOnly([\n{ indexOffset: 0, _indexCount: 10, _expectedShape: kSquare },\n{ indexOffset: 12, _indexCount: 7, _expectedShape: kBottomLeftTriangle },\n{ indexOffset: 36, _indexCount: 0, _expectedShape: kNothing }]\n).\nfn((t) => {\n  const { indexOffset, _indexCount, _expectedShape } = t.params;\n\n  // If this is interpreted as uint16, then it would be 0, 1, 0, ... and would draw nothing.\n  // And the index buffer size - offset must be not less than the size required by triangle\n  // list, otherwise it also render nothing.\n  const indices = [1, 2, 0, 0, 0, 0, 0, 1, 3, 0];\n  const indexBuffer = t.CreateIndexBuffer(indices, 'uint32');\n  const result = t.run(indexBuffer, _indexCount, 'uint32', indexOffset);\n\n  const expectedTextureValues = t.CreateExpectedUint8Array(_expectedShape);\n  t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n});\n\ng.test('index_format,change_pipeline_after_setIndexBuffer').\ndesc('Test that setting the index buffer before the pipeline works correctly.').\nparams((u) => u.combine('setPipelineBeforeSetIndexBuffer', [false, true])).\nfn((t) => {\n  const indexOffset = 12;\n  const indexCount = 7;\n  const expectedShape = kBottomLeftTriangle;\n\n  const indexFormat16 = 'uint16';\n  const indexFormat32 = 'uint32';\n\n  const indices = [1, 2, 0, 0, 0, 0, 0, 1, 3, 0];\n  const indexBuffer = t.CreateIndexBuffer(indices, indexFormat32);\n\n  const kPrimitiveTopology = 'triangle-strip';\n  const pipeline32 = t.MakeRenderPipeline(kPrimitiveTopology, indexFormat32);\n  const pipeline16 = t.MakeRenderPipeline(kPrimitiveTopology, indexFormat16);\n\n  const colorAttachment = t.createTextureTracked({\n    format: kTextureFormat,\n    size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n  });\n\n  const result = t.createBufferTracked({\n    size: byteLength,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: colorAttachment.createView(),\n      clearValue: [0, 0, 0, 0],\n      loadOp: 'clear',\n      storeOp: 'store'\n    }]\n\n  });\n\n  if (t.params.setPipelineBeforeSetIndexBuffer) {\n    pass.setPipeline(pipeline16);\n  }\n  pass.setIndexBuffer(indexBuffer, indexFormat32, indexOffset);\n  pass.setPipeline(pipeline32); // Set the pipeline for 'indexFormat32' again.\n  pass.drawIndexed(indexCount);\n  pass.end();\n  encoder.copyTextureToBuffer(\n    { texture: colorAttachment },\n    { buffer: result, bytesPerRow, rowsPerImage },\n    [kWidth, kHeight]\n  );\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n\n  const expectedTextureValues = t.CreateExpectedUint8Array(expectedShape);\n  t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n});\n\ng.test('index_format,setIndexBuffer_before_setPipeline').\ndesc('Test that setting the index buffer before the pipeline works correctly.').\nparams((u) => u.combine('setIndexBufferBeforeSetPipeline', [false, true])).\nfn((t) => {\n  const indexOffset = 12;\n  const indexCount = 7;\n  const expectedShape = kBottomLeftTriangle;\n\n  const indexFormat = 'uint32';\n\n  const indices = [1, 2, 0, 0, 0, 0, 0, 1, 3, 0];\n  const indexBuffer = t.CreateIndexBuffer(indices, indexFormat);\n\n  const kPrimitiveTopology = 'triangle-strip';\n  const pipeline = t.MakeRenderPipeline(kPrimitiveTopology, indexFormat);\n\n  const colorAttachment = t.createTextureTracked({\n    format: kTextureFormat,\n    size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n  });\n\n  const result = t.createBufferTracked({\n    size: byteLength,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: colorAttachment.createView(),\n      clearValue: [0, 0, 0, 0],\n      loadOp: 'clear',\n      storeOp: 'store'\n    }]\n\n  });\n\n  if (t.params.setIndexBufferBeforeSetPipeline) {\n    pass.setIndexBuffer(indexBuffer, indexFormat, indexOffset);\n    pass.setPipeline(pipeline);\n  } else {\n    pass.setPipeline(pipeline);\n    pass.setIndexBuffer(indexBuffer, indexFormat, indexOffset);\n  }\n\n  pass.drawIndexed(indexCount);\n  pass.end();\n  encoder.copyTextureToBuffer(\n    { texture: colorAttachment },\n    { buffer: result, bytesPerRow, rowsPerImage },\n    [kWidth, kHeight]\n  );\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n\n  const expectedTextureValues = t.CreateExpectedUint8Array(expectedShape);\n  t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n});\n\ng.test('index_format,setIndexBuffer_different_formats').\ndesc(\n  `\n  Test that index buffers of multiple formats can be used with a pipeline that doesn't use strip\n  primitive topology.\n  `\n).\nfn((t) => {\n  const indices = [1, 2, 0, 0, 0, 0, 0, 1, 3, 0];\n\n  // Create a pipeline to be used by different index formats.\n  const kPrimitiveTopology = 'triangle-list';\n  const pipeline = t.MakeRenderPipeline(kPrimitiveTopology);\n\n  const expectedTextureValues = t.CreateExpectedUint8Array(kBottomLeftTriangle);\n\n  const colorAttachment = t.createTextureTracked({\n    format: kTextureFormat,\n    size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n  });\n\n  const result = t.createBufferTracked({\n    size: byteLength,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  });\n\n  let encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  {\n    const indexFormat = 'uint32';\n    const indexOffset = 12;\n    const indexCount = 7;\n    const indexBuffer = t.CreateIndexBuffer(indices, indexFormat);\n\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n      {\n        view: colorAttachment.createView(),\n        clearValue: [0, 0, 0, 0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n\n    });\n\n    pass.setIndexBuffer(indexBuffer, indexFormat, indexOffset);\n    pass.setPipeline(pipeline);\n    pass.drawIndexed(indexCount);\n    pass.end();\n    encoder.copyTextureToBuffer(\n      { texture: colorAttachment },\n      { buffer: result, bytesPerRow, rowsPerImage },\n      [kWidth, kHeight]\n    );\n  }\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n  t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n\n  // Call setIndexBuffer with the pipeline and a different index format buffer.\n  encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  {\n    const indexFormat = 'uint16';\n    const indexOffset = 6;\n    const indexCount = 6;\n    const indexBuffer = t.CreateIndexBuffer(indices, indexFormat);\n\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n      {\n        view: colorAttachment.createView(),\n        clearValue: [0, 0, 0, 0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n\n    });\n\n    pass.setIndexBuffer(indexBuffer, indexFormat, indexOffset);\n    pass.setPipeline(pipeline);\n    pass.drawIndexed(indexCount);\n    pass.end();\n    encoder.copyTextureToBuffer(\n      { texture: colorAttachment },\n      { buffer: result, bytesPerRow, rowsPerImage },\n      [kWidth, kHeight]\n    );\n  }\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n  t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n});\n\ng.test('primitive_restart').\ndesc(\n  `\nTest primitive restart with each primitive topology.\n\nPrimitive restart should be always active with strip primitive topologies\n('line-strip' or 'triangle-strip') and never active for other topologies, where\nthe primitive restart value isn't special and should be treated as a regular index value.\n\nThe value -1 gets uploaded as 0xFFFF or 0xFFFF_FFFF according to the format.\n\nThe positions of these points are embedded in the shader above, and look like this:\n  |   0  2|\n  |       |\n  -1  3  1|\n\nBelow are the indices lists used for each test, and the expected rendering result of each\n(approximately, in the case of incorrect results). This shows the expected result (marked '->')\nis different from what you would get if the topology were incorrect.\n\n- primitiveTopology: triangle-list\n  indices: [0, 1, 3, -1, 2, 1, 0, 0],\n   -> triangle-list:              (0, 1, 3), (-1, 2, 1)\n        |    #  #|\n        |    ####|\n        |   #####|\n        | #######|\n      triangle-list with restart: (0, 1, 3), (2, 1, 0)\n      triangle-strip:             (0, 1, 3), (2, 1, 0), (1, 0, 0)\n        |    ####|\n        |    ####|\n        |    ####|\n        |    ####|\n      triangle-strip w/o restart: (0, 1, 3), (1, 3, -1), (3, -1, 2), (-1, 2, 1), (2, 1, 0), (1, 0, 0)\n        |    ####|\n        |    ####|\n        |   #####|\n        | #######|\n\n- primitiveTopology: triangle-strip\n  indices: [3, 1, 0, -1, 2, 2, 1, 3],\n   -> triangle-strip:             (3, 1, 0), (2, 2, 1), (2, 1, 3)\n        |    #  #|\n        |    ####|\n        |    ####|\n        |    ####|\n      triangle-strip w/o restart: (3, 1, 0), (1, 0, -1), (0, -1, 2), (2, 2, 1), (2, 3, 1)\n        |    ####|\n        |   #####|\n        |  ######|\n        | #######|\n      triangle-list:              (3, 1, 0), (-1, 2, 2)\n      triangle-list with restart: (3, 1, 0), (2, 2, 1)\n        |        |\n        |    #   |\n        |    ##  |\n        |    ### |\n\n- primitiveTopology: point, line-list, line-strip:\n  indices: [0, 1, -1, 2, -1, 2, 3, 0],\n   -> point-list:             (0), (1), (-1), (2), (3), (0)\n        |    #  #|\n        |        |\n        |        |\n        |#   #  #|\n      point-list with restart (0), (1), (2), (3), (0)\n        |    #  #|\n        |        |\n        |        |\n        |    #  #|\n   -> line-list:              (0, 1), (-1, 2), (3, 0)\n        |    # ##|\n        |    ##  |\n        |  ### # |\n        |##  #  #|\n      line-list with restart: (0, 1), (2, 3)\n        |    #  #|\n        |     ## |\n        |     ## |\n        |    #  #|\n   -> line-strip:             (0, 1), (2, 3), (3, 0)\n        |    #  #|\n        |    ### |\n        |    ### |\n        |    #  #|\n      line-strip w/o restart: (0, 1), (1, -1), (-1, 2), (2, 3), (3, 3)\n        |    # ##|\n        |    ### |\n        |  ## ## |\n        |########|\n`\n).\nparams((u) =>\nu //\n.combine('indexFormat', ['uint16', 'uint32']).\ncombineWithParams([\n{\n  primitiveTopology: 'point-list',\n  _indices: [0, 1, -1, 2, 3, 0],\n  _expectedShape: [\n  [0, 0, 0, 0, 1, 0, 0, 1],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [0, 0, 0, 0, 0, 0, 0, 0],\n  [1, 0, 0, 0, 1, 0, 0, 1]]\n\n},\n{\n  primitiveTopology: 'line-list',\n  _indices: [0, 1, -1, 2, 3, 0],\n  _expectedShape: [\n  [0, 0, 0, 0, 1, 0, 1, 1],\n  [0, 0, 0, 0, 1, 1, 0, 0],\n  [0, 0, 1, 1, 1, 0, 1, 0],\n  [1, 1, 0, 0, 1, 0, 0, 1]]\n\n},\n{\n  primitiveTopology: 'line-strip',\n  _indices: [0, 1, -1, 2, 3, 0],\n  _expectedShape: [\n  [0, 0, 0, 0, 1, 0, 0, 1],\n  [0, 0, 0, 0, 1, 1, 1, 0],\n  [0, 0, 0, 0, 1, 1, 1, 0],\n  [0, 0, 0, 0, 1, 0, 0, 1]]\n\n},\n{\n  primitiveTopology: 'triangle-list',\n  _indices: [0, 1, 3, -1, 2, 1, 0, 0],\n  _expectedShape: [\n  [0, 0, 0, 0, 0, 0, 0, 1],\n  [0, 0, 0, 0, 1, 1, 1, 1],\n  [0, 0, 0, 1, 1, 1, 1, 1],\n  [0, 1, 1, 1, 1, 1, 1, 1]]\n\n},\n{\n  primitiveTopology: 'triangle-strip',\n  _indices: [3, 1, 0, -1, 2, 2, 1, 3],\n  _expectedShape: [\n  [0, 0, 0, 0, 0, 0, 0, 1],\n  [0, 0, 0, 0, 1, 0, 1, 1],\n  [0, 0, 0, 0, 1, 1, 1, 1],\n  [0, 0, 0, 0, 1, 1, 1, 1]]\n\n}]\n)\n).\nfn((t) => {\n  const { indexFormat, primitiveTopology, _indices, _expectedShape } = t.params;\n\n  const indexBuffer = t.CreateIndexBuffer(_indices, indexFormat);\n  const result = t.run(indexBuffer, _indices.length, indexFormat, 0, primitiveTopology);\n\n  const expectedTextureValues = t.CreateExpectedUint8Array(_expectedShape);\n  t.expectGPUBufferValuesEqual(result, expectedTextureValues);\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG;AAC9B;AACA,CAAC,CAAC,SAASC,aAAa,QAAQ,4CAA4C,CAC5E,SAASC,OAAO,QAAQ,sBAAsB,CAC9C,SAASC,oBAAoB,QAAQ,iCAAiC;;AAEtE,MAAMC,OAAO,GAAG,CAAC;AACjB,MAAMC,MAAM,GAAG,CAAC;AAChB,MAAMC,cAAc,GAAG,QAAQ;;AAE/B;;;;;;;;AAQA;AACA,MAAMC,mBAAmB,GAAG;AAC5B,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;;AAGzB;AACA,MAAMC,OAAO,GAAG;AAChB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;;AAGzB;AACA,MAAMC,QAAQ,GAAG;AACjB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;;;AAGzB,MAAM,EAAEC,UAAU,EAAEC,WAAW,EAAEC,YAAY,CAAC,CAAC,GAAGT,oBAAoB,CAACG,cAAc,EAAE,IAAI,EAAE;AAC7FD,MAAM;AACND,OAAO;AACP,CAAC;AACD,CAAC;;AAED,MAAMS,eAAe,SAASX,OAAO,CAAC;EACpCY,kBAAkBA;EAClBC,QAAQ;EACRC,gBAAgB;EAChB;IACE,MAAMC,YAAY,GAAG,IAAI,CAACC,MAAM,CAACC,kBAAkB,CAAC;MAClD;MACA;MACAC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,CAAC,CAAC;;IAEF,MAAMC,cAAc,GAAG,IAAI,CAACH,MAAM,CAACC,kBAAkB,CAAC;MACpDC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;IACI,CAAC,CAAC;;IAEF,OAAO,IAAI,CAACF,MAAM,CAACI,oBAAoB,CAAC;MACtCC,MAAM,EAAE,IAAI,CAACL,MAAM,CAACM,oBAAoB,CAAC,EAAEC,gBAAgB,EAAE,EAAE,CAAC,CAAC,CAAC;MAClEC,MAAM,EAAE,EAAEC,MAAM,EAAEV,YAAY,EAAEW,UAAU,EAAE,MAAM,CAAC,CAAC;MACpDC,QAAQ,EAAE;QACRF,MAAM,EAAEN,cAAc;QACtBO,UAAU,EAAE,MAAM;QAClBE,OAAO,EAAE,CAAC,EAAEC,MAAM,EAAEzB,cAAc,CAAC,CAAC;MACtC,CAAC;MACD0B,SAAS,EAAE;QACTjB,QAAQ;QACRC;MACF;IACF,CAAC,CAAC;EACJ;;EAEAiB,iBAAiBA,CAACC,OAAO,EAAEC,WAAW,EAAE;IACtC,MAAMC,qBAAqB,GAAG,EAAEC,MAAM,EAAEC,WAAW,EAAEC,MAAM,EAAEC,WAAW,CAAC,CAAC,CAACL,WAAW,CAAC;IACvF,OAAO,IAAI,CAACM,sBAAsB,CAAC,IAAIL,qBAAqB,CAACF,OAAO,CAAC,EAAEQ,cAAc,CAACC,KAAK,CAAC;EAC9F;;EAEAC,GAAGA;EACHC,WAAW;EACXC,UAAU;EACVX,WAAW;EACXY,WAAW,GAAG,CAAC;EACfC,iBAAiB,GAAG,eAAe;EACnC;IACE,IAAIC,QAAQ;IACZ;IACA;IACA,IAAID,iBAAiB,KAAK,YAAY,IAAIA,iBAAiB,KAAK,gBAAgB,EAAE;MAChFC,QAAQ,GAAG,IAAI,CAACnC,kBAAkB,CAACkC,iBAAiB,EAAEb,WAAW,CAAC;IACpE,CAAC,MAAM;MACLc,QAAQ,GAAG,IAAI,CAACnC,kBAAkB,CAACkC,iBAAiB,CAAC;IACvD;;IAEA,MAAME,eAAe,GAAG,IAAI,CAACC,oBAAoB,CAAC;MAChDpB,MAAM,EAAEzB,cAAc;MACtB8C,IAAI,EAAE,EAAEC,KAAK,EAAEhD,MAAM,EAAEiD,MAAM,EAAElD,OAAO,EAAEmD,kBAAkB,EAAE,CAAC,CAAC,CAAC;MAC/DC,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE;IACpD,CAAC,CAAC;;IAEF,MAAMC,MAAM,GAAG,IAAI,CAACC,mBAAmB,CAAC;MACtCT,IAAI,EAAE1C,UAAU;MAChB8C,KAAK,EAAEd,cAAc,CAACgB,QAAQ,GAAGhB,cAAc,CAACoB;IAClD,CAAC,CAAC;;IAEF,MAAMC,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAE,IAAI,CAAC/C,MAAM,EAAE,IAAI,CAACA,MAAM,CAACgD,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAM,IAAI,CAAC/C,MAAM,EAAX,IAAI,CAACA,MAAM,CAAAgD,oBAAA,YAAX,IAAI,CAAChD,MAAM,CAACgD,oBAAoB,GAAE,CAAC;IAC5J,MAAMC,IAAI,GAAGJ,OAAO,CAACK,eAAe,CAAC;MACnCC,gBAAgB,EAAE;MAClB;QACEC,IAAI,EAAEpB,eAAe,CAACqB,UAAU,CAAC,CAAC;QAClCC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACxBC,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;MACX,CAAC;;IAEH,CAAC,CAAC;IACFP,IAAI,CAACQ,WAAW,CAAC1B,QAAQ,CAAC;IAC1BkB,IAAI,CAACS,cAAc,CAAC/B,WAAW,EAAEV,WAAW,EAAEY,WAAW,CAAC;IAC1DoB,IAAI,CAACU,WAAW,CAAC/B,UAAU,CAAC;IAC5BqB,IAAI,CAACW,GAAG,CAAC,CAAC;IACVf,OAAO,CAACgB,mBAAmB;MACzB,EAAEC,OAAO,EAAE9B,eAAe,CAAC,CAAC;MAC5B,EAAE+B,MAAM,EAAErB,MAAM,EAAEjD,WAAW,EAAEC,YAAY,CAAC,CAAC;MAC7C,CAACP,MAAM,EAAED,OAAO;IAClB,CAAC;IACD4D,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC/C,MAAM,EAAE,IAAI,CAACA,MAAM,CAACgE,KAAK,CAACC,MAAM,EAAE,CAAC,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAApB,UAAA,CAAAC,YAAA,WAAM,IAAI,CAAC/C,MAAM,EAAX,IAAI,CAACA,MAAM,CAACgE,KAAK,CAAAC,MAAA,GAAQ,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC,CAAC,SAA3C,IAAI,CAAClE,MAAM,CAACgE,KAAK,CAACC,MAAM,CAAC,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;;IAElJ,OAAOxB,MAAM;EACf;;EAEAyB,wBAAwBA,CAACC,WAAW,EAAE;IACpC,MAAMC,WAAW,GAAG,IAAIC,UAAU,CAAC9E,UAAU,CAAC;IAC9C,KAAK,IAAI+E,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGH,WAAW,CAACI,MAAM,EAAED,GAAG,EAAE,EAAE;MACjD,KAAK,IAAIE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGL,WAAW,CAACG,GAAG,CAAC,CAACC,MAAM,EAAEC,GAAG,EAAE,EAAE;QACtD,MAAMC,KAAK,GAAGN,WAAW,CAACG,GAAG,CAAC,CAACE,GAAG,CAAC;;QAEnC,MAAME,cAAc,GAAG,CAAC,CAAC,CAAC;QAC1B,MAAMC,UAAU,GAAGL,GAAG,GAAG9E,WAAW,GAAGgF,GAAG,GAAGE,cAAc;QAC3DN,WAAW,CAACO,UAAU,CAAC,GAAGF,KAAK;MACjC;IACF;IACA,OAAOL,WAAW;EACpB;AACF;;AAEA,OAAO,MAAMQ,CAAC,GAAG9F,aAAa,CAACY,eAAe,CAAC;;AAE/CkF,CAAC,CAACC,IAAI,CAAC,qBAAqB,CAAC;AAC7BC,IAAI,CAAC,oEAAoE,CAAC;AAC1EC,kBAAkB,CAAC;AACnB,EAAEnD,WAAW,EAAE,CAAC,EAAEoD,WAAW,EAAE,EAAE,EAAEC,cAAc,EAAE5F,OAAO,CAAC,CAAC;AAC5D,EAAEuC,WAAW,EAAE,CAAC,EAAEoD,WAAW,EAAE,CAAC,EAAEC,cAAc,EAAE7F,mBAAmB,CAAC,CAAC;AACvE,EAAEwC,WAAW,EAAE,EAAE,EAAEoD,WAAW,EAAE,CAAC,EAAEC,cAAc,EAAE3F,QAAQ,CAAC,CAAC;AAC7D,CAAC;AACD4F,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAM,EAAEvD,WAAW,EAAEoD,WAAW,EAAEC,cAAc,CAAC,CAAC,GAAGE,CAAC,CAACC,MAAM;;EAE7D;EACA;EACA;EACA;EACA,MAAMrE,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9C,MAAMW,WAAW,GAAGyD,CAAC,CAACrE,iBAAiB,CAACC,OAAO,EAAE,QAAQ,CAAC;EAC1D,MAAM0B,MAAM,GAAG0C,CAAC,CAAC1D,GAAG,CAACC,WAAW,EAAEsD,WAAW,EAAE,QAAQ,EAAEpD,WAAW,CAAC;;EAErE,MAAMyD,qBAAqB,GAAGF,CAAC,CAACjB,wBAAwB,CAACe,cAAc,CAAC;EACxEE,CAAC,CAACG,0BAA0B,CAAC7C,MAAM,EAAE4C,qBAAqB,CAAC;AAC7D,CAAC,CAAC;;AAEFT,CAAC,CAACC,IAAI,CAAC,qBAAqB,CAAC;AAC7BC,IAAI,CAAC,oEAAoE,CAAC;AAC1EC,kBAAkB,CAAC;AACnB,EAAEnD,WAAW,EAAE,CAAC,EAAEoD,WAAW,EAAE,EAAE,EAAEC,cAAc,EAAE5F,OAAO,CAAC,CAAC;AAC5D,EAAEuC,WAAW,EAAE,EAAE,EAAEoD,WAAW,EAAE,CAAC,EAAEC,cAAc,EAAE7F,mBAAmB,CAAC,CAAC;AACxE,EAAEwC,WAAW,EAAE,EAAE,EAAEoD,WAAW,EAAE,CAAC,EAAEC,cAAc,EAAE3F,QAAQ,CAAC,CAAC;AAC7D,CAAC;AACD4F,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAM,EAAEvD,WAAW,EAAEoD,WAAW,EAAEC,cAAc,CAAC,CAAC,GAAGE,CAAC,CAACC,MAAM;;EAE7D;EACA;EACA;EACA,MAAMrE,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9C,MAAMW,WAAW,GAAGyD,CAAC,CAACrE,iBAAiB,CAACC,OAAO,EAAE,QAAQ,CAAC;EAC1D,MAAM0B,MAAM,GAAG0C,CAAC,CAAC1D,GAAG,CAACC,WAAW,EAAEsD,WAAW,EAAE,QAAQ,EAAEpD,WAAW,CAAC;;EAErE,MAAMyD,qBAAqB,GAAGF,CAAC,CAACjB,wBAAwB,CAACe,cAAc,CAAC;EACxEE,CAAC,CAACG,0BAA0B,CAAC7C,MAAM,EAAE4C,qBAAqB,CAAC;AAC7D,CAAC,CAAC;;AAEFT,CAAC,CAACC,IAAI,CAAC,mDAAmD,CAAC;AAC3DC,IAAI,CAAC,yEAAyE,CAAC;AAC/EM,MAAM,CAAC,CAACG,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,iCAAiC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;AAC1EN,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAMvD,WAAW,GAAG,EAAE;EACtB,MAAMD,UAAU,GAAG,CAAC;EACpB,MAAM8D,aAAa,GAAGrG,mBAAmB;;EAEzC,MAAMsG,aAAa,GAAG,QAAQ;EAC9B,MAAMC,aAAa,GAAG,QAAQ;;EAE9B,MAAM5E,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9C,MAAMW,WAAW,GAAGyD,CAAC,CAACrE,iBAAiB,CAACC,OAAO,EAAE4E,aAAa,CAAC;;EAE/D,MAAMC,kBAAkB,GAAG,gBAAgB;EAC3C,MAAMC,UAAU,GAAGV,CAAC,CAACxF,kBAAkB,CAACiG,kBAAkB,EAAED,aAAa,CAAC;EAC1E,MAAMG,UAAU,GAAGX,CAAC,CAACxF,kBAAkB,CAACiG,kBAAkB,EAAEF,aAAa,CAAC;;EAE1E,MAAM3D,eAAe,GAAGoD,CAAC,CAACnD,oBAAoB,CAAC;IAC7CpB,MAAM,EAAEzB,cAAc;IACtB8C,IAAI,EAAE,EAAEC,KAAK,EAAEhD,MAAM,EAAEiD,MAAM,EAAElD,OAAO,EAAEmD,kBAAkB,EAAE,CAAC,CAAC,CAAC;IAC/DC,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE;EACpD,CAAC,CAAC;;EAEF,MAAMC,MAAM,GAAG0C,CAAC,CAACzC,mBAAmB,CAAC;IACnCT,IAAI,EAAE1C,UAAU;IAChB8C,KAAK,EAAEd,cAAc,CAACgB,QAAQ,GAAGhB,cAAc,CAACoB;EAClD,CAAC,CAAC;;EAEF,MAAMC,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAEqC,CAAC,CAACpF,MAAM,EAAEoF,CAAC,CAACpF,MAAM,CAACgD,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAMqC,CAAC,CAACpF,MAAM,EAARoF,CAAC,CAACpF,MAAM,CAAAgD,oBAAA,YAARoC,CAAC,CAACpF,MAAM,CAACgD,oBAAoB,GAAE,CAAC;EACnJ,MAAMC,IAAI,GAAGJ,OAAO,CAACK,eAAe,CAAC;IACnCC,gBAAgB,EAAE;IAClB;MACEC,IAAI,EAAEpB,eAAe,CAACqB,UAAU,CAAC,CAAC;MAClCC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACxBC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;IACX,CAAC;;EAEH,CAAC,CAAC;;EAEF,IAAI4B,CAAC,CAACC,MAAM,CAACW,+BAA+B,EAAE;IAC5C/C,IAAI,CAACQ,WAAW,CAACsC,UAAU,CAAC;EAC9B;EACA9C,IAAI,CAACS,cAAc,CAAC/B,WAAW,EAAEiE,aAAa,EAAE/D,WAAW,CAAC;EAC5DoB,IAAI,CAACQ,WAAW,CAACqC,UAAU,CAAC,CAAC,CAAC;EAC9B7C,IAAI,CAACU,WAAW,CAAC/B,UAAU,CAAC;EAC5BqB,IAAI,CAACW,GAAG,CAAC,CAAC;EACVf,OAAO,CAACgB,mBAAmB;IACzB,EAAEC,OAAO,EAAE9B,eAAe,CAAC,CAAC;IAC5B,EAAE+B,MAAM,EAAErB,MAAM,EAAEjD,WAAW,EAAEC,YAAY,CAAC,CAAC;IAC7C,CAACP,MAAM,EAAED,OAAO;EAClB,CAAC;EACD4D,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAEqC,CAAC,CAACpF,MAAM,EAAEoF,CAAC,CAACpF,MAAM,CAACgE,KAAK,CAACC,MAAM,EAAE,CAAC,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAApB,UAAA,CAAAC,YAAA,WAAMqC,CAAC,CAACpF,MAAM,EAARoF,CAAC,CAACpF,MAAM,CAACgE,KAAK,CAAAC,MAAA,GAAQ,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC,CAAC,SAAxCkB,CAAC,CAACpF,MAAM,CAACgE,KAAK,CAACC,MAAM,CAAC,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;;EAEzI,MAAMoB,qBAAqB,GAAGF,CAAC,CAACjB,wBAAwB,CAACuB,aAAa,CAAC;EACvEN,CAAC,CAACG,0BAA0B,CAAC7C,MAAM,EAAE4C,qBAAqB,CAAC;AAC7D,CAAC,CAAC;;AAEFT,CAAC,CAACC,IAAI,CAAC,gDAAgD,CAAC;AACxDC,IAAI,CAAC,yEAAyE,CAAC;AAC/EM,MAAM,CAAC,CAACG,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,iCAAiC,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;AAC1EN,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAMvD,WAAW,GAAG,EAAE;EACtB,MAAMD,UAAU,GAAG,CAAC;EACpB,MAAM8D,aAAa,GAAGrG,mBAAmB;;EAEzC,MAAM4B,WAAW,GAAG,QAAQ;;EAE5B,MAAMD,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC9C,MAAMW,WAAW,GAAGyD,CAAC,CAACrE,iBAAiB,CAACC,OAAO,EAAEC,WAAW,CAAC;;EAE7D,MAAM4E,kBAAkB,GAAG,gBAAgB;EAC3C,MAAM9D,QAAQ,GAAGqD,CAAC,CAACxF,kBAAkB,CAACiG,kBAAkB,EAAE5E,WAAW,CAAC;;EAEtE,MAAMe,eAAe,GAAGoD,CAAC,CAACnD,oBAAoB,CAAC;IAC7CpB,MAAM,EAAEzB,cAAc;IACtB8C,IAAI,EAAE,EAAEC,KAAK,EAAEhD,MAAM,EAAEiD,MAAM,EAAElD,OAAO,EAAEmD,kBAAkB,EAAE,CAAC,CAAC,CAAC;IAC/DC,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE;EACpD,CAAC,CAAC;;EAEF,MAAMC,MAAM,GAAG0C,CAAC,CAACzC,mBAAmB,CAAC;IACnCT,IAAI,EAAE1C,UAAU;IAChB8C,KAAK,EAAEd,cAAc,CAACgB,QAAQ,GAAGhB,cAAc,CAACoB;EAClD,CAAC,CAAC;;EAEF,MAAMC,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAEqC,CAAC,CAACpF,MAAM,EAAEoF,CAAC,CAACpF,MAAM,CAACgD,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAMqC,CAAC,CAACpF,MAAM,EAARoF,CAAC,CAACpF,MAAM,CAAAgD,oBAAA,YAARoC,CAAC,CAACpF,MAAM,CAACgD,oBAAoB,GAAE,CAAC;EACnJ,MAAMC,IAAI,GAAGJ,OAAO,CAACK,eAAe,CAAC;IACnCC,gBAAgB,EAAE;IAClB;MACEC,IAAI,EAAEpB,eAAe,CAACqB,UAAU,CAAC,CAAC;MAClCC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;MACxBC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;IACX,CAAC;;EAEH,CAAC,CAAC;;EAEF,IAAI4B,CAAC,CAACC,MAAM,CAACY,+BAA+B,EAAE;IAC5ChD,IAAI,CAACS,cAAc,CAAC/B,WAAW,EAAEV,WAAW,EAAEY,WAAW,CAAC;IAC1DoB,IAAI,CAACQ,WAAW,CAAC1B,QAAQ,CAAC;EAC5B,CAAC,MAAM;IACLkB,IAAI,CAACQ,WAAW,CAAC1B,QAAQ,CAAC;IAC1BkB,IAAI,CAACS,cAAc,CAAC/B,WAAW,EAAEV,WAAW,EAAEY,WAAW,CAAC;EAC5D;;EAEAoB,IAAI,CAACU,WAAW,CAAC/B,UAAU,CAAC;EAC5BqB,IAAI,CAACW,GAAG,CAAC,CAAC;EACVf,OAAO,CAACgB,mBAAmB;IACzB,EAAEC,OAAO,EAAE9B,eAAe,CAAC,CAAC;IAC5B,EAAE+B,MAAM,EAAErB,MAAM,EAAEjD,WAAW,EAAEC,YAAY,CAAC,CAAC;IAC7C,CAACP,MAAM,EAAED,OAAO;EAClB,CAAC;EACD4D,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAEqC,CAAC,CAACpF,MAAM,EAAEoF,CAAC,CAACpF,MAAM,CAACgE,KAAK,CAACC,MAAM,EAAE,CAAC,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAApB,UAAA,CAAAC,YAAA,WAAMqC,CAAC,CAACpF,MAAM,EAARoF,CAAC,CAACpF,MAAM,CAACgE,KAAK,CAAAC,MAAA,GAAQ,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC,CAAC,SAAxCkB,CAAC,CAACpF,MAAM,CAACgE,KAAK,CAACC,MAAM,CAAC,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;;EAEzI,MAAMoB,qBAAqB,GAAGF,CAAC,CAACjB,wBAAwB,CAACuB,aAAa,CAAC;EACvEN,CAAC,CAACG,0BAA0B,CAAC7C,MAAM,EAAE4C,qBAAqB,CAAC;AAC7D,CAAC,CAAC;;AAEFT,CAAC,CAACC,IAAI,CAAC,+CAA+C,CAAC;AACvDC,IAAI;EACF;AACF;AACA;AACA;AACA,CAAC;AACDI,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAMpE,OAAO,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;EAE9C;EACA,MAAM6E,kBAAkB,GAAG,eAAe;EAC1C,MAAM9D,QAAQ,GAAGqD,CAAC,CAACxF,kBAAkB,CAACiG,kBAAkB,CAAC;;EAEzD,MAAMP,qBAAqB,GAAGF,CAAC,CAACjB,wBAAwB,CAAC9E,mBAAmB,CAAC;;EAE7E,MAAM2C,eAAe,GAAGoD,CAAC,CAACnD,oBAAoB,CAAC;IAC7CpB,MAAM,EAAEzB,cAAc;IACtB8C,IAAI,EAAE,EAAEC,KAAK,EAAEhD,MAAM,EAAEiD,MAAM,EAAElD,OAAO,EAAEmD,kBAAkB,EAAE,CAAC,CAAC,CAAC;IAC/DC,KAAK,EAAEC,eAAe,CAACC,QAAQ,GAAGD,eAAe,CAACE;EACpD,CAAC,CAAC;;EAEF,MAAMC,MAAM,GAAG0C,CAAC,CAACzC,mBAAmB,CAAC;IACnCT,IAAI,EAAE1C,UAAU;IAChB8C,KAAK,EAAEd,cAAc,CAACgB,QAAQ,GAAGhB,cAAc,CAACoB;EAClD,CAAC,CAAC;;EAEF,IAAIC,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAEqC,CAAC,CAACpF,MAAM,EAAEoF,CAAC,CAACpF,MAAM,CAACgD,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAMqC,CAAC,CAACpF,MAAM,EAARoF,CAAC,CAACpF,MAAM,CAAAgD,oBAAA,YAARoC,CAAC,CAACpF,MAAM,CAACgD,oBAAoB,GAAE,CAAC;EACjJ;IACE,MAAM/B,WAAW,GAAG,QAAQ;IAC5B,MAAMY,WAAW,GAAG,EAAE;IACtB,MAAMD,UAAU,GAAG,CAAC;IACpB,MAAMD,WAAW,GAAGyD,CAAC,CAACrE,iBAAiB,CAACC,OAAO,EAAEC,WAAW,CAAC;;IAE7D,MAAMgC,IAAI,GAAGJ,OAAO,CAACK,eAAe,CAAC;MACnCC,gBAAgB,EAAE;MAClB;QACEC,IAAI,EAAEpB,eAAe,CAACqB,UAAU,CAAC,CAAC;QAClCC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACxBC,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;MACX,CAAC;;IAEH,CAAC,CAAC;;IAEFP,IAAI,CAACS,cAAc,CAAC/B,WAAW,EAAEV,WAAW,EAAEY,WAAW,CAAC;IAC1DoB,IAAI,CAACQ,WAAW,CAAC1B,QAAQ,CAAC;IAC1BkB,IAAI,CAACU,WAAW,CAAC/B,UAAU,CAAC;IAC5BqB,IAAI,CAACW,GAAG,CAAC,CAAC;IACVf,OAAO,CAACgB,mBAAmB;MACzB,EAAEC,OAAO,EAAE9B,eAAe,CAAC,CAAC;MAC5B,EAAE+B,MAAM,EAAErB,MAAM,EAAEjD,WAAW,EAAEC,YAAY,CAAC,CAAC;MAC7C,CAACP,MAAM,EAAED,OAAO;IAClB,CAAC;EACH;EACA4D,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAEqC,CAAC,CAACpF,MAAM,EAAEoF,CAAC,CAACpF,MAAM,CAACgE,KAAK,CAACC,MAAM,EAAE,CAAC,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAApB,UAAA,CAAAC,YAAA,WAAMqC,CAAC,CAACpF,MAAM,EAARoF,CAAC,CAACpF,MAAM,CAACgE,KAAK,CAAAC,MAAA,GAAQ,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC,CAAC,SAAxCkB,CAAC,CAACpF,MAAM,CAACgE,KAAK,CAACC,MAAM,CAAC,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;EACzIkB,CAAC,CAACG,0BAA0B,CAAC7C,MAAM,EAAE4C,qBAAqB,CAAC;;EAE3D;EACAzC,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAEqC,CAAC,CAACpF,MAAM,EAAEoF,CAAC,CAACpF,MAAM,CAACgD,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAMqC,CAAC,CAACpF,MAAM,EAARoF,CAAC,CAACpF,MAAM,CAAAgD,oBAAA,YAARoC,CAAC,CAACpF,MAAM,CAACgD,oBAAoB,GAAE,CAAC;EAC7I;IACE,MAAM/B,WAAW,GAAG,QAAQ;IAC5B,MAAMY,WAAW,GAAG,CAAC;IACrB,MAAMD,UAAU,GAAG,CAAC;IACpB,MAAMD,WAAW,GAAGyD,CAAC,CAACrE,iBAAiB,CAACC,OAAO,EAAEC,WAAW,CAAC;;IAE7D,MAAMgC,IAAI,GAAGJ,OAAO,CAACK,eAAe,CAAC;MACnCC,gBAAgB,EAAE;MAClB;QACEC,IAAI,EAAEpB,eAAe,CAACqB,UAAU,CAAC,CAAC;QAClCC,UAAU,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;QACxBC,MAAM,EAAE,OAAO;QACfC,OAAO,EAAE;MACX,CAAC;;IAEH,CAAC,CAAC;;IAEFP,IAAI,CAACS,cAAc,CAAC/B,WAAW,EAAEV,WAAW,EAAEY,WAAW,CAAC;IAC1DoB,IAAI,CAACQ,WAAW,CAAC1B,QAAQ,CAAC;IAC1BkB,IAAI,CAACU,WAAW,CAAC/B,UAAU,CAAC;IAC5BqB,IAAI,CAACW,GAAG,CAAC,CAAC;IACVf,OAAO,CAACgB,mBAAmB;MACzB,EAAEC,OAAO,EAAE9B,eAAe,CAAC,CAAC;MAC5B,EAAE+B,MAAM,EAAErB,MAAM,EAAEjD,WAAW,EAAEC,YAAY,CAAC,CAAC;MAC7C,CAACP,MAAM,EAAED,OAAO;IAClB,CAAC;EACH;EACA4D,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAEqC,CAAC,CAACpF,MAAM,EAAEoF,CAAC,CAACpF,MAAM,CAACgE,KAAK,CAACC,MAAM,EAAE,CAAC,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAApB,UAAA,CAAAC,YAAA,WAAMqC,CAAC,CAACpF,MAAM,EAARoF,CAAC,CAACpF,MAAM,CAACgE,KAAK,CAAAC,MAAA,GAAQ,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC,CAAC,SAAxCkB,CAAC,CAACpF,MAAM,CAACgE,KAAK,CAACC,MAAM,CAAC,CAACpB,OAAO,CAACqB,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;EACzIkB,CAAC,CAACG,0BAA0B,CAAC7C,MAAM,EAAE4C,qBAAqB,CAAC;AAC7D,CAAC,CAAC;;AAEFT,CAAC,CAACC,IAAI,CAAC,mBAAmB,CAAC;AAC3BC,IAAI;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACDM,MAAM,CAAC,CAACG,CAAC;AACTA,CAAC,CAAC;AAAA,CACDC,OAAO,CAAC,aAAa,EAAE,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC;AAC7CS,iBAAiB,CAAC;AAClB;EACEpE,iBAAiB,EAAE,YAAY;EAC/BqE,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC7BjB,cAAc,EAAE;EAChB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;AAE1B,CAAC;AACD;EACEpD,iBAAiB,EAAE,WAAW;EAC9BqE,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC7BjB,cAAc,EAAE;EAChB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;AAE1B,CAAC;AACD;EACEpD,iBAAiB,EAAE,YAAY;EAC/BqE,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAC7BjB,cAAc,EAAE;EAChB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;AAE1B,CAAC;AACD;EACEpD,iBAAiB,EAAE,eAAe;EAClCqE,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACnCjB,cAAc,EAAE;EAChB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;AAE1B,CAAC;AACD;EACEpD,iBAAiB,EAAE,gBAAgB;EACnCqE,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACnCjB,cAAc,EAAE;EAChB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;;AAE1B,CAAC;AACD;AACA,CAAC;AACDC,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAM,EAAEnE,WAAW,EAAEa,iBAAiB,EAAEqE,QAAQ,EAAEjB,cAAc,CAAC,CAAC,GAAGE,CAAC,CAACC,MAAM;;EAE7E,MAAM1D,WAAW,GAAGyD,CAAC,CAACrE,iBAAiB,CAACoF,QAAQ,EAAElF,WAAW,CAAC;EAC9D,MAAMyB,MAAM,GAAG0C,CAAC,CAAC1D,GAAG,CAACC,WAAW,EAAEwE,QAAQ,CAAC3B,MAAM,EAAEvD,WAAW,EAAE,CAAC,EAAEa,iBAAiB,CAAC;;EAErF,MAAMwD,qBAAqB,GAAGF,CAAC,CAACjB,wBAAwB,CAACe,cAAc,CAAC;EACxEE,CAAC,CAACG,0BAA0B,CAAC7C,MAAM,EAAE4C,qBAAqB,CAAC;AAC7D,CAAC,CAAC","ignoreList":[]}