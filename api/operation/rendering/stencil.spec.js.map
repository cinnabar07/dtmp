{"version":3,"file":"stencil.spec.js","names":["description","makeTestGroup","kDepthStencilFormats","kTextureFormatInfo","GPUTest","TextureTestMixin","TexelView","kStencilFormats","filter","format","stencil","kBaseColor","Float32Array","kRedStencilColor","kGreenStencilColor","StencilTest","checkStencilOperation","depthStencilFormat","testStencilState","initialStencil","_expectedStencil","depthCompare","kReferenceStencil","baseStencilState","compare","failOp","passOp","stencilState","baseState","depthWriteEnabled","stencilFront","stencilBack","testState","testState2","testStates","state","color","runStencilStateTest","checkStencilCompareFunction","compareFunction","stencilRefValue","expectedColor","isSingleEncoderMultiplePass","renderTargetFormat","renderTarget","createTextureTracked","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","depthTexture","sampleCount","mipLevelCount","COPY_DST","hasDepth","depth","depthStencilAttachment","view","createView","depthLoadOp","undefined","depthStoreOp","stencilLoadOp","stencilStoreOp","encoder","globalThis","_TRAMPOLINE_","device","createCommandEncoder","pass","beginRenderPass","colorAttachments","loadOp","storeOp","end","test","testPipeline","createRenderPipelineForTest","setPipeline","setStencilReference","setBindGroup","createBindGroupForTest","getBindGroupLayout","draw","queue","submit","finish","expColor","R","G","B","A","expTexelView","fromTexelsAsColors","_coords","expectTexelViewComparisonIsOkInTexture","texture","depthStencil","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","primitive","topology","data","createBindGroup","entries","binding","resource","buffer","makeBufferWithContents","GPUBufferUsage","UNIFORM","g","desc","params","u","combine","combineWithParams","stencilCompare","_expectedColor","beforeAllSubcases","t","selectDeviceForTextureFormatOrSkipTestCase","fn","info","depthFailOp","maskType","stencilReadMask","stencilWriteMask"],"sources":["../../../../../src/webgpu/api/operation/rendering/stencil.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTest related to stencil states, stencil op, compare func, etc.\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\n\nimport {\n  kDepthStencilFormats,\n  kTextureFormatInfo } from\n\n'../../../format_info.js';\nimport { GPUTest, TextureTestMixin } from '../../../gpu_test.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\n\nconst kStencilFormats = kDepthStencilFormats.filter((format) => kTextureFormatInfo[format].stencil);\n\nconst kBaseColor = new Float32Array([1.0, 1.0, 1.0, 1.0]);\nconst kRedStencilColor = new Float32Array([1.0, 0.0, 0.0, 1.0]);\nconst kGreenStencilColor = new Float32Array([0.0, 1.0, 0.0, 1.0]);\n\n\n\n\n\n\n\nclass StencilTest extends TextureTestMixin(GPUTest) {\n  checkStencilOperation(\n  depthStencilFormat,\n  testStencilState,\n  initialStencil,\n  _expectedStencil,\n  depthCompare = 'always')\n  {\n    const kReferenceStencil = 3;\n\n    const baseStencilState = {\n      compare: 'always',\n      failOp: 'keep',\n      passOp: 'replace'\n    };\n\n    const stencilState = {\n      compare: 'equal',\n      failOp: 'keep',\n      passOp: 'keep'\n    };\n\n    const baseState = {\n      format: depthStencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: baseStencilState,\n      stencilBack: baseStencilState\n    };\n\n    const testState = {\n      format: depthStencilFormat,\n      depthWriteEnabled: false,\n      depthCompare,\n      stencilFront: testStencilState,\n      stencilBack: testStencilState\n    };\n\n    const testState2 = {\n      format: depthStencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: stencilState,\n      stencilBack: stencilState\n    };\n\n    const testStates = [\n    // Draw the base triangle with stencil reference 1. This clears the stencil buffer to 1.\n    { state: baseState, color: kBaseColor, stencil: initialStencil },\n    { state: testState, color: kRedStencilColor, stencil: kReferenceStencil },\n    { state: testState2, color: kGreenStencilColor, stencil: _expectedStencil }];\n\n    this.runStencilStateTest(depthStencilFormat, testStates, kGreenStencilColor);\n  }\n\n  checkStencilCompareFunction(\n  depthStencilFormat,\n  compareFunction,\n  stencilRefValue,\n  expectedColor)\n  {\n    const baseStencilState = {\n      compare: 'always',\n      failOp: 'keep',\n      passOp: 'replace'\n    };\n\n    const stencilState = {\n      compare: compareFunction,\n      failOp: 'keep',\n      passOp: 'keep'\n    };\n\n    const baseState = {\n      format: depthStencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: baseStencilState,\n      stencilBack: baseStencilState\n    };\n\n    const testState = {\n      format: depthStencilFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'always',\n      stencilFront: stencilState,\n      stencilBack: stencilState\n    };\n\n    const testStates = [\n    // Draw the base triangle with stencil reference 1. This clears the stencil buffer to 1.\n    { state: baseState, color: kBaseColor, stencil: 1 },\n    { state: testState, color: kGreenStencilColor, stencil: stencilRefValue }];\n\n    this.runStencilStateTest(depthStencilFormat, testStates, expectedColor);\n  }\n\n  runStencilStateTest(\n  depthStencilFormat,\n  testStates,\n  expectedColor,\n  isSingleEncoderMultiplePass = false)\n  {\n    const renderTargetFormat = 'rgba8unorm';\n    const renderTarget = this.createTextureTracked({\n      format: renderTargetFormat,\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n    });\n\n    const depthTexture = this.createTextureTracked({\n      size: { width: 1, height: 1, depthOrArrayLayers: 1 },\n      format: depthStencilFormat,\n      sampleCount: 1,\n      mipLevelCount: 1,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_DST\n    });\n\n    const hasDepth = kTextureFormatInfo[depthStencilFormat].depth;\n    const depthStencilAttachment = {\n      view: depthTexture.createView(),\n      depthLoadOp: hasDepth ? 'load' : undefined,\n      depthStoreOp: hasDepth ? 'store' : undefined,\n      stencilLoadOp: 'load',\n      stencilStoreOp: 'store'\n    };\n\n    const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", this.device, this.device.createCommandEncoder, [], () => this.device.createCommandEncoder());\n    let pass = encoder.beginRenderPass({\n      colorAttachments: [\n      {\n        view: renderTarget.createView(),\n        loadOp: 'load',\n        storeOp: 'store'\n      }],\n\n      depthStencilAttachment\n    });\n\n    if (isSingleEncoderMultiplePass) {\n      pass.end();\n    }\n\n    // Draw a triangle with the given stencil reference and the comparison function.\n    // The color will be kGreenStencilColor if the stencil test passes, and kBaseColor if not.\n    for (const test of testStates) {\n      if (isSingleEncoderMultiplePass) {\n        pass = encoder.beginRenderPass({\n          colorAttachments: [\n          {\n            view: renderTarget.createView(),\n            loadOp: 'load',\n            storeOp: 'store'\n          }],\n\n          depthStencilAttachment\n        });\n      }\n      const testPipeline = this.createRenderPipelineForTest(test.state);\n      pass.setPipeline(testPipeline);\n      if (test.stencil !== undefined) {\n        pass.setStencilReference(test.stencil);\n      }\n      pass.setBindGroup(\n        0,\n        this.createBindGroupForTest(testPipeline.getBindGroupLayout(0), test.color)\n      );\n      pass.draw(1);\n\n      if (isSingleEncoderMultiplePass) {\n        pass.end();\n      }\n    }\n\n    if (!isSingleEncoderMultiplePass) {\n      pass.end();\n    }\n    globalThis._TRAMPOLINE_(\"submit\", this.device, this.device.queue.submit, [[encoder.finish()]], () => this.device.queue.submit([encoder.finish()]));\n\n    const expColor = {\n      R: expectedColor[0],\n      G: expectedColor[1],\n      B: expectedColor[2],\n      A: expectedColor[3]\n    };\n    const expTexelView = TexelView.fromTexelsAsColors(renderTargetFormat, (_coords) => expColor);\n    this.expectTexelViewComparisonIsOkInTexture({ texture: renderTarget }, expTexelView, [1, 1]);\n  }\n\n  createRenderPipelineForTest(depthStencil) {\n    return this.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            @vertex\n            fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n                return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n            }\n            `\n        }),\n        entryPoint: 'main'\n      },\n      fragment: {\n        targets: [{ format: 'rgba8unorm' }],\n        module: this.device.createShaderModule({\n          code: `\n            struct Params {\n              color : vec4<f32>\n            }\n            @group(0) @binding(0) var<uniform> params : Params;\n\n            @fragment fn main() -> @location(0) vec4<f32> {\n                return vec4<f32>(params.color);\n            }`\n        }),\n        entryPoint: 'main'\n      },\n      primitive: { topology: 'point-list' },\n      depthStencil\n    });\n  }\n\n  createBindGroupForTest(layout, data) {\n    return this.device.createBindGroup({\n      layout,\n      entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: this.makeBufferWithContents(data, GPUBufferUsage.UNIFORM)\n        }\n      }]\n\n    });\n  }\n}\n\nexport const g = makeTestGroup(StencilTest);\n\ng.test('stencil_compare_func').\ndesc(\n  `\n  Tests that stencil comparison functions with the stencil reference value works as expected.\n  `\n).\nparams((u) =>\nu //\n.combine('format', kStencilFormats).\ncombineWithParams([\n{ stencilCompare: 'always', stencilRefValue: 0, _expectedColor: kGreenStencilColor },\n{ stencilCompare: 'always', stencilRefValue: 1, _expectedColor: kGreenStencilColor },\n{ stencilCompare: 'always', stencilRefValue: 2, _expectedColor: kGreenStencilColor },\n{ stencilCompare: 'equal', stencilRefValue: 0, _expectedColor: kBaseColor },\n{ stencilCompare: 'equal', stencilRefValue: 1, _expectedColor: kGreenStencilColor },\n{ stencilCompare: 'equal', stencilRefValue: 2, _expectedColor: kBaseColor },\n{ stencilCompare: 'greater', stencilRefValue: 0, _expectedColor: kBaseColor },\n{ stencilCompare: 'greater', stencilRefValue: 1, _expectedColor: kBaseColor },\n{ stencilCompare: 'greater', stencilRefValue: 2, _expectedColor: kGreenStencilColor },\n{ stencilCompare: 'greater-equal', stencilRefValue: 0, _expectedColor: kBaseColor },\n{ stencilCompare: 'greater-equal', stencilRefValue: 1, _expectedColor: kGreenStencilColor },\n{ stencilCompare: 'greater-equal', stencilRefValue: 2, _expectedColor: kGreenStencilColor },\n{ stencilCompare: 'less', stencilRefValue: 0, _expectedColor: kGreenStencilColor },\n{ stencilCompare: 'less', stencilRefValue: 1, _expectedColor: kBaseColor },\n{ stencilCompare: 'less', stencilRefValue: 2, _expectedColor: kBaseColor },\n{ stencilCompare: 'less-equal', stencilRefValue: 0, _expectedColor: kGreenStencilColor },\n{ stencilCompare: 'less-equal', stencilRefValue: 1, _expectedColor: kGreenStencilColor },\n{ stencilCompare: 'less-equal', stencilRefValue: 2, _expectedColor: kBaseColor },\n{ stencilCompare: 'never', stencilRefValue: 0, _expectedColor: kBaseColor },\n{ stencilCompare: 'never', stencilRefValue: 1, _expectedColor: kBaseColor },\n{ stencilCompare: 'never', stencilRefValue: 2, _expectedColor: kBaseColor },\n{ stencilCompare: 'not-equal', stencilRefValue: 0, _expectedColor: kGreenStencilColor },\n{ stencilCompare: 'not-equal', stencilRefValue: 1, _expectedColor: kBaseColor },\n{ stencilCompare: 'not-equal', stencilRefValue: 2, _expectedColor: kGreenStencilColor }]\n)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n}).\nfn((t) => {\n  const { format, stencilCompare, stencilRefValue, _expectedColor } = t.params;\n\n  t.checkStencilCompareFunction(format, stencilCompare, stencilRefValue, _expectedColor);\n});\n\ng.test('stencil_passOp_operation').\ndesc(\n  `\n  Test that the stencil operation is executed on stencil pass. A triangle is drawn with the 'always'\n  comparison function, so it should pass. Then, test that each pass stencil operation works with the\n  given stencil values correctly as expected. For example,\n    - If the pass operation is 'keep', it keeps the initial stencil value.\n    - If the pass operation is 'replace', it replaces the initial stencil value with the reference\n      stencil value.\n  `\n).\nparams((u) =>\nu //\n.combine('format', kStencilFormats).\ncombineWithParams([\n{ passOp: 'keep', initialStencil: 1, _expectedStencil: 1 },\n{ passOp: 'zero', initialStencil: 1, _expectedStencil: 0 },\n{ passOp: 'replace', initialStencil: 1, _expectedStencil: 3 },\n{ passOp: 'invert', initialStencil: 0xf0, _expectedStencil: 0x0f },\n{ passOp: 'increment-clamp', initialStencil: 1, _expectedStencil: 2 },\n{ passOp: 'increment-clamp', initialStencil: 0xff, _expectedStencil: 0xff },\n{ passOp: 'increment-wrap', initialStencil: 1, _expectedStencil: 2 },\n{ passOp: 'increment-wrap', initialStencil: 0xff, _expectedStencil: 0 },\n{ passOp: 'decrement-clamp', initialStencil: 1, _expectedStencil: 0 },\n{ passOp: 'decrement-clamp', initialStencil: 0, _expectedStencil: 0 },\n{ passOp: 'decrement-wrap', initialStencil: 1, _expectedStencil: 0 },\n{ passOp: 'decrement-wrap', initialStencil: 0, _expectedStencil: 0xff }]\n)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n}).\nfn((t) => {\n  const { format, passOp, initialStencil, _expectedStencil } = t.params;\n\n  const stencilState = {\n    compare: 'always',\n    failOp: 'keep',\n    passOp\n  };\n\n  t.checkStencilOperation(format, stencilState, initialStencil, _expectedStencil);\n});\n\ng.test('stencil_failOp_operation').\ndesc(\n  `\n  Test that the stencil operation is executed on stencil fail. A triangle is drawn with the 'never'\n  comparison function, so it should fail. Then, test that each fail stencil operation works with the\n  given stencil values correctly as expected. For example,\n    - If the fail operation is 'keep', it keeps the initial stencil value.\n    - If the fail operation is 'replace', it replaces the initial stencil value with the reference\n      stencil value.\n  `\n).\nparams((u) =>\nu //\n.combine('format', kStencilFormats).\ncombineWithParams([\n{ failOp: 'keep', initialStencil: 1, _expectedStencil: 1 },\n{ failOp: 'zero', initialStencil: 1, _expectedStencil: 0 },\n{ failOp: 'replace', initialStencil: 1, _expectedStencil: 3 },\n{ failOp: 'invert', initialStencil: 0xf0, _expectedStencil: 0x0f },\n{ failOp: 'increment-clamp', initialStencil: 1, _expectedStencil: 2 },\n{ failOp: 'increment-clamp', initialStencil: 0xff, _expectedStencil: 0xff },\n{ failOp: 'increment-wrap', initialStencil: 1, _expectedStencil: 2 },\n{ failOp: 'increment-wrap', initialStencil: 0xff, _expectedStencil: 0 },\n{ failOp: 'decrement-clamp', initialStencil: 1, _expectedStencil: 0 },\n{ failOp: 'decrement-clamp', initialStencil: 0, _expectedStencil: 0 },\n{ failOp: 'decrement-wrap', initialStencil: 2, _expectedStencil: 1 },\n{ failOp: 'decrement-wrap', initialStencil: 1, _expectedStencil: 0 },\n{ failOp: 'decrement-wrap', initialStencil: 0, _expectedStencil: 0xff }]\n)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n}).\nfn((t) => {\n  const { format, failOp, initialStencil, _expectedStencil } = t.params;\n\n  const stencilState = {\n    compare: 'never',\n    failOp,\n    passOp: 'keep'\n  };\n\n  // Draw the base triangle with stencil reference 1. This clears the stencil buffer to 1.\n  // Always fails because the comparison never passes. Therefore red is never drawn, and the\n  // stencil contents may be updated according to `operation`.\n  t.checkStencilOperation(format, stencilState, initialStencil, _expectedStencil);\n});\n\ng.test('stencil_depthFailOp_operation').\ndesc(\n  `\n  Test that the stencil operation is executed on depthCompare fail. A triangle is drawn with the\n  'never' depthCompare, so it should fail the depth test. Then, test that each 'depthFailOp' stencil operation\n  works with the given stencil values correctly as expected. For example,\n    - If the depthFailOp operation is 'keep', it keeps the initial stencil value.\n    - If the depthFailOp operation is 'replace', it replaces the initial stencil value with the\n      reference stencil value.\n  `\n).\nparams((u) =>\nu //\n.combine(\n  'format',\n  kDepthStencilFormats.filter((format) => {\n    const info = kTextureFormatInfo[format];\n    return info.depth && info.stencil;\n  })\n).\ncombineWithParams([\n{ depthFailOp: 'keep', initialStencil: 1, _expectedStencil: 1 },\n{ depthFailOp: 'zero', initialStencil: 1, _expectedStencil: 0 },\n{ depthFailOp: 'replace', initialStencil: 1, _expectedStencil: 3 },\n{ depthFailOp: 'invert', initialStencil: 0xf0, _expectedStencil: 0x0f },\n{ depthFailOp: 'increment-clamp', initialStencil: 1, _expectedStencil: 2 },\n{ depthFailOp: 'increment-clamp', initialStencil: 0xff, _expectedStencil: 0xff },\n{ depthFailOp: 'increment-wrap', initialStencil: 1, _expectedStencil: 2 },\n{ depthFailOp: 'increment-wrap', initialStencil: 0xff, _expectedStencil: 0 },\n{ depthFailOp: 'decrement-clamp', initialStencil: 1, _expectedStencil: 0 },\n{ depthFailOp: 'decrement-clamp', initialStencil: 0, _expectedStencil: 0 },\n{ depthFailOp: 'decrement-wrap', initialStencil: 2, _expectedStencil: 1 },\n{ depthFailOp: 'decrement-wrap', initialStencil: 1, _expectedStencil: 0 },\n{ depthFailOp: 'decrement-wrap', initialStencil: 0, _expectedStencil: 0xff }]\n)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n}).\nfn((t) => {\n  const { format, depthFailOp, initialStencil, _expectedStencil } = t.params;\n\n  const stencilState = {\n    compare: 'always',\n    failOp: 'keep',\n    passOp: 'keep',\n    depthFailOp\n  };\n\n  // Call checkStencilOperation function with enabling the depthTest to test that the depthFailOp\n  // stencil operation works as expected.\n  t.checkStencilOperation(format, stencilState, initialStencil, _expectedStencil, 'never');\n});\n\ng.test('stencil_read_write_mask').\ndesc(\n  `\n  Tests that setting a stencil read/write masks work. Basically, The base triangle sets 3 to the\n  stencil, and then try to draw a triangle with different stencil values.\n    - In case that 'write' mask is 1,\n      * If the stencil of the triangle is 1, it draws because\n        'base stencil(3) & write mask(1) == triangle stencil(1)'.\n      * If the stencil of the triangle is 2, it does not draw because\n        'base stencil(3) & write mask(1) != triangle stencil(2)'.\n\n    - In case that 'read' mask is 2,\n      * If the stencil of the triangle is 1, it does not draw because\n        'base stencil(3) & read mask(2) != triangle stencil(1)'.\n      * If the stencil of the triangle is 2, it draws because\n        'base stencil(3) & read mask(2) == triangle stencil(2)'.\n  `\n).\nparams((u) =>\nu //\n.combine('format', kStencilFormats).\ncombineWithParams([\n{ maskType: 'write', stencilRefValue: 1, _expectedColor: kRedStencilColor },\n{ maskType: 'write', stencilRefValue: 2, _expectedColor: kBaseColor },\n{ maskType: 'read', stencilRefValue: 1, _expectedColor: kBaseColor },\n{ maskType: 'read', stencilRefValue: 2, _expectedColor: kRedStencilColor }]\n)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n}).\nfn((t) => {\n  const { format, maskType, stencilRefValue, _expectedColor } = t.params;\n\n  const baseStencilState = {\n    compare: 'always',\n    failOp: 'keep',\n    passOp: 'replace'\n  };\n\n  const stencilState = {\n    compare: 'equal',\n    failOp: 'keep',\n    passOp: 'keep'\n  };\n\n  const baseState = {\n    format,\n    depthWriteEnabled: false,\n    depthCompare: 'always',\n    stencilFront: baseStencilState,\n    stencilBack: baseStencilState,\n    stencilReadMask: 0xff,\n    stencilWriteMask: maskType === 'write' ? 0x1 : 0xff\n  };\n\n  const testState = {\n    format,\n    depthWriteEnabled: false,\n    depthCompare: 'always',\n    stencilFront: stencilState,\n    stencilBack: stencilState,\n    stencilReadMask: maskType === 'read' ? 0x2 : 0xff,\n    stencilWriteMask: 0xff\n  };\n\n  const testStates = [\n  // Draw the base triangle with stencil reference 3. This clears the stencil buffer to 3.\n  { state: baseState, color: kBaseColor, stencil: 3 },\n  { state: testState, color: kRedStencilColor, stencil: stencilRefValue }];\n\n\n  t.runStencilStateTest(format, testStates, _expectedColor);\n});\n\ng.test('stencil_reference_initialized').\ndesc('Test that stencil reference is initialized as zero for new render pass.').\nparams((u) => u.combine('format', kStencilFormats)).\nbeforeAllSubcases((t) => {\n  t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n}).\nfn((t) => {\n  const { format } = t.params;\n\n  const baseStencilState = {\n    compare: 'always',\n    passOp: 'replace'\n  };\n\n  const testStencilState = {\n    compare: 'equal',\n    passOp: 'keep'\n  };\n\n  const hasDepth = !!kTextureFormatInfo[format].depth;\n\n  const baseState = {\n    format,\n    depthWriteEnabled: hasDepth,\n    depthCompare: 'always',\n    stencilFront: baseStencilState,\n    stencilBack: baseStencilState\n  };\n\n  const testState = {\n    format,\n    depthWriteEnabled: hasDepth,\n    depthCompare: 'always',\n    stencilFront: testStencilState,\n    stencilBack: testStencilState\n  };\n\n  // First pass sets the stencil to 0x1, the second pass sets the stencil to its default\n  // value, and the third pass tests if the stencil is zero.\n  const testStates = [\n  { state: baseState, color: kBaseColor, stencil: 0x1 },\n  { state: baseState, color: kRedStencilColor, stencil: undefined },\n  { state: testState, color: kGreenStencilColor, stencil: 0x0 }];\n\n\n  // The third draw should pass the stencil test since the second pass set it to default zero.\n  t.runStencilStateTest(format, testStates, kGreenStencilColor, true);\n});"],"mappings":"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","ignoreList":[]}