{"version":3,"file":"indirect_draw.spec.js","names":["description","makeTestGroup","kDrawIndirectParametersSize","kDrawIndexedIndirectParametersSize","GPUTest","TextureTestMixin","filled","Uint8Array","notFilled","kRenderTargetFormat","F","MakeIndexBuffer","makeBufferWithContents","Uint32Array","GPUBufferUsage","INDEX","MakeVertexBuffer","isIndexed","vertices","Float32Array","VERTEX","MakeIndirectBuffer","indirectOffset","o","BYTES_PER_ELEMENT","parametersSize","arraySize","indirectBuffer","Array","map","Math","floor","random","INDIRECT","g","test","desc","params","u","combine","beginSubcases","expand","p","indirectDrawParametersSize","fn","t","vertexBuffer","pipeline","device","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","buffers","attributes","shaderLocation","format","offset","arrayStride","fragment","targets","renderTarget","createTextureTracked","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","commandEncoder","globalThis","_TRAMPOLINE_","createCommandEncoder","renderPass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","setPipeline","setVertexBuffer","setIndexBuffer","drawIndexedIndirect","drawIndirect","end","queue","submit","finish","expectSinglePixelComparisonsAreOkInTexture","texture","coord","x","y","exp"],"sources":["../../../../../src/webgpu/api/operation/rendering/indirect_draw.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTests for the indirect-specific aspects of drawIndirect/drawIndexedIndirect.\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  kDrawIndirectParametersSize,\n  kDrawIndexedIndirectParametersSize } from\n'../../../capability_info.js';\nimport { GPUTest, TextureTestMixin } from '../../../gpu_test.js';\n\nconst filled = new Uint8Array([0, 255, 0, 255]);\nconst notFilled = new Uint8Array([0, 0, 0, 0]);\n\nconst kRenderTargetFormat = 'rgba8unorm';\n\nclass F extends GPUTest {\n  MakeIndexBuffer() {\n    return this.makeBufferWithContents(\n      new Uint32Array([\n      0, 1, 2, // The bottom left triangle\n      1, 2, 3 // The top right triangle\n      ]),\n      GPUBufferUsage.INDEX\n    );\n  }\n\n  MakeVertexBuffer(isIndexed) {\n\n    const vertices = isIndexed ?\n    [\n    -1.0, -1.0,\n    -1.0, 1.0,\n    1.0, -1.0,\n    1.0, 1.0] :\n\n    [\n    // The bottom left triangle\n    -1.0, 1.0,\n    1.0, -1.0,\n    -1.0, -1.0,\n\n    // The top right triangle\n    -1.0, 1.0,\n    1.0, -1.0,\n    1.0, 1.0];\n\n    return this.makeBufferWithContents(new Float32Array(vertices), GPUBufferUsage.VERTEX);\n  }\n\n  MakeIndirectBuffer(isIndexed, indirectOffset) {\n    const o = indirectOffset / Uint32Array.BYTES_PER_ELEMENT;\n\n    const parametersSize = isIndexed ?\n    kDrawIndexedIndirectParametersSize :\n    kDrawIndirectParametersSize;\n    const arraySize = o + parametersSize * 2;\n\n    const indirectBuffer = [...Array(arraySize)].map(() => Math.floor(Math.random() * 100));\n\n    if (isIndexed) {\n      // draw args that will draw the left bottom triangle (expected call)\n      indirectBuffer[o] = 3; // indexCount\n      indirectBuffer[o + 1] = 1; // instanceCount\n      indirectBuffer[o + 2] = 0; // firstIndex\n      indirectBuffer[o + 3] = 0; // baseVertex\n      indirectBuffer[o + 4] = 0; // firstInstance\n\n      // draw args that will draw both triangles\n      indirectBuffer[o + 5] = 6; // indexCount\n      indirectBuffer[o + 6] = 1; // instanceCount\n      indirectBuffer[o + 7] = 0; // firstIndex\n      indirectBuffer[o + 8] = 0; // baseVertex\n      indirectBuffer[o + 9] = 0; // firstInstance\n\n      if (o >= parametersSize) {\n        // draw args that will draw the right top triangle\n        indirectBuffer[o - 5] = 3; // indexCount\n        indirectBuffer[o - 4] = 1; // instanceCount\n        indirectBuffer[o - 3] = 3; // firstIndex\n        indirectBuffer[o - 2] = 0; // baseVertex\n        indirectBuffer[o - 1] = 0; // firstInstance\n      }\n\n      if (o >= parametersSize * 2) {\n        // draw args that will draw nothing\n        indirectBuffer[0] = 0; // indexCount\n        indirectBuffer[1] = 0; // instanceCount\n        indirectBuffer[2] = 0; // firstIndex\n        indirectBuffer[3] = 0; // baseVertex\n        indirectBuffer[4] = 0; // firstInstance\n      }\n    } else {\n      // draw args that will draw the left bottom triangle (expected call)\n      indirectBuffer[o] = 3; // vertexCount\n      indirectBuffer[o + 1] = 1; // instanceCount\n      indirectBuffer[o + 2] = 0; // firstVertex\n      indirectBuffer[o + 3] = 0; // firstInstance\n\n      // draw args that will draw both triangles\n      indirectBuffer[o + 4] = 6; // vertexCount\n      indirectBuffer[o + 5] = 1; // instanceCount\n      indirectBuffer[o + 6] = 0; // firstVertex\n      indirectBuffer[o + 7] = 0; // firstInstance\n\n      if (o >= parametersSize) {\n        // draw args that will draw the right top triangle\n        indirectBuffer[o - 4] = 3; // vertexCount\n        indirectBuffer[o - 3] = 1; // instanceCount\n        indirectBuffer[o - 2] = 3; // firstVertex\n        indirectBuffer[o - 1] = 0; // firstInstance\n      }\n\n      if (o >= parametersSize * 2) {\n        // draw args that will draw nothing\n        indirectBuffer[0] = 0; // vertexCount\n        indirectBuffer[1] = 0; // instanceCount\n        indirectBuffer[2] = 0; // firstVertex\n        indirectBuffer[3] = 0; // firstInstance\n      }\n    }\n\n    return this.makeBufferWithContents(new Uint32Array(indirectBuffer), GPUBufferUsage.INDIRECT);\n  }\n}\n\nexport const g = makeTestGroup(TextureTestMixin(F));\n\ng.test('basics').\ndesc(\n  `Test that the indirect draw parameters are tightly packed for drawIndirect and drawIndexedIndirect.\nAn indirectBuffer is created based on indirectOffset. The actual draw args being used indicated by the\nindirectOffset is going to draw a left bottom triangle.\nWhile the remaining indirectBuffer is populated with random numbers or draw args\nthat draw right top triangle, both, or nothing which will fail the color check.\nThe test will check render target to see if only the left bottom area is filled,\nmeaning the expected draw args is uploaded correctly by the indirectBuffer and indirectOffset.\n\nParams:\n    - draw{Indirect, IndexedIndirect}\n    - indirectOffset= {0, 4, k * sizeof(args struct), k * sizeof(args struct) + 4}\n    `\n).\nparams((u) =>\nu.\ncombine('isIndexed', [true, false]).\nbeginSubcases().\nexpand('indirectOffset', (p) => {\n  const indirectDrawParametersSize = p.isIndexed ?\n  kDrawIndexedIndirectParametersSize * Uint32Array.BYTES_PER_ELEMENT :\n  kDrawIndirectParametersSize * Uint32Array.BYTES_PER_ELEMENT;\n  return [\n  0,\n  Uint32Array.BYTES_PER_ELEMENT,\n  1 * indirectDrawParametersSize,\n  1 * indirectDrawParametersSize + Uint32Array.BYTES_PER_ELEMENT,\n  3 * indirectDrawParametersSize,\n  3 * indirectDrawParametersSize + Uint32Array.BYTES_PER_ELEMENT,\n  99 * indirectDrawParametersSize,\n  99 * indirectDrawParametersSize + Uint32Array.BYTES_PER_ELEMENT];\n\n})\n).\nfn((t) => {\n  const { isIndexed, indirectOffset } = t.params;\n\n  const vertexBuffer = t.MakeVertexBuffer(isIndexed);\n  const indirectBuffer = t.MakeIndirectBuffer(isIndexed, indirectOffset);\n\n  const pipeline = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: t.device.createShaderModule({\n        code: `@vertex fn main(@location(0) pos : vec2<f32>) -> @builtin(position) vec4<f32> {\n              return vec4<f32>(pos, 0.0, 1.0);\n          }`\n      }),\n      entryPoint: 'main',\n      buffers: [\n      {\n        attributes: [\n        {\n          shaderLocation: 0,\n          format: 'float32x2',\n          offset: 0\n        }],\n\n        arrayStride: 2 * Float32Array.BYTES_PER_ELEMENT\n      }]\n\n    },\n    fragment: {\n      module: t.device.createShaderModule({\n        code: `@fragment fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n        }`\n      }),\n      entryPoint: 'main',\n      targets: [\n      {\n        format: kRenderTargetFormat\n      }]\n\n    }\n  });\n\n  const renderTarget = t.createTextureTracked({\n    size: [4, 4],\n    usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    format: kRenderTargetFormat\n  });\n\n  const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const renderPass = commandEncoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: renderTarget.createView(),\n      clearValue: [0, 0, 0, 0],\n      loadOp: 'clear',\n      storeOp: 'store'\n    }]\n\n  });\n  renderPass.setPipeline(pipeline);\n  renderPass.setVertexBuffer(0, vertexBuffer, 0);\n\n  if (isIndexed) {\n    renderPass.setIndexBuffer(t.MakeIndexBuffer(), 'uint32', 0);\n    renderPass.drawIndexedIndirect(indirectBuffer, indirectOffset);\n  } else {\n    renderPass.drawIndirect(indirectBuffer, indirectOffset);\n  }\n  renderPass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[commandEncoder.finish()]], () => t.queue.submit([commandEncoder.finish()]));\n\n  t.expectSinglePixelComparisonsAreOkInTexture({ texture: renderTarget }, [\n  // The bottom left area is filled\n  { coord: { x: 0, y: 1 }, exp: filled },\n  // The top right area is not filled\n  { coord: { x: 1, y: 0 }, exp: notFilled }]\n  );\n});"],"mappings":"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","ignoreList":[]}