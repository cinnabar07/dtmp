{"version":3,"file":"3d_texture_slices.spec.js","names":["description","makeTestGroup","kTextureFormatInfo","GPUTest","kBytesPerRowAlignment","kSize","kFormat","F","createShaderModule","attachmentCount","locations","outputs","i","device","code","getBufferSizeAndOffset","attachmentWidth","attachmentHeight","bufferSize","bufferOffset","checkAttachmentResult","buffer","expectedData","Uint8Array","j","k","expectGPUBufferValuesEqual","g","test","desc","params","u","combine","fn","t","mipLevel","depthSlice","texture","createTextureTracked","size","dimension","format","mipLevelCount","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","createBufferTracked","GPUBufferUsage","COPY_DST","module","pipeline","createRenderPipeline","layout","vertex","fragment","targets","primitive","topology","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","baseMipLevel","clearValue","r","b","a","loadOp","storeOp","setPipeline","draw","end","copyTextureToBuffer","origin","x","y","z","bytesPerRow","width","height","depthOrArrayLayers","queue","submit","finish","beginSubcases","sameTexture","samePass","formatByteCost","colorRender","byteCost","maxAttachmentCountPerSample","Math","trunc","limits","maxColorAttachmentBytesPerSample","min","maxColorAttachments","descriptor","textures","push","diffTexture","colorAttachment","Array","fill","offset","kBaseSize"],"sources":["../../../../../src/webgpu/api/operation/rendering/3d_texture_slices.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTest rendering to 3d texture slices.\n- Render to same slice on different render pass, different textures, or texture [1, 1, N]'s different mip levels\n- Render to different slices at mip levels on same texture in render pass\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kTextureFormatInfo } from '../../../format_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { kBytesPerRowAlignment } from '../../../util/texture/layout.js';\n\nconst kSize = 4;\nconst kFormat = 'rgba8unorm';\n\nclass F extends GPUTest {\n  createShaderModule(attachmentCount = 1) {\n    let locations = '';\n    let outputs = '';\n    for (let i = 0; i < attachmentCount; i++) {\n      locations = locations + `@location(${i}) color${i} : vec4f, \\n`;\n      outputs = outputs + `output.color${i} = vec4f(0.0, 1.0, 0.0, 1.0);\\n`;\n    }\n\n    return this.device.createShaderModule({\n      code: `\n        struct Output {\n          ${locations}\n        }\n\n        @vertex\n        fn main_vs(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n          var pos : array<vec2<f32>, 3> = array<vec2<f32>, 3>(\n              // Triangle is slightly extended so its edge doesn't cut through pixel centers.\n              vec2<f32>(-1.0, 1.01),\n              vec2<f32>(1.01, -1.0),\n              vec2<f32>(-1.0, -1.0));\n          return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n        }\n\n        @fragment\n        fn main_fs() -> Output {\n          var output : Output;\n          ${outputs}\n          return output;\n        }\n        `\n    });\n  }\n\n  getBufferSizeAndOffset(\n  attachmentWidth,\n  attachmentHeight,\n  attachmentCount)\n  {\n    const bufferSize =\n    (attachmentCount * attachmentHeight - 1) * kBytesPerRowAlignment + attachmentWidth * 4;\n    const bufferOffset = attachmentCount > 1 ? attachmentHeight * kBytesPerRowAlignment : 0;\n    return { bufferSize, bufferOffset };\n  }\n\n  checkAttachmentResult(\n  attachmentWidth,\n  attachmentHeight,\n  attachmentCount,\n  buffer)\n  {\n    const { bufferSize, bufferOffset } = this.getBufferSizeAndOffset(\n      attachmentWidth,\n      attachmentHeight,\n      attachmentCount\n    );\n    const expectedData = new Uint8Array(bufferSize);\n    for (let i = 0; i < attachmentCount; i++) {\n      for (let j = 0; j < attachmentHeight; j++) {\n        for (let k = 0; k < attachmentWidth; k++) {\n          expectedData[i * bufferOffset + j * 256 + k * 4] = k <= j ? 0x00 : 0xff;\n          expectedData[i * bufferOffset + j * 256 + k * 4 + 1] = k <= j ? 0xff : 0x00;\n          expectedData[i * bufferOffset + j * 256 + k * 4 + 2] = 0x00;\n          expectedData[i * bufferOffset + j * 256 + k * 4 + 3] = 0xff;\n        }\n      }\n    }\n\n    this.expectGPUBufferValuesEqual(buffer, expectedData);\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('one_color_attachment,mip_levels').\ndesc(\n  `\n  Render to a 3d texture slice with mip levels.\n  `\n).\nparams((u) => u.combine('mipLevel', [0, 1, 2]).combine('depthSlice', [0, 1])).\nfn((t) => {\n  const { mipLevel, depthSlice } = t.params;\n\n  const texture = t.createTextureTracked({\n    size: [kSize << mipLevel, kSize << mipLevel, 2 << mipLevel],\n    dimension: '3d',\n    format: kFormat,\n    mipLevelCount: mipLevel + 1,\n    usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n  });\n\n  const { bufferSize } = t.getBufferSizeAndOffset(kSize, kSize, 1);\n\n  const buffer = t.createBufferTracked({\n    size: bufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  });\n\n  const module = t.createShaderModule();\n\n  const pipeline = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: { module },\n    fragment: {\n      module,\n      targets: [{ format: kFormat }]\n    },\n    primitive: { topology: 'triangle-list' }\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: texture.createView({\n        baseMipLevel: mipLevel,\n        mipLevelCount: 1\n      }),\n      depthSlice,\n      clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: 'store'\n    }]\n\n  });\n  pass.setPipeline(pipeline);\n  pass.draw(3);\n  pass.end();\n  encoder.copyTextureToBuffer(\n    { texture, mipLevel, origin: { x: 0, y: 0, z: depthSlice } },\n    { buffer, bytesPerRow: 256 },\n    { width: kSize, height: kSize, depthOrArrayLayers: 1 }\n  );\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n\n  t.checkAttachmentResult(kSize, kSize, 1, buffer);\n});\n\ng.test('multiple_color_attachments,same_mip_level').\ndesc(\n  `\n  Render to the different slices of 3d texture in multiple color attachments.\n  - Same 3d texture with different slices at same mip level\n  - Different 3d textures with same slice at same mip level\n  `\n).\nparams((u) =>\nu.\ncombine('sameTexture', [true, false]).\nbeginSubcases().\ncombine('samePass', [true, false]).\ncombine('mipLevel', [0, 1])\n).\nfn((t) => {\n  const { sameTexture, samePass, mipLevel } = t.params;\n\n  const formatByteCost = kTextureFormatInfo[kFormat].colorRender.byteCost;\n  const maxAttachmentCountPerSample = Math.trunc(\n    t.device.limits.maxColorAttachmentBytesPerSample / formatByteCost\n  );\n  const attachmentCount = Math.min(\n    maxAttachmentCountPerSample,\n    t.device.limits.maxColorAttachments\n  );\n\n  const descriptor = {\n    size: [kSize << mipLevel, kSize << mipLevel, 1 << attachmentCount << mipLevel],\n    dimension: '3d',\n    format: kFormat,\n    mipLevelCount: mipLevel + 1,\n    usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n  };\n\n  const texture = t.createTextureTracked(descriptor);\n\n  const textures = [];\n  const colorAttachments = [];\n  for (let i = 0; i < attachmentCount; i++) {\n    if (sameTexture) {\n      textures.push(texture);\n    } else {\n      const diffTexture = t.createTextureTracked(descriptor);\n      textures.push(diffTexture);\n    }\n\n    const colorAttachment = {\n      view: textures[i].createView({\n        baseMipLevel: mipLevel,\n        mipLevelCount: 1\n      }),\n      depthSlice: sameTexture ? i : 0,\n      clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: 'store'\n    };\n\n    colorAttachments.push(colorAttachment);\n  }\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n\n  if (samePass) {\n    const module = t.createShaderModule(attachmentCount);\n\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: { module },\n      fragment: {\n        module,\n        targets: new Array(attachmentCount).fill({ format: kFormat })\n      },\n      primitive: { topology: 'triangle-list' }\n    });\n\n    const pass = encoder.beginRenderPass({ colorAttachments });\n    pass.setPipeline(pipeline);\n    pass.draw(3);\n    pass.end();\n  } else {\n    const module = t.createShaderModule();\n\n    const pipeline = t.device.createRenderPipeline({\n      layout: 'auto',\n      vertex: { module },\n      fragment: {\n        module,\n        targets: [{ format: kFormat }]\n      },\n      primitive: { topology: 'triangle-list' }\n    });\n\n    for (let i = 0; i < attachmentCount; i++) {\n      const pass = encoder.beginRenderPass({ colorAttachments: [colorAttachments[i]] });\n      pass.setPipeline(pipeline);\n      pass.draw(3);\n      pass.end();\n    }\n  }\n\n  const { bufferSize, bufferOffset } = t.getBufferSizeAndOffset(kSize, kSize, attachmentCount);\n  const buffer = t.createBufferTracked({\n    size: bufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  });\n  for (let i = 0; i < attachmentCount; i++) {\n    encoder.copyTextureToBuffer(\n      {\n        texture: textures[i],\n        mipLevel,\n        origin: { x: 0, y: 0, z: sameTexture ? i : 0 }\n      },\n      { buffer, bytesPerRow: 256, offset: bufferOffset * i },\n      { width: kSize, height: kSize, depthOrArrayLayers: 1 }\n    );\n  }\n\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n\n  t.checkAttachmentResult(kSize, kSize, attachmentCount, buffer);\n});\n\ng.test('multiple_color_attachments,same_slice_with_diff_mip_levels').\ndesc(\n  `\n  Render to the same slice of a 3d texture at different mip levels in multiple color attachments.\n  - For texture size with 1x1xN, the same depth slice of different mip levels can be rendered.\n  `\n).\nparams((u) => u.combine('depthSlice', [0, 1])).\nfn((t) => {\n  const { depthSlice } = t.params;\n\n  const kBaseSize = 1;\n\n  const formatByteCost = kTextureFormatInfo[kFormat].colorRender.byteCost;\n  const maxAttachmentCountPerSample = Math.trunc(\n    t.device.limits.maxColorAttachmentBytesPerSample / formatByteCost\n  );\n  const attachmentCount = Math.min(\n    maxAttachmentCountPerSample,\n    t.device.limits.maxColorAttachments\n  );\n\n  const module = t.createShaderModule(attachmentCount);\n\n  const pipeline = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: { module },\n    fragment: {\n      module,\n      targets: new Array(attachmentCount).fill({ format: kFormat })\n    },\n    primitive: { topology: 'triangle-list' }\n  });\n\n  const texture = t.createTextureTracked({\n    size: [kBaseSize, kBaseSize, depthSlice + 1 << attachmentCount],\n    dimension: '3d',\n    format: kFormat,\n    mipLevelCount: attachmentCount,\n    usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n  });\n\n  const colorAttachments = [];\n  for (let i = 0; i < attachmentCount; i++) {\n    const colorAttachment = {\n      view: texture.createView({\n        baseMipLevel: i,\n        mipLevelCount: 1\n      }),\n      depthSlice,\n      clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: 'store'\n    };\n\n    colorAttachments.push(colorAttachment);\n  }\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n\n  const pass = encoder.beginRenderPass({ colorAttachments });\n  pass.setPipeline(pipeline);\n  pass.draw(3);\n  pass.end();\n\n  const { bufferSize, bufferOffset } = t.getBufferSizeAndOffset(\n    kBaseSize,\n    kBaseSize,\n    attachmentCount\n  );\n  const buffer = t.createBufferTracked({\n    size: bufferSize,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  });\n  for (let i = 0; i < attachmentCount; i++) {\n    encoder.copyTextureToBuffer(\n      { texture, mipLevel: i, origin: { x: 0, y: 0, z: depthSlice } },\n      { buffer, bytesPerRow: 256, offset: bufferOffset * i },\n      { width: kBaseSize, height: kBaseSize, depthOrArrayLayers: 1 }\n    );\n  }\n\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n\n  t.checkAttachmentResult(kBaseSize, kBaseSize, attachmentCount, buffer);\n});"],"mappings":"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","ignoreList":[]}