{"version":3,"file":"map_ArrayBuffer.spec.js","names":["description","makeTestGroup","timeout","GPUTest","checkElementsEqual","g","test","desc","params","u","combine","fn","t","transfer","mapMode","kSize","initialData","Uint32Array","ArrayBuffer","i","length","buf","makeBufferWithContents","GPUBufferUsage","MAP_WRITE","MAP_READ","globalThis","_TRAMPOLINE_","mapAsync","GPUMapMode","ab1","getMappedRange","expect","byteLength","mc","MessageChannel","ab2Promise","Promise","resolve","port2","onmessage","ev","fail","data","shouldThrow","port1","postMessage","ab2","ab2Data","expectOK","ab1Data","abs2NewData","slice","reverse","unmap"],"sources":["../../../../../src/webgpu/api/operation/buffers/map_ArrayBuffer.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTests for the behavior of ArrayBuffers returned by getMappedRange.\n\nTODO: Add tests that transfer to another thread instead of just using MessageChannel.\nTODO: Add tests for any other Web APIs that can detach ArrayBuffers.\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { timeout } from '../../../../common/util/timeout.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { checkElementsEqual } from '../../../util/check_contents.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('postMessage').\ndesc(\n  `Using postMessage to send a getMappedRange-returned ArrayBuffer throws a TypeError\n     if it was included in the transfer list. Otherwise, it makes a copy.\n    Test combinations of transfer={false, true}, mapMode={read,write}.`\n).\nparams((u) =>\nu //\n.combine('transfer', [false, true]).\ncombine('mapMode', ['READ', 'WRITE'])\n).\nfn(async (t) => {\n  const { transfer, mapMode } = t.params;\n  const kSize = 1024;\n\n  // Populate initial data.\n  const initialData = new Uint32Array(new ArrayBuffer(kSize));\n  for (let i = 0; i < initialData.length; ++i) {\n    initialData[i] = i;\n  }\n\n  const buf = t.makeBufferWithContents(\n    initialData,\n    mapMode === 'WRITE' ? GPUBufferUsage.MAP_WRITE : GPUBufferUsage.MAP_READ\n  );\n\n  await globalThis._TRAMPOLINE_(\"mapAsync\", buf, buf.mapAsync, [GPUMapMode[mapMode]], () => buf.mapAsync(GPUMapMode[mapMode]));\n  const ab1 = buf.getMappedRange();\n  t.expect(ab1.byteLength === kSize, 'ab1 should have the size of the buffer');\n\n  const mc = new MessageChannel();\n  const ab2Promise = new Promise((resolve) => {\n    mc.port2.onmessage = (ev) => {\n      if (transfer) {\n        t.fail(\n          `postMessage with ab1 in transfer list should not be received. Unexpected message: ${ev.data}`\n        );\n      } else {\n        resolve(ev.data);\n      }\n    };\n  });\n\n  if (transfer) {\n    t.shouldThrow('TypeError', () => mc.port1.postMessage(ab1, [ab1]));\n    // Wait to make sure the postMessage isn't received.\n    await new Promise((resolve) => timeout(resolve, 100));\n  } else {\n    mc.port1.postMessage(ab1);\n  }\n  t.expect(ab1.byteLength === kSize, 'after postMessage, ab1 should not be detached');\n\n  if (!transfer) {\n    const ab2 = await ab2Promise;\n    t.expect(ab2.byteLength === kSize, 'ab2 should be the same size');\n    const ab2Data = new Uint32Array(ab2, 0, initialData.length);\n    // ab2 should have the same initial contents.\n    t.expectOK(checkElementsEqual(ab2Data, initialData));\n\n    // Mutations to ab2 should not be visible in ab1.\n    const ab1Data = new Uint32Array(ab1, 0, initialData.length);\n    const abs2NewData = initialData.slice().reverse();\n    for (let i = 0; i < ab2Data.length; ++i) {\n      ab2Data[i] = abs2NewData[i];\n    }\n    t.expectOK(checkElementsEqual(ab1Data, initialData));\n    t.expectOK(checkElementsEqual(ab2Data, abs2NewData));\n  }\n\n  buf.unmap();\n  t.expect(ab1.byteLength === 0, 'after unmap, ab1 should be detached');\n\n  // Transferring an already-detached ArrayBuffer is a DataCloneError.\n  t.shouldThrow('DataCloneError', () => mc.port1.postMessage(ab1, [ab1]));\n});"],"mappings":"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","ignoreList":[]}