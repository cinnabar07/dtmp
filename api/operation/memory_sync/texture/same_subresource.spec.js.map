{"version":3,"file":"same_subresource.spec.js","names":["description","makeTestGroup","assert","memcpy","unreachable","GPUTest","align","getTextureCopyLayout","kTexelRepresentationInfo","kOperationBoundaries","kBoundaryInfo","OperationContextHelper","kAllReadOps","kAllWriteOps","checkOpsValidForContext","kOpInfo","g","fullscreenQuadWGSL","TextureSyncTestHelper","kTextureSize","kTextureFormat","constructor","t","textureCreationParams","texture","createTextureTracked","size","format","performReadOp","op","in","context","ensureContext","usage","GPUTextureUsage","COPY_SRC","COPY_DST","commandEncoder","undefined","copyTextureToTexture","byteLength","bytesPerRow","buffer","createBufferTracked","GPUBufferUsage","copyTextureToBuffer","copyBufferToTexture","STORAGE_BINDING","bindGroupLayout","device","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","FRAGMENT","COMPUTE","sampleType","storageTexture","access","bindGroup","createBindGroup","layout","resource","createView","module","createShaderModule","code","renderPipeline","createRenderPipeline","createPipelineLayout","bindGroupLayouts","vertex","entryPoint","fragment","targets","writeMask","renderBundleEncoder","setPipeline","setBindGroup","draw","renderPassEncoder","computePipeline","createComputePipeline","compute","computePassEncoder","dispatchWorkgroups","Math","ceil","performWriteOp","data","beginRenderPass","colorAttachments","view","clearValue","R","G","B","A","loadOp","storeOp","currentContext","rep","texelData","pack","encode","numTexels","fullTexelData","ArrayBuffer","i","src","dst","start","queue","writeTexture","j","writeBuffer","renderTarget","RENDER_ATTACHMENT","sampleCount","resolveTarget","storedValue","map","x","toFixed","join","test","desc","params","u","combine","expand","p","boundary","contexts","expandWithParams","_context","read","write","fn","helper","readUsage","writeUsage","texelValue1","texelValue2","readbackTexture","ensureBoundary","ensureSubmit","expectSingleColor","exp","texelValue","first","second","unimplemented"],"sources":["../../../../../../src/webgpu/api/operation/memory_sync/texture/same_subresource.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nMemory Synchronization Tests for Texture: read before write, read after write, and write after write to the same subresource.\n\n- TODO: Test synchronization between multiple queues.\n- TODO: Test depth/stencil attachments.\n- TODO: Use non-solid-color texture contents [2]\n`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { assert, memcpy, unreachable } from '../../../../../common/util/util.js';\n\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { align } from '../../../../util/math.js';\nimport { getTextureCopyLayout } from '../../../../util/texture/layout.js';\nimport {\n  kTexelRepresentationInfo } from\n\n'../../../../util/texture/texel_data.js';\nimport {\n  kOperationBoundaries,\n\n  kBoundaryInfo,\n  OperationContextHelper } from\n'../operation_context_helper.js';\n\nimport {\n  kAllReadOps,\n  kAllWriteOps,\n  checkOpsValidForContext,\n\n  kOpInfo } from\n'./texture_sync_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\nconst fullscreenQuadWGSL = `\n  struct VertexOutput {\n    @builtin(position) Position : vec4<f32>\n  };\n\n  @vertex fn vert_main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n    var pos = array<vec2<f32>, 6>(\n        vec2<f32>( 1.0,  1.0),\n        vec2<f32>( 1.0, -1.0),\n        vec2<f32>(-1.0, -1.0),\n        vec2<f32>( 1.0,  1.0),\n        vec2<f32>(-1.0, -1.0),\n        vec2<f32>(-1.0,  1.0));\n\n    var output : VertexOutput;\n    output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n    return output;\n  }\n`;\n\nclass TextureSyncTestHelper extends OperationContextHelper {\n\n\n  kTextureSize = [4, 4];\n  kTextureFormat = 'rgba8unorm';\n\n  constructor(\n  t,\n  textureCreationParams)\n\n\n  {\n    super(t);\n    this.texture = t.createTextureTracked({\n      size: this.kTextureSize,\n      format: this.kTextureFormat,\n      ...textureCreationParams\n    });\n  }\n\n  /**\n   * Perform a read operation on the test texture.\n   * @return GPUTexture copy containing the contents.\n   */\n  performReadOp({ op, in: context }) {\n    this.ensureContext(context);\n    switch (op) {\n      case 't2t-copy':{\n          const texture = this.t.createTextureTracked({\n            size: this.kTextureSize,\n            format: this.kTextureFormat,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST\n          });\n\n          assert(this.commandEncoder !== undefined);\n          this.commandEncoder.copyTextureToTexture(\n            {\n              texture: this.texture\n            },\n            { texture },\n            this.kTextureSize\n          );\n          return texture;\n        }\n      case 't2b-copy':{\n          const { byteLength, bytesPerRow } = getTextureCopyLayout(this.kTextureFormat, '2d', [\n          ...this.kTextureSize,\n          1]\n          );\n          const buffer = this.t.createBufferTracked({\n            size: byteLength,\n            usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n          });\n\n          const texture = this.t.createTextureTracked({\n            size: this.kTextureSize,\n            format: this.kTextureFormat,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST\n          });\n\n          assert(this.commandEncoder !== undefined);\n          this.commandEncoder.copyTextureToBuffer(\n            {\n              texture: this.texture\n            },\n            { buffer, bytesPerRow },\n            this.kTextureSize\n          );\n          this.commandEncoder.copyBufferToTexture(\n            { buffer, bytesPerRow },\n            { texture },\n            this.kTextureSize\n          );\n          return texture;\n        }\n      case 'sample':{\n          const texture = this.t.createTextureTracked({\n            size: this.kTextureSize,\n            format: this.kTextureFormat,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.STORAGE_BINDING\n          });\n\n          const bindGroupLayout = this.device.createBindGroupLayout({\n            entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE,\n              texture: {\n                sampleType: 'unfilterable-float'\n              }\n            },\n            {\n              binding: 1,\n              visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE,\n              storageTexture: {\n                access: 'write-only',\n                format: this.kTextureFormat\n              }\n            }]\n\n          });\n\n          const bindGroup = this.device.createBindGroup({\n            layout: bindGroupLayout,\n            entries: [\n            {\n              binding: 0,\n              resource: this.texture.createView()\n            },\n            {\n              binding: 1,\n              resource: texture.createView()\n            }]\n\n          });\n\n          switch (context) {\n            case 'render-pass-encoder':\n            case 'render-bundle-encoder':{\n                const module = this.device.createShaderModule({\n                  code: `${fullscreenQuadWGSL}\n\n                @group(0) @binding(0) var inputTex: texture_2d<f32>;\n                @group(0) @binding(1) var outputTex: texture_storage_2d<rgba8unorm, write>;\n\n                @fragment fn frag_main(@builtin(position) fragCoord: vec4<f32>) -> @location(0) vec4<f32> {\n                  let coord = vec2<i32>(fragCoord.xy);\n                  textureStore(outputTex, coord, textureLoad(inputTex, coord, 0));\n                  return vec4<f32>();\n                }\n              `\n                });\n                const renderPipeline = this.device.createRenderPipeline({\n                  layout: this.device.createPipelineLayout({\n                    bindGroupLayouts: [bindGroupLayout]\n                  }),\n                  vertex: {\n                    module,\n                    entryPoint: 'vert_main'\n                  },\n                  fragment: {\n                    module,\n                    entryPoint: 'frag_main',\n\n                    // Unused attachment since we can't use textureStore in the vertex shader.\n                    // Set writeMask to zero.\n                    targets: [\n                    {\n                      format: this.kTextureFormat,\n                      writeMask: 0\n                    }]\n\n                  }\n                });\n\n                switch (context) {\n                  case 'render-bundle-encoder':\n                    assert(this.renderBundleEncoder !== undefined);\n                    this.renderBundleEncoder.setPipeline(renderPipeline);\n                    this.renderBundleEncoder.setBindGroup(0, bindGroup);\n                    this.renderBundleEncoder.draw(6);\n                    break;\n                  case 'render-pass-encoder':\n                    assert(this.renderPassEncoder !== undefined);\n                    this.renderPassEncoder.setPipeline(renderPipeline);\n                    this.renderPassEncoder.setBindGroup(0, bindGroup);\n                    this.renderPassEncoder.draw(6);\n                    break;\n                }\n                break;\n              }\n            case 'compute-pass-encoder':{\n                const module = this.device.createShaderModule({\n                  code: `\n                @group(0) @binding(0) var inputTex: texture_2d<f32>;\n                @group(0) @binding(1) var outputTex: texture_storage_2d<rgba8unorm, write>;\n\n                @compute @workgroup_size(8, 8)\n                fn main(@builtin(global_invocation_id) gid : vec3<u32>) {\n                  if (any(gid.xy >= vec2<u32>(textureDimensions(inputTex)))) {\n                    return;\n                  }\n                  let coord = vec2<i32>(gid.xy);\n                  textureStore(outputTex, coord, textureLoad(inputTex, coord, 0));\n                }\n              `\n                });\n                const computePipeline = this.device.createComputePipeline({\n                  layout: this.device.createPipelineLayout({\n                    bindGroupLayouts: [bindGroupLayout]\n                  }),\n                  compute: {\n                    module,\n                    entryPoint: 'main'\n                  }\n                });\n\n                assert(this.computePassEncoder !== undefined);\n                this.computePassEncoder.setPipeline(computePipeline);\n                this.computePassEncoder.setBindGroup(0, bindGroup);\n                this.computePassEncoder.dispatchWorkgroups(\n                  Math.ceil(this.kTextureSize[0] / 8),\n                  Math.ceil(this.kTextureSize[1] / 8)\n                );\n                break;\n              }\n            default:\n              unreachable();\n          }\n\n          return texture;\n        }\n      case 'b2t-copy':\n      case 'attachment-resolve':\n      case 'attachment-store':\n        unreachable();\n    }\n    unreachable();\n  }\n\n  performWriteOp(\n  { op, in: context },\n  data)\n  {\n    this.ensureContext(context);\n    switch (op) {\n      case 'attachment-store':{\n          assert(this.commandEncoder !== undefined);\n          this.renderPassEncoder = this.commandEncoder.beginRenderPass({\n            colorAttachments: [\n            {\n              view: this.texture.createView(),\n              // [2] Use non-solid-color texture values\n              clearValue: [data.R ?? 0, data.G ?? 0, data.B ?? 0, data.A ?? 0],\n              loadOp: 'clear',\n              storeOp: 'store'\n            }]\n\n          });\n          this.currentContext = 'render-pass-encoder';\n          break;\n        }\n      case 'write-texture':{\n          // [2] Use non-solid-color texture values\n          const rep = kTexelRepresentationInfo[this.kTextureFormat];\n          const texelData = rep.pack(rep.encode(data));\n          const numTexels = this.kTextureSize[0] * this.kTextureSize[1];\n          const fullTexelData = new ArrayBuffer(texelData.byteLength * numTexels);\n          for (let i = 0; i < numTexels; ++i) {\n            memcpy({ src: texelData }, { dst: fullTexelData, start: i * texelData.byteLength });\n          }\n\n          this.queue.writeTexture(\n            { texture: this.texture },\n            fullTexelData,\n            {\n              bytesPerRow: texelData.byteLength * this.kTextureSize[0]\n            },\n            this.kTextureSize\n          );\n          break;\n        }\n      case 't2t-copy':{\n          const texture = this.t.createTextureTracked({\n            size: this.kTextureSize,\n            format: this.kTextureFormat,\n            usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST\n          });\n\n          // [2] Use non-solid-color texture values\n          const rep = kTexelRepresentationInfo[this.kTextureFormat];\n          const texelData = rep.pack(rep.encode(data));\n          const numTexels = this.kTextureSize[0] * this.kTextureSize[1];\n          const fullTexelData = new ArrayBuffer(texelData.byteLength * numTexels);\n          for (let i = 0; i < numTexels; ++i) {\n            memcpy({ src: texelData }, { dst: fullTexelData, start: i * texelData.byteLength });\n          }\n\n          this.queue.writeTexture(\n            { texture },\n            fullTexelData,\n            {\n              bytesPerRow: texelData.byteLength * this.kTextureSize[0]\n            },\n            this.kTextureSize\n          );\n\n          assert(this.commandEncoder !== undefined);\n          this.commandEncoder.copyTextureToTexture(\n            { texture },\n            { texture: this.texture },\n            this.kTextureSize\n          );\n          break;\n        }\n      case 'b2t-copy':{\n          // [2] Use non-solid-color texture values\n          const rep = kTexelRepresentationInfo[this.kTextureFormat];\n          const texelData = rep.pack(rep.encode(data));\n          const bytesPerRow = align(texelData.byteLength, 256);\n          const fullTexelData = new ArrayBuffer(bytesPerRow * this.kTextureSize[1]);\n          for (let i = 0; i < this.kTextureSize[1]; ++i) {\n            for (let j = 0; j < this.kTextureSize[0]; ++j) {\n              memcpy(\n                { src: texelData },\n                {\n                  dst: fullTexelData,\n                  start: i * bytesPerRow + j * texelData.byteLength\n                }\n              );\n            }\n          }\n\n          const buffer = this.t.createBufferTracked({\n            size: fullTexelData.byteLength,\n            usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n          });\n\n          this.queue.writeBuffer(buffer, 0, fullTexelData);\n\n          assert(this.commandEncoder !== undefined);\n          this.commandEncoder.copyBufferToTexture(\n            { buffer, bytesPerRow },\n            { texture: this.texture },\n            this.kTextureSize\n          );\n          break;\n        }\n      case 'attachment-resolve':{\n          assert(this.commandEncoder !== undefined);\n          const renderTarget = this.t.createTextureTracked({\n            format: this.kTextureFormat,\n            size: this.kTextureSize,\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\n            sampleCount: 4\n          });\n          this.renderPassEncoder = this.commandEncoder.beginRenderPass({\n            colorAttachments: [\n            {\n              view: renderTarget.createView(),\n              resolveTarget: this.texture.createView(),\n              // [2] Use non-solid-color texture values\n              clearValue: [data.R ?? 0, data.G ?? 0, data.B ?? 0, data.A ?? 0],\n              loadOp: 'clear',\n              storeOp: 'discard'\n            }]\n\n          });\n          this.currentContext = 'render-pass-encoder';\n          break;\n        }\n      case 'storage':{\n          const bindGroupLayout = this.device.createBindGroupLayout({\n            entries: [\n            {\n              binding: 0,\n              visibility: GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE,\n              storageTexture: {\n                access: 'write-only',\n                format: this.kTextureFormat\n              }\n            }]\n\n          });\n\n          const bindGroup = this.device.createBindGroup({\n            layout: bindGroupLayout,\n            entries: [\n            {\n              binding: 0,\n              resource: this.texture.createView()\n            }]\n\n          });\n\n          // [2] Use non-solid-color texture values\n          const storedValue = `vec4<f32>(${[data.R ?? 0, data.G ?? 0, data.B ?? 0, data.A ?? 0].\n          map((x) => x.toFixed(5)).\n          join(', ')})`;\n\n          switch (context) {\n            case 'render-pass-encoder':\n            case 'render-bundle-encoder':{\n                const module = this.device.createShaderModule({\n                  code: `${fullscreenQuadWGSL}\n\n                @group(0) @binding(0) var outputTex: texture_storage_2d<rgba8unorm, write>;\n\n                @fragment fn frag_main(@builtin(position) fragCoord: vec4<f32>) -> @location(0) vec4<f32> {\n                  textureStore(outputTex, vec2<i32>(fragCoord.xy), ${storedValue});\n                  return vec4<f32>();\n                }\n              `\n                });\n                const renderPipeline = this.device.createRenderPipeline({\n                  layout: this.device.createPipelineLayout({\n                    bindGroupLayouts: [bindGroupLayout]\n                  }),\n                  vertex: {\n                    module,\n                    entryPoint: 'vert_main'\n                  },\n                  fragment: {\n                    module,\n                    entryPoint: 'frag_main',\n\n                    // Unused attachment since we can't use textureStore in the vertex shader.\n                    // Set writeMask to zero.\n                    targets: [\n                    {\n                      format: this.kTextureFormat,\n                      writeMask: 0\n                    }]\n\n                  }\n                });\n\n                switch (context) {\n                  case 'render-bundle-encoder':\n                    assert(this.renderBundleEncoder !== undefined);\n                    this.renderBundleEncoder.setPipeline(renderPipeline);\n                    this.renderBundleEncoder.setBindGroup(0, bindGroup);\n                    this.renderBundleEncoder.draw(6);\n                    break;\n                  case 'render-pass-encoder':\n                    assert(this.renderPassEncoder !== undefined);\n                    this.renderPassEncoder.setPipeline(renderPipeline);\n                    this.renderPassEncoder.setBindGroup(0, bindGroup);\n                    this.renderPassEncoder.draw(6);\n                    break;\n                }\n                break;\n              }\n            case 'compute-pass-encoder':{\n                const module = this.device.createShaderModule({\n                  code: `\n                @group(0) @binding(0) var outputTex: texture_storage_2d<rgba8unorm, write>;\n\n                @compute @workgroup_size(8, 8)\n                fn main(@builtin(global_invocation_id) gid : vec3<u32>) {\n                  if (any(gid.xy >= vec2<u32>(textureDimensions(outputTex)))) {\n                    return;\n                  }\n                  let coord = vec2<i32>(gid.xy);\n                  textureStore(outputTex, coord, ${storedValue});\n                }\n              `\n                });\n                const computePipeline = this.device.createComputePipeline({\n                  layout: this.device.createPipelineLayout({\n                    bindGroupLayouts: [bindGroupLayout]\n                  }),\n                  compute: {\n                    module,\n                    entryPoint: 'main'\n                  }\n                });\n\n                assert(this.computePassEncoder !== undefined);\n                this.computePassEncoder.setPipeline(computePipeline);\n                this.computePassEncoder.setBindGroup(0, bindGroup);\n                this.computePassEncoder.dispatchWorkgroups(\n                  Math.ceil(this.kTextureSize[0] / 8),\n                  Math.ceil(this.kTextureSize[1] / 8)\n                );\n                break;\n              }\n            default:\n              unreachable();\n          }\n          break;\n        }\n      case 't2b-copy':\n      case 'sample':\n        unreachable();\n    }\n  }\n}\n\ng.test('rw').\ndesc(\n  `\n    Perform a 'read' operations on a texture subresource, followed by a 'write' operation.\n    Operations are separated by a 'boundary' (pass, encoder, queue-op, etc.).\n    Test that the results are synchronized.\n    The read should not see the contents written by the subsequent write.`\n).\nparams((u) =>\nu.\ncombine('boundary', kOperationBoundaries).\nexpand('_context', (p) => kBoundaryInfo[p.boundary].contexts).\nexpandWithParams(function* ({ _context }) {\n  for (const read of kAllReadOps) {\n    for (const write of kAllWriteOps) {\n      if (checkOpsValidForContext([read, write], _context)) {\n        yield {\n          read: { op: read, in: _context[0] },\n          write: { op: write, in: _context[1] }\n        };\n      }\n    }\n  }\n})\n).\nfn((t) => {\n  const helper = new TextureSyncTestHelper(t, {\n    usage:\n    GPUTextureUsage.COPY_DST |\n    kOpInfo[t.params.read.op].readUsage |\n    kOpInfo[t.params.write.op].writeUsage\n  });\n  // [2] Use non-solid-color texture value.\n  const texelValue1 = { R: 0, G: 1, B: 0, A: 1 };\n  const texelValue2 = { R: 1, G: 0, B: 0, A: 1 };\n\n  // Initialize the texture with something.\n  helper.performWriteOp({ op: 'write-texture', in: 'queue' }, texelValue1);\n  const readbackTexture = helper.performReadOp(t.params.read);\n  helper.ensureBoundary(t.params.boundary);\n  helper.performWriteOp(t.params.write, texelValue2);\n  helper.ensureSubmit();\n\n  // Contents should be the first value written, not the second.\n  t.expectSingleColor(readbackTexture, helper.kTextureFormat, {\n    size: [...helper.kTextureSize, 1],\n    exp: texelValue1\n  });\n});\n\ng.test('wr').\ndesc(\n  `\n    Perform a 'write' operation on a texture subresource, followed by a 'read' operation.\n    Operations are separated by a 'boundary' (pass, encoder, queue-op, etc.).\n    Test that the results are synchronized.\n    The read should see exactly the contents written by the previous write.\n\n    - TODO: Use non-solid-color texture contents [2]`\n).\nparams((u) =>\nu.\ncombine('boundary', kOperationBoundaries).\nexpand('_context', (p) => kBoundaryInfo[p.boundary].contexts).\nexpandWithParams(function* ({ _context }) {\n  for (const read of kAllReadOps) {\n    for (const write of kAllWriteOps) {\n      if (checkOpsValidForContext([write, read], _context)) {\n        yield {\n          write: { op: write, in: _context[0] },\n          read: { op: read, in: _context[1] }\n        };\n      }\n    }\n  }\n})\n).\nfn((t) => {\n  const helper = new TextureSyncTestHelper(t, {\n    usage: kOpInfo[t.params.read.op].readUsage | kOpInfo[t.params.write.op].writeUsage\n  });\n  // [2] Use non-solid-color texture value.\n  const texelValue = { R: 0, G: 1, B: 0, A: 1 };\n\n  helper.performWriteOp(t.params.write, texelValue);\n  helper.ensureBoundary(t.params.boundary);\n  const readbackTexture = helper.performReadOp(t.params.read);\n  helper.ensureSubmit();\n\n  // Contents should be exactly the values written.\n  t.expectSingleColor(readbackTexture, helper.kTextureFormat, {\n    size: [...helper.kTextureSize, 1],\n    exp: texelValue\n  });\n});\n\ng.test('ww').\ndesc(\n  `\n    Perform a 'first' write operation on a texture subresource, followed by a 'second' write operation.\n    Operations are separated by a 'boundary' (pass, encoder, queue-op, etc.).\n    Test that the results are synchronized.\n    The second write should overwrite the contents of the first.`\n).\nparams((u) =>\nu.\ncombine('boundary', kOperationBoundaries).\nexpand('_context', (p) => kBoundaryInfo[p.boundary].contexts).\nexpandWithParams(function* ({ _context }) {\n  for (const first of kAllWriteOps) {\n    for (const second of kAllWriteOps) {\n      if (checkOpsValidForContext([first, second], _context)) {\n        yield {\n          first: { op: first, in: _context[0] },\n          second: { op: second, in: _context[1] }\n        };\n      }\n    }\n  }\n})\n).\nfn((t) => {\n  const helper = new TextureSyncTestHelper(t, {\n    usage:\n    GPUTextureUsage.COPY_SRC |\n    kOpInfo[t.params.first.op].writeUsage |\n    kOpInfo[t.params.second.op].writeUsage\n  });\n  // [2] Use non-solid-color texture value.\n  const texelValue1 = { R: 1, G: 0, B: 0, A: 1 };\n  const texelValue2 = { R: 0, G: 1, B: 0, A: 1 };\n\n  helper.performWriteOp(t.params.first, texelValue1);\n  helper.ensureBoundary(t.params.boundary);\n  helper.performWriteOp(t.params.second, texelValue2);\n  helper.ensureSubmit();\n\n  // Read back the contents so we can test the result.\n  const readbackTexture = helper.performReadOp({ op: 't2t-copy', in: 'command-encoder' });\n  helper.ensureSubmit();\n\n  // Contents should be the second value written.\n  t.expectSingleColor(readbackTexture, helper.kTextureFormat, {\n    size: [...helper.kTextureSize, 1],\n    exp: texelValue2\n  });\n});\n\ng.test('rw,single_pass,load_store').\ndesc(\n  `\n    TODO: Test memory synchronization when loading from a texture subresource in a single pass and storing to it.`\n).\nunimplemented();\n\ng.test('rw,single_pass,load_resolve').\ndesc(\n  `\n    TODO: Test memory synchronization when loading from a texture subresource in a single pass and resolving to it.`\n).\nunimplemented();"],"mappings":"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","ignoreList":[]}