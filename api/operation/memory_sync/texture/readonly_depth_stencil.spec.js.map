{"version":3,"file":"readonly_depth_stencil.spec.js","names":["description","makeTestGroup","kDepthStencilFormats","kTextureFormatInfo","GPUTest","g","test","desc","params","p","combine","undefined","filter","info","format","depthMatch","depth","depthReadOnly","stencilMatch","stencil","stencilReadOnly","beforeAllSubcases","t","formatInfo","hasDepth","hasStencil","selectDeviceForTextureFormatOrSkipTestCase","skipIf","isCompatibility","fn","ds","createTextureTracked","label","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","TEXTURE_BINDING","initModule","device","createShaderModule","code","initPipeline","createRenderPipeline","layout","vertex","module","fragment","targets","entryPoint","depthStencil","depthWriteEnabled","depthCompare","stencilBack","compare","passOp","stencilFront","primitive","topology","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","initPass","beginRenderPass","colorAttachments","depthStencilAttachment","view","createView","depthLoadOp","depthStoreOp","depthClearValue","stencilLoadOp","stencilStoreOp","stencilClearValue","setPipeline","i","setStencilReference","draw","end","kFragDepth","kStencilRef","testAndCheckModule","testPipeline","fakeStencil","fakeDepth","stencilView","aspect","depthView","testBindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","testPass","setBindGroup","checkPipeline","checkBindGroup","resultTexture","COPY_SRC","checkPass","loadOp","clearValue","storeOp","queue","submit","finish","expectSingleColor","exp","R"],"sources":["../../../../../../src/webgpu/api/operation/memory_sync/texture/readonly_depth_stencil.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nMemory synchronization tests for depth-stencil attachments in a single pass, with checks for readonlyness.\n`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { kDepthStencilFormats, kTextureFormatInfo } from '../../../../format_info.js';\nimport { GPUTest } from '../../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('sampling_while_testing').\ndesc(\n  `Tests concurrent sampling and testing of readonly depth-stencil attachments in a render pass.\n      - Test for all depth-stencil formats.\n      - Test for all valid combinations of depth/stencilReadOnly.\n\nIn particular this test checks that a non-readonly aspect can be rendered to, and used for depth/stencil\ntesting while the other one is used for sampling.\n  `\n).\nparams((p) =>\np.\ncombine('format', kDepthStencilFormats) //\n.combine('depthReadOnly', [true, false, undefined]).\ncombine('stencilReadOnly', [true, false, undefined]).\nfilter((p) => {\n  const info = kTextureFormatInfo[p.format];\n  const depthMatch = info.depth === undefined === (p.depthReadOnly === undefined);\n  const stencilMatch = info.stencil === undefined === (p.stencilReadOnly === undefined);\n  return depthMatch && stencilMatch;\n})\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  const formatInfo = kTextureFormatInfo[format];\n  const hasDepth = formatInfo.depth !== undefined;\n  const hasStencil = formatInfo.stencil !== undefined;\n\n  t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n  t.skipIf(\n    t.isCompatibility && hasDepth && hasStencil,\n    'compatibility mode does not support different TEXTURE_BINDING views of the same texture in a single draw calls'\n  );\n}).\nfn((t) => {\n  const { format, depthReadOnly, stencilReadOnly } = t.params;\n  const formatInfo = kTextureFormatInfo[format];\n  const hasDepth = formatInfo.depth !== undefined;\n  const hasStencil = formatInfo.stencil !== undefined;\n\n  // The 3x3 depth stencil texture used for the tests.\n  const ds = t.createTextureTracked({\n    label: 'testTexture',\n    size: [3, 3],\n    format,\n    usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.TEXTURE_BINDING\n  });\n\n  // Fill the texture along the X axis with stencil values 1, 2, 3 and along the Y axis depth\n  // values 0.1, 0.2, 0.3. The depth value is written using @builtin(frag_depth) while the\n  // stencil is written using stencil operation and modifying the stencilReference.\n  const initModule = t.device.createShaderModule({\n    code: `\n            @vertex fn vs(\n                @builtin(instance_index) x : u32, @builtin(vertex_index) y : u32\n            ) -> @builtin(position) vec4f {\n                let texcoord = (vec2f(f32(x), f32(y)) + vec2f(0.5)) / 3;\n                return vec4f((texcoord * 2) - vec2f(1.0), 0, 1);\n            }\n            @fragment fn fs_with_depth(@builtin(position) pos : vec4f) -> @builtin(frag_depth) f32 {\n                return (pos.y + 0.5) / 10;\n            }\n            @fragment fn fs_no_depth() {\n            }\n        `\n  });\n  const initPipeline = t.device.createRenderPipeline({\n    layout: 'auto',\n    label: 'initPipeline',\n    vertex: { module: initModule },\n    fragment: {\n      module: initModule,\n      targets: [],\n      entryPoint: hasDepth ? 'fs_with_depth' : 'fs_no_depth'\n    },\n    depthStencil: {\n      format,\n      ...(hasDepth && {\n        depthWriteEnabled: true,\n        depthCompare: 'always'\n      }),\n      ...(hasStencil && {\n        stencilBack: { compare: 'always', passOp: 'replace' },\n        stencilFront: { compare: 'always', passOp: 'replace' }\n      })\n    },\n    primitive: { topology: 'point-list' }\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n\n  const initPass = encoder.beginRenderPass({\n    colorAttachments: [],\n    depthStencilAttachment: {\n      view: ds.createView(),\n      ...(hasDepth && {\n        depthLoadOp: 'clear',\n        depthStoreOp: 'store',\n        depthClearValue: 0\n      }),\n      ...(hasStencil && {\n        stencilLoadOp: 'clear',\n        stencilStoreOp: 'store',\n        stencilClearValue: 0\n      })\n    }\n  });\n  initPass.setPipeline(initPipeline);\n  for (let i = 0; i < 3; i++) {\n    initPass.setStencilReference(i + 1);\n    // Draw 3 points (Y = 0, 1, 2) at X = instance_index = i.\n    initPass.draw(3, 1, 0, i);\n  }\n  initPass.end();\n\n  // Perform the actual test:\n  //   - The shader outputs depth 0.15 and stencil 2 (via stencilReference).\n  //   - Test that the fragdepth / stencilref must be <= to what's in the depth-stencil attachment.\n  //      -> Fragments that have depth 0.1 or stencil 1 are tested out.\n  //   - Test that sampling the depth / stencil (when possible) is <= 0.2 for depth, <= 2 for stencil\n  //      -> Fragments that have depth 0.3 or stencil 3 are discarded if that aspect is readonly.\n  //   - Write the depth / increment the stencil if the aspect is not readonly.\n  //      -> After the test, fragments that passed will have non-readonly aspects updated.\n  const kFragDepth = 0.15;\n  const kStencilRef = 2;\n  const testAndCheckModule = t.device.createShaderModule({\n    code: `\n          @group(0) @binding(0) var depthTex : texture_2d<f32>;\n          @group(0) @binding(1) var stencilTex : texture_2d<u32>;\n\n          @vertex fn full_quad_vs(@builtin(vertex_index) id : u32) -> @builtin(position) vec4f {\n            let pos = array(vec2f(-3, -1), vec2(3, -1), vec2(0, 2));\n            return vec4f(pos[id], ${kFragDepth}, 1.0);\n          }\n\n          @fragment fn test_texture(@builtin(position) pos : vec4f) {\n            let texel = vec2u(floor(pos.xy));\n            if ${!!stencilReadOnly} && textureLoad(stencilTex, texel, 0).r > 2 {\n                discard;\n            }\n            if ${!!depthReadOnly} && textureLoad(depthTex, texel, 0).r > 0.21 {\n                discard;\n            }\n          }\n\n          @fragment fn check_texture(@builtin(position) pos : vec4f) -> @location(0) u32 {\n            let texel = vec2u(floor(pos.xy));\n\n            // The current values in the framebuffer.\n            let initStencil = texel.x + 1;\n            let initDepth = f32(texel.y + 1) / 10.0;\n\n            // Expected results of the test_texture step.\n            let stencilTestPasses = !${hasStencil} || ${kStencilRef} <= initStencil;\n            let depthTestPasses = !${hasDepth} || ${kFragDepth} <= initDepth;\n            let fsDiscards = (${!!stencilReadOnly} && initStencil > 2) ||\n                             (${!!depthReadOnly} && initDepth > 0.21);\n\n            // Compute the values that should be in the framebuffer.\n            var stencil = initStencil;\n            var depth = initDepth;\n\n            // When the fragments aren't discarded, fragment output operations happen.\n            if depthTestPasses && stencilTestPasses && !fsDiscards {\n                if ${!stencilReadOnly} {\n                    stencil += 1;\n                }\n                if ${!depthReadOnly} {\n                    depth = ${kFragDepth};\n                }\n            }\n\n            if ${hasStencil} && textureLoad(stencilTex, texel, 0).r != stencil {\n                return 0;\n            }\n            if ${hasDepth} && abs(textureLoad(depthTex, texel, 0).r - depth) > 0.01 {\n                return 0;\n            }\n            return 1;\n          }\n    `\n  });\n  const testPipeline = t.device.createRenderPipeline({\n    label: 'testPipeline',\n    layout: 'auto',\n    vertex: { module: testAndCheckModule },\n    fragment: { module: testAndCheckModule, entryPoint: 'test_texture', targets: [] },\n    depthStencil: {\n      format,\n      ...(hasDepth && {\n        depthCompare: 'less-equal',\n        depthWriteEnabled: !depthReadOnly\n      }),\n      ...(hasStencil && {\n        stencilBack: {\n          compare: 'less-equal',\n          passOp: stencilReadOnly ? 'keep' : 'increment-clamp'\n        },\n        stencilFront: {\n          compare: 'less-equal',\n          passOp: stencilReadOnly ? 'keep' : 'increment-clamp'\n        }\n      })\n    },\n    primitive: { topology: 'triangle-list' }\n  });\n\n  // Make fake stencil or depth textures to put in the bindgroup if the aspect is not readonly.\n  const fakeStencil = t.createTextureTracked({\n    label: 'fakeStencil',\n    format: 'r32uint',\n    size: [1, 1],\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  });\n  const fakeDepth = t.createTextureTracked({\n    label: 'fakeDepth',\n    format: 'r32float',\n    size: [1, 1],\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  });\n  const stencilView = stencilReadOnly ?\n  ds.createView({ aspect: 'stencil-only' }) :\n  fakeStencil.createView();\n  const depthView = depthReadOnly ?\n  ds.createView({ aspect: 'depth-only' }) :\n  fakeDepth.createView();\n  const testBindGroup = t.device.createBindGroup({\n    layout: testPipeline.getBindGroupLayout(0),\n    entries: [\n    { binding: 0, resource: depthView },\n    { binding: 1, resource: stencilView }]\n\n  });\n\n  // Run the test.\n  const testPass = encoder.beginRenderPass({\n    colorAttachments: [],\n    depthStencilAttachment: {\n      view: ds.createView(),\n      ...(hasDepth && (\n      depthReadOnly ?\n      { depthReadOnly: true } :\n      {\n        depthLoadOp: 'load',\n        depthStoreOp: 'store'\n      })),\n      ...(hasStencil && (\n      stencilReadOnly ?\n      { stencilReadOnly: true } :\n      {\n        stencilLoadOp: 'load',\n        stencilStoreOp: 'store'\n      }))\n    }\n  });\n  testPass.setPipeline(testPipeline);\n  testPass.setStencilReference(kStencilRef);\n  testPass.setBindGroup(0, testBindGroup);\n  testPass.draw(3);\n  testPass.end();\n\n  // Check that the contents of the textures are what we expect. See the shader module for the\n  // computation of what's expected, it writes a 1 on success, 0 otherwise.\n  const checkPipeline = t.device.createRenderPipeline({\n    label: 'checkPipeline',\n    layout: 'auto',\n    vertex: { module: testAndCheckModule },\n    fragment: {\n      module: testAndCheckModule,\n      entryPoint: 'check_texture',\n      targets: [{ format: 'r32uint' }]\n    },\n    primitive: { topology: 'triangle-list' }\n  });\n  const checkBindGroup = t.device.createBindGroup({\n    layout: checkPipeline.getBindGroupLayout(0),\n    entries: [\n    {\n      binding: 0,\n      resource: hasDepth ? ds.createView({ aspect: 'depth-only' }) : fakeDepth.createView()\n    },\n    {\n      binding: 1,\n      resource: hasStencil ?\n      ds.createView({ aspect: 'stencil-only' }) :\n      fakeStencil.createView()\n    }]\n\n  });\n\n  const resultTexture = t.createTextureTracked({\n    label: 'resultTexture',\n    format: 'r32uint',\n    usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC,\n    size: [3, 3]\n  });\n  const checkPass = encoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: resultTexture.createView(),\n      loadOp: 'clear',\n      clearValue: [0, 0, 0, 0],\n      storeOp: 'store'\n    }]\n\n  });\n  checkPass.setPipeline(checkPipeline);\n  checkPass.setBindGroup(0, checkBindGroup);\n  checkPass.draw(3);\n  checkPass.end();\n\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  // The check texture should be full of success (a.k.a. 1)!\n  t.expectSingleColor(resultTexture, resultTexture.format, { size: [3, 3, 1], exp: { R: 1 } });\n});"],"mappings":"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","ignoreList":[]}