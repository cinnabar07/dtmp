{"version":3,"file":"write.spec.js","names":["description","makeTestGroup","unreachable","kRegularTextureFormats","kTextureFormatInfo","GPUTest","TextureTestMixin","kFullscreenQuadVertexShaderCode","TexelView","g","kTextureViewWriteMethods","kTextureViewUsageMethods","kColorsFloat","R","G","B","A","FloatToIntColor","c","Math","floor","kColorsInt","map","kTextureSize","writeTextureAndGetExpectedTexelView","t","method","view","format","sampleCount","info","isFloatType","color","type","kColors","expectedTexelView","fromTexelsAsColors","coords","pixelPos","y","x","length","clampToFormatRange","vecType","kColorArrayShaderString","join","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","commandEncoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","dispatchWorkgroups","end","queue","submit","finish","kPlaceholderTextureFormat","placeholderTexture","createTextureTracked","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","createRenderPipeline","vertex","fragment","targets","writeMask","beginRenderPass","colorAttachments","createView","loadOp","storeOp","draw","targetView","resolveView","undefined","multisampleCount","multisample","count","resolveTarget","getTextureViewUsage","viewUsageMethod","minimalUsageForTest","test","desc","params","u","combine","filter","storage","colorRender","resolve","beforeAllSubcases","skipIfTextureFormatNotSupported","skipIfTextureFormatNotUsableAsStorageTexture","fn","textureUsageForMethod","includes","STORAGE_BINDING","COPY_SRC","texture","expectTexelViewComparisonIsOkInTexture","unimplemented"],"sources":["../../../../../src/webgpu/api/operation/texture_view/write.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTest the result of writing textures through texture views with various options.\n\nReads value from a shader array, writes the value via various write methods.\nCheck the texture result with the expected texel view.\n\nAll x= every possible view write method: {\n  - storage write {fragment, compute}\n  - render pass store\n  - render pass resolve\n}\n\nFormat reinterpretation is not tested here. It is in format_reinterpretation.spec.ts.\n\nTODO: Write helper for this if not already available (see resource_init, buffer_sync_test for related code).\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { unreachable } from '../../../../common/util/util.js';\nimport {\n  kRegularTextureFormats,\n  kTextureFormatInfo } from\n\n'../../../format_info.js';\nimport { GPUTest, TextureTestMixin } from '../../../gpu_test.js';\nimport { kFullscreenQuadVertexShaderCode } from '../../../util/shader.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\n\nexport const g = makeTestGroup(TextureTestMixin(GPUTest));\n\nconst kTextureViewWriteMethods = [\n'storage-write-fragment',\n'storage-write-compute',\n'render-pass-store',\n'render-pass-resolve'];\n\n\n\nconst kTextureViewUsageMethods = ['inherit', 'minimal'];\n\n\n// Src color values to read from a shader array.\nconst kColorsFloat = [\n{ R: 1.0, G: 0.0, B: 0.0, A: 0.8 },\n{ R: 0.0, G: 1.0, B: 0.0, A: 0.7 },\n{ R: 0.0, G: 0.0, B: 0.0, A: 0.6 },\n{ R: 0.0, G: 0.0, B: 0.0, A: 0.5 },\n{ R: 1.0, G: 1.0, B: 1.0, A: 0.4 },\n{ R: 0.7, G: 0.0, B: 0.0, A: 0.3 },\n{ R: 0.0, G: 0.8, B: 0.0, A: 0.2 },\n{ R: 0.0, G: 0.0, B: 0.9, A: 0.1 },\n{ R: 0.1, G: 0.2, B: 0.0, A: 0.3 },\n{ R: 0.4, G: 0.3, B: 0.6, A: 0.8 }];\n\n\nfunction FloatToIntColor(c) {\n  return Math.floor(c * 100);\n}\n\nconst kColorsInt = kColorsFloat.map((c) => {\n  return {\n    R: FloatToIntColor(c.R),\n    G: FloatToIntColor(c.G),\n    B: FloatToIntColor(c.B),\n    A: FloatToIntColor(c.A)\n  };\n});\n\nconst kTextureSize = 16;\n\nfunction writeTextureAndGetExpectedTexelView(\nt,\nmethod,\nview,\nformat,\nsampleCount)\n{\n  const info = kTextureFormatInfo[format];\n  const isFloatType = info.color.type === 'float' || info.color.type === 'unfilterable-float';\n  const kColors = isFloatType ? kColorsFloat : kColorsInt;\n  const expectedTexelView = TexelView.fromTexelsAsColors(\n    format,\n    (coords) => {\n      const pixelPos = coords.y * kTextureSize + coords.x;\n      return kColors[pixelPos % kColors.length];\n    },\n    { clampToFormatRange: true }\n  );\n  const vecType = isFloatType ? 'vec4f' : info.color.type === 'sint' ? 'vec4i' : 'vec4u';\n  const kColorArrayShaderString = `array<${vecType}, ${kColors.length}>(\n      ${kColors.map((t) => `${vecType}(${t.R}, ${t.G}, ${t.B}, ${t.A}) `).join(',')}\n    )`;\n\n  switch (method) {\n    case 'storage-write-compute':\n      {\n        const pipeline = t.device.createComputePipeline({\n          layout: 'auto',\n          compute: {\n            module: t.device.createShaderModule({\n              code: `\n                @group(0) @binding(0) var dst: texture_storage_2d<${format}, write>;\n                @compute @workgroup_size(1, 1) fn main(\n                  @builtin(global_invocation_id) global_id: vec3<u32>,\n                ) {\n                  const src = ${kColorArrayShaderString};\n                  let coord = vec2u(global_id.xy);\n                  let idx = coord.x + coord.y * ${kTextureSize};\n                  textureStore(dst, coord, src[idx % ${kColors.length}]);\n                }`\n            }),\n            entryPoint: 'main'\n          }\n        });\n        const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n        const pass = commandEncoder.beginComputePass();\n        pass.setPipeline(pipeline);\n        pass.setBindGroup(\n          0,\n          t.device.createBindGroup({\n            layout: pipeline.getBindGroupLayout(0),\n            entries: [\n            {\n              binding: 0,\n              resource: view\n            }]\n\n          })\n        );\n        pass.dispatchWorkgroups(kTextureSize, kTextureSize);\n        pass.end();\n        globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[commandEncoder.finish()]], () => t.device.queue.submit([commandEncoder.finish()]));\n      }\n      break;\n\n    case 'storage-write-fragment':\n      {\n        // Create a placeholder color attachment texture,\n        // The size of which equals that of format texture we are testing,\n        // so that we have the same number of fragments and texels.\n        const kPlaceholderTextureFormat = 'rgba8unorm';\n        const placeholderTexture = t.createTextureTracked({\n          format: kPlaceholderTextureFormat,\n          size: [kTextureSize, kTextureSize],\n          usage: GPUTextureUsage.RENDER_ATTACHMENT\n        });\n\n        const pipeline = t.device.createRenderPipeline({\n          layout: 'auto',\n          vertex: {\n            module: t.device.createShaderModule({\n              code: kFullscreenQuadVertexShaderCode\n            })\n          },\n          fragment: {\n            module: t.device.createShaderModule({\n              code: `\n                @group(0) @binding(0) var dst: texture_storage_2d<${format}, write>;\n                @fragment fn main(\n                  @builtin(position) fragCoord: vec4<f32>,\n                ) {\n                  const src = ${kColorArrayShaderString};\n                  let coord = vec2u(fragCoord.xy);\n                  let idx = coord.x + coord.y * ${kTextureSize};\n                  textureStore(dst, coord, src[idx % ${kColors.length}]);\n                }`\n            }),\n            // Set writeMask to 0 as the fragment shader has no output.\n            targets: [\n            {\n              format: kPlaceholderTextureFormat,\n              writeMask: 0\n            }]\n\n          }\n        });\n        const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n        const pass = commandEncoder.beginRenderPass({\n          colorAttachments: [\n          {\n            view: placeholderTexture.createView(),\n            loadOp: 'clear',\n            storeOp: 'discard'\n          }]\n\n        });\n        pass.setPipeline(pipeline);\n        pass.setBindGroup(\n          0,\n          t.device.createBindGroup({\n            layout: pipeline.getBindGroupLayout(0),\n            entries: [\n            {\n              binding: 0,\n              resource: view\n            }]\n\n          })\n        );\n        pass.draw(6);\n        pass.end();\n        globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[commandEncoder.finish()]], () => t.device.queue.submit([commandEncoder.finish()]));\n      }\n      break;\n\n    case 'render-pass-store':\n    case 'render-pass-resolve':\n      {\n        // Create a placeholder color attachment texture for the store target when tesing texture is used as resolve target.\n        const targetView =\n        method === 'render-pass-store' ?\n        view :\n        t.\n        createTextureTracked({\n          format,\n          size: [kTextureSize, kTextureSize],\n          usage: GPUTextureUsage.RENDER_ATTACHMENT,\n          sampleCount: 4\n        }).\n        createView();\n        const resolveView = method === 'render-pass-store' ? undefined : view;\n        const multisampleCount = method === 'render-pass-store' ? sampleCount : 4;\n\n        const pipeline = t.device.createRenderPipeline({\n          layout: 'auto',\n          vertex: {\n            module: t.device.createShaderModule({\n              code: kFullscreenQuadVertexShaderCode\n            })\n          },\n          fragment: {\n            module: t.device.createShaderModule({\n              code: `\n                @fragment fn main(\n                  @builtin(position) fragCoord: vec4<f32>,\n                ) -> @location(0) ${vecType} {\n                  const src = ${kColorArrayShaderString};\n                  let coord = vec2u(fragCoord.xy);\n                  let idx = coord.x + coord.y * ${kTextureSize};\n                  return src[idx % ${kColors.length}];\n                }`\n            }),\n            targets: [\n            {\n              format\n            }]\n\n          },\n          multisample: {\n            count: multisampleCount\n          }\n        });\n        const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n        const pass = commandEncoder.beginRenderPass({\n          colorAttachments: [\n          {\n            view: targetView,\n            resolveTarget: resolveView,\n            loadOp: 'clear',\n            storeOp: 'store'\n          }]\n\n        });\n        pass.setPipeline(pipeline);\n        pass.draw(6);\n        pass.end();\n        globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[commandEncoder.finish()]], () => t.device.queue.submit([commandEncoder.finish()]));\n      }\n      break;\n    default:\n      unreachable();\n  }\n\n  return expectedTexelView;\n}\n\nfunction getTextureViewUsage(\nviewUsageMethod,\nminimalUsageForTest)\n{\n  switch (viewUsageMethod) {\n    case 'inherit':\n      return 0;\n\n    case 'minimal':\n      return minimalUsageForTest;\n\n    default:\n      unreachable();\n  }\n}\n\ng.test('format').\ndesc(\n  `Views of every allowed format.\n\nRead values from color array in the shader, and write it to the texture view via different write methods.\n\n- x= every texture format\n- x= sampleCount {1, 4} if valid\n- x= every possible view write method (see above)\n- x= inherited or minimal texture view usage\n\nTODO: Test sampleCount > 1 for 'render-pass-store' after extending copySinglePixelTextureToBufferUsingComputePass\n      to read multiple pixels from multisampled textures. [1]\nTODO: Test rgb10a2uint when TexelRepresentation.numericRange is made per-component. [2]\n`\n).\nparams((u) =>\nu //\n.combine('method', kTextureViewWriteMethods).\ncombine('format', kRegularTextureFormats).\ncombine('sampleCount', [1, 4]).\nfilter(({ format, method, sampleCount }) => {\n  const info = kTextureFormatInfo[format];\n\n  if (sampleCount > 1 && !info.multisample) {\n    return false;\n  }\n\n  // [2]\n  if (format === 'rgb10a2uint') {\n    return false;\n  }\n\n  switch (method) {\n    case 'storage-write-compute':\n    case 'storage-write-fragment':\n      return info.color?.storage && sampleCount === 1;\n    case 'render-pass-store':\n      // [1]\n      if (sampleCount > 1) {\n        return false;\n      }\n      return !!info.colorRender;\n    case 'render-pass-resolve':\n      return !!info.colorRender?.resolve && sampleCount === 1;\n  }\n  return true;\n}).\ncombine('viewUsageMethod', kTextureViewUsageMethods)\n).\nbeforeAllSubcases((t) => {\n  const { format, method } = t.params;\n  t.skipIfTextureFormatNotSupported(format);\n\n  switch (method) {\n    case 'storage-write-compute':\n    case 'storage-write-fragment':\n      // Still need to filter again for compat mode.\n      t.skipIfTextureFormatNotUsableAsStorageTexture(format);\n      break;\n  }\n}).\nfn((t) => {\n  const { format, method, sampleCount, viewUsageMethod } = t.params;\n\n  const textureUsageForMethod = method.includes('storage') ?\n  GPUTextureUsage.STORAGE_BINDING :\n  GPUTextureUsage.RENDER_ATTACHMENT;\n  const usage = GPUTextureUsage.COPY_SRC | textureUsageForMethod;\n\n  const texture = t.createTextureTracked({\n    format,\n    usage,\n    size: [kTextureSize, kTextureSize],\n    sampleCount\n  });\n\n  const view = texture.createView({\n    usage: getTextureViewUsage(viewUsageMethod, textureUsageForMethod)\n  });\n  const expectedTexelView = writeTextureAndGetExpectedTexelView(\n    t,\n    method,\n    view,\n    format,\n    sampleCount\n  );\n\n  // [1] Use copySinglePixelTextureToBufferUsingComputePass to check multisampled texture.\n  t.expectTexelViewComparisonIsOkInTexture({ texture }, expectedTexelView, [\n  kTextureSize,\n  kTextureSize]\n  );\n});\n\ng.test('dimension').\ndesc(\n  `Views of every allowed dimension.\n\n- x= a representative subset of formats\n- x= {every texture dimension} x {every valid view dimension}\n  (per gpuweb#79 no dimension-count reinterpretations, like 2d-array <-> 3d, are possible)\n- x= sampleCount {1, 4} if valid\n- x= every possible view write method (see above)\n`\n).\nunimplemented();\n\ng.test('aspect').\ndesc(\n  `Views of every allowed aspect of depth/stencil textures.\n\n- x= every depth/stencil format\n- x= {\"all\", \"stencil-only\", \"depth-only\"} where valid for the format\n- x= sampleCount {1, 4} if valid\n- x= every possible view write method (see above)\n`\n).\nunimplemented();"],"mappings":"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","ignoreList":[]}