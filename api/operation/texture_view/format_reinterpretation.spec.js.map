{"version":3,"file":"format_reinterpretation.spec.js","names":["description","makeTestGroup","kRenderableColorTextureFormats","kRegularTextureFormats","viewCompatible","GPUTest","TextureTestMixin","TexelView","g","kColors","R","G","B","A","kTextureSize","makeInputTexelView","format","fromTexelsAsColors","coords","pixelPos","y","x","length","clampToFormatRange","makeBlitPipeline","device","multisample","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","sample","targets","count","render","test","desc","params","u","combine","filter","viewFormat","beforeAllSubcases","t","skipIfTextureFormatNotSupported","skipIf","isCompatibility","fn","inputTexelView","texture","createTextureFromTexelView","size","usage","GPUTextureUsage","TEXTURE_BINDING","viewFormats","reinterpretedView","createView","reinterpretedTexelView","fromTexelsAsBytes","bytes","pipeline","createComputePipeline","compute","outputTexture","createTextureTracked","STORAGE_BINDING","COPY_SRC","commandEncoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","dispatchWorkgroups","end","queue","submit","finish","expectTexelViewComparisonIsOkInTexture","color","sampleCount","renderTexture","RENDER_ATTACHMENT","resolveTexture","undefined","sampleSource","reinterpretedRenderView","reinterpretedResolveView","beginRenderPass","colorAttachments","view","resolveTarget","loadOp","storeOp","draw","singleSampleRenderTexture","renderViewTexels","maxDiffULPsForNormFormat","resolveView"],"sources":["../../../../../src/webgpu/api/operation/texture_view/format_reinterpretation.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTest texture views can reinterpret the format of the original texture.\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  kRenderableColorTextureFormats,\n  kRegularTextureFormats,\n  viewCompatible } from\n\n'../../../format_info.js';\nimport { GPUTest, TextureTestMixin } from '../../../gpu_test.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\n\nexport const g = makeTestGroup(TextureTestMixin(GPUTest));\n\nconst kColors = [\n{ R: 1.0, G: 0.0, B: 0.0, A: 0.8 },\n{ R: 0.0, G: 1.0, B: 0.0, A: 0.7 },\n{ R: 0.0, G: 0.0, B: 0.0, A: 0.6 },\n{ R: 0.0, G: 0.0, B: 0.0, A: 0.5 },\n{ R: 1.0, G: 1.0, B: 1.0, A: 0.4 },\n{ R: 0.7, G: 0.0, B: 0.0, A: 0.3 },\n{ R: 0.0, G: 0.8, B: 0.0, A: 0.2 },\n{ R: 0.0, G: 0.0, B: 0.9, A: 0.1 },\n{ R: 0.1, G: 0.2, B: 0.0, A: 0.3 },\n{ R: 0.4, G: 0.3, B: 0.6, A: 0.8 }];\n\n\nconst kTextureSize = 16;\n\nfunction makeInputTexelView(format) {\n  return TexelView.fromTexelsAsColors(\n    format,\n    (coords) => {\n      const pixelPos = coords.y * kTextureSize + coords.x;\n      return kColors[pixelPos % kColors.length];\n    },\n    { clampToFormatRange: true }\n  );\n}\n\nfunction makeBlitPipeline(\ndevice,\nformat,\nmultisample)\n{\n  return device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: device.createShaderModule({\n        code: `\n          @vertex fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec2<f32>, 6>(\n                                        vec2<f32>(-1.0, -1.0),\n                                        vec2<f32>(-1.0,  1.0),\n                                        vec2<f32>( 1.0, -1.0),\n                                        vec2<f32>(-1.0,  1.0),\n                                        vec2<f32>( 1.0, -1.0),\n                                        vec2<f32>( 1.0,  1.0));\n            return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n          }`\n      }),\n      entryPoint: 'main'\n    },\n    fragment: {\n      module:\n      multisample.sample > 1 ?\n      device.createShaderModule({\n        code: `\n            @group(0) @binding(0) var src: texture_multisampled_2d<f32>;\n            @fragment fn main(@builtin(position) coord: vec4<f32>) -> @location(0) vec4<f32> {\n              var result : vec4<f32>;\n              for (var i = 0; i < ${multisample.sample}; i = i + 1) {\n                result = result + textureLoad(src, vec2<i32>(coord.xy), i);\n              }\n              return result * ${1 / multisample.sample};\n            }`\n      }) :\n      device.createShaderModule({\n        code: `\n            @group(0) @binding(0) var src: texture_2d<f32>;\n            @fragment fn main(@builtin(position) coord: vec4<f32>) -> @location(0) vec4<f32> {\n              return textureLoad(src, vec2<i32>(coord.xy), 0);\n            }`\n      }),\n      entryPoint: 'main',\n      targets: [{ format }]\n    },\n    multisample: {\n      count: multisample.render\n    }\n  });\n}\n\ng.test('texture_binding').\ndesc(`Test that a regular texture allocated as 'format' is correctly sampled as 'viewFormat'.`).\nparams((u) =>\nu //\n.combine('format', kRegularTextureFormats).\ncombine('viewFormat', kRegularTextureFormats).\nfilter(\n  ({ format, viewFormat }) =>\n  format !== viewFormat && viewCompatible(false, format, viewFormat)\n)\n).\nbeforeAllSubcases((t) => {\n  const { format, viewFormat } = t.params;\n  t.skipIfTextureFormatNotSupported(format, viewFormat);\n  // Compatibility mode does not support format reinterpretation.\n  t.skipIf(t.isCompatibility);\n}).\nfn((t) => {\n  const { format, viewFormat } = t.params;\n\n  // Make an input texel view.\n  const inputTexelView = makeInputTexelView(format);\n\n  // Create the initial texture with the contents if the input texel view.\n  const texture = t.createTextureFromTexelView(inputTexelView, {\n    size: [kTextureSize, kTextureSize],\n    usage: GPUTextureUsage.TEXTURE_BINDING,\n    viewFormats: [viewFormat]\n  });\n\n  // Reinterpret the texture as the view format.\n  // Make a texel view of the format that also reinterprets the data.\n  const reinterpretedView = texture.createView({ format: viewFormat });\n  const reinterpretedTexelView = TexelView.fromTexelsAsBytes(viewFormat, inputTexelView.bytes);\n\n  // Create a pipeline to write data out to rgba8unorm.\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: `\n          @group(0) @binding(0) var src: texture_2d<f32>;\n          @group(0) @binding(1) var dst: texture_storage_2d<rgba8unorm, write>;\n          @compute @workgroup_size(1, 1) fn main(\n            @builtin(global_invocation_id) global_id: vec3<u32>,\n          ) {\n            var coord = vec2<i32>(global_id.xy);\n            textureStore(dst, coord, textureLoad(src, coord, 0));\n          }`\n      }),\n      entryPoint: 'main'\n    }\n  });\n\n  // Create an rgba8unorm output texture.\n  const outputTexture = t.createTextureTracked({\n    format: 'rgba8unorm',\n    size: [kTextureSize, kTextureSize],\n    usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC\n  });\n\n  // Execute a compute pass to load data from the reinterpreted view and\n  // write out to the rgba8unorm texture.\n  const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = commandEncoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(\n    0,\n    t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n      {\n        binding: 0,\n        resource: reinterpretedView\n      },\n      {\n        binding: 1,\n        resource: outputTexture.createView()\n      }]\n\n    })\n  );\n  pass.dispatchWorkgroups(kTextureSize, kTextureSize);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[commandEncoder.finish()]], () => t.device.queue.submit([commandEncoder.finish()]));\n\n  t.expectTexelViewComparisonIsOkInTexture(\n    { texture: outputTexture },\n    TexelView.fromTexelsAsColors('rgba8unorm', reinterpretedTexelView.color, {\n      clampToFormatRange: true\n    }),\n    [kTextureSize, kTextureSize]\n  );\n});\n\ng.test('render_and_resolve_attachment').\ndesc(\n  `Test that a color render attachment allocated as 'format' is correctly rendered to as 'viewFormat',\nand resolved to an attachment allocated as 'format' viewed as 'viewFormat'.\n\nOther combinations aren't possible because the render and resolve targets must both match\nin view format and match in base format.`\n).\nparams((u) =>\nu //\n.combine('format', kRenderableColorTextureFormats).\ncombine('viewFormat', kRenderableColorTextureFormats).\nfilter(\n  ({ format, viewFormat }) =>\n  format !== viewFormat && viewCompatible(false, format, viewFormat)\n).\ncombine('sampleCount', [1, 4])\n).\nbeforeAllSubcases((t) => {\n  const { format, viewFormat } = t.params;\n  t.skipIfTextureFormatNotSupported(format, viewFormat);\n  // Compatibility mode does not support format reinterpretation.\n  t.skipIf(t.isCompatibility);\n}).\nfn((t) => {\n  const { format, viewFormat, sampleCount } = t.params;\n\n  // Make an input texel view.\n  const inputTexelView = makeInputTexelView(format);\n\n  // Create the renderTexture as |format|.\n  const renderTexture = t.createTextureTracked({\n    format,\n    size: [kTextureSize, kTextureSize],\n    usage:\n    GPUTextureUsage.RENDER_ATTACHMENT | (\n    sampleCount > 1 ? GPUTextureUsage.TEXTURE_BINDING : GPUTextureUsage.COPY_SRC),\n    viewFormats: [viewFormat],\n    sampleCount\n  });\n\n  const resolveTexture =\n  sampleCount === 1 ?\n  undefined :\n  t.createTextureTracked({\n    format,\n    size: [kTextureSize, kTextureSize],\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    viewFormats: [viewFormat]\n  });\n\n  // Create the sample source with the contents of the input texel view.\n  // We will sample this texture into |renderTexture|. It uses the same format to keep the same\n  // number of bits of precision.\n  const sampleSource = t.createTextureFromTexelView(inputTexelView, {\n    size: [kTextureSize, kTextureSize],\n    usage: GPUTextureUsage.TEXTURE_BINDING\n  });\n\n  // Reinterpret the renderTexture as |viewFormat|.\n  const reinterpretedRenderView = renderTexture.createView({ format: viewFormat });\n  const reinterpretedResolveView =\n  resolveTexture && resolveTexture.createView({ format: viewFormat });\n\n  // Create a pipeline to blit a src texture to the render attachment.\n  const pipeline = makeBlitPipeline(t.device, viewFormat, {\n    sample: 1,\n    render: sampleCount\n  });\n\n  // Execute a render pass to sample |sampleSource| into |texture| viewed as |viewFormat|.\n  const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = commandEncoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: reinterpretedRenderView,\n      resolveTarget: reinterpretedResolveView,\n      loadOp: 'load',\n      storeOp: 'store'\n    }]\n\n  });\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(\n    0,\n    t.device.createBindGroup({\n      layout: pipeline.getBindGroupLayout(0),\n      entries: [\n      {\n        binding: 0,\n        resource: sampleSource.createView()\n      }]\n\n    })\n  );\n  pass.draw(6);\n  pass.end();\n\n  // If the render target is multisampled, we'll manually resolve it to check\n  // the contents.\n  const singleSampleRenderTexture = resolveTexture ?\n  t.createTextureTracked({\n    format,\n    size: [kTextureSize, kTextureSize],\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n  }) :\n  renderTexture;\n\n  if (resolveTexture) {\n    // Create a pipeline to blit the multisampled render texture to a non-multisample texture.\n    // We are basically performing a manual resolve step to the same format as the original\n    // render texture to check its contents.\n    const pipeline = makeBlitPipeline(t.device, format, { sample: sampleCount, render: 1 });\n    const pass = commandEncoder.beginRenderPass({\n      colorAttachments: [\n      {\n        view: singleSampleRenderTexture.createView(),\n        loadOp: 'load',\n        storeOp: 'store'\n      }]\n\n    });\n    pass.setPipeline(pipeline);\n    pass.setBindGroup(\n      0,\n      t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n        {\n          binding: 0,\n          resource: renderTexture.createView()\n        }]\n\n      })\n    );\n    pass.draw(6);\n    pass.end();\n  }\n\n  // Submit the commands.\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[commandEncoder.finish()]], () => t.device.queue.submit([commandEncoder.finish()]));\n\n  // Check the rendered contents.\n  const renderViewTexels = TexelView.fromTexelsAsColors(viewFormat, inputTexelView.color, {\n    clampToFormatRange: true\n  });\n  t.expectTexelViewComparisonIsOkInTexture(\n    { texture: singleSampleRenderTexture },\n    renderViewTexels,\n    [kTextureSize, kTextureSize],\n    { maxDiffULPsForNormFormat: 2 }\n  );\n\n  // Check the resolved contents.\n  if (resolveTexture) {\n    const resolveView = TexelView.fromTexelsAsColors(viewFormat, renderViewTexels.color, {\n      clampToFormatRange: true\n    });\n    t.expectTexelViewComparisonIsOkInTexture(\n      { texture: resolveTexture },\n      resolveView,\n      [kTextureSize, kTextureSize],\n      { maxDiffULPsForNormFormat: 2 }\n    );\n  }\n});"],"mappings":"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","ignoreList":[]}