{"version":3,"file":"read_only.spec.js","names":["description","makeTestGroup","unreachable","assert","Float16Array","kTextureDimensions","kColorTextureFormats","kTextureFormatInfo","GPUTest","kValidShaderStages","ComponentCount","format","F","InitTextureAndGetExpectedOutputBufferData","storageTexture","bytesPerBlock","color","bytes","undefined","width","height","depthOrArrayLayers","texelData","ArrayBuffer","texelTypedDataView","GetTypedArrayBufferViewForTexelData","componentCount","outputBufferData","outputBufferTypedData","GetTypedArrayBufferForOutputBufferData","SetData","texelValue","outputValue","texelDataIndex","component","outputComponent","texelComponentIndex","outputTexelComponentIndex","z","y","x","Math","max","f16Array","queue","writeTexture","texture","bytesPerRow","rowsPerImage","arrayBuffer","type","Uint32Array","Int32Array","Float32Array","Uint8Array","Uint16Array","Int8Array","Int16Array","GetOutputBufferWGSLType","DoTransform","shaderStage","outputBuffer","declaration","dimension","textureDeclaration","bindingResourceDeclaration","bindGroupEntries","binding","resource","createView","buffer","commandEncoder","globalThis","_TRAMPOLINE_","device","createCommandEncoder","textureLoadCoord","computeShader","computePipeline","createComputePipeline","compute","module","createShaderModule","code","layout","bindGroup","createBindGroup","getBindGroupLayout","entries","computePassEncoder","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","fragmentShader","vertexShader","renderPipeline","createRenderPipeline","vertex","fragment","targets","primitive","topology","placeholderColorTexture","createTextureTracked","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","renderPassEncoder","beginRenderPass","colorAttachments","view","loadOp","clearValue","r","g","b","a","storeOp","draw","vertexOutputs","layer","concat","loadFromTextureWGSL","outputToBufferWGSL","shader","submit","finish","test","desc","params","u","combine","filter","p","storage","unless","beforeAllSubcases","t","selectDeviceOrSkipTestCase","isCompatibility","skipIfTextureFormatNotUsableAsStorageTexture","fn","kWidth","COPY_SRC","COPY_DST","STORAGE_BINDING","expectedData","createBufferTracked","GPUBufferUsage","STORAGE","expectGPUBufferValuesEqual"],"sources":["../../../../../src/webgpu/api/operation/storage_texture/read_only.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTests for the behavior of read-only storage textures.\n\nTODO:\n- Test mipmap level > 0\n- Test resource usage transitions with read-only storage textures\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { unreachable, assert } from '../../../../common/util/util.js';\nimport { Float16Array } from '../../../../external/petamoriken/float16/float16.js';\nimport { kTextureDimensions } from '../../../capability_info.js';\nimport {\n\n  kColorTextureFormats,\n  kTextureFormatInfo } from\n'../../../format_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\nimport { kValidShaderStages } from '../../../util/shader.js';\n\nfunction ComponentCount(format) {\n  switch (format) {\n    case 'r32float':\n    case 'r32sint':\n    case 'r32uint':\n      return 1;\n    case 'rg32float':\n    case 'rg32sint':\n    case 'rg32uint':\n      return 2;\n    case 'rgba32float':\n    case 'rgba32sint':\n    case 'rgba32uint':\n    case 'rgba8sint':\n    case 'rgba8uint':\n    case 'rgba8snorm':\n    case 'rgba8unorm':\n    case 'rgba16float':\n    case 'rgba16sint':\n    case 'rgba16uint':\n    case 'bgra8unorm':\n      return 4;\n    default:\n      unreachable();\n      return 0;\n  }\n}\n\nclass F extends GPUTest {\n  InitTextureAndGetExpectedOutputBufferData(\n  storageTexture,\n  format)\n  {\n    const bytesPerBlock = kTextureFormatInfo[format].color.bytes;\n    assert(bytesPerBlock !== undefined);\n\n    const width = storageTexture.width;\n    const height = storageTexture.height;\n    const depthOrArrayLayers = storageTexture.depthOrArrayLayers;\n\n    const texelData = new ArrayBuffer(bytesPerBlock * width * height * depthOrArrayLayers);\n    const texelTypedDataView = this.GetTypedArrayBufferViewForTexelData(texelData, format);\n    const componentCount = ComponentCount(format);\n    const outputBufferData = new ArrayBuffer(4 * 4 * width * height * depthOrArrayLayers);\n    const outputBufferTypedData = this.GetTypedArrayBufferForOutputBufferData(\n      outputBufferData,\n      format\n    );\n\n    const SetData = (\n    texelValue,\n    outputValue,\n    texelDataIndex,\n    component,\n    outputComponent = component) =>\n    {\n      const texelComponentIndex = texelDataIndex * componentCount + component;\n      texelTypedDataView[texelComponentIndex] = texelValue;\n      const outputTexelComponentIndex = texelDataIndex * 4 + outputComponent;\n      outputBufferTypedData[outputTexelComponentIndex] = outputValue;\n    };\n    for (let z = 0; z < depthOrArrayLayers; ++z) {\n      for (let y = 0; y < height; ++y) {\n        for (let x = 0; x < width; ++x) {\n          const texelDataIndex = z * width * height + y * width + x;\n          outputBufferTypedData[4 * texelDataIndex] = 0;\n          outputBufferTypedData[4 * texelDataIndex + 1] = 0;\n          outputBufferTypedData[4 * texelDataIndex + 2] = 0;\n          outputBufferTypedData[4 * texelDataIndex + 3] = 1;\n          for (let component = 0; component < componentCount; ++component) {\n            switch (format) {\n              case 'r32uint':\n              case 'rg32uint':\n              case 'rgba16uint':\n              case 'rgba32uint':{\n                  const texelValue = 4 * texelDataIndex + component + 1;\n                  SetData(texelValue, texelValue, texelDataIndex, component);\n                  break;\n                }\n              case 'rgba8uint':{\n                  const texelValue = (4 * texelDataIndex + component + 1) % 256;\n                  SetData(texelValue, texelValue, texelDataIndex, component);\n                  break;\n                }\n              case 'rgba8unorm':{\n                  const texelValue = (4 * texelDataIndex + component + 1) % 256;\n                  const outputValue = texelValue / 255.0;\n                  SetData(texelValue, outputValue, texelDataIndex, component);\n                  break;\n                }\n              case 'bgra8unorm':{\n                  const texelValue = (4 * texelDataIndex + component + 1) % 256;\n                  const outputValue = texelValue / 255.0;\n                  // BGRA -> RGBA\n                  assert(component < 4);\n                  const outputComponent = [2, 1, 0, 3][component];\n                  SetData(texelValue, outputValue, texelDataIndex, component, outputComponent);\n                  break;\n                }\n              case 'r32sint':\n              case 'rg32sint':\n              case 'rgba16sint':\n              case 'rgba32sint':{\n                  const texelValue =\n                  (texelDataIndex & 1 ? 1 : -1) * (4 * texelDataIndex + component + 1);\n                  SetData(texelValue, texelValue, texelDataIndex, component);\n                  break;\n                }\n              case 'rgba8sint':{\n                  const texelValue = (4 * texelDataIndex + component + 1) % 256 - 128;\n                  SetData(texelValue, texelValue, texelDataIndex, component);\n                  break;\n                }\n              case 'rgba8snorm':{\n                  const texelValue = (4 * texelDataIndex + component + 1) % 256 - 128;\n                  const outputValue = Math.max(texelValue / 127.0, -1.0);\n                  SetData(texelValue, outputValue, texelDataIndex, component);\n                  break;\n                }\n              case 'r32float':\n              case 'rg32float':\n              case 'rgba32float':{\n                  const texelValue = (4 * texelDataIndex + component + 1) / 10.0;\n                  SetData(texelValue, texelValue, texelDataIndex, component);\n                  break;\n                }\n              case 'rgba16float':{\n                  const texelValue = (4 * texelDataIndex + component + 1) / 10.0;\n                  const f16Array = new Float16Array(1);\n                  f16Array[0] = texelValue;\n                  SetData(texelValue, f16Array[0], texelDataIndex, component);\n                  break;\n                }\n              default:\n                unreachable();\n                break;\n            }\n          }\n        }\n      }\n    }\n    this.queue.writeTexture(\n      {\n        texture: storageTexture\n      },\n      texelData,\n      {\n        bytesPerRow: bytesPerBlock * width,\n        rowsPerImage: height\n      },\n      [width, height, depthOrArrayLayers]\n    );\n\n    return outputBufferData;\n  }\n\n  GetTypedArrayBufferForOutputBufferData(arrayBuffer, format) {\n    switch (kTextureFormatInfo[format].color.type) {\n      case 'uint':\n        return new Uint32Array(arrayBuffer);\n      case 'sint':\n        return new Int32Array(arrayBuffer);\n      case 'float':\n      case 'unfilterable-float':\n        return new Float32Array(arrayBuffer);\n    }\n  }\n\n  GetTypedArrayBufferViewForTexelData(arrayBuffer, format) {\n    switch (format) {\n      case 'r32uint':\n      case 'rg32uint':\n      case 'rgba32uint':\n        return new Uint32Array(arrayBuffer);\n      case 'rgba8uint':\n      case 'rgba8unorm':\n      case 'bgra8unorm':\n        return new Uint8Array(arrayBuffer);\n      case 'rgba16uint':\n        return new Uint16Array(arrayBuffer);\n      case 'r32sint':\n      case 'rg32sint':\n      case 'rgba32sint':\n        return new Int32Array(arrayBuffer);\n      case 'rgba8sint':\n      case 'rgba8snorm':\n        return new Int8Array(arrayBuffer);\n      case 'rgba16sint':\n        return new Int16Array(arrayBuffer);\n      case 'r32float':\n      case 'rg32float':\n      case 'rgba32float':\n        return new Float32Array(arrayBuffer);\n      case 'rgba16float':\n        return new Float16Array(arrayBuffer);\n      default:\n        unreachable();\n        return new Uint8Array(arrayBuffer);\n    }\n  }\n\n  GetOutputBufferWGSLType(format) {\n    switch (kTextureFormatInfo[format].color.type) {\n      case 'uint':\n        return 'vec4u';\n      case 'sint':\n        return 'vec4i';\n      case 'float':\n      case 'unfilterable-float':\n        return 'vec4f';\n      default:\n        unreachable();\n        return '';\n    }\n  }\n\n  DoTransform(\n  storageTexture,\n  shaderStage,\n  format,\n  outputBuffer)\n  {\n    let declaration = '';\n    switch (storageTexture.dimension) {\n      case '1d':\n        declaration = 'texture_storage_1d';\n        break;\n      case '2d':\n        declaration =\n        storageTexture.depthOrArrayLayers > 1 ? 'texture_storage_2d_array' : 'texture_storage_2d';\n        break;\n      case '3d':\n        declaration = 'texture_storage_3d';\n        break;\n    }\n    const textureDeclaration = `\n    @group(0) @binding(0) var readOnlyTexture: ${declaration}<${format}, read>;\n    `;\n    const bindingResourceDeclaration = `\n    ${textureDeclaration}\n    @group(0) @binding(1)\n    var<storage,read_write> outputBuffer : array<${this.GetOutputBufferWGSLType(format)}>;\n    `;\n\n    const bindGroupEntries = [\n    {\n      binding: 0,\n      resource: storageTexture.createView()\n    },\n    {\n      binding: 1,\n      resource: {\n        buffer: outputBuffer\n      }\n    }];\n\n\n    const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", this.device, this.device.createCommandEncoder, [], () => this.device.createCommandEncoder());\n\n    switch (shaderStage) {\n      case 'compute':{\n          let textureLoadCoord = '';\n          switch (storageTexture.dimension) {\n            case '1d':\n              textureLoadCoord = 'invocationID.x';\n              break;\n            case '2d':\n              textureLoadCoord =\n              storageTexture.depthOrArrayLayers > 1 ?\n              `vec2u(invocationID.x, invocationID.y), invocationID.z` :\n              `vec2u(invocationID.x, invocationID.y)`;\n              break;\n            case '3d':\n              textureLoadCoord = 'invocationID';\n              break;\n          }\n\n          const computeShader = `\n      ${bindingResourceDeclaration}\n      @compute\n      @workgroup_size(\n        ${storageTexture.width}, ${storageTexture.height}, ${storageTexture.depthOrArrayLayers})\n      fn main(\n        @builtin(local_invocation_id) invocationID: vec3u,\n        @builtin(local_invocation_index) invocationIndex: u32) {\n        let initialValue = textureLoad(readOnlyTexture, ${textureLoadCoord});\n        outputBuffer[invocationIndex] = initialValue;\n      }`;\n          const computePipeline = this.device.createComputePipeline({\n            compute: {\n              module: this.device.createShaderModule({\n                code: computeShader\n              })\n            },\n            layout: 'auto'\n          });\n          const bindGroup = this.device.createBindGroup({\n            layout: computePipeline.getBindGroupLayout(0),\n            entries: bindGroupEntries\n          });\n\n          const computePassEncoder = commandEncoder.beginComputePass();\n          computePassEncoder.setPipeline(computePipeline);\n          computePassEncoder.setBindGroup(0, bindGroup);\n          computePassEncoder.dispatchWorkgroups(1);\n          computePassEncoder.end();\n          break;\n        }\n      case 'fragment':{\n          let textureLoadCoord = '';\n          switch (storageTexture.dimension) {\n            case '1d':\n              textureLoadCoord = 'textureCoord.x';\n              break;\n            case '2d':\n              textureLoadCoord =\n              storageTexture.depthOrArrayLayers > 1 ? 'textureCoord, z' : 'textureCoord';\n              break;\n            case '3d':\n              textureLoadCoord = 'vec3u(textureCoord, z)';\n              break;\n          }\n\n          const fragmentShader = `\n        ${bindingResourceDeclaration}\n        @fragment\n        fn main(@builtin(position) fragCoord: vec4f) -> @location(0) vec4f {\n          let textureCoord = vec2u(fragCoord.xy);\n          let storageTextureTexelCountPerImage = ${storageTexture.width * storageTexture.height}u;\n          for (var z = 0u; z < ${storageTexture.depthOrArrayLayers}; z++) {\n            let initialValue = textureLoad(readOnlyTexture, ${textureLoadCoord});\n            let outputIndex =\n              storageTextureTexelCountPerImage * z + textureCoord.y * ${storageTexture.width} +\n              textureCoord.x;\n            outputBuffer[outputIndex] = initialValue;\n          }\n          return vec4f(0.0, 1.0, 0.0, 1.0);\n        }`;\n          const vertexShader = `\n            @vertex\n            fn main(@builtin(vertex_index) vertexIndex : u32) -> @builtin(position) vec4f {\n                var pos = array(\n                  vec2f(-1.0, -1.0),\n                  vec2f(-1.0,  1.0),\n                  vec2f( 1.0, -1.0),\n                  vec2f(-1.0,  1.0),\n                  vec2f( 1.0, -1.0),\n                  vec2f( 1.0,  1.0));\n                return vec4f(pos[vertexIndex], 0.0, 1.0);\n            }\n          `;\n          const renderPipeline = this.device.createRenderPipeline({\n            layout: 'auto',\n            vertex: {\n              module: this.device.createShaderModule({\n                code: vertexShader\n              })\n            },\n            fragment: {\n              module: this.device.createShaderModule({\n                code: fragmentShader\n              }),\n              targets: [\n              {\n                format: 'rgba8unorm'\n              }]\n\n            },\n            primitive: {\n              topology: 'triangle-list'\n            }\n          });\n\n          const bindGroup = this.device.createBindGroup({\n            layout: renderPipeline.getBindGroupLayout(0),\n            entries: bindGroupEntries\n          });\n\n          const placeholderColorTexture = this.createTextureTracked({\n            size: [storageTexture.width, storageTexture.height, 1],\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\n            format: 'rgba8unorm'\n          });\n\n          const renderPassEncoder = commandEncoder.beginRenderPass({\n            colorAttachments: [\n            {\n              view: placeholderColorTexture.createView(),\n              loadOp: 'clear',\n              clearValue: { r: 0, g: 0, b: 0, a: 0 },\n              storeOp: 'store'\n            }]\n\n          });\n          renderPassEncoder.setPipeline(renderPipeline);\n          renderPassEncoder.setBindGroup(0, bindGroup);\n          renderPassEncoder.draw(6);\n          renderPassEncoder.end();\n          break;\n        }\n      case 'vertex':{\n          // For each texel location (coordX, coordY), draw one point at (coordX + 0.5, coordY + 0.5)\n          // in the storageTexture.width * storageTexture.height grid, and save all the texel values\n          // at (coordX, coordY, z) (z >= 0 && z < storageTexture.depthOrArrayLayers) into the\n          // corresponding vertex shader outputs.\n          let vertexOutputs = '';\n          for (let layer = 0; layer < storageTexture.depthOrArrayLayers; ++layer) {\n            vertexOutputs = vertexOutputs.concat(\n              `\n            @location(${layer + 1}) @interpolate(flat, either)\n            vertex_out${layer}: ${this.GetOutputBufferWGSLType(format)},`\n            );\n          }\n\n          let loadFromTextureWGSL = '';\n          switch (storageTexture.dimension) {\n            case '1d':\n              loadFromTextureWGSL = `\n              output.vertex_out0 = textureLoad(readOnlyTexture, coordX);`;\n              break;\n            case '2d':\n              if (storageTexture.depthOrArrayLayers === 1) {\n                loadFromTextureWGSL = `\n                output.vertex_out0 = textureLoad(readOnlyTexture, vec2u(coordX, coordY));`;\n              } else {\n                for (let z = 0; z < storageTexture.depthOrArrayLayers; ++z) {\n                  loadFromTextureWGSL = loadFromTextureWGSL.concat(`\n                  output.vertex_out${z} =\n                    textureLoad(readOnlyTexture, vec2u(coordX, coordY), ${z});`);\n                }\n              }\n              break;\n            case '3d':\n              for (let z = 0; z < storageTexture.depthOrArrayLayers; ++z) {\n                loadFromTextureWGSL = loadFromTextureWGSL.concat(`\n                output.vertex_out${z} = textureLoad(readOnlyTexture, vec3u(coordX, coordY, ${z}));`);\n              }\n              break;\n          }\n\n          let outputToBufferWGSL = '';\n          for (let layer = 0; layer < storageTexture.depthOrArrayLayers; ++layer) {\n            outputToBufferWGSL = outputToBufferWGSL.concat(\n              `\n            let outputIndex${layer} =\n              storageTextureTexelCountPerImage * ${layer}u +\n              fragmentInput.tex_coord.y * ${storageTexture.width}u + fragmentInput.tex_coord.x;\n            outputBuffer[outputIndex${layer}] = fragmentInput.vertex_out${layer};`\n            );\n          }\n\n          const shader = `\n        ${bindingResourceDeclaration}\n        struct VertexOutput {\n          @builtin(position) my_pos: vec4f,\n          @location(0) @interpolate(flat, either) tex_coord: vec2u,\n          ${vertexOutputs}\n        }\n        @vertex\n        fn vs_main(@builtin(vertex_index) vertexIndex : u32) -> VertexOutput {\n            var output : VertexOutput;\n            let coordX = vertexIndex % ${storageTexture.width}u;\n            let coordY = vertexIndex / ${storageTexture.width}u;\n            // Each vertex in the mesh take an even step along X axis from -1.0 to 1.0.\n            let posXStep = f32(${2.0 / storageTexture.width});\n            // As well as along Y axis.\n            let posYStep = f32(${2.0 / storageTexture.height});\n            // And the vertex located in the middle of the step, i.e. with a bias of 0.5 step.\n            let outputPosX = -1.0 + posXStep * 0.5 + posXStep * f32(coordX);\n            let outputPosY = -1.0 + posYStep * 0.5 + posYStep * f32(coordY);\n            output.my_pos = vec4f(outputPosX, outputPosY, 0.0, 1.0);\n            output.tex_coord = vec2u(coordX, coordY);\n            ${loadFromTextureWGSL}\n            return output;\n        }\n        @fragment\n        fn fs_main(fragmentInput : VertexOutput) -> @location(0) vec4f {\n          let storageTextureTexelCountPerImage = ${storageTexture.width * storageTexture.height}u;\n          ${outputToBufferWGSL}\n          return vec4f(0.0, 1.0, 0.0, 1.0);\n        }\n        `;\n\n          const renderPipeline = this.device.createRenderPipeline({\n            layout: 'auto',\n            vertex: {\n              module: this.device.createShaderModule({\n                code: shader\n              })\n            },\n            fragment: {\n              module: this.device.createShaderModule({\n                code: shader\n              }),\n              targets: [\n              {\n                format: 'rgba8unorm'\n              }]\n\n            },\n            primitive: {\n              topology: 'point-list'\n            }\n          });\n\n          const bindGroup = this.device.createBindGroup({\n            layout: renderPipeline.getBindGroupLayout(0),\n            entries: bindGroupEntries\n          });\n\n          const placeholderColorTexture = this.createTextureTracked({\n            size: [storageTexture.width, storageTexture.height, 1],\n            usage: GPUTextureUsage.RENDER_ATTACHMENT,\n            format: 'rgba8unorm'\n          });\n\n          const renderPassEncoder = commandEncoder.beginRenderPass({\n            colorAttachments: [\n            {\n              view: placeholderColorTexture.createView(),\n              loadOp: 'clear',\n              clearValue: { r: 0, g: 0, b: 0, a: 0 },\n              storeOp: 'store'\n            }]\n\n          });\n          renderPassEncoder.setPipeline(renderPipeline);\n          renderPassEncoder.setBindGroup(0, bindGroup);\n          renderPassEncoder.draw(storageTexture.width * storageTexture.height);\n          renderPassEncoder.end();\n          break;\n        }\n    }\n\n    globalThis._TRAMPOLINE_(\"submit\", this, this.queue.submit, [[commandEncoder.finish()]], () => this.queue.submit([commandEncoder.finish()]));\n  }\n}\n\nexport const g = makeTestGroup(F);\n\ng.test('basic').\ndesc(\n  `The basic functionality tests for read-only storage textures. In the test we read data from\n    the read-only storage texture, write the data into an output storage buffer, and check if the\n    data in the output storage buffer is exactly what we expect.`\n).\nparams((u) =>\nu.\ncombine('format', kColorTextureFormats).\nfilter(\n  (p) => p.format === 'bgra8unorm' || kTextureFormatInfo[p.format].color?.storage === true\n).\ncombine('shaderStage', kValidShaderStages).\ncombine('dimension', kTextureDimensions).\ncombine('depthOrArrayLayers', [1, 2]).\nunless((p) => p.dimension === '1d' && p.depthOrArrayLayers > 1)\n).\nbeforeAllSubcases((t) => {\n  if (t.params.format === 'bgra8unorm') {\n    t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n  }\n  if (t.isCompatibility) {\n    t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format);\n  }\n}).\nfn((t) => {\n  const { format, shaderStage, dimension, depthOrArrayLayers } = t.params;\n\n  const kWidth = 8;\n  const height = dimension === '1d' ? 1 : 8;\n  const storageTexture = t.createTextureTracked({\n    format,\n    dimension,\n    size: [kWidth, height, depthOrArrayLayers],\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.STORAGE_BINDING\n  });\n\n  const expectedData = t.InitTextureAndGetExpectedOutputBufferData(storageTexture, format);\n\n  const outputBuffer = t.createBufferTracked({\n    size: 4 * 4 * kWidth * height * depthOrArrayLayers,\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE\n  });\n\n  t.DoTransform(storageTexture, shaderStage, format, outputBuffer);\n\n  switch (kTextureFormatInfo[format].color.type) {\n    case 'uint':\n      t.expectGPUBufferValuesEqual(outputBuffer, new Uint32Array(expectedData));\n      break;\n    case 'sint':\n      t.expectGPUBufferValuesEqual(outputBuffer, new Int32Array(expectedData));\n      break;\n    case 'float':\n    case 'unfilterable-float':\n      t.expectGPUBufferValuesEqual(outputBuffer, new Float32Array(expectedData));\n      break;\n    default:\n      unreachable();\n      break;\n  }\n});"],"mappings":"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","ignoreList":[]}