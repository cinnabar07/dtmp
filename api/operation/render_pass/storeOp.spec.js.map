{"version":3,"file":"storeOp.spec.js","names":["description","makeTestGroup","kTextureFormatInfo","kEncodableTextureFormats","kSizedDepthStencilFormats","GPUTest","kMipLevel","kMipLevelCount","kNumColorAttachments","kArrayLayers","kStoreOps","kHeight","kWidth","g","test","params","u","combine","fn","t","kColorFormat","colorAttachment","createTextureTracked","format","size","width","height","depthOrArrayLayers","usage","GPUTextureUsage","COPY_SRC","RENDER_ATTACHMENT","colorAttachmentView","createView","kDepthStencilFormat","depthStencilAttachment","encoder","globalThis","_TRAMPOLINE_","device","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","clearValue","r","b","a","loadOp","storeOp","colorStoreOperation","depthClearValue","depthLoadOp","depthStoreOp","depthStencilStoreOperation","end","queue","submit","finish","expectedColorValue","R","G","B","A","expectSingleColor","exp","expectedDepthValue","Depth","layout","mipLevel","aspect","filter","colorFormat","colorRender","beginSubcases","beforeAllSubcases","skipIfTextureFormatNotSupported","arrayLayer","mipLevelCount","colorViewDesc","baseArrayLayer","baseMipLevel","arrayLayerCount","storeOperation","expectedValue","slice","i","push","renderPassColorAttachments","storeOperation1","storeOperation2","desc","depthStencilTexture","depthStencilFormat","depthStencilViewDesc","depthStencilAttachmentView","depth","stencil","stencilClearValue","stencilLoadOp","stencilStoreOp","expectedStencilValue","Stencil"],"sources":["../../../../../src/webgpu/api/operation/render_pass/storeOp.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `API Operation Tests for RenderPass StoreOp.\n\n  Test Coverage:\n\n  - Tests that color and depth-stencil store operations {'discard', 'store'} work correctly for a\n    render pass with both a color attachment and depth-stencil attachment.\n      TODO: use depth24plus-stencil8\n\n  - Tests that store operations {'discard', 'store'} work correctly for a render pass with multiple\n    color attachments.\n      TODO: test with more interesting loadOp values\n\n  - Tests that store operations {'discard', 'store'} work correctly for a render pass with a color\n    attachment for:\n      - All renderable color formats\n      - mip level set to {'0', mip > '0'}\n      - array layer set to {'0', layer > '1'} for 2D textures\n      TODO: depth slice set to {'0', slice > '0'} for 3D textures\n\n  - Tests that store operations {'discard', 'store'} work correctly for a render pass with a\n    depth-stencil attachment for:\n      - All renderable depth-stencil formats\n      - mip level set to {'0', mip > '0'}\n      - array layer set to {'0', layer > '1'} for 2D textures\n      TODO: test depth24plus and depth24plus-stencil8 formats\n      TODO: test that depth and stencil aspects are set separately\n      TODO: depth slice set to {'0', slice > '0'} for 3D textures\n      TODO: test with more interesting loadOp values`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport {\n  kTextureFormatInfo,\n  kEncodableTextureFormats,\n  kSizedDepthStencilFormats } from\n'../../../format_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\n\n// Test with a zero and non-zero mip.\nconst kMipLevel = [0, 1];\nconst kMipLevelCount = 2;\n\n// Test with different numbers of color attachments.\n\nconst kNumColorAttachments = [1, 2, 3, 4];\n\n// Test with a zero and non-zero array layer.\nconst kArrayLayers = [0, 1];\n\nconst kStoreOps = ['discard', 'store'];\n\nconst kHeight = 2;\nconst kWidth = 2;\n\nexport const g = makeTestGroup(GPUTest);\n\n// Tests a render pass with both a color and depth stencil attachment to ensure store operations are\n// set independently.\ng.test('render_pass_store_op,color_attachment_with_depth_stencil_attachment').\nparams((u) =>\nu //\n.combine('colorStoreOperation', kStoreOps).\ncombine('depthStencilStoreOperation', kStoreOps)\n).\nfn((t) => {\n  // Create a basic color attachment.\n  const kColorFormat = 'rgba8unorm';\n  const colorAttachment = t.createTextureTracked({\n    format: kColorFormat,\n    size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n  });\n\n  const colorAttachmentView = colorAttachment.createView();\n\n  // Create a basic depth/stencil attachment.\n  const kDepthStencilFormat = 'depth32float';\n  const depthStencilAttachment = t.createTextureTracked({\n    format: kDepthStencilFormat,\n    size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n  });\n\n  // Color load operation will clear to {1.0, 1.0, 1.0, 1.0}.\n  // Depth operation will clear to 1.0.\n  // Store operations are determined by test the params.\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: colorAttachmentView,\n      clearValue: { r: 1.0, g: 1.0, b: 1.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: t.params.colorStoreOperation\n    }],\n\n    depthStencilAttachment: {\n      view: depthStencilAttachment.createView(),\n      depthClearValue: 1.0,\n      depthLoadOp: 'clear',\n      depthStoreOp: t.params.depthStencilStoreOperation\n    }\n  });\n  pass.end();\n\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n\n  // Check that the correct store operation occurred.\n  let expectedColorValue = {};\n  if (t.params.colorStoreOperation === 'discard') {\n    // If colorStoreOp was clear, the texture should now contain {0.0, 0.0, 0.0, 0.0}.\n    expectedColorValue = { R: 0.0, G: 0.0, B: 0.0, A: 0.0 };\n  } else if (t.params.colorStoreOperation === 'store') {\n    // If colorStoreOP was store, the texture should still contain {1.0, 1.0, 1.0, 1.0}.\n    expectedColorValue = { R: 1.0, G: 1.0, B: 1.0, A: 1.0 };\n  }\n  t.expectSingleColor(colorAttachment, kColorFormat, {\n    size: [kHeight, kWidth, 1],\n    exp: expectedColorValue\n  });\n\n  // Check that the correct store operation occurred.\n  let expectedDepthValue = {};\n  if (t.params.depthStencilStoreOperation === 'discard') {\n    // If depthStencilStoreOperation was clear, the texture's depth component should be 0.0, and\n    // the stencil component should be 0.0.\n    expectedDepthValue = { Depth: 0.0 };\n  } else if (t.params.depthStencilStoreOperation === 'store') {\n    // If depthStencilStoreOperation was store, the texture's depth component should be 1.0, and\n    // the stencil component should be 1.0.\n    expectedDepthValue = { Depth: 1.0 };\n  }\n  t.expectSingleColor(depthStencilAttachment, kDepthStencilFormat, {\n    size: [kHeight, kWidth, 1],\n    exp: expectedDepthValue,\n    layout: { mipLevel: 0, aspect: 'depth-only' }\n  });\n});\n\n// Tests that render pass color attachment store operations work correctly for all renderable color\n// formats, mip levels and array layers.\ng.test('render_pass_store_op,color_attachment_only').\nparams((u) =>\nu.\ncombine('colorFormat', kEncodableTextureFormats)\n// Filter out any non-renderable formats\n.filter(({ colorFormat }) => !!kTextureFormatInfo[colorFormat].colorRender).\ncombine('storeOperation', kStoreOps).\nbeginSubcases().\ncombine('mipLevel', kMipLevel).\ncombine('arrayLayer', kArrayLayers)\n).\nbeforeAllSubcases((t) => {\n  t.skipIfTextureFormatNotSupported(t.params.colorFormat);\n}).\nfn((t) => {\n  const colorAttachment = t.createTextureTracked({\n    format: t.params.colorFormat,\n    size: { width: kWidth, height: kHeight, depthOrArrayLayers: t.params.arrayLayer + 1 },\n    mipLevelCount: kMipLevelCount,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n  });\n\n  const colorViewDesc = {\n    baseArrayLayer: t.params.arrayLayer,\n    baseMipLevel: t.params.mipLevel,\n    mipLevelCount: 1,\n    arrayLayerCount: 1\n  };\n\n  const colorAttachmentView = colorAttachment.createView(colorViewDesc);\n\n  // Color load operation will clear to {1.0, 0.0, 0.0, 1.0}.\n  // Color store operation is determined by the test params.\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: colorAttachmentView,\n      clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: t.params.storeOperation\n    }]\n\n  });\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n\n  // Check that the correct store operation occurred.\n  let expectedValue = {};\n  if (t.params.storeOperation === 'discard') {\n    // If colorStoreOp was clear, the texture should now contain {0.0, 0.0, 0.0, 0.0}.\n    expectedValue = { R: 0.0, G: 0.0, B: 0.0, A: 0.0 };\n  } else if (t.params.storeOperation === 'store') {\n    // If colorStoreOP was store, the texture should still contain {1.0, 0.0, 0.0, 1.0}.\n    expectedValue = { R: 1.0, G: 0.0, B: 0.0, A: 1.0 };\n  }\n\n  t.expectSingleColor(colorAttachment, t.params.colorFormat, {\n    size: [kHeight, kWidth, 1],\n    slice: t.params.arrayLayer,\n    exp: expectedValue,\n    layout: { mipLevel: t.params.mipLevel }\n  });\n});\n\n// Test with multiple color attachments to ensure each attachment's storeOp is set independently.\ng.test('render_pass_store_op,multiple_color_attachments').\nparams((u) =>\nu.\ncombine('storeOperation1', kStoreOps).\ncombine('storeOperation2', kStoreOps).\nbeginSubcases().\ncombine('colorAttachments', kNumColorAttachments)\n).\nfn((t) => {\n  const kColorFormat = 'rgba8unorm';\n  const colorAttachments = [];\n\n  for (let i = 0; i < t.params.colorAttachments; i++) {\n    colorAttachments.push(\n      t.createTextureTracked({\n        format: kColorFormat,\n        size: { width: kWidth, height: kHeight, depthOrArrayLayers: 1 },\n        usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n      })\n    );\n  }\n\n  // Color load operation will clear to {1.0, 1.0, 1.0, 1.0}\n  // Color store operation is determined by test params. Use storeOperation1 for even numbered\n  // attachments and storeOperation2 for odd numbered attachments.\n  const renderPassColorAttachments = [];\n  for (let i = 0; i < t.params.colorAttachments; i++) {\n    renderPassColorAttachments.push({\n      view: colorAttachments[i].createView(),\n      clearValue: { r: 1.0, g: 1.0, b: 1.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: i % 2 === 0 ? t.params.storeOperation1 : t.params.storeOperation2\n    });\n  }\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginRenderPass({\n    colorAttachments: renderPassColorAttachments\n  });\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n\n  // Check that the correct store operation occurred.\n  let expectedValue = {};\n  for (let i = 0; i < t.params.colorAttachments; i++) {\n    if (renderPassColorAttachments[i].storeOp === 'discard') {\n      // If colorStoreOp was clear, the texture should now contain {0.0, 0.0, 0.0, 0.0}.\n      expectedValue = { R: 0.0, G: 0.0, B: 0.0, A: 0.0 };\n    } else if (renderPassColorAttachments[i].storeOp === 'store') {\n      // If colorStoreOP was store, the texture should still contain {1.0, 1.0, 1.0, 1.0}.\n      expectedValue = { R: 1.0, G: 1.0, B: 1.0, A: 1.0 };\n    }\n    t.expectSingleColor(colorAttachments[i], kColorFormat, {\n      size: [kHeight, kWidth, 1],\n      exp: expectedValue\n    });\n  }\n});\n\ng.test('render_pass_store_op,depth_stencil_attachment_only').\ndesc(\n  `\nTests that render pass depth stencil store operations work correctly for all renderable color\nformats, mip levels and array layers.\n\n- x= all (sized) depth stencil formats, all store ops, multiple mip levels, multiple array layers\n\nTODO: Also test unsized depth/stencil formats [1]\n  `\n).\nparams((u) =>\nu.\ncombine('depthStencilFormat', kSizedDepthStencilFormats) // [1]\n.combine('storeOperation', kStoreOps).\nbeginSubcases().\ncombine('mipLevel', kMipLevel).\ncombine('arrayLayer', kArrayLayers)\n).\nfn((t) => {\n  const depthStencilTexture = t.createTextureTracked({\n    format: t.params.depthStencilFormat,\n    size: { width: kWidth, height: kHeight, depthOrArrayLayers: t.params.arrayLayer + 1 },\n    mipLevelCount: kMipLevelCount,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n  });\n\n  const depthStencilViewDesc = {\n    baseArrayLayer: t.params.arrayLayer,\n    baseMipLevel: t.params.mipLevel,\n    mipLevelCount: 1,\n    arrayLayerCount: 1\n  };\n\n  const depthStencilAttachmentView = depthStencilTexture.createView(depthStencilViewDesc);\n\n  // Depth-stencil load operation will clear to depth = 1.0, stencil = 1.0.\n  // Depth-stencil store operate is determined by test params.\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const depthStencilAttachment = {\n    view: depthStencilAttachmentView\n  };\n  if (kTextureFormatInfo[t.params.depthStencilFormat].depth) {\n    depthStencilAttachment.depthClearValue = 1.0;\n    depthStencilAttachment.depthLoadOp = 'clear';\n    depthStencilAttachment.depthStoreOp = t.params.storeOperation;\n  }\n  if (kTextureFormatInfo[t.params.depthStencilFormat].stencil) {\n    depthStencilAttachment.stencilClearValue = 1;\n    depthStencilAttachment.stencilLoadOp = 'clear';\n    depthStencilAttachment.stencilStoreOp = t.params.storeOperation;\n  }\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [],\n    depthStencilAttachment\n  });\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n\n  let expectedDepthValue = {};\n  let expectedStencilValue = {};\n  if (t.params.storeOperation === 'discard') {\n    // If depthStencilStoreOperation was clear, the texture's depth/stencil component should be 0,\n    expectedDepthValue = { Depth: 0.0 };\n    expectedStencilValue = { Stencil: 0 };\n  } else if (t.params.storeOperation === 'store') {\n    // If depthStencilStoreOperation was store, the texture's depth/stencil components should be 1,\n    expectedDepthValue = { Depth: 1.0 };\n    expectedStencilValue = { Stencil: 1 };\n  }\n\n  if (kTextureFormatInfo[t.params.depthStencilFormat].depth) {\n    t.expectSingleColor(depthStencilTexture, t.params.depthStencilFormat, {\n      size: [kHeight, kWidth, 1],\n      slice: t.params.arrayLayer,\n      exp: expectedDepthValue,\n      layout: { mipLevel: t.params.mipLevel, aspect: 'depth-only' }\n    });\n  }\n  if (kTextureFormatInfo[t.params.depthStencilFormat].stencil) {\n    t.expectSingleColor(depthStencilTexture, t.params.depthStencilFormat, {\n      size: [kHeight, kWidth, 1],\n      slice: t.params.arrayLayer,\n      exp: expectedStencilValue,\n      layout: { mipLevel: t.params.mipLevel, aspect: 'stencil-only' }\n    });\n  }\n});"],"mappings":"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","ignoreList":[]}