{"version":3,"file":"clear_value.spec.js","names":["description","makeTestGroup","assert","kTextureFormatInfo","kDepthStencilFormats","depthStencilFormatAspectSize","GPUTest","g","test","desc","unimplemented","params","u","combine","filter","t","stencilFormat","stencil","beforeAllSubcases","info","selectDeviceOrSkipTestCase","feature","fn","stencilClearValue","applyStencilClearValueAsStencilReferenceValue","kSize","colorFormat","stencilTexture","createTextureTracked","format","size","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","colorTexture","renderPipeline","device","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","targets","depthStencil","depthCompare","depthWriteEnabled","stencilFront","compare","stencilBack","primitive","topology","stencilAspectSizeInBytes","expectedStencilValue","stencilReference","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","depthStencilAttachment","view","createView","depthClearValue","stencilLoadOp","stencilStoreOp","depth","depthLoadOp","depthStoreOp","renderPassEncoder","beginRenderPass","colorAttachments","loadOp","storeOp","clearValue","setPipeline","setStencilReference","draw","end","destinationBuffer","createBufferTracked","GPUBufferUsage","COPY_DST","copyTextureToBuffer","texture","aspect","buffer","queue","submit","finish","expectSingleColor","exp","R","G","B","A","expectGPUBufferValuesEqual","Uint8Array"],"sources":["../../../../../src/webgpu/api/operation/render_pass/clear_value.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTests for render pass clear values.\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert } from '../../../../common/util/util.js';\nimport {\n  kTextureFormatInfo,\n  kDepthStencilFormats,\n  depthStencilFormatAspectSize } from\n'../../../format_info.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('stored').\ndesc(`Test render pass clear values are stored at the end of an empty pass.`).\nunimplemented();\n\ng.test('loaded').\ndesc(\n  `Test render pass clear values are visible during the pass by doing some trivial blending\nwith the attachment (e.g. add [0,0,0,0] to the color and verify the stored result).`\n).\nunimplemented();\n\ng.test('srgb').\ndesc(\n  `Test that clear values on '-srgb' type attachments are interpreted as unencoded (linear),\nnot decoded from srgb to linear.`\n).\nunimplemented();\n\ng.test('layout').\ndesc(\n  `Test that bind group layouts of the default pipeline layout are correct by passing various\nshaders and then checking their computed bind group layouts are compatible with particular bind\ngroups.`\n).\nunimplemented();\n\ng.test('stencil_clear_value').\ndesc(\n  `Test that when stencilLoadOp is \"clear\", the stencil aspect should be correctly cleared by\n     GPURenderPassDepthStencilAttachment.stencilClearValue, which will be converted to the type of\n     the stencil aspect of view by taking the same number of LSBs as the number of bits in the\n     stencil aspect of one texel block of view.`\n).\nparams((u) =>\nu.\ncombine('stencilFormat', kDepthStencilFormats).\ncombine('stencilClearValue', [0, 1, 0xff, 0x100 + 2, 0x10000 + 3]).\ncombine('applyStencilClearValueAsStencilReferenceValue', [true, false]).\nfilter((t) => !!kTextureFormatInfo[t.stencilFormat].stencil)\n).\nbeforeAllSubcases((t) => {\n  const { stencilFormat } = t.params;\n  const info = kTextureFormatInfo[stencilFormat];\n  t.selectDeviceOrSkipTestCase(info.feature);\n}).\nfn((t) => {\n  const { stencilFormat, stencilClearValue, applyStencilClearValueAsStencilReferenceValue } =\n  t.params;\n\n  const kSize = [1, 1, 1];\n  const colorFormat = 'rgba8unorm';\n  const stencilTexture = t.createTextureTracked({\n    format: stencilFormat,\n    size: kSize,\n    usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n  });\n  const colorTexture = t.createTextureTracked({\n    format: colorFormat,\n    size: kSize,\n    usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n  });\n  const renderPipeline = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: t.device.createShaderModule({\n        code: `\n            @vertex\n            fn main(@builtin(vertex_index) VertexIndex : u32)-> @builtin(position) vec4<f32> {\n              var pos : array<vec2<f32>, 6> = array<vec2<f32>, 6>(\n                  vec2<f32>(-1.0,  1.0),\n                  vec2<f32>(-1.0, -1.0),\n                  vec2<f32>( 1.0,  1.0),\n                  vec2<f32>(-1.0, -1.0),\n                  vec2<f32>( 1.0,  1.0),\n                  vec2<f32>( 1.0, -1.0));\n              return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n            }`\n      }),\n      entryPoint: 'main'\n    },\n    fragment: {\n      module: t.device.createShaderModule({\n        code: `\n            @fragment\n            fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`\n      }),\n      entryPoint: 'main',\n      targets: [{ format: colorFormat }]\n    },\n    depthStencil: {\n      format: stencilFormat,\n      depthCompare: 'always',\n      depthWriteEnabled: false,\n      stencilFront: {\n        compare: 'equal'\n      },\n      stencilBack: {\n        compare: 'equal'\n      }\n    },\n    primitive: {\n      topology: 'triangle-list'\n    }\n  });\n\n  const stencilAspectSizeInBytes = depthStencilFormatAspectSize(stencilFormat, 'stencil-only');\n  assert(stencilAspectSizeInBytes > 0);\n  const expectedStencilValue = stencilClearValue & (stencilAspectSizeInBytes << 8) - 1;\n\n  // StencilReference used in setStencilReference will also be masked to the lowest valid bits, so\n  // no matter what we set in the rest high bits that will be masked out (different or same\n  // between stencilClearValue and stencilReference), the test will pass if and only if the valid\n  // lowest bits are the same.\n  const stencilReference = applyStencilClearValueAsStencilReferenceValue ?\n  stencilClearValue :\n  expectedStencilValue;\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n\n  const depthStencilAttachment = {\n    view: stencilTexture.createView(),\n    depthClearValue: 0,\n    stencilLoadOp: 'clear',\n    stencilStoreOp: 'store',\n    stencilClearValue\n  };\n  if (kTextureFormatInfo[stencilFormat].depth) {\n    depthStencilAttachment.depthClearValue = 0;\n    depthStencilAttachment.depthLoadOp = 'clear';\n    depthStencilAttachment.depthStoreOp = 'store';\n  }\n  const renderPassEncoder = encoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: colorTexture.createView(),\n      loadOp: 'clear',\n      storeOp: 'store',\n      clearValue: [1, 0, 0, 1]\n    }],\n\n    depthStencilAttachment\n  });\n  renderPassEncoder.setPipeline(renderPipeline);\n  renderPassEncoder.setStencilReference(stencilReference);\n  renderPassEncoder.draw(6);\n  renderPassEncoder.end();\n\n  const destinationBuffer = t.createBufferTracked({\n    usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n    size: 4\n  });\n  encoder.copyTextureToBuffer(\n    {\n      texture: stencilTexture,\n      aspect: 'stencil-only'\n    },\n    {\n      buffer: destinationBuffer\n    },\n    [1, 1, 1]\n  );\n\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  t.expectSingleColor(colorTexture, colorFormat, {\n    size: [1, 1, 1],\n    exp: { R: 0, G: 1, B: 0, A: 1 }\n  });\n  t.expectGPUBufferValuesEqual(destinationBuffer, new Uint8Array([expectedStencilValue]));\n});"],"mappings":"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","ignoreList":[]}