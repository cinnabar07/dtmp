{"version":3,"file":"copyTextureToTexture.spec.js","names":["description","makeTestGroup","assert","ErrorWithExtra","memcpy","kBufferSizeAlignment","kMinDynamicBufferOffsetAlignment","kTextureDimensions","kTextureFormatInfo","kRegularTextureFormats","kCompressedTextureFormats","kDepthStencilFormats","textureDimensionAndFormatCompatible","depthStencilFormatAspectSize","isCompressedTextureFormat","viewCompatible","isRegularTextureFormat","GPUTest","TextureTestMixin","checkElementsEqual","align","physicalMipSize","DataArrayGenerator","kBytesPerRowAlignment","dataBytesForCopyOrFail","TexelView","findFailedPixels","dataGenerator","F","GetInitialDataPerMipLevel","dimension","textureSize","format","mipLevel","textureSizeAtLevel","bytesPerBlock","color","bytes","blockWidthInTexel","blockWidth","blockHeightInTexel","blockHeight","blocksPerSubresource","width","height","byteSize","depthOrArrayLayers","generateView","GetInitialStencilDataPerMipLevel","aspectBytesPerBlock","DoCopyTextureToTextureTest","srcTextureSize","dstTextureSize","srcFormat","dstFormat","copyBoxOffsets","srcCopyLevel","dstCopyLevel","skipIfTextureFormatNotSupported","extraTextureUsageFlags","isCompatibility","GPUTextureUsage","TEXTURE_BINDING","mipLevelCount","srcTextureDesc","size","usage","COPY_SRC","COPY_DST","srcTexture","createTextureTracked","dstTextureDesc","dstTexture","initialSrcData","srcTextureSizeAtLevel","srcBlocksPerRow","srcBlockRowsPerImage","device","queue","writeTexture","texture","bytesPerRow","rowsPerImage","dstTextureSizeAtLevel","minWidth","Math","min","minHeight","minDepth","appliedSrcOffset","x","srcOffset","y","z","appliedDstOffset","dstOffset","appliedCopyWidth","max","copyExtent","appliedCopyHeight","appliedCopyDepth","appliedSize","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","copyTextureToTexture","origin","submit","finish","dstBlocksPerRow","dstBlockRowsPerImage","bytesPerDstAlignedBlockRow","dstBufferSize","expectedTexture","expectedData","Uint8Array","updateLinearTextureDataSubBox","src","dataLayout","offset","data","dest","expectTexturesToMatchByRendering","dstBufferDesc","GPUBufferUsage","dstBuffer","createBufferTracked","copyTextureToBuffer","buffer","expectedUint8DataWithPadding","expectedUint8Data","appliedCopyBlocksPerRow","appliedCopyBlockRowsPerImage","srcCopyOffsetInBlocks","dstCopyOffsetInBlocks","bytesInRow","srcOffsetZ","dstOffsetZ","dstOffsetYInBlocks","expectedDataWithPaddingOffset","srcOffsetYInBlocks","expectedDataOffset","start","length","dst","expectGPUBufferValuesPassCheck","vals","srcByteOffset","type","typedLength","regularDstFormat","checkByTextureFormat","actual","zero","actTexelView","fromTextureDataByReference","subrectOrigin","subrectSize","expTexelView","failedPixelsMessage","maxFractionalDiff","undefined","msg","InitializeStencilAspect","sourceTexture","initialStencilData","srcCopyBaseArrayLayer","copySize","aspect","VerifyStencilAspect","destinationTexture","dstCopyBaseArrayLayer","outputBufferSize","layout","method","outputBuffer","expectedStencilData","initialOffsetPerLayer","expectedOffsetPerLayer","initialOffsetPerRow","expectedOffsetPerRow","expectGPUBufferValuesEqual","GetRenderPipelineForT2TCopyWithDepthTests","bindGroupLayout","hasColorAttachment","depthStencil","renderPipelineDescriptor","createPipelineLayout","bindGroupLayouts","vertex","module","createShaderModule","code","entryPoint","fragment","targets","createRenderPipeline","GetBindGroupLayoutForT2TCopyWithDepthTests","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","VERTEX","minBindingSize","hasDynamicOffset","GetBindGroupForT2TCopyWithDepthTests","totalCopyArrayLayers","uniformBufferSize","uniformBufferData","Float32Array","i","uniformBuffer","makeBufferWithContents","UNIFORM","createBindGroup","resource","InitializeDepthAspect","depthFormat","renderPipeline","depthWriteEnabled","depthCompare","bindGroup","hasStencil","stencil","srcCopyLayer","renderPass","beginRenderPass","colorAttachments","depthStencilAttachment","view","createView","baseArrayLayer","arrayLayerCount","baseMipLevel","depthClearValue","depthLoadOp","depthStoreOp","stencilLoadOp","stencilStoreOp","setBindGroup","setPipeline","draw","end","VerifyDepthAspect","outputColorTexture","RENDER_ATTACHMENT","dstCopyLayer","clearValue","r","g","b","a","loadOp","storeOp","expectSingleColor","exp","R","G","B","A","kCopyBoxOffsetsForWholeDepth","kCopyBoxOffsetsFor2DArrayTextures","test","desc","params","u","combine","filter","srcBaseFormat","baseFormat","dstBaseFormat","beginSubcases","expandWithParams","p","param","unless","fn","t","beforeAllSubcases","skipIfCopyTextureToTextureNotSupportedForFormat","selectDeviceOrSkipTestCase","feature","textureSizeInBlocks","srcBlockWidth","srcBlockHeight","dstBlockWidth","dstBlockHeight","paramsSubcasesOnly","combineWithParams","copyBoxOffset","selectDeviceForTextureFormatOrSkipTestCase","depth","skipIf","kColorFormat","kSampleCount","sampleCount","renderPipelineForInit","multisample","count","initEncoder","renderPassForInit","copyEncoder","renderPipelineForValidation","getBindGroupLayout","expectedOutputTexture","validationEncoder","renderPassForValidation","kDepthFormat","vertexState","encoderForInit","renderPipelineForVerify","multisampledColorTexture","colorTextureAsResolveTarget","encoderForVerify","renderPassForVerify","resolveTarget"],"sources":["../../../../../src/webgpu/api/operation/command_buffer/copyTextureToTexture.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `copyTextureToTexture operation tests`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { assert, ErrorWithExtra, memcpy } from '../../../../common/util/util.js';\nimport {\n  kBufferSizeAlignment,\n  kMinDynamicBufferOffsetAlignment,\n  kTextureDimensions } from\n'../../../capability_info.js';\nimport {\n  kTextureFormatInfo,\n  kRegularTextureFormats,\n  kCompressedTextureFormats,\n  kDepthStencilFormats,\n  textureDimensionAndFormatCompatible,\n  depthStencilFormatAspectSize,\n\n\n  isCompressedTextureFormat,\n  viewCompatible,\n\n  isRegularTextureFormat } from\n'../../../format_info.js';\nimport { GPUTest, TextureTestMixin } from '../../../gpu_test.js';\nimport { checkElementsEqual } from '../../../util/check_contents.js';\nimport { align } from '../../../util/math.js';\nimport { physicalMipSize } from '../../../util/texture/base.js';\nimport { DataArrayGenerator } from '../../../util/texture/data_generation.js';\nimport { kBytesPerRowAlignment, dataBytesForCopyOrFail } from '../../../util/texture/layout.js';\nimport { TexelView } from '../../../util/texture/texel_view.js';\nimport { findFailedPixels } from '../../../util/texture/texture_ok.js';\n\nconst dataGenerator = new DataArrayGenerator();\n\nclass F extends TextureTestMixin(GPUTest) {\n  GetInitialDataPerMipLevel(\n  dimension,\n  textureSize,\n  format,\n  mipLevel)\n  {\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, dimension, mipLevel);\n    const bytesPerBlock = kTextureFormatInfo[format].color.bytes;\n    const blockWidthInTexel = kTextureFormatInfo[format].blockWidth;\n    const blockHeightInTexel = kTextureFormatInfo[format].blockHeight;\n    const blocksPerSubresource =\n    textureSizeAtLevel.width / blockWidthInTexel * (\n    textureSizeAtLevel.height / blockHeightInTexel);\n\n    const byteSize = bytesPerBlock * blocksPerSubresource * textureSizeAtLevel.depthOrArrayLayers;\n    return dataGenerator.generateView(byteSize);\n  }\n\n  GetInitialStencilDataPerMipLevel(\n  textureSize,\n  format,\n  mipLevel)\n  {\n    const textureSizeAtLevel = physicalMipSize(textureSize, format, '2d', mipLevel);\n    const aspectBytesPerBlock = depthStencilFormatAspectSize(format, 'stencil-only');\n    const byteSize =\n    aspectBytesPerBlock *\n    textureSizeAtLevel.width *\n    textureSizeAtLevel.height *\n    textureSizeAtLevel.depthOrArrayLayers;\n    return dataGenerator.generateView(byteSize);\n  }\n\n  DoCopyTextureToTextureTest(\n  dimension,\n  srcTextureSize,\n  dstTextureSize,\n  srcFormat,\n  dstFormat,\n  copyBoxOffsets,\n\n\n\n\n  srcCopyLevel,\n  dstCopyLevel)\n  {\n    this.skipIfTextureFormatNotSupported(srcFormat, dstFormat);\n\n    // If we're in compatibility mode and it's a compressed texture\n    // then we need to render the texture to test the results of the copy.\n    const extraTextureUsageFlags =\n    isCompressedTextureFormat(dstFormat) && this.isCompatibility ?\n    GPUTextureUsage.TEXTURE_BINDING :\n    0;\n    const mipLevelCount = dimension === '1d' ? 1 : 4;\n\n    // Create srcTexture and dstTexture\n    const srcTextureDesc = {\n      dimension,\n      size: srcTextureSize,\n      format: srcFormat,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      mipLevelCount\n    };\n    const srcTexture = this.createTextureTracked(srcTextureDesc);\n    const dstTextureDesc = {\n      dimension,\n      size: dstTextureSize,\n      format: dstFormat,\n      usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | extraTextureUsageFlags,\n      mipLevelCount\n    };\n    const dstTexture = this.createTextureTracked(dstTextureDesc);\n\n    // Fill the whole subresource of srcTexture at srcCopyLevel with initialSrcData.\n    const initialSrcData = this.GetInitialDataPerMipLevel(\n      dimension,\n      srcTextureSize,\n      srcFormat,\n      srcCopyLevel\n    );\n    const srcTextureSizeAtLevel = physicalMipSize(\n      srcTextureSize,\n      srcFormat,\n      dimension,\n      srcCopyLevel\n    );\n    const bytesPerBlock = kTextureFormatInfo[srcFormat].color.bytes;\n    const blockWidth = kTextureFormatInfo[srcFormat].blockWidth;\n    const blockHeight = kTextureFormatInfo[srcFormat].blockHeight;\n    const srcBlocksPerRow = srcTextureSizeAtLevel.width / blockWidth;\n    const srcBlockRowsPerImage = srcTextureSizeAtLevel.height / blockHeight;\n    this.device.queue.writeTexture(\n      { texture: srcTexture, mipLevel: srcCopyLevel },\n      initialSrcData,\n      {\n        bytesPerRow: srcBlocksPerRow * bytesPerBlock,\n        rowsPerImage: srcBlockRowsPerImage\n      },\n      srcTextureSizeAtLevel\n    );\n\n    // Copy the region specified by copyBoxOffsets from srcTexture to dstTexture.\n    const dstTextureSizeAtLevel = physicalMipSize(\n      dstTextureSize,\n      dstFormat,\n      dimension,\n      dstCopyLevel\n    );\n    const minWidth = Math.min(srcTextureSizeAtLevel.width, dstTextureSizeAtLevel.width);\n    const minHeight = Math.min(srcTextureSizeAtLevel.height, dstTextureSizeAtLevel.height);\n    const minDepth = Math.min(\n      srcTextureSizeAtLevel.depthOrArrayLayers,\n      dstTextureSizeAtLevel.depthOrArrayLayers\n    );\n\n    const appliedSrcOffset = {\n      x: Math.min(copyBoxOffsets.srcOffset.x * blockWidth, minWidth),\n      y: Math.min(copyBoxOffsets.srcOffset.y * blockHeight, minHeight),\n      z: Math.min(copyBoxOffsets.srcOffset.z, minDepth)\n    };\n    const appliedDstOffset = {\n      x: Math.min(copyBoxOffsets.dstOffset.x * blockWidth, minWidth),\n      y: Math.min(copyBoxOffsets.dstOffset.y * blockHeight, minHeight),\n      z: Math.min(copyBoxOffsets.dstOffset.z, minDepth)\n    };\n\n    const appliedCopyWidth = Math.max(\n      minWidth +\n      copyBoxOffsets.copyExtent.width * blockWidth -\n      Math.max(appliedSrcOffset.x, appliedDstOffset.x),\n      0\n    );\n    const appliedCopyHeight = Math.max(\n      minHeight +\n      copyBoxOffsets.copyExtent.height * blockHeight -\n      Math.max(appliedSrcOffset.y, appliedDstOffset.y),\n      0\n    );\n    assert(appliedCopyWidth % blockWidth === 0 && appliedCopyHeight % blockHeight === 0);\n\n    const appliedCopyDepth = Math.max(\n      0,\n      minDepth +\n      copyBoxOffsets.copyExtent.depthOrArrayLayers -\n      Math.max(appliedSrcOffset.z, appliedDstOffset.z)\n    );\n    assert(appliedCopyDepth >= 0);\n\n    const appliedSize = {\n      width: appliedCopyWidth,\n      height: appliedCopyHeight,\n      depthOrArrayLayers: appliedCopyDepth\n    };\n\n    {\n      const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", this.device, this.device.createCommandEncoder, [], () => this.device.createCommandEncoder());\n      encoder.copyTextureToTexture(\n        { texture: srcTexture, mipLevel: srcCopyLevel, origin: appliedSrcOffset },\n        { texture: dstTexture, mipLevel: dstCopyLevel, origin: appliedDstOffset },\n        appliedSize\n      );\n      globalThis._TRAMPOLINE_(\"submit\", this.device, this.device.queue.submit, [[encoder.finish()]], () => this.device.queue.submit([encoder.finish()]));\n    }\n\n    const dstBlocksPerRow = dstTextureSizeAtLevel.width / blockWidth;\n    const dstBlockRowsPerImage = dstTextureSizeAtLevel.height / blockHeight;\n    const bytesPerDstAlignedBlockRow = align(dstBlocksPerRow * bytesPerBlock, 256);\n    const dstBufferSize =\n    (dstBlockRowsPerImage * dstTextureSizeAtLevel.depthOrArrayLayers - 1) *\n    bytesPerDstAlignedBlockRow +\n    align(dstBlocksPerRow * bytesPerBlock, 4);\n\n    if (isCompressedTextureFormat(dstTexture.format) && this.isCompatibility) {\n      assert(viewCompatible(this.isCompatibility, srcFormat, dstFormat));\n      // compare by rendering. We need the expected texture to match\n      // the dstTexture so we'll create a texture where we supply\n      // all of the data in JavaScript.\n      const expectedTexture = this.createTextureTracked({\n        size: [dstTexture.width, dstTexture.height, dstTexture.depthOrArrayLayers],\n        mipLevelCount: dstTexture.mipLevelCount,\n        format: dstTexture.format,\n        usage: dstTexture.usage\n      });\n      const expectedData = new Uint8Array(dstBufferSize);\n\n      // Execute the equivalent of `copyTextureToTexture`, copying\n      // from `initialSrcData` to `expectedData`.\n      this.updateLinearTextureDataSubBox(dstFormat, appliedSize, {\n        src: {\n          dataLayout: {\n            bytesPerRow: srcBlocksPerRow * bytesPerBlock,\n            rowsPerImage: srcBlockRowsPerImage,\n            offset: 0\n          },\n          origin: appliedSrcOffset,\n          data: initialSrcData\n        },\n        dest: {\n          dataLayout: {\n            bytesPerRow: dstBlocksPerRow * bytesPerBlock,\n            rowsPerImage: dstBlockRowsPerImage,\n            offset: 0\n          },\n          origin: appliedDstOffset,\n          data: expectedData\n        }\n      });\n\n      // Upload `expectedData` to `expectedTexture`. If `copyTextureToTexture`\n      // worked then the contents of `dstTexture` should match `expectedTexture`\n      this.queue.writeTexture(\n        { texture: expectedTexture, mipLevel: dstCopyLevel },\n        expectedData,\n        {\n          bytesPerRow: dstBlocksPerRow * bytesPerBlock,\n          rowsPerImage: dstBlockRowsPerImage\n        },\n        dstTextureSizeAtLevel\n      );\n\n      this.expectTexturesToMatchByRendering(\n        dstTexture,\n        expectedTexture,\n        dstCopyLevel,\n        appliedDstOffset,\n        appliedSize\n      );\n      return;\n    }\n\n    // Copy the whole content of dstTexture at dstCopyLevel to dstBuffer.\n    const dstBufferDesc = {\n      size: dstBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n    };\n    const dstBuffer = this.createBufferTracked(dstBufferDesc);\n\n    {\n      const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", this.device, this.device.createCommandEncoder, [], () => this.device.createCommandEncoder());\n      encoder.copyTextureToBuffer(\n        { texture: dstTexture, mipLevel: dstCopyLevel },\n        {\n          buffer: dstBuffer,\n          bytesPerRow: bytesPerDstAlignedBlockRow,\n          rowsPerImage: dstBlockRowsPerImage\n        },\n        dstTextureSizeAtLevel\n      );\n      globalThis._TRAMPOLINE_(\"submit\", this.device, this.device.queue.submit, [[encoder.finish()]], () => this.device.queue.submit([encoder.finish()]));\n    }\n\n    // Fill expectedUint8DataWithPadding with the expected data of dstTexture. The other values in\n    // expectedUint8DataWithPadding are kept 0 to check if the texels untouched by the copy are 0\n    // (their previous values).\n    const expectedUint8DataWithPadding = new Uint8Array(dstBufferSize);\n    const expectedUint8Data = new Uint8Array(initialSrcData);\n\n    const appliedCopyBlocksPerRow = appliedCopyWidth / blockWidth;\n    const appliedCopyBlockRowsPerImage = appliedCopyHeight / blockHeight;\n    const srcCopyOffsetInBlocks = {\n      x: appliedSrcOffset.x / blockWidth,\n      y: appliedSrcOffset.y / blockHeight,\n      z: appliedSrcOffset.z\n    };\n    const dstCopyOffsetInBlocks = {\n      x: appliedDstOffset.x / blockWidth,\n      y: appliedDstOffset.y / blockHeight,\n      z: appliedDstOffset.z\n    };\n    const bytesInRow = appliedCopyBlocksPerRow * bytesPerBlock;\n\n    for (let z = 0; z < appliedCopyDepth; ++z) {\n      const srcOffsetZ = srcCopyOffsetInBlocks.z + z;\n      const dstOffsetZ = dstCopyOffsetInBlocks.z + z;\n      for (let y = 0; y < appliedCopyBlockRowsPerImage; ++y) {\n        const dstOffsetYInBlocks = dstCopyOffsetInBlocks.y + y;\n        const expectedDataWithPaddingOffset =\n        bytesPerDstAlignedBlockRow * (dstBlockRowsPerImage * dstOffsetZ + dstOffsetYInBlocks) +\n        dstCopyOffsetInBlocks.x * bytesPerBlock;\n\n        const srcOffsetYInBlocks = srcCopyOffsetInBlocks.y + y;\n        const expectedDataOffset =\n        bytesPerBlock *\n        srcBlocksPerRow * (\n        srcBlockRowsPerImage * srcOffsetZ + srcOffsetYInBlocks) +\n        srcCopyOffsetInBlocks.x * bytesPerBlock;\n\n        memcpy(\n          { src: expectedUint8Data, start: expectedDataOffset, length: bytesInRow },\n          { dst: expectedUint8DataWithPadding, start: expectedDataWithPaddingOffset }\n        );\n      }\n    }\n\n    if (isCompressedTextureFormat(dstFormat)) {\n      this.expectGPUBufferValuesPassCheck(\n        dstBuffer,\n        (vals) => checkElementsEqual(vals, expectedUint8DataWithPadding),\n        {\n          srcByteOffset: 0,\n          type: Uint8Array,\n          typedLength: expectedUint8DataWithPadding.length\n        }\n      );\n      return;\n    }\n\n    assert(isRegularTextureFormat(dstFormat));\n    const regularDstFormat = dstFormat;\n\n    // Verify the content of the whole subresource of dstTexture at dstCopyLevel (in dstBuffer) is expected.\n    const checkByTextureFormat = (actual) => {\n      const zero = { x: 0, y: 0, z: 0 };\n\n      const actTexelView = TexelView.fromTextureDataByReference(regularDstFormat, actual, {\n        bytesPerRow: bytesInRow,\n        rowsPerImage: dstBlockRowsPerImage,\n        subrectOrigin: zero,\n        subrectSize: dstTextureSizeAtLevel\n      });\n      const expTexelView = TexelView.fromTextureDataByReference(\n        regularDstFormat,\n        expectedUint8DataWithPadding,\n        {\n          bytesPerRow: bytesInRow,\n          rowsPerImage: dstBlockRowsPerImage,\n          subrectOrigin: zero,\n          subrectSize: dstTextureSizeAtLevel\n        }\n      );\n\n      const failedPixelsMessage = findFailedPixels(\n        regularDstFormat,\n        zero,\n        dstTextureSizeAtLevel,\n        { actTexelView, expTexelView },\n        {\n          maxFractionalDiff: 0\n        }\n      );\n\n      if (failedPixelsMessage !== undefined) {\n        const msg = 'Texture level had unexpected contents:\\n' + failedPixelsMessage;\n        return new ErrorWithExtra(msg, () => ({\n          expTexelView,\n          actTexelView\n        }));\n      }\n\n      return undefined;\n    };\n\n    this.expectGPUBufferValuesPassCheck(dstBuffer, checkByTextureFormat, {\n      srcByteOffset: 0,\n      type: Uint8Array,\n      typedLength: expectedUint8DataWithPadding.length\n    });\n  }\n\n  InitializeStencilAspect(\n  sourceTexture,\n  initialStencilData,\n  srcCopyLevel,\n  srcCopyBaseArrayLayer,\n  copySize)\n  {\n    this.queue.writeTexture(\n      {\n        texture: sourceTexture,\n        mipLevel: srcCopyLevel,\n        aspect: 'stencil-only',\n        origin: { x: 0, y: 0, z: srcCopyBaseArrayLayer }\n      },\n      initialStencilData,\n      { bytesPerRow: copySize[0], rowsPerImage: copySize[1] },\n      copySize\n    );\n  }\n\n  VerifyStencilAspect(\n  destinationTexture,\n  initialStencilData,\n  dstCopyLevel,\n  dstCopyBaseArrayLayer,\n  copySize)\n  {\n    const bytesPerRow = align(copySize[0], kBytesPerRowAlignment);\n    const rowsPerImage = copySize[1];\n    const outputBufferSize = align(\n      dataBytesForCopyOrFail({\n        layout: { bytesPerRow, rowsPerImage },\n        format: 'stencil8',\n        copySize,\n        method: 'CopyT2B'\n      }),\n      kBufferSizeAlignment\n    );\n    const outputBuffer = this.createBufferTracked({\n      size: outputBufferSize,\n      usage: GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n    });\n    const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", this.device, this.device.createCommandEncoder, [], () => this.device.createCommandEncoder());\n    encoder.copyTextureToBuffer(\n      {\n        texture: destinationTexture,\n        aspect: 'stencil-only',\n        mipLevel: dstCopyLevel,\n        origin: { x: 0, y: 0, z: dstCopyBaseArrayLayer }\n      },\n      { buffer: outputBuffer, bytesPerRow, rowsPerImage },\n      copySize\n    );\n    globalThis._TRAMPOLINE_(\"submit\", this, this.queue.submit, [[encoder.finish()]], () => this.queue.submit([encoder.finish()]));\n\n    const expectedStencilData = new Uint8Array(outputBufferSize);\n    for (let z = 0; z < copySize[2]; ++z) {\n      const initialOffsetPerLayer = z * copySize[0] * copySize[1];\n      const expectedOffsetPerLayer = z * bytesPerRow * rowsPerImage;\n      for (let y = 0; y < copySize[1]; ++y) {\n        const initialOffsetPerRow = initialOffsetPerLayer + y * copySize[0];\n        const expectedOffsetPerRow = expectedOffsetPerLayer + y * bytesPerRow;\n        memcpy(\n          { src: initialStencilData, start: initialOffsetPerRow, length: copySize[0] },\n          { dst: expectedStencilData, start: expectedOffsetPerRow }\n        );\n      }\n    }\n    this.expectGPUBufferValuesEqual(outputBuffer, expectedStencilData);\n  }\n\n  GetRenderPipelineForT2TCopyWithDepthTests(\n  bindGroupLayout,\n  hasColorAttachment,\n  depthStencil)\n  {\n    const renderPipelineDescriptor = {\n      layout: this.device.createPipelineLayout({ bindGroupLayouts: [bindGroupLayout] }),\n      vertex: {\n        module: this.device.createShaderModule({\n          code: `\n            struct Params {\n              copyLayer: f32\n            };\n            @group(0) @binding(0) var<uniform> param: Params;\n            @vertex\n            fn main(@builtin(vertex_index) VertexIndex : u32)-> @builtin(position) vec4<f32> {\n              var depthValue = 0.5 + 0.2 * sin(param.copyLayer);\n              var pos : array<vec3<f32>, 6> = array<vec3<f32>, 6>(\n                  vec3<f32>(-1.0,  1.0, depthValue),\n                  vec3<f32>(-1.0, -1.0, 0.0),\n                  vec3<f32>( 1.0,  1.0, 1.0),\n                  vec3<f32>(-1.0, -1.0, 0.0),\n                  vec3<f32>( 1.0,  1.0, 1.0),\n                  vec3<f32>( 1.0, -1.0, depthValue));\n              return vec4<f32>(pos[VertexIndex], 1.0);\n            }`\n        }),\n        entryPoint: 'main'\n      },\n      depthStencil\n    };\n    if (hasColorAttachment) {\n      renderPipelineDescriptor.fragment = {\n        module: this.device.createShaderModule({\n          code: `\n            @fragment\n            fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n            }`\n        }),\n        entryPoint: 'main',\n        targets: [{ format: 'rgba8unorm' }]\n      };\n    }\n    return this.device.createRenderPipeline(renderPipelineDescriptor);\n  }\n\n  GetBindGroupLayoutForT2TCopyWithDepthTests() {\n    return this.device.createBindGroupLayout({\n      entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.VERTEX,\n        buffer: {\n          type: 'uniform',\n          minBindingSize: 4,\n          hasDynamicOffset: true\n        }\n      }]\n\n    });\n  }\n\n  GetBindGroupForT2TCopyWithDepthTests(\n  bindGroupLayout,\n  totalCopyArrayLayers)\n  {\n    // Prepare the uniform buffer that contains all the copy layers to generate different depth\n    // values for different copy layers.\n    assert(totalCopyArrayLayers > 0);\n    const uniformBufferSize = kMinDynamicBufferOffsetAlignment * (totalCopyArrayLayers - 1) + 4;\n    const uniformBufferData = new Float32Array(uniformBufferSize / 4);\n    for (let i = 1; i < totalCopyArrayLayers; ++i) {\n      uniformBufferData[kMinDynamicBufferOffsetAlignment / 4 * i] = i;\n    }\n    const uniformBuffer = this.makeBufferWithContents(\n      uniformBufferData,\n      GPUBufferUsage.COPY_DST | GPUBufferUsage.UNIFORM\n    );\n    return this.device.createBindGroup({\n      layout: bindGroupLayout,\n      entries: [\n      {\n        binding: 0,\n        resource: {\n          buffer: uniformBuffer,\n          size: 4\n        }\n      }]\n\n    });\n  }\n\n  /** Initialize the depth aspect of sourceTexture with draw calls */\n  InitializeDepthAspect(\n  sourceTexture,\n  depthFormat,\n  srcCopyLevel,\n  srcCopyBaseArrayLayer,\n  copySize)\n  {\n    // Prepare a renderPipeline with depthCompareFunction == 'always' and depthWriteEnabled == true\n    // for the initializations of the depth attachment.\n    const bindGroupLayout = this.GetBindGroupLayoutForT2TCopyWithDepthTests();\n    const renderPipeline = this.GetRenderPipelineForT2TCopyWithDepthTests(bindGroupLayout, false, {\n      format: depthFormat,\n      depthWriteEnabled: true,\n      depthCompare: 'always'\n    });\n    const bindGroup = this.GetBindGroupForT2TCopyWithDepthTests(bindGroupLayout, copySize[2]);\n\n    const hasStencil = kTextureFormatInfo[sourceTexture.format].stencil;\n    const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", this.device, this.device.createCommandEncoder, [], () => this.device.createCommandEncoder());\n    for (let srcCopyLayer = 0; srcCopyLayer < copySize[2]; ++srcCopyLayer) {\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [],\n        depthStencilAttachment: {\n          view: sourceTexture.createView({\n            baseArrayLayer: srcCopyLayer + srcCopyBaseArrayLayer,\n            arrayLayerCount: 1,\n            baseMipLevel: srcCopyLevel,\n            mipLevelCount: 1\n          }),\n          depthClearValue: 0.0,\n          depthLoadOp: 'clear',\n          depthStoreOp: 'store',\n          stencilLoadOp: hasStencil ? 'load' : undefined,\n          stencilStoreOp: hasStencil ? 'store' : undefined\n        }\n      });\n      renderPass.setBindGroup(0, bindGroup, [srcCopyLayer * kMinDynamicBufferOffsetAlignment]);\n      renderPass.setPipeline(renderPipeline);\n      renderPass.draw(6);\n      renderPass.end();\n    }\n    globalThis._TRAMPOLINE_(\"submit\", this, this.queue.submit, [[encoder.finish()]], () => this.queue.submit([encoder.finish()]));\n  }\n\n  VerifyDepthAspect(\n  destinationTexture,\n  depthFormat,\n  dstCopyLevel,\n  dstCopyBaseArrayLayer,\n  copySize)\n  {\n    // Prepare a renderPipeline with depthCompareFunction == 'equal' and depthWriteEnabled == false\n    // for the comparison of the depth attachment.\n    const bindGroupLayout = this.GetBindGroupLayoutForT2TCopyWithDepthTests();\n    const renderPipeline = this.GetRenderPipelineForT2TCopyWithDepthTests(bindGroupLayout, true, {\n      format: depthFormat,\n      depthWriteEnabled: false,\n      depthCompare: 'equal'\n    });\n    const bindGroup = this.GetBindGroupForT2TCopyWithDepthTests(bindGroupLayout, copySize[2]);\n\n    const outputColorTexture = this.createTextureTracked({\n      format: 'rgba8unorm',\n      size: copySize,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n    });\n    const hasStencil = kTextureFormatInfo[destinationTexture.format].stencil;\n    const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", this.device, this.device.createCommandEncoder, [], () => this.device.createCommandEncoder());\n    for (let dstCopyLayer = 0; dstCopyLayer < copySize[2]; ++dstCopyLayer) {\n      // If the depth value is not expected, the color of outputColorTexture will remain Red after\n      // the render pass.\n      const renderPass = encoder.beginRenderPass({\n        colorAttachments: [\n        {\n          view: outputColorTexture.createView({\n            baseArrayLayer: dstCopyLayer,\n            arrayLayerCount: 1\n          }),\n          clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store'\n        }],\n\n        depthStencilAttachment: {\n          view: destinationTexture.createView({\n            baseArrayLayer: dstCopyLayer + dstCopyBaseArrayLayer,\n            arrayLayerCount: 1,\n            baseMipLevel: dstCopyLevel,\n            mipLevelCount: 1\n          }),\n          depthLoadOp: 'load',\n          depthStoreOp: 'store',\n          stencilLoadOp: hasStencil ? 'load' : undefined,\n          stencilStoreOp: hasStencil ? 'store' : undefined\n        }\n      });\n      renderPass.setBindGroup(0, bindGroup, [dstCopyLayer * kMinDynamicBufferOffsetAlignment]);\n      renderPass.setPipeline(renderPipeline);\n      renderPass.draw(6);\n      renderPass.end();\n    }\n    globalThis._TRAMPOLINE_(\"submit\", this, this.queue.submit, [[encoder.finish()]], () => this.queue.submit([encoder.finish()]));\n\n    this.expectSingleColor(outputColorTexture, 'rgba8unorm', {\n      size: copySize,\n      exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 }\n    });\n  }\n}\n\nconst kCopyBoxOffsetsForWholeDepth = [\n// From (0, 0) of src to (0, 0) of dst.\n{\n  srcOffset: { x: 0, y: 0, z: 0 },\n  dstOffset: { x: 0, y: 0, z: 0 },\n  copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 }\n},\n// From (0, 0) of src to (blockWidth, 0) of dst.\n{\n  srcOffset: { x: 0, y: 0, z: 0 },\n  dstOffset: { x: 1, y: 0, z: 0 },\n  copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 }\n},\n// From (0, 0) of src to (0, blockHeight) of dst.\n{\n  srcOffset: { x: 0, y: 0, z: 0 },\n  dstOffset: { x: 0, y: 1, z: 0 },\n  copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 }\n},\n// From (blockWidth, 0) of src to (0, 0) of dst.\n{\n  srcOffset: { x: 1, y: 0, z: 0 },\n  dstOffset: { x: 0, y: 0, z: 0 },\n  copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 }\n},\n// From (0, blockHeight) of src to (0, 0) of dst.\n{\n  srcOffset: { x: 0, y: 1, z: 0 },\n  dstOffset: { x: 0, y: 0, z: 0 },\n  copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 }\n},\n// From (blockWidth, 0) of src to (0, 0) of dst, and the copy extent will not cover the last\n// texel block column of both source and destination texture.\n{\n  srcOffset: { x: 1, y: 0, z: 0 },\n  dstOffset: { x: 0, y: 0, z: 0 },\n  copyExtent: { width: -1, height: 0, depthOrArrayLayers: 0 }\n},\n// From (0, blockHeight) of src to (0, 0) of dst, and the copy extent will not cover the last\n// texel block row of both source and destination texture.\n{\n  srcOffset: { x: 0, y: 1, z: 0 },\n  dstOffset: { x: 0, y: 0, z: 0 },\n  copyExtent: { width: 0, height: -1, depthOrArrayLayers: 0 }\n}];\n\n\nconst kCopyBoxOffsetsFor2DArrayTextures = [\n// Copy the whole array slices from the source texture to the destination texture.\n// The copy extent will cover the whole subresource of either source or the\n// destination texture\n...kCopyBoxOffsetsForWholeDepth,\n\n// Copy 1 texture slice from the 1st slice of the source texture to the 1st slice of the\n// destination texture.\n{\n  srcOffset: { x: 0, y: 0, z: 0 },\n  dstOffset: { x: 0, y: 0, z: 0 },\n  copyExtent: { width: 0, height: 0, depthOrArrayLayers: -2 }\n},\n// Copy 1 texture slice from the 2nd slice of the source texture to the 2nd slice of the\n// destination texture.\n{\n  srcOffset: { x: 0, y: 0, z: 1 },\n  dstOffset: { x: 0, y: 0, z: 1 },\n  copyExtent: { width: 0, height: 0, depthOrArrayLayers: -3 }\n},\n// Copy 1 texture slice from the 1st slice of the source texture to the 2nd slice of the\n// destination texture.\n{\n  srcOffset: { x: 0, y: 0, z: 0 },\n  dstOffset: { x: 0, y: 0, z: 1 },\n  copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 }\n},\n// Copy 1 texture slice from the 2nd slice of the source texture to the 1st slice of the\n// destination texture.\n{\n  srcOffset: { x: 0, y: 0, z: 1 },\n  dstOffset: { x: 0, y: 0, z: 0 },\n  copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 }\n},\n// Copy 2 texture slices from the 1st slice of the source texture to the 1st slice of the\n// destination texture.\n{\n  srcOffset: { x: 0, y: 0, z: 0 },\n  dstOffset: { x: 0, y: 0, z: 0 },\n  copyExtent: { width: 0, height: 0, depthOrArrayLayers: -3 }\n},\n// Copy 3 texture slices from the 2nd slice of the source texture to the 2nd slice of the\n// destination texture.\n{\n  srcOffset: { x: 0, y: 0, z: 1 },\n  dstOffset: { x: 0, y: 0, z: 1 },\n  copyExtent: { width: 0, height: 0, depthOrArrayLayers: -1 }\n}];\n\n\nexport const g = makeTestGroup(F);\n\ng.test('color_textures,non_compressed,non_array').\ndesc(\n  `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any\n  non-compressed color format supported by WebGPU, doing CopyTextureToTexture() copy, and verifying\n  the content of the whole dstTexture.\n\n  Copy {1 texel block, part of, the whole} srcTexture to the dstTexture {with, without} a non-zero\n  valid srcOffset that\n  - covers the whole dstTexture subresource\n  - covers the corners of the dstTexture\n  - doesn't cover any texels that are on the edge of the dstTexture\n  - covers the mipmap level > 0\n\n  Tests for all pairs of valid source/destination formats, and all texture dimensions.\n  `\n).\nparams((u) =>\nu.\ncombine('srcFormat', kRegularTextureFormats).\ncombine('dstFormat', kRegularTextureFormats).\nfilter(({ srcFormat, dstFormat }) => {\n  const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n  const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n  return (\n    srcFormat === dstFormat ||\n    srcBaseFormat !== undefined &&\n    dstBaseFormat !== undefined &&\n    srcBaseFormat === dstBaseFormat);\n\n}).\ncombine('dimension', kTextureDimensions).\nfilter(\n  ({ dimension, srcFormat, dstFormat }) =>\n  textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n  textureDimensionAndFormatCompatible(dimension, dstFormat)\n).\nbeginSubcases().\nexpandWithParams((p) => {\n  const params = [\n  {\n    srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n    dstTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 }\n  },\n  {\n    srcTextureSize: { width: 31, height: 33, depthOrArrayLayers: 1 },\n    dstTextureSize: { width: 31, height: 33, depthOrArrayLayers: 1 }\n  },\n  {\n    srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n    dstTextureSize: { width: 64, height: 64, depthOrArrayLayers: 1 }\n  },\n  {\n    srcTextureSize: { width: 32, height: 32, depthOrArrayLayers: 1 },\n    dstTextureSize: { width: 63, height: 61, depthOrArrayLayers: 1 }\n  }];\n\n  if (p.dimension === '1d') {\n    for (const param of params) {\n      param.srcTextureSize.height = 1;\n      param.dstTextureSize.height = 1;\n    }\n  }\n\n  return params;\n}).\ncombine('copyBoxOffsets', kCopyBoxOffsetsForWholeDepth).\nunless(\n  (p) =>\n  p.dimension === '1d' && (\n  p.copyBoxOffsets.copyExtent.height !== 0 ||\n  p.copyBoxOffsets.srcOffset.y !== 0 ||\n  p.copyBoxOffsets.dstOffset.y !== 0)\n).\ncombine('srcCopyLevel', [0, 3]).\ncombine('dstCopyLevel', [0, 3]).\nunless((p) => p.dimension === '1d' && (p.srcCopyLevel !== 0 || p.dstCopyLevel !== 0))\n).\nfn((t) => {\n  const {\n    dimension,\n    srcTextureSize,\n    dstTextureSize,\n    srcFormat,\n    dstFormat,\n    copyBoxOffsets,\n    srcCopyLevel,\n    dstCopyLevel\n  } = t.params;\n\n  t.DoCopyTextureToTextureTest(\n    dimension,\n    srcTextureSize,\n    dstTextureSize,\n    srcFormat,\n    dstFormat,\n    copyBoxOffsets,\n    srcCopyLevel,\n    dstCopyLevel\n  );\n});\n\ng.test('color_textures,compressed,non_array').\ndesc(\n  `\n  Validate the correctness of the copy by filling the srcTexture with testable data and any\n  compressed color format supported by WebGPU, doing CopyTextureToTexture() copy, and verifying\n  the content of the whole dstTexture.\n\n  Tests for all pairs of valid source/destination formats, and all texture dimensions.\n  `\n).\nparams((u) =>\nu.\ncombine('srcFormat', kCompressedTextureFormats).\ncombine('dstFormat', kCompressedTextureFormats).\nfilter(({ srcFormat, dstFormat }) => {\n  const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n  const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n  return (\n    srcFormat === dstFormat ||\n    srcBaseFormat !== undefined &&\n    dstBaseFormat !== undefined &&\n    srcBaseFormat === dstBaseFormat);\n\n}).\ncombine('dimension', kTextureDimensions).\nfilter(\n  ({ dimension, srcFormat, dstFormat }) =>\n  textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n  textureDimensionAndFormatCompatible(dimension, dstFormat)\n).\nbeginSubcases().\ncombine('textureSizeInBlocks', [\n// The heights and widths in blocks are all power of 2\n{ src: { width: 16, height: 8 }, dst: { width: 16, height: 8 } },\n// The virtual width of the source texture at mipmap level 2 (15) is not a multiple of 4 blocks\n{ src: { width: 15, height: 8 }, dst: { width: 16, height: 8 } },\n// The virtual width of the destination texture at mipmap level 2 (15) is not a multiple\n// of 4 blocks\n{ src: { width: 16, height: 8 }, dst: { width: 15, height: 8 } },\n// The virtual height of the source texture at mipmap level 2 (13) is not a multiple of 4 blocks\n{ src: { width: 16, height: 13 }, dst: { width: 16, height: 8 } },\n// The virtual height of the destination texture at mipmap level 2 (13) is not a\n// multiple of 4 blocks\n{ src: { width: 16, height: 8 }, dst: { width: 16, height: 13 } },\n// None of the widths or heights in blocks are power of 2\n{ src: { width: 15, height: 13 }, dst: { width: 15, height: 13 } }]\n).\ncombine('copyBoxOffsets', kCopyBoxOffsetsForWholeDepth).\ncombine('srcCopyLevel', [0, 2]).\ncombine('dstCopyLevel', [0, 2])\n).\nbeforeAllSubcases((t) => {\n  const { srcFormat, dstFormat } = t.params;\n  t.skipIfCopyTextureToTextureNotSupportedForFormat(srcFormat, dstFormat);\n  t.selectDeviceOrSkipTestCase([\n  kTextureFormatInfo[srcFormat].feature,\n  kTextureFormatInfo[dstFormat].feature]\n  );\n}).\nfn((t) => {\n  const {\n    dimension,\n    textureSizeInBlocks,\n    srcFormat,\n    dstFormat,\n    copyBoxOffsets,\n    srcCopyLevel,\n    dstCopyLevel\n  } = t.params;\n  const srcBlockWidth = kTextureFormatInfo[srcFormat].blockWidth;\n  const srcBlockHeight = kTextureFormatInfo[srcFormat].blockHeight;\n  const dstBlockWidth = kTextureFormatInfo[dstFormat].blockWidth;\n  const dstBlockHeight = kTextureFormatInfo[dstFormat].blockHeight;\n\n  t.DoCopyTextureToTextureTest(\n    dimension,\n    {\n      width: textureSizeInBlocks.src.width * srcBlockWidth,\n      height: textureSizeInBlocks.src.height * srcBlockHeight,\n      depthOrArrayLayers: 1\n    },\n    {\n      width: textureSizeInBlocks.dst.width * dstBlockWidth,\n      height: textureSizeInBlocks.dst.height * dstBlockHeight,\n      depthOrArrayLayers: 1\n    },\n    srcFormat,\n    dstFormat,\n    copyBoxOffsets,\n    srcCopyLevel,\n    dstCopyLevel\n  );\n});\n\ng.test('color_textures,non_compressed,array').\ndesc(\n  `\n  Validate the correctness of the texture-to-texture copy on 2D array textures by filling the\n  srcTexture with testable data and any non-compressed color format supported by WebGPU, doing\n  CopyTextureToTexture() copy, and verifying the content of the whole dstTexture.\n  `\n).\nparams((u) =>\nu.\ncombine('srcFormat', kRegularTextureFormats).\ncombine('dstFormat', kRegularTextureFormats).\nfilter(({ srcFormat, dstFormat }) => {\n  const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n  const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n  return (\n    srcFormat === dstFormat ||\n    srcBaseFormat !== undefined &&\n    dstBaseFormat !== undefined &&\n    srcBaseFormat === dstBaseFormat);\n\n}).\ncombine('dimension', ['2d', '3d']).\nfilter(\n  ({ dimension, srcFormat, dstFormat }) =>\n  textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n  textureDimensionAndFormatCompatible(dimension, dstFormat)\n).\nbeginSubcases().\ncombine('textureSize', [\n{\n  srcTextureSize: { width: 64, height: 32, depthOrArrayLayers: 5 },\n  dstTextureSize: { width: 64, height: 32, depthOrArrayLayers: 5 }\n},\n{\n  srcTextureSize: { width: 31, height: 33, depthOrArrayLayers: 5 },\n  dstTextureSize: { width: 31, height: 33, depthOrArrayLayers: 5 }\n},\n{\n  srcTextureSize: { width: 31, height: 32, depthOrArrayLayers: 33 },\n  dstTextureSize: { width: 31, height: 32, depthOrArrayLayers: 33 }\n}]\n).\n\ncombine('copyBoxOffsets', kCopyBoxOffsetsFor2DArrayTextures).\ncombine('srcCopyLevel', [0, 3]).\ncombine('dstCopyLevel', [0, 3])\n).\nfn((t) => {\n  const {\n    dimension,\n    textureSize,\n    srcFormat,\n    dstFormat,\n    copyBoxOffsets,\n    srcCopyLevel,\n    dstCopyLevel\n  } = t.params;\n\n  t.DoCopyTextureToTextureTest(\n    dimension,\n    textureSize.srcTextureSize,\n    textureSize.dstTextureSize,\n    srcFormat,\n    dstFormat,\n    copyBoxOffsets,\n    srcCopyLevel,\n    dstCopyLevel\n  );\n});\n\ng.test('color_textures,compressed,array').\ndesc(\n  `\n  Validate the correctness of the texture-to-texture copy on 2D array textures by filling the\n  srcTexture with testable data and any compressed color format supported by WebGPU, doing\n  CopyTextureToTexture() copy, and verifying the content of the whole dstTexture.\n\n  Tests for all pairs of valid source/destination formats, and all texture dimensions.\n  `\n).\nparams((u) =>\nu.\ncombine('srcFormat', kCompressedTextureFormats).\ncombine('dstFormat', kCompressedTextureFormats).\nfilter(({ srcFormat, dstFormat }) => {\n  const srcBaseFormat = kTextureFormatInfo[srcFormat].baseFormat;\n  const dstBaseFormat = kTextureFormatInfo[dstFormat].baseFormat;\n  return (\n    srcFormat === dstFormat ||\n    srcBaseFormat !== undefined &&\n    dstBaseFormat !== undefined &&\n    srcBaseFormat === dstBaseFormat);\n\n}).\ncombine('dimension', ['2d', '3d']).\nfilter(\n  ({ dimension, srcFormat, dstFormat }) =>\n  textureDimensionAndFormatCompatible(dimension, srcFormat) &&\n  textureDimensionAndFormatCompatible(dimension, dstFormat)\n).\nbeginSubcases().\ncombine('textureSizeInBlocks', [\n// The heights and widths in blocks are all power of 2\n{ src: { width: 2, height: 2 }, dst: { width: 2, height: 2 } },\n// None of the widths or heights in blocks are power of 2\n{ src: { width: 15, height: 13 }, dst: { width: 15, height: 13 } }]\n).\ncombine('copyBoxOffsets', kCopyBoxOffsetsFor2DArrayTextures).\ncombine('srcCopyLevel', [0, 2]).\ncombine('dstCopyLevel', [0, 2])\n).\nbeforeAllSubcases((t) => {\n  const { srcFormat, dstFormat } = t.params;\n  t.skipIfCopyTextureToTextureNotSupportedForFormat(srcFormat, dstFormat);\n  t.selectDeviceOrSkipTestCase([\n  kTextureFormatInfo[srcFormat].feature,\n  kTextureFormatInfo[dstFormat].feature]\n  );\n}).\nfn((t) => {\n  const {\n    dimension,\n    textureSizeInBlocks,\n    srcFormat,\n    dstFormat,\n    copyBoxOffsets,\n    srcCopyLevel,\n    dstCopyLevel\n  } = t.params;\n  const srcBlockWidth = kTextureFormatInfo[srcFormat].blockWidth;\n  const srcBlockHeight = kTextureFormatInfo[srcFormat].blockHeight;\n  const dstBlockWidth = kTextureFormatInfo[dstFormat].blockWidth;\n  const dstBlockHeight = kTextureFormatInfo[dstFormat].blockHeight;\n\n  t.DoCopyTextureToTextureTest(\n    dimension,\n    {\n      width: textureSizeInBlocks.src.width * srcBlockWidth,\n      height: textureSizeInBlocks.src.height * srcBlockHeight,\n      depthOrArrayLayers: 5\n    },\n    {\n      width: textureSizeInBlocks.dst.width * dstBlockWidth,\n      height: textureSizeInBlocks.dst.height * dstBlockHeight,\n      depthOrArrayLayers: 5\n    },\n    srcFormat,\n    dstFormat,\n    copyBoxOffsets,\n    srcCopyLevel,\n    dstCopyLevel\n  );\n});\n\ng.test('zero_sized').\ndesc(\n  `\n  Validate the correctness of zero-sized copies (should be no-ops).\n\n  - For each texture dimension.\n  - Copies that are zero-sized in only one dimension {x, y, z}, each touching the {lower, upper} end\n  of that dimension.\n  `\n).\nparamsSubcasesOnly((u) =>\nu //\n.combineWithParams([\n{ dimension: '1d', textureSize: { width: 32, height: 1, depthOrArrayLayers: 1 } },\n{ dimension: '2d', textureSize: { width: 32, height: 32, depthOrArrayLayers: 5 } },\n{ dimension: '3d', textureSize: { width: 32, height: 32, depthOrArrayLayers: 5 } }]\n).\ncombine('copyBoxOffset', [\n// copyExtent.width === 0\n{\n  srcOffset: { x: 0, y: 0, z: 0 },\n  dstOffset: { x: 0, y: 0, z: 0 },\n  copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 }\n},\n// copyExtent.width === 0 && srcOffset.x === textureWidth\n{\n  srcOffset: { x: 64, y: 0, z: 0 },\n  dstOffset: { x: 0, y: 0, z: 0 },\n  copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 }\n},\n// copyExtent.width === 0 && dstOffset.x === textureWidth\n{\n  srcOffset: { x: 0, y: 0, z: 0 },\n  dstOffset: { x: 64, y: 0, z: 0 },\n  copyExtent: { width: -64, height: 0, depthOrArrayLayers: 0 }\n},\n// copyExtent.height === 0\n{\n  srcOffset: { x: 0, y: 0, z: 0 },\n  dstOffset: { x: 0, y: 0, z: 0 },\n  copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 }\n},\n// copyExtent.height === 0 && srcOffset.y === textureHeight\n{\n  srcOffset: { x: 0, y: 32, z: 0 },\n  dstOffset: { x: 0, y: 0, z: 0 },\n  copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 }\n},\n// copyExtent.height === 0 && dstOffset.y === textureHeight\n{\n  srcOffset: { x: 0, y: 0, z: 0 },\n  dstOffset: { x: 0, y: 32, z: 0 },\n  copyExtent: { width: 0, height: -32, depthOrArrayLayers: 0 }\n},\n// copyExtent.depthOrArrayLayers === 0\n{\n  srcOffset: { x: 0, y: 0, z: 0 },\n  dstOffset: { x: 0, y: 0, z: 0 },\n  copyExtent: { width: 0, height: 0, depthOrArrayLayers: -5 }\n},\n// copyExtent.depthOrArrayLayers === 0 && srcOffset.z === textureDepth\n{\n  srcOffset: { x: 0, y: 0, z: 5 },\n  dstOffset: { x: 0, y: 0, z: 0 },\n  copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 }\n},\n// copyExtent.depthOrArrayLayers === 0 && dstOffset.z === textureDepth\n{\n  srcOffset: { x: 0, y: 0, z: 0 },\n  dstOffset: { x: 0, y: 0, z: 5 },\n  copyExtent: { width: 0, height: 0, depthOrArrayLayers: 0 }\n}]\n).\nunless(\n  (p) =>\n  p.dimension === '1d' && (\n  p.copyBoxOffset.copyExtent.height !== 0 ||\n  p.copyBoxOffset.srcOffset.y !== 0 ||\n  p.copyBoxOffset.dstOffset.y !== 0)\n).\ncombine('srcCopyLevel', [0, 3]).\ncombine('dstCopyLevel', [0, 3]).\nunless((p) => p.dimension === '1d' && (p.srcCopyLevel !== 0 || p.dstCopyLevel !== 0))\n).\nfn((t) => {\n  const { dimension, textureSize, copyBoxOffset, srcCopyLevel, dstCopyLevel } = t.params;\n\n  const srcFormat = 'rgba8unorm';\n  const dstFormat = 'rgba8unorm';\n\n  t.DoCopyTextureToTextureTest(\n    dimension,\n    textureSize,\n    textureSize,\n    srcFormat,\n    dstFormat,\n    copyBoxOffset,\n    srcCopyLevel,\n    dstCopyLevel\n  );\n});\n\ng.test('copy_depth_stencil').\ndesc(\n  `\n  Validate the correctness of copyTextureToTexture() with depth and stencil aspect.\n\n  For all the texture formats with stencil aspect:\n  - Initialize the stencil aspect of the source texture with writeTexture().\n  - Copy the stencil aspect from the source texture into the destination texture\n  - Copy the stencil aspect of the destination texture into another staging buffer and check its\n    content\n  - Test the copies from / into zero / non-zero array layer / mipmap levels\n  - Test copying multiple array layers\n\n  For all the texture formats with depth aspect:\n  - Initialize the depth aspect of the source texture with a draw call\n  - Copy the depth aspect from the source texture into the destination texture\n  - Validate the content in the destination texture with the depth comparison function 'equal'\n  `\n).\nparams((u) =>\nu.\ncombine('format', kDepthStencilFormats).\nbeginSubcases().\ncombine('srcTextureSize', [\n{ width: 32, height: 16, depthOrArrayLayers: 1 },\n{ width: 32, height: 16, depthOrArrayLayers: 4 },\n{ width: 24, height: 48, depthOrArrayLayers: 5 }]\n).\ncombine('srcCopyLevel', [0, 2]).\ncombine('dstCopyLevel', [0, 2]).\ncombine('srcCopyBaseArrayLayer', [0, 1]).\ncombine('dstCopyBaseArrayLayer', [0, 1]).\nfilter((t) => {\n  return (\n    t.srcTextureSize.depthOrArrayLayers > t.srcCopyBaseArrayLayer &&\n    t.srcTextureSize.depthOrArrayLayers > t.dstCopyBaseArrayLayer);\n\n})\n).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  t.selectDeviceForTextureFormatOrSkipTestCase(format);\n}).\nfn((t) => {\n  const {\n    format,\n    srcTextureSize,\n    srcCopyLevel,\n    dstCopyLevel,\n    srcCopyBaseArrayLayer,\n    dstCopyBaseArrayLayer\n  } = t.params;\n\n  const copySize = [\n  srcTextureSize.width >> srcCopyLevel,\n  srcTextureSize.height >> srcCopyLevel,\n  srcTextureSize.depthOrArrayLayers - Math.max(srcCopyBaseArrayLayer, dstCopyBaseArrayLayer)];\n\n  const sourceTexture = t.createTextureTracked({\n    format,\n    size: srcTextureSize,\n    usage:\n    GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n    mipLevelCount: srcCopyLevel + 1\n  });\n  const destinationTexture = t.createTextureTracked({\n    format,\n    size: [\n    copySize[0] << dstCopyLevel,\n    copySize[1] << dstCopyLevel,\n    srcTextureSize.depthOrArrayLayers],\n\n    usage:\n    GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n    mipLevelCount: dstCopyLevel + 1\n  });\n\n  let initialStencilData = undefined;\n  if (kTextureFormatInfo[format].stencil) {\n    initialStencilData = t.GetInitialStencilDataPerMipLevel(srcTextureSize, format, srcCopyLevel);\n    t.InitializeStencilAspect(\n      sourceTexture,\n      initialStencilData,\n      srcCopyLevel,\n      srcCopyBaseArrayLayer,\n      copySize\n    );\n  }\n  if (kTextureFormatInfo[format].depth) {\n    t.InitializeDepthAspect(sourceTexture, format, srcCopyLevel, srcCopyBaseArrayLayer, copySize);\n  }\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  encoder.copyTextureToTexture(\n    {\n      texture: sourceTexture,\n      mipLevel: srcCopyLevel,\n      origin: { x: 0, y: 0, z: srcCopyBaseArrayLayer }\n    },\n    {\n      texture: destinationTexture,\n      mipLevel: dstCopyLevel,\n      origin: { x: 0, y: 0, z: dstCopyBaseArrayLayer }\n    },\n    copySize\n  );\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  if (kTextureFormatInfo[format].stencil) {\n    assert(initialStencilData !== undefined);\n    t.VerifyStencilAspect(\n      destinationTexture,\n      initialStencilData,\n      dstCopyLevel,\n      dstCopyBaseArrayLayer,\n      copySize\n    );\n  }\n  if (kTextureFormatInfo[format].depth) {\n    t.VerifyDepthAspect(\n      destinationTexture,\n      format,\n      dstCopyLevel,\n      dstCopyBaseArrayLayer,\n      copySize\n    );\n  }\n});\n\ng.test('copy_multisampled_color').\ndesc(\n  `\n  Validate the correctness of copyTextureToTexture() with multisampled color formats.\n\n  - Initialize the source texture with a triangle in a render pass.\n  - Copy from the source texture into the destination texture with CopyTextureToTexture().\n  - Compare every sub-pixel of source texture and destination texture in another render pass:\n    - If they are different, then output RED; otherwise output GREEN\n  - Verify the pixels in the output texture are all GREEN.\n  - Note that in current WebGPU SPEC the mipmap level count and array layer count of a multisampled\n    texture can only be 1.\n  `\n).\nbeforeAllSubcases((t) => {\n  t.skipIf(t.isCompatibility, 'multisample textures are not copyable in compatibility mode');\n}).\nfn((t) => {\n  const textureSize = [32, 16, 1];\n  const kColorFormat = 'rgba8unorm';\n  const kSampleCount = 4;\n\n  const sourceTexture = t.createTextureTracked({\n    format: kColorFormat,\n    size: textureSize,\n    usage:\n    GPUTextureUsage.COPY_SRC |\n    GPUTextureUsage.TEXTURE_BINDING |\n    GPUTextureUsage.RENDER_ATTACHMENT,\n    sampleCount: kSampleCount\n  });\n  const destinationTexture = t.createTextureTracked({\n    format: kColorFormat,\n    size: textureSize,\n    usage:\n    GPUTextureUsage.COPY_DST |\n    GPUTextureUsage.TEXTURE_BINDING |\n    GPUTextureUsage.RENDER_ATTACHMENT,\n    sampleCount: kSampleCount\n  });\n\n  // Initialize sourceTexture with a draw call.\n  const renderPipelineForInit = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: t.device.createShaderModule({\n        code: `\n            @vertex\n            fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n              var pos = array<vec2<f32>, 3>(\n                  vec2<f32>(-1.0,  1.0),\n                  vec2<f32>( 1.0,  1.0),\n                  vec2<f32>( 1.0, -1.0)\n              );\n              return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n            }`\n      }),\n      entryPoint: 'main'\n    },\n    fragment: {\n      module: t.device.createShaderModule({\n        code: `\n            @fragment\n            fn main() -> @location(0) vec4<f32> {\n              return vec4<f32>(0.3, 0.5, 0.8, 1.0);\n            }`\n      }),\n      entryPoint: 'main',\n      targets: [{ format: kColorFormat }]\n    },\n    multisample: {\n      count: kSampleCount\n    }\n  });\n  const initEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const renderPassForInit = initEncoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: sourceTexture.createView(),\n      clearValue: [1.0, 0.0, 0.0, 1.0],\n      loadOp: 'clear',\n      storeOp: 'store'\n    }]\n\n  });\n  renderPassForInit.setPipeline(renderPipelineForInit);\n  renderPassForInit.draw(3);\n  renderPassForInit.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[initEncoder.finish()]], () => t.queue.submit([initEncoder.finish()]));\n\n  // Do the texture-to-texture copy\n  const copyEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  copyEncoder.copyTextureToTexture(\n    {\n      texture: sourceTexture\n    },\n    {\n      texture: destinationTexture\n    },\n    textureSize\n  );\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[copyEncoder.finish()]], () => t.queue.submit([copyEncoder.finish()]));\n\n  // Verify if all the sub-pixel values at the same location of sourceTexture and\n  // destinationTexture are equal.\n  const renderPipelineForValidation = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: t.device.createShaderModule({\n        code: `\n          @vertex\n          fn main(@builtin(vertex_index) VertexIndex : u32) -> @builtin(position) vec4<f32> {\n            var pos = array<vec2<f32>, 6>(\n              vec2<f32>(-1.0,  1.0),\n              vec2<f32>(-1.0, -1.0),\n              vec2<f32>( 1.0,  1.0),\n              vec2<f32>(-1.0, -1.0),\n              vec2<f32>( 1.0,  1.0),\n              vec2<f32>( 1.0, -1.0));\n            return vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n          }`\n      }),\n      entryPoint: 'main'\n    },\n    fragment: {\n      module: t.device.createShaderModule({\n        code: `\n          @group(0) @binding(0) var sourceTexture : texture_multisampled_2d<f32>;\n          @group(0) @binding(1) var destinationTexture : texture_multisampled_2d<f32>;\n          @fragment\n          fn main(@builtin(position) coord_in: vec4<f32>) -> @location(0) vec4<f32> {\n            var coord_in_vec2 = vec2<i32>(i32(coord_in.x), i32(coord_in.y));\n            for (var sampleIndex = 0; sampleIndex < ${kSampleCount};\n              sampleIndex = sampleIndex + 1) {\n              var sourceSubPixel : vec4<f32> =\n                textureLoad(sourceTexture, coord_in_vec2, sampleIndex);\n              var destinationSubPixel : vec4<f32> =\n                textureLoad(destinationTexture, coord_in_vec2, sampleIndex);\n              if (!all(sourceSubPixel == destinationSubPixel)) {\n                return vec4<f32>(1.0, 0.0, 0.0, 1.0);\n              }\n            }\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n          }`\n      }),\n      entryPoint: 'main',\n      targets: [{ format: kColorFormat }]\n    }\n  });\n  const bindGroup = t.device.createBindGroup({\n    layout: renderPipelineForValidation.getBindGroupLayout(0),\n    entries: [\n    {\n      binding: 0,\n      resource: sourceTexture.createView()\n    },\n    {\n      binding: 1,\n      resource: destinationTexture.createView()\n    }]\n\n  });\n  const expectedOutputTexture = t.createTextureTracked({\n    format: kColorFormat,\n    size: textureSize,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n  });\n  const validationEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const renderPassForValidation = validationEncoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: expectedOutputTexture.createView(),\n      clearValue: [1.0, 0.0, 0.0, 1.0],\n      loadOp: 'clear',\n      storeOp: 'store'\n    }]\n\n  });\n  renderPassForValidation.setPipeline(renderPipelineForValidation);\n  renderPassForValidation.setBindGroup(0, bindGroup);\n  renderPassForValidation.draw(6);\n  renderPassForValidation.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[validationEncoder.finish()]], () => t.queue.submit([validationEncoder.finish()]));\n\n  t.expectSingleColor(expectedOutputTexture, 'rgba8unorm', {\n    size: [textureSize[0], textureSize[1], textureSize[2]],\n    exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 }\n  });\n});\n\ng.test('copy_multisampled_depth').\ndesc(\n  `\n  Validate the correctness of copyTextureToTexture() with multisampled depth formats.\n\n  - Initialize the source texture with a triangle in a render pass.\n  - Copy from the source texture into the destination texture with CopyTextureToTexture().\n  - Validate the content in the destination texture with the depth comparison function 'equal'.\n  - Note that in current WebGPU SPEC the mipmap level count and array layer count of a multisampled\n    texture can only be 1.\n  `\n).\nbeforeAllSubcases((t) => {\n  t.skipIf(t.isCompatibility, 'multisample textures are not copyable in compatibility mode');\n}).\nfn((t) => {\n  const textureSize = [32, 16, 1];\n  const kDepthFormat = 'depth24plus';\n  const kSampleCount = 4;\n\n  const sourceTexture = t.createTextureTracked({\n    format: kDepthFormat,\n    size: textureSize,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    sampleCount: kSampleCount\n  });\n  const destinationTexture = t.createTextureTracked({\n    format: kDepthFormat,\n    size: textureSize,\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT,\n    sampleCount: kSampleCount\n  });\n\n  const vertexState = {\n    module: t.device.createShaderModule({\n      code: `\n          @vertex\n          fn main(@builtin(vertex_index) VertexIndex : u32)-> @builtin(position) vec4<f32> {\n            var pos : array<vec3<f32>, 6> = array<vec3<f32>, 6>(\n                vec3<f32>(-1.0,  1.0, 0.5),\n                vec3<f32>(-1.0, -1.0, 0.0),\n                vec3<f32>( 1.0,  1.0, 1.0),\n                vec3<f32>(-1.0, -1.0, 0.0),\n                vec3<f32>( 1.0,  1.0, 1.0),\n                vec3<f32>( 1.0, -1.0, 0.5));\n            return vec4<f32>(pos[VertexIndex], 1.0);\n          }`\n    }),\n    entryPoint: 'main'\n  };\n\n  // Initialize the depth aspect of source texture with a draw call\n  const renderPipelineForInit = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: vertexState,\n    depthStencil: {\n      format: kDepthFormat,\n      depthCompare: 'always',\n      depthWriteEnabled: true\n    },\n    multisample: {\n      count: kSampleCount\n    }\n  });\n\n  const encoderForInit = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const renderPassForInit = encoderForInit.beginRenderPass({\n    colorAttachments: [],\n    depthStencilAttachment: {\n      view: sourceTexture.createView(),\n      depthClearValue: 0.0,\n      depthLoadOp: 'clear',\n      depthStoreOp: 'store'\n    }\n  });\n  renderPassForInit.setPipeline(renderPipelineForInit);\n  renderPassForInit.draw(6);\n  renderPassForInit.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoderForInit.finish()]], () => t.queue.submit([encoderForInit.finish()]));\n\n  // Do the texture-to-texture copy\n  const copyEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  copyEncoder.copyTextureToTexture(\n    {\n      texture: sourceTexture\n    },\n    {\n      texture: destinationTexture\n    },\n    textureSize\n  );\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[copyEncoder.finish()]], () => t.queue.submit([copyEncoder.finish()]));\n\n  // Verify the depth values in destinationTexture are what we expected with\n  // depthCompareFunction == 'equal' and depthWriteEnabled == false in the render pipeline\n  const kColorFormat = 'rgba8unorm';\n  const renderPipelineForVerify = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: vertexState,\n    fragment: {\n      module: t.device.createShaderModule({\n        code: `\n          @fragment\n          fn main() -> @location(0) vec4<f32> {\n            return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n          }`\n      }),\n      entryPoint: 'main',\n      targets: [{ format: kColorFormat }]\n    },\n    depthStencil: {\n      format: kDepthFormat,\n      depthCompare: 'equal',\n      depthWriteEnabled: false\n    },\n    multisample: {\n      count: kSampleCount\n    }\n  });\n  const multisampledColorTexture = t.createTextureTracked({\n    format: kColorFormat,\n    size: textureSize,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT,\n    sampleCount: kSampleCount\n  });\n  const colorTextureAsResolveTarget = t.createTextureTracked({\n    format: kColorFormat,\n    size: textureSize,\n    usage: GPUTextureUsage.COPY_SRC | GPUTextureUsage.RENDER_ATTACHMENT\n  });\n\n  const encoderForVerify = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const renderPassForVerify = encoderForVerify.beginRenderPass({\n    colorAttachments: [\n    {\n      view: multisampledColorTexture.createView(),\n      clearValue: { r: 1.0, g: 0.0, b: 0.0, a: 1.0 },\n      loadOp: 'clear',\n      storeOp: 'discard',\n      resolveTarget: colorTextureAsResolveTarget.createView()\n    }],\n\n    depthStencilAttachment: {\n      view: destinationTexture.createView(),\n      depthLoadOp: 'load',\n      depthStoreOp: 'store'\n    }\n  });\n  renderPassForVerify.setPipeline(renderPipelineForVerify);\n  renderPassForVerify.draw(6);\n  renderPassForVerify.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoderForVerify.finish()]], () => t.queue.submit([encoderForVerify.finish()]));\n\n  t.expectSingleColor(colorTextureAsResolveTarget, kColorFormat, {\n    size: [textureSize[0], textureSize[1], textureSize[2]],\n    exp: { R: 0.0, G: 1.0, B: 0.0, A: 1.0 }\n  });\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG,sCAAsC,CAAC,SAASC,aAAa,QAAQ,4CAA4C,CAC/I,SAASC,MAAM,EAAEC,cAAc,EAAEC,MAAM,QAAQ,iCAAiC,CAChF;EACEC,oBAAoB;EACpBC,gCAAgC;EAChCC,kBAAkB;AACpB,6BAA6B;AAC7B;EACEC,kBAAkB;EAClBC,sBAAsB;EACtBC,yBAAyB;EACzBC,oBAAoB;EACpBC,mCAAmC;EACnCC,4BAA4B;;;EAG5BC,yBAAyB;EACzBC,cAAc;;EAEdC,sBAAsB;AACxB,yBAAyB;AACzB,SAASC,OAAO,EAAEC,gBAAgB,QAAQ,sBAAsB;AAChE,SAASC,kBAAkB,QAAQ,iCAAiC;AACpE,SAASC,KAAK,QAAQ,uBAAuB;AAC7C,SAASC,eAAe,QAAQ,+BAA+B;AAC/D,SAASC,kBAAkB,QAAQ,0CAA0C;AAC7E,SAASC,qBAAqB,EAAEC,sBAAsB,QAAQ,iCAAiC;AAC/F,SAASC,SAAS,QAAQ,qCAAqC;AAC/D,SAASC,gBAAgB,QAAQ,qCAAqC;;AAEtE,MAAMC,aAAa,GAAG,IAAIL,kBAAkB,CAAC,CAAC;;AAE9C,MAAMM,CAAC,SAASV,gBAAgB,CAACD,OAAO,CAAC,CAAC;EACxCY,yBAAyBA;EACzBC,SAAS;EACTC,WAAW;EACXC,MAAM;EACNC,QAAQ;EACR;IACE,MAAMC,kBAAkB,GAAGb,eAAe,CAACU,WAAW,EAAEC,MAAM,EAAEF,SAAS,EAAEG,QAAQ,CAAC;IACpF,MAAME,aAAa,GAAG3B,kBAAkB,CAACwB,MAAM,CAAC,CAACI,KAAK,CAACC,KAAK;IAC5D,MAAMC,iBAAiB,GAAG9B,kBAAkB,CAACwB,MAAM,CAAC,CAACO,UAAU;IAC/D,MAAMC,kBAAkB,GAAGhC,kBAAkB,CAACwB,MAAM,CAAC,CAACS,WAAW;IACjE,MAAMC,oBAAoB;IAC1BR,kBAAkB,CAACS,KAAK,GAAGL,iBAAiB;IAC5CJ,kBAAkB,CAACU,MAAM,GAAGJ,kBAAkB,CAAC;;IAE/C,MAAMK,QAAQ,GAAGV,aAAa,GAAGO,oBAAoB,GAAGR,kBAAkB,CAACY,kBAAkB;IAC7F,OAAOnB,aAAa,CAACoB,YAAY,CAACF,QAAQ,CAAC;EAC7C;;EAEAG,gCAAgCA;EAChCjB,WAAW;EACXC,MAAM;EACNC,QAAQ;EACR;IACE,MAAMC,kBAAkB,GAAGb,eAAe,CAACU,WAAW,EAAEC,MAAM,EAAE,IAAI,EAAEC,QAAQ,CAAC;IAC/E,MAAMgB,mBAAmB,GAAGpC,4BAA4B,CAACmB,MAAM,EAAE,cAAc,CAAC;IAChF,MAAMa,QAAQ;IACdI,mBAAmB;IACnBf,kBAAkB,CAACS,KAAK;IACxBT,kBAAkB,CAACU,MAAM;IACzBV,kBAAkB,CAACY,kBAAkB;IACrC,OAAOnB,aAAa,CAACoB,YAAY,CAACF,QAAQ,CAAC;EAC7C;;EAEAK,0BAA0BA;EAC1BpB,SAAS;EACTqB,cAAc;EACdC,cAAc;EACdC,SAAS;EACTC,SAAS;EACTC,cAAc;;;;;EAKdC,YAAY;EACZC,YAAY;EACZ;IACE,IAAI,CAACC,+BAA+B,CAACL,SAAS,EAAEC,SAAS,CAAC;;IAE1D;IACA;IACA,MAAMK,sBAAsB;IAC5B7C,yBAAyB,CAACwC,SAAS,CAAC,IAAI,IAAI,CAACM,eAAe;IAC5DC,eAAe,CAACC,eAAe;IAC/B,CAAC;IACD,MAAMC,aAAa,GAAGjC,SAAS,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC;;IAEhD;IACA,MAAMkC,cAAc,GAAG;MACrBlC,SAAS;MACTmC,IAAI,EAAEd,cAAc;MACpBnB,MAAM,EAAEqB,SAAS;MACjBa,KAAK,EAAEL,eAAe,CAACM,QAAQ,GAAGN,eAAe,CAACO,QAAQ;MAC1DL;IACF,CAAC;IACD,MAAMM,UAAU,GAAG,IAAI,CAACC,oBAAoB,CAACN,cAAc,CAAC;IAC5D,MAAMO,cAAc,GAAG;MACrBzC,SAAS;MACTmC,IAAI,EAAEb,cAAc;MACpBpB,MAAM,EAAEsB,SAAS;MACjBY,KAAK,EAAEL,eAAe,CAACM,QAAQ,GAAGN,eAAe,CAACO,QAAQ,GAAGT,sBAAsB;MACnFI;IACF,CAAC;IACD,MAAMS,UAAU,GAAG,IAAI,CAACF,oBAAoB,CAACC,cAAc,CAAC;;IAE5D;IACA,MAAME,cAAc,GAAG,IAAI,CAAC5C,yBAAyB;MACnDC,SAAS;MACTqB,cAAc;MACdE,SAAS;MACTG;IACF,CAAC;IACD,MAAMkB,qBAAqB,GAAGrD,eAAe;MAC3C8B,cAAc;MACdE,SAAS;MACTvB,SAAS;MACT0B;IACF,CAAC;IACD,MAAMrB,aAAa,GAAG3B,kBAAkB,CAAC6C,SAAS,CAAC,CAACjB,KAAK,CAACC,KAAK;IAC/D,MAAME,UAAU,GAAG/B,kBAAkB,CAAC6C,SAAS,CAAC,CAACd,UAAU;IAC3D,MAAME,WAAW,GAAGjC,kBAAkB,CAAC6C,SAAS,CAAC,CAACZ,WAAW;IAC7D,MAAMkC,eAAe,GAAGD,qBAAqB,CAAC/B,KAAK,GAAGJ,UAAU;IAChE,MAAMqC,oBAAoB,GAAGF,qBAAqB,CAAC9B,MAAM,GAAGH,WAAW;IACvE,IAAI,CAACoC,MAAM,CAACC,KAAK,CAACC,YAAY;MAC5B,EAAEC,OAAO,EAAEX,UAAU,EAAEpC,QAAQ,EAAEuB,YAAY,CAAC,CAAC;MAC/CiB,cAAc;MACd;QACEQ,WAAW,EAAEN,eAAe,GAAGxC,aAAa;QAC5C+C,YAAY,EAAEN;MAChB,CAAC;MACDF;IACF,CAAC;;IAED;IACA,MAAMS,qBAAqB,GAAG9D,eAAe;MAC3C+B,cAAc;MACdE,SAAS;MACTxB,SAAS;MACT2B;IACF,CAAC;IACD,MAAM2B,QAAQ,GAAGC,IAAI,CAACC,GAAG,CAACZ,qBAAqB,CAAC/B,KAAK,EAAEwC,qBAAqB,CAACxC,KAAK,CAAC;IACnF,MAAM4C,SAAS,GAAGF,IAAI,CAACC,GAAG,CAACZ,qBAAqB,CAAC9B,MAAM,EAAEuC,qBAAqB,CAACvC,MAAM,CAAC;IACtF,MAAM4C,QAAQ,GAAGH,IAAI,CAACC,GAAG;MACvBZ,qBAAqB,CAAC5B,kBAAkB;MACxCqC,qBAAqB,CAACrC;IACxB,CAAC;;IAED,MAAM2C,gBAAgB,GAAG;MACvBC,CAAC,EAAEL,IAAI,CAACC,GAAG,CAAC/B,cAAc,CAACoC,SAAS,CAACD,CAAC,GAAGnD,UAAU,EAAE6C,QAAQ,CAAC;MAC9DQ,CAAC,EAAEP,IAAI,CAACC,GAAG,CAAC/B,cAAc,CAACoC,SAAS,CAACC,CAAC,GAAGnD,WAAW,EAAE8C,SAAS,CAAC;MAChEM,CAAC,EAAER,IAAI,CAACC,GAAG,CAAC/B,cAAc,CAACoC,SAAS,CAACE,CAAC,EAAEL,QAAQ;IAClD,CAAC;IACD,MAAMM,gBAAgB,GAAG;MACvBJ,CAAC,EAAEL,IAAI,CAACC,GAAG,CAAC/B,cAAc,CAACwC,SAAS,CAACL,CAAC,GAAGnD,UAAU,EAAE6C,QAAQ,CAAC;MAC9DQ,CAAC,EAAEP,IAAI,CAACC,GAAG,CAAC/B,cAAc,CAACwC,SAAS,CAACH,CAAC,GAAGnD,WAAW,EAAE8C,SAAS,CAAC;MAChEM,CAAC,EAAER,IAAI,CAACC,GAAG,CAAC/B,cAAc,CAACwC,SAAS,CAACF,CAAC,EAAEL,QAAQ;IAClD,CAAC;;IAED,MAAMQ,gBAAgB,GAAGX,IAAI,CAACY,GAAG;MAC/Bb,QAAQ;MACR7B,cAAc,CAAC2C,UAAU,CAACvD,KAAK,GAAGJ,UAAU;MAC5C8C,IAAI,CAACY,GAAG,CAACR,gBAAgB,CAACC,CAAC,EAAEI,gBAAgB,CAACJ,CAAC,CAAC;MAChD;IACF,CAAC;IACD,MAAMS,iBAAiB,GAAGd,IAAI,CAACY,GAAG;MAChCV,SAAS;MACThC,cAAc,CAAC2C,UAAU,CAACtD,MAAM,GAAGH,WAAW;MAC9C4C,IAAI,CAACY,GAAG,CAACR,gBAAgB,CAACG,CAAC,EAAEE,gBAAgB,CAACF,CAAC,CAAC;MAChD;IACF,CAAC;IACD1F,MAAM,CAAC8F,gBAAgB,GAAGzD,UAAU,KAAK,CAAC,IAAI4D,iBAAiB,GAAG1D,WAAW,KAAK,CAAC,CAAC;;IAEpF,MAAM2D,gBAAgB,GAAGf,IAAI,CAACY,GAAG;MAC/B,CAAC;MACDT,QAAQ;MACRjC,cAAc,CAAC2C,UAAU,CAACpD,kBAAkB;MAC5CuC,IAAI,CAACY,GAAG,CAACR,gBAAgB,CAACI,CAAC,EAAEC,gBAAgB,CAACD,CAAC;IACjD,CAAC;IACD3F,MAAM,CAACkG,gBAAgB,IAAI,CAAC,CAAC;;IAE7B,MAAMC,WAAW,GAAG;MAClB1D,KAAK,EAAEqD,gBAAgB;MACvBpD,MAAM,EAAEuD,iBAAiB;MACzBrD,kBAAkB,EAAEsD;IACtB,CAAC;;IAED;MACE,MAAME,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAE,IAAI,CAAC3B,MAAM,EAAE,IAAI,CAACA,MAAM,CAAC4B,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAM,IAAI,CAAC3B,MAAM,EAAX,IAAI,CAACA,MAAM,CAAA4B,oBAAA,YAAX,IAAI,CAAC5B,MAAM,CAAC4B,oBAAoB,GAAE,CAAC;MAC5JH,OAAO,CAACI,oBAAoB;QAC1B,EAAE1B,OAAO,EAAEX,UAAU,EAAEpC,QAAQ,EAAEuB,YAAY,EAAEmD,MAAM,EAAElB,gBAAgB,CAAC,CAAC;QACzE,EAAET,OAAO,EAAER,UAAU,EAAEvC,QAAQ,EAAEwB,YAAY,EAAEkD,MAAM,EAAEb,gBAAgB,CAAC,CAAC;QACzEO;MACF,CAAC;MACDE,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC3B,MAAM,EAAE,IAAI,CAACA,MAAM,CAACC,KAAK,CAAC8B,MAAM,EAAE,CAAC,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAAN,UAAA,CAAAC,YAAA,WAAM,IAAI,CAAC3B,MAAM,EAAX,IAAI,CAACA,MAAM,CAACC,KAAK,CAAA8B,MAAA,GAAQ,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,SAA3C,IAAI,CAAChC,MAAM,CAACC,KAAK,CAAC8B,MAAM,CAAC,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;IACpJ;;IAEA,MAAMC,eAAe,GAAG3B,qBAAqB,CAACxC,KAAK,GAAGJ,UAAU;IAChE,MAAMwE,oBAAoB,GAAG5B,qBAAqB,CAACvC,MAAM,GAAGH,WAAW;IACvE,MAAMuE,0BAA0B,GAAG5F,KAAK,CAAC0F,eAAe,GAAG3E,aAAa,EAAE,GAAG,CAAC;IAC9E,MAAM8E,aAAa;IACnB,CAACF,oBAAoB,GAAG5B,qBAAqB,CAACrC,kBAAkB,GAAG,CAAC;IACpEkE,0BAA0B;IAC1B5F,KAAK,CAAC0F,eAAe,GAAG3E,aAAa,EAAE,CAAC,CAAC;;IAEzC,IAAIrB,yBAAyB,CAAC0D,UAAU,CAACxC,MAAM,CAAC,IAAI,IAAI,CAAC4B,eAAe,EAAE;MACxE1D,MAAM,CAACa,cAAc,CAAC,IAAI,CAAC6C,eAAe,EAAEP,SAAS,EAAEC,SAAS,CAAC,CAAC;MAClE;MACA;MACA;MACA,MAAM4D,eAAe,GAAG,IAAI,CAAC5C,oBAAoB,CAAC;QAChDL,IAAI,EAAE,CAACO,UAAU,CAAC7B,KAAK,EAAE6B,UAAU,CAAC5B,MAAM,EAAE4B,UAAU,CAAC1B,kBAAkB,CAAC;QAC1EiB,aAAa,EAAES,UAAU,CAACT,aAAa;QACvC/B,MAAM,EAAEwC,UAAU,CAACxC,MAAM;QACzBkC,KAAK,EAAEM,UAAU,CAACN;MACpB,CAAC,CAAC;MACF,MAAMiD,YAAY,GAAG,IAAIC,UAAU,CAACH,aAAa,CAAC;;MAElD;MACA;MACA,IAAI,CAACI,6BAA6B,CAAC/D,SAAS,EAAE+C,WAAW,EAAE;QACzDiB,GAAG,EAAE;UACHC,UAAU,EAAE;YACVtC,WAAW,EAAEN,eAAe,GAAGxC,aAAa;YAC5C+C,YAAY,EAAEN,oBAAoB;YAClC4C,MAAM,EAAE;UACV,CAAC;UACDb,MAAM,EAAElB,gBAAgB;UACxBgC,IAAI,EAAEhD;QACR,CAAC;QACDiD,IAAI,EAAE;UACJH,UAAU,EAAE;YACVtC,WAAW,EAAE6B,eAAe,GAAG3E,aAAa;YAC5C+C,YAAY,EAAE6B,oBAAoB;YAClCS,MAAM,EAAE;UACV,CAAC;UACDb,MAAM,EAAEb,gBAAgB;UACxB2B,IAAI,EAAEN;QACR;MACF,CAAC,CAAC;;MAEF;MACA;MACA,IAAI,CAACrC,KAAK,CAACC,YAAY;QACrB,EAAEC,OAAO,EAAEkC,eAAe,EAAEjF,QAAQ,EAAEwB,YAAY,CAAC,CAAC;QACpD0D,YAAY;QACZ;UACElC,WAAW,EAAE6B,eAAe,GAAG3E,aAAa;UAC5C+C,YAAY,EAAE6B;QAChB,CAAC;QACD5B;MACF,CAAC;;MAED,IAAI,CAACwC,gCAAgC;QACnCnD,UAAU;QACV0C,eAAe;QACfzD,YAAY;QACZqC,gBAAgB;QAChBO;MACF,CAAC;MACD;IACF;;IAEA;IACA,MAAMuB,aAAa,GAAG;MACpB3D,IAAI,EAAEgD,aAAa;MACnB/C,KAAK,EAAE2D,cAAc,CAAC1D,QAAQ,GAAG0D,cAAc,CAACzD;IAClD,CAAC;IACD,MAAM0D,SAAS,GAAG,IAAI,CAACC,mBAAmB,CAACH,aAAa,CAAC;;IAEzD;MACE,MAAMtB,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAE,IAAI,CAAC3B,MAAM,EAAE,IAAI,CAACA,MAAM,CAAC4B,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAM,IAAI,CAAC3B,MAAM,EAAX,IAAI,CAACA,MAAM,CAAA4B,oBAAA,YAAX,IAAI,CAAC5B,MAAM,CAAC4B,oBAAoB,GAAE,CAAC;MAC5JH,OAAO,CAAC0B,mBAAmB;QACzB,EAAEhD,OAAO,EAAER,UAAU,EAAEvC,QAAQ,EAAEwB,YAAY,CAAC,CAAC;QAC/C;UACEwE,MAAM,EAAEH,SAAS;UACjB7C,WAAW,EAAE+B,0BAA0B;UACvC9B,YAAY,EAAE6B;QAChB,CAAC;QACD5B;MACF,CAAC;MACDoB,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAE,IAAI,CAAC3B,MAAM,EAAE,IAAI,CAACA,MAAM,CAACC,KAAK,CAAC8B,MAAM,EAAE,CAAC,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAAN,UAAA,CAAAC,YAAA,WAAM,IAAI,CAAC3B,MAAM,EAAX,IAAI,CAACA,MAAM,CAACC,KAAK,CAAA8B,MAAA,GAAQ,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,SAA3C,IAAI,CAAChC,MAAM,CAACC,KAAK,CAAC8B,MAAM,CAAC,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;IACpJ;;IAEA;IACA;IACA;IACA,MAAMqB,4BAA4B,GAAG,IAAId,UAAU,CAACH,aAAa,CAAC;IAClE,MAAMkB,iBAAiB,GAAG,IAAIf,UAAU,CAAC3C,cAAc,CAAC;;IAExD,MAAM2D,uBAAuB,GAAGpC,gBAAgB,GAAGzD,UAAU;IAC7D,MAAM8F,4BAA4B,GAAGlC,iBAAiB,GAAG1D,WAAW;IACpE,MAAM6F,qBAAqB,GAAG;MAC5B5C,CAAC,EAAED,gBAAgB,CAACC,CAAC,GAAGnD,UAAU;MAClCqD,CAAC,EAAEH,gBAAgB,CAACG,CAAC,GAAGnD,WAAW;MACnCoD,CAAC,EAAEJ,gBAAgB,CAACI;IACtB,CAAC;IACD,MAAM0C,qBAAqB,GAAG;MAC5B7C,CAAC,EAAEI,gBAAgB,CAACJ,CAAC,GAAGnD,UAAU;MAClCqD,CAAC,EAAEE,gBAAgB,CAACF,CAAC,GAAGnD,WAAW;MACnCoD,CAAC,EAAEC,gBAAgB,CAACD;IACtB,CAAC;IACD,MAAM2C,UAAU,GAAGJ,uBAAuB,GAAGjG,aAAa;;IAE1D,KAAK,IAAI0D,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGO,gBAAgB,EAAE,EAAEP,CAAC,EAAE;MACzC,MAAM4C,UAAU,GAAGH,qBAAqB,CAACzC,CAAC,GAAGA,CAAC;MAC9C,MAAM6C,UAAU,GAAGH,qBAAqB,CAAC1C,CAAC,GAAGA,CAAC;MAC9C,KAAK,IAAID,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGyC,4BAA4B,EAAE,EAAEzC,CAAC,EAAE;QACrD,MAAM+C,kBAAkB,GAAGJ,qBAAqB,CAAC3C,CAAC,GAAGA,CAAC;QACtD,MAAMgD,6BAA6B;QACnC5B,0BAA0B,IAAID,oBAAoB,GAAG2B,UAAU,GAAGC,kBAAkB,CAAC;QACrFJ,qBAAqB,CAAC7C,CAAC,GAAGvD,aAAa;;QAEvC,MAAM0G,kBAAkB,GAAGP,qBAAqB,CAAC1C,CAAC,GAAGA,CAAC;QACtD,MAAMkD,kBAAkB;QACxB3G,aAAa;QACbwC,eAAe;QACfC,oBAAoB,GAAG6D,UAAU,GAAGI,kBAAkB,CAAC;QACvDP,qBAAqB,CAAC5C,CAAC,GAAGvD,aAAa;;QAEvC/B,MAAM;UACJ,EAAEkH,GAAG,EAAEa,iBAAiB,EAAEY,KAAK,EAAED,kBAAkB,EAAEE,MAAM,EAAER,UAAU,CAAC,CAAC;UACzE,EAAES,GAAG,EAAEf,4BAA4B,EAAEa,KAAK,EAAEH,6BAA6B,CAAC;QAC5E,CAAC;MACH;IACF;;IAEA,IAAI9H,yBAAyB,CAACwC,SAAS,CAAC,EAAE;MACxC,IAAI,CAAC4F,8BAA8B;QACjCpB,SAAS;QACT,CAACqB,IAAI,KAAKhI,kBAAkB,CAACgI,IAAI,EAAEjB,4BAA4B,CAAC;QAChE;UACEkB,aAAa,EAAE,CAAC;UAChBC,IAAI,EAAEjC,UAAU;UAChBkC,WAAW,EAAEpB,4BAA4B,CAACc;QAC5C;MACF,CAAC;MACD;IACF;;IAEA9I,MAAM,CAACc,sBAAsB,CAACsC,SAAS,CAAC,CAAC;IACzC,MAAMiG,gBAAgB,GAAGjG,SAAS;;IAElC;IACA,MAAMkG,oBAAoB,GAAGA,CAACC,MAAM,KAAK;MACvC,MAAMC,IAAI,GAAG,EAAEhE,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;;MAEjC,MAAM8D,YAAY,GAAGlI,SAAS,CAACmI,0BAA0B,CAACL,gBAAgB,EAAEE,MAAM,EAAE;QAClFxE,WAAW,EAAEuD,UAAU;QACvBtD,YAAY,EAAE6B,oBAAoB;QAClC8C,aAAa,EAAEH,IAAI;QACnBI,WAAW,EAAE3E;MACf,CAAC,CAAC;MACF,MAAM4E,YAAY,GAAGtI,SAAS,CAACmI,0BAA0B;QACvDL,gBAAgB;QAChBrB,4BAA4B;QAC5B;UACEjD,WAAW,EAAEuD,UAAU;UACvBtD,YAAY,EAAE6B,oBAAoB;UAClC8C,aAAa,EAAEH,IAAI;UACnBI,WAAW,EAAE3E;QACf;MACF,CAAC;;MAED,MAAM6E,mBAAmB,GAAGtI,gBAAgB;QAC1C6H,gBAAgB;QAChBG,IAAI;QACJvE,qBAAqB;QACrB,EAAEwE,YAAY,EAAEI,YAAY,CAAC,CAAC;QAC9B;UACEE,iBAAiB,EAAE;QACrB;MACF,CAAC;;MAED,IAAID,mBAAmB,KAAKE,SAAS,EAAE;QACrC,MAAMC,GAAG,GAAG,0CAA0C,GAAGH,mBAAmB;QAC5E,OAAO,IAAI7J,cAAc,CAACgK,GAAG,EAAE,OAAO;UACpCJ,YAAY;UACZJ;QACF,CAAC,CAAC,CAAC;MACL;;MAEA,OAAOO,SAAS;IAClB,CAAC;;IAED,IAAI,CAAChB,8BAA8B,CAACpB,SAAS,EAAE0B,oBAAoB,EAAE;MACnEJ,aAAa,EAAE,CAAC;MAChBC,IAAI,EAAEjC,UAAU;MAChBkC,WAAW,EAAEpB,4BAA4B,CAACc;IAC5C,CAAC,CAAC;EACJ;;EAEAoB,uBAAuBA;EACvBC,aAAa;EACbC,kBAAkB;EAClB9G,YAAY;EACZ+G,qBAAqB;EACrBC,QAAQ;EACR;IACE,IAAI,CAAC1F,KAAK,CAACC,YAAY;MACrB;QACEC,OAAO,EAAEqF,aAAa;QACtBpI,QAAQ,EAAEuB,YAAY;QACtBiH,MAAM,EAAE,cAAc;QACtB9D,MAAM,EAAE,EAAEjB,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE0E,qBAAqB,CAAC;MACjD,CAAC;MACDD,kBAAkB;MAClB,EAAErF,WAAW,EAAEuF,QAAQ,CAAC,CAAC,CAAC,EAAEtF,YAAY,EAAEsF,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;MACvDA;IACF,CAAC;EACH;;EAEAE,mBAAmBA;EACnBC,kBAAkB;EAClBL,kBAAkB;EAClB7G,YAAY;EACZmH,qBAAqB;EACrBJ,QAAQ;EACR;IACE,MAAMvF,WAAW,GAAG7D,KAAK,CAACoJ,QAAQ,CAAC,CAAC,CAAC,EAAEjJ,qBAAqB,CAAC;IAC7D,MAAM2D,YAAY,GAAGsF,QAAQ,CAAC,CAAC,CAAC;IAChC,MAAMK,gBAAgB,GAAGzJ,KAAK;MAC5BI,sBAAsB,CAAC;QACrBsJ,MAAM,EAAE,EAAE7F,WAAW,EAAEC,YAAY,CAAC,CAAC;QACrClD,MAAM,EAAE,UAAU;QAClBwI,QAAQ;QACRO,MAAM,EAAE;MACV,CAAC,CAAC;MACF1K;IACF,CAAC;IACD,MAAM2K,YAAY,GAAG,IAAI,CAACjD,mBAAmB,CAAC;MAC5C9D,IAAI,EAAE4G,gBAAgB;MACtB3G,KAAK,EAAE2D,cAAc,CAAC1D,QAAQ,GAAG0D,cAAc,CAACzD;IAClD,CAAC,CAAC;IACF,MAAMkC,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAE,IAAI,CAAC3B,MAAM,EAAE,IAAI,CAACA,MAAM,CAAC4B,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAM,IAAI,CAAC3B,MAAM,EAAX,IAAI,CAACA,MAAM,CAAA4B,oBAAA,YAAX,IAAI,CAAC5B,MAAM,CAAC4B,oBAAoB,GAAE,CAAC;IAC5JH,OAAO,CAAC0B,mBAAmB;MACzB;QACEhD,OAAO,EAAE2F,kBAAkB;QAC3BF,MAAM,EAAE,cAAc;QACtBxI,QAAQ,EAAEwB,YAAY;QACtBkD,MAAM,EAAE,EAAEjB,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE+E,qBAAqB,CAAC;MACjD,CAAC;MACD,EAAE3C,MAAM,EAAE+C,YAAY,EAAE/F,WAAW,EAAEC,YAAY,CAAC,CAAC;MACnDsF;IACF,CAAC;IACDjE,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC1B,KAAK,CAAC8B,MAAM,EAAE,CAAC,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAAN,UAAA,CAAAC,YAAA,WAAM,IAAI,EAAJ,IAAI,CAAC1B,KAAK,CAAA8B,MAAA,GAAQ,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,SAApC,IAAI,CAAC/B,KAAK,CAAC8B,MAAM,CAAC,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;;IAE7H,MAAMoE,mBAAmB,GAAG,IAAI7D,UAAU,CAACyD,gBAAgB,CAAC;IAC5D,KAAK,IAAIhF,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2E,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE3E,CAAC,EAAE;MACpC,MAAMqF,qBAAqB,GAAGrF,CAAC,GAAG2E,QAAQ,CAAC,CAAC,CAAC,GAAGA,QAAQ,CAAC,CAAC,CAAC;MAC3D,MAAMW,sBAAsB,GAAGtF,CAAC,GAAGZ,WAAW,GAAGC,YAAY;MAC7D,KAAK,IAAIU,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG4E,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE5E,CAAC,EAAE;QACpC,MAAMwF,mBAAmB,GAAGF,qBAAqB,GAAGtF,CAAC,GAAG4E,QAAQ,CAAC,CAAC,CAAC;QACnE,MAAMa,oBAAoB,GAAGF,sBAAsB,GAAGvF,CAAC,GAAGX,WAAW;QACrE7E,MAAM;UACJ,EAAEkH,GAAG,EAAEgD,kBAAkB,EAAEvB,KAAK,EAAEqC,mBAAmB,EAAEpC,MAAM,EAAEwB,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;UAC5E,EAAEvB,GAAG,EAAEgC,mBAAmB,EAAElC,KAAK,EAAEsC,oBAAoB,CAAC;QAC1D,CAAC;MACH;IACF;IACA,IAAI,CAACC,0BAA0B,CAACN,YAAY,EAAEC,mBAAmB,CAAC;EACpE;;EAEAM,yCAAyCA;EACzCC,eAAe;EACfC,kBAAkB;EAClBC,YAAY;EACZ;IACE,MAAMC,wBAAwB,GAAG;MAC/Bb,MAAM,EAAE,IAAI,CAACjG,MAAM,CAAC+G,oBAAoB,CAAC,EAAEC,gBAAgB,EAAE,CAACL,eAAe,CAAC,CAAC,CAAC,CAAC;MACjFM,MAAM,EAAE;QACNC,MAAM,EAAE,IAAI,CAAClH,MAAM,CAACmH,kBAAkB,CAAC;UACrCC,IAAI,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;QACQ,CAAC,CAAC;QACFC,UAAU,EAAE;MACd,CAAC;MACDR;IACF,CAAC;IACD,IAAID,kBAAkB,EAAE;MACtBE,wBAAwB,CAACQ,QAAQ,GAAG;QAClCJ,MAAM,EAAE,IAAI,CAAClH,MAAM,CAACmH,kBAAkB,CAAC;UACrCC,IAAI,EAAE;AAChB;AACA;AACA;AACA;QACQ,CAAC,CAAC;QACFC,UAAU,EAAE,MAAM;QAClBE,OAAO,EAAE,CAAC,EAAEpK,MAAM,EAAE,YAAY,CAAC,CAAC;MACpC,CAAC;IACH;IACA,OAAO,IAAI,CAAC6C,MAAM,CAACwH,oBAAoB,CAACV,wBAAwB,CAAC;EACnE;;EAEAW,0CAA0CA,CAAA,EAAG;IAC3C,OAAO,IAAI,CAACzH,MAAM,CAAC0H,qBAAqB,CAAC;MACvCC,OAAO,EAAE;MACT;QACEC,OAAO,EAAE,CAAC;QACVC,UAAU,EAAEC,cAAc,CAACC,MAAM;QACjC3E,MAAM,EAAE;UACNoB,IAAI,EAAE,SAAS;UACfwD,cAAc,EAAE,CAAC;UACjBC,gBAAgB,EAAE;QACpB;MACF,CAAC;;IAEH,CAAC,CAAC;EACJ;;EAEAC,oCAAoCA;EACpCvB,eAAe;EACfwB,oBAAoB;EACpB;IACE;IACA;IACA9M,MAAM,CAAC8M,oBAAoB,GAAG,CAAC,CAAC;IAChC,MAAMC,iBAAiB,GAAG3M,gCAAgC,IAAI0M,oBAAoB,GAAG,CAAC,CAAC,GAAG,CAAC;IAC3F,MAAME,iBAAiB,GAAG,IAAIC,YAAY,CAACF,iBAAiB,GAAG,CAAC,CAAC;IACjE,KAAK,IAAIG,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,oBAAoB,EAAE,EAAEI,CAAC,EAAE;MAC7CF,iBAAiB,CAAC5M,gCAAgC,GAAG,CAAC,GAAG8M,CAAC,CAAC,GAAGA,CAAC;IACjE;IACA,MAAMC,aAAa,GAAG,IAAI,CAACC,sBAAsB;MAC/CJ,iBAAiB;MACjBrF,cAAc,CAACzD,QAAQ,GAAGyD,cAAc,CAAC0F;IAC3C,CAAC;IACD,OAAO,IAAI,CAAC1I,MAAM,CAAC2I,eAAe,CAAC;MACjC1C,MAAM,EAAEU,eAAe;MACvBgB,OAAO,EAAE;MACT;QACEC,OAAO,EAAE,CAAC;QACVgB,QAAQ,EAAE;UACRxF,MAAM,EAAEoF,aAAa;UACrBpJ,IAAI,EAAE;QACR;MACF,CAAC;;IAEH,CAAC,CAAC;EACJ;;EAEA;EACAyJ,qBAAqBA;EACrBrD,aAAa;EACbsD,WAAW;EACXnK,YAAY;EACZ+G,qBAAqB;EACrBC,QAAQ;EACR;IACE;IACA;IACA,MAAMgB,eAAe,GAAG,IAAI,CAACc,0CAA0C,CAAC,CAAC;IACzE,MAAMsB,cAAc,GAAG,IAAI,CAACrC,yCAAyC,CAACC,eAAe,EAAE,KAAK,EAAE;MAC5FxJ,MAAM,EAAE2L,WAAW;MACnBE,iBAAiB,EAAE,IAAI;MACvBC,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,MAAMC,SAAS,GAAG,IAAI,CAAChB,oCAAoC,CAACvB,eAAe,EAAEhB,QAAQ,CAAC,CAAC,CAAC,CAAC;;IAEzF,MAAMwD,UAAU,GAAGxN,kBAAkB,CAAC6J,aAAa,CAACrI,MAAM,CAAC,CAACiM,OAAO;IACnE,MAAM3H,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAE,IAAI,CAAC3B,MAAM,EAAE,IAAI,CAACA,MAAM,CAAC4B,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAM,IAAI,CAAC3B,MAAM,EAAX,IAAI,CAACA,MAAM,CAAA4B,oBAAA,YAAX,IAAI,CAAC5B,MAAM,CAAC4B,oBAAoB,GAAE,CAAC;IAC5J,KAAK,IAAIyH,YAAY,GAAG,CAAC,EAAEA,YAAY,GAAG1D,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAE0D,YAAY,EAAE;MACrE,MAAMC,UAAU,GAAG7H,OAAO,CAAC8H,eAAe,CAAC;QACzCC,gBAAgB,EAAE,EAAE;QACpBC,sBAAsB,EAAE;UACtBC,IAAI,EAAElE,aAAa,CAACmE,UAAU,CAAC;YAC7BC,cAAc,EAAEP,YAAY,GAAG3D,qBAAqB;YACpDmE,eAAe,EAAE,CAAC;YAClBC,YAAY,EAAEnL,YAAY;YAC1BO,aAAa,EAAE;UACjB,CAAC,CAAC;UACF6K,eAAe,EAAE,GAAG;UACpBC,WAAW,EAAE,OAAO;UACpBC,YAAY,EAAE,OAAO;UACrBC,aAAa,EAAEf,UAAU,GAAG,MAAM,GAAG9D,SAAS;UAC9C8E,cAAc,EAAEhB,UAAU,GAAG,OAAO,GAAG9D;QACzC;MACF,CAAC,CAAC;MACFiE,UAAU,CAACc,YAAY,CAAC,CAAC,EAAElB,SAAS,EAAE,CAACG,YAAY,GAAG5N,gCAAgC,CAAC,CAAC;MACxF6N,UAAU,CAACe,WAAW,CAACtB,cAAc,CAAC;MACtCO,UAAU,CAACgB,IAAI,CAAC,CAAC,CAAC;MAClBhB,UAAU,CAACiB,GAAG,CAAC,CAAC;IAClB;IACA7I,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC1B,KAAK,CAAC8B,MAAM,EAAE,CAAC,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAAN,UAAA,CAAAC,YAAA,WAAM,IAAI,EAAJ,IAAI,CAAC1B,KAAK,CAAA8B,MAAA,GAAQ,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,SAApC,IAAI,CAAC/B,KAAK,CAAC8B,MAAM,CAAC,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;EAC/H;;EAEAwI,iBAAiBA;EACjB1E,kBAAkB;EAClBgD,WAAW;EACXlK,YAAY;EACZmH,qBAAqB;EACrBJ,QAAQ;EACR;IACE;IACA;IACA,MAAMgB,eAAe,GAAG,IAAI,CAACc,0CAA0C,CAAC,CAAC;IACzE,MAAMsB,cAAc,GAAG,IAAI,CAACrC,yCAAyC,CAACC,eAAe,EAAE,IAAI,EAAE;MAC3FxJ,MAAM,EAAE2L,WAAW;MACnBE,iBAAiB,EAAE,KAAK;MACxBC,YAAY,EAAE;IAChB,CAAC,CAAC;IACF,MAAMC,SAAS,GAAG,IAAI,CAAChB,oCAAoC,CAACvB,eAAe,EAAEhB,QAAQ,CAAC,CAAC,CAAC,CAAC;;IAEzF,MAAM8E,kBAAkB,GAAG,IAAI,CAAChL,oBAAoB,CAAC;MACnDtC,MAAM,EAAE,YAAY;MACpBiC,IAAI,EAAEuG,QAAQ;MACdtG,KAAK,EAAEL,eAAe,CAAC0L,iBAAiB,GAAG1L,eAAe,CAACM;IAC7D,CAAC,CAAC;IACF,MAAM6J,UAAU,GAAGxN,kBAAkB,CAACmK,kBAAkB,CAAC3I,MAAM,CAAC,CAACiM,OAAO;IACxE,MAAM3H,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAE,IAAI,CAAC3B,MAAM,EAAE,IAAI,CAACA,MAAM,CAAC4B,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAM,IAAI,CAAC3B,MAAM,EAAX,IAAI,CAACA,MAAM,CAAA4B,oBAAA,YAAX,IAAI,CAAC5B,MAAM,CAAC4B,oBAAoB,GAAE,CAAC;IAC5J,KAAK,IAAI+I,YAAY,GAAG,CAAC,EAAEA,YAAY,GAAGhF,QAAQ,CAAC,CAAC,CAAC,EAAE,EAAEgF,YAAY,EAAE;MACrE;MACA;MACA,MAAMrB,UAAU,GAAG7H,OAAO,CAAC8H,eAAe,CAAC;QACzCC,gBAAgB,EAAE;QAClB;UACEE,IAAI,EAAEe,kBAAkB,CAACd,UAAU,CAAC;YAClCC,cAAc,EAAEe,YAAY;YAC5Bd,eAAe,EAAE;UACnB,CAAC,CAAC;UACFe,UAAU,EAAE,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,CAAC,CAAC;UAC9CC,MAAM,EAAE,OAAO;UACfC,OAAO,EAAE;QACX,CAAC,CAAC;;QAEFzB,sBAAsB,EAAE;UACtBC,IAAI,EAAE5D,kBAAkB,CAAC6D,UAAU,CAAC;YAClCC,cAAc,EAAEe,YAAY,GAAG5E,qBAAqB;YACpD8D,eAAe,EAAE,CAAC;YAClBC,YAAY,EAAElL,YAAY;YAC1BM,aAAa,EAAE;UACjB,CAAC,CAAC;UACF8K,WAAW,EAAE,MAAM;UACnBC,YAAY,EAAE,OAAO;UACrBC,aAAa,EAAEf,UAAU,GAAG,MAAM,GAAG9D,SAAS;UAC9C8E,cAAc,EAAEhB,UAAU,GAAG,OAAO,GAAG9D;QACzC;MACF,CAAC,CAAC;MACFiE,UAAU,CAACc,YAAY,CAAC,CAAC,EAAElB,SAAS,EAAE,CAACyB,YAAY,GAAGlP,gCAAgC,CAAC,CAAC;MACxF6N,UAAU,CAACe,WAAW,CAACtB,cAAc,CAAC;MACtCO,UAAU,CAACgB,IAAI,CAAC,CAAC,CAAC;MAClBhB,UAAU,CAACiB,GAAG,CAAC,CAAC;IAClB;IACA7I,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAE,IAAI,EAAE,IAAI,CAAC1B,KAAK,CAAC8B,MAAM,EAAE,CAAC,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAAN,UAAA,CAAAC,YAAA,WAAM,IAAI,EAAJ,IAAI,CAAC1B,KAAK,CAAA8B,MAAA,GAAQ,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,SAApC,IAAI,CAAC/B,KAAK,CAAC8B,MAAM,CAAC,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;;IAE7H,IAAI,CAACmJ,iBAAiB,CAACV,kBAAkB,EAAE,YAAY,EAAE;MACvDrL,IAAI,EAAEuG,QAAQ;MACdyF,GAAG,EAAE,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,CAAC;IACxC,CAAC,CAAC;EACJ;AACF;;AAEA,MAAMC,4BAA4B,GAAG;AACrC;AACA;EACE3K,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AAC3D,CAAC;AACD;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AAC3D,CAAC;AACD;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AAC3D,CAAC;AACD;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AAC3D,CAAC;AACD;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AAC3D,CAAC;AACD;AACA;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AAC5D,CAAC;AACD;AACA;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AAC5D,CAAC,CAAC;;;AAGF,MAAMyN,iCAAiC,GAAG;AAC1C;AACA;AACA;AACA,GAAGD,4BAA4B;;AAE/B;AACA;AACA;EACE3K,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;AAC5D,CAAC;AACD;AACA;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;AAC5D,CAAC;AACD;AACA;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;AAC5D,CAAC;AACD;AACA;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;AAC5D,CAAC;AACD;AACA;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;AAC5D,CAAC;AACD;AACA;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;AAC5D,CAAC,CAAC;;;AAGF,OAAO,MAAM6M,CAAC,GAAG1P,aAAa,CAAC2B,CAAC,CAAC;;AAEjC+N,CAAC,CAACa,IAAI,CAAC,yCAAyC,CAAC;AACjDC,IAAI;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,OAAO,CAAC,WAAW,EAAEnQ,sBAAsB,CAAC;AAC5CmQ,OAAO,CAAC,WAAW,EAAEnQ,sBAAsB,CAAC;AAC5CoQ,MAAM,CAAC,CAAC,EAAExN,SAAS,EAAEC,SAAS,CAAC,CAAC,KAAK;EACnC,MAAMwN,aAAa,GAAGtQ,kBAAkB,CAAC6C,SAAS,CAAC,CAAC0N,UAAU;EAC9D,MAAMC,aAAa,GAAGxQ,kBAAkB,CAAC8C,SAAS,CAAC,CAACyN,UAAU;EAC9D;IACE1N,SAAS,KAAKC,SAAS;IACvBwN,aAAa,KAAK5G,SAAS;IAC3B8G,aAAa,KAAK9G,SAAS;IAC3B4G,aAAa,KAAKE,aAAa;;AAEnC,CAAC,CAAC;AACFJ,OAAO,CAAC,WAAW,EAAErQ,kBAAkB,CAAC;AACxCsQ,MAAM;EACJ,CAAC,EAAE/O,SAAS,EAAEuB,SAAS,EAAEC,SAAS,CAAC,CAAC;EACpC1C,mCAAmC,CAACkB,SAAS,EAAEuB,SAAS,CAAC;EACzDzC,mCAAmC,CAACkB,SAAS,EAAEwB,SAAS;AAC1D,CAAC;AACD2N,aAAa,CAAC,CAAC;AACfC,gBAAgB,CAAC,CAACC,CAAC,KAAK;EACtB,MAAMT,MAAM,GAAG;EACf;IACEvN,cAAc,EAAE,EAAER,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;IAChEM,cAAc,EAAE,EAAET,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC;EACjE,CAAC;EACD;IACEK,cAAc,EAAE,EAAER,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;IAChEM,cAAc,EAAE,EAAET,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC;EACjE,CAAC;EACD;IACEK,cAAc,EAAE,EAAER,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;IAChEM,cAAc,EAAE,EAAET,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC;EACjE,CAAC;EACD;IACEK,cAAc,EAAE,EAAER,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;IAChEM,cAAc,EAAE,EAAET,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC;EACjE,CAAC,CAAC;;EAEF,IAAIqO,CAAC,CAACrP,SAAS,KAAK,IAAI,EAAE;IACxB,KAAK,MAAMsP,KAAK,IAAIV,MAAM,EAAE;MAC1BU,KAAK,CAACjO,cAAc,CAACP,MAAM,GAAG,CAAC;MAC/BwO,KAAK,CAAChO,cAAc,CAACR,MAAM,GAAG,CAAC;IACjC;EACF;;EAEA,OAAO8N,MAAM;AACf,CAAC,CAAC;AACFE,OAAO,CAAC,gBAAgB,EAAEN,4BAA4B,CAAC;AACvDe,MAAM;EACJ,CAACF,CAAC;EACFA,CAAC,CAACrP,SAAS,KAAK,IAAI;EACpBqP,CAAC,CAAC5N,cAAc,CAAC2C,UAAU,CAACtD,MAAM,KAAK,CAAC;EACxCuO,CAAC,CAAC5N,cAAc,CAACoC,SAAS,CAACC,CAAC,KAAK,CAAC;EAClCuL,CAAC,CAAC5N,cAAc,CAACwC,SAAS,CAACH,CAAC,KAAK,CAAC;AACpC,CAAC;AACDgL,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/BA,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/BS,MAAM,CAAC,CAACF,CAAC,KAAKA,CAAC,CAACrP,SAAS,KAAK,IAAI,KAAKqP,CAAC,CAAC3N,YAAY,KAAK,CAAC,IAAI2N,CAAC,CAAC1N,YAAY,KAAK,CAAC,CAAC;AACpF,CAAC;AACD6N,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAM;IACJzP,SAAS;IACTqB,cAAc;IACdC,cAAc;IACdC,SAAS;IACTC,SAAS;IACTC,cAAc;IACdC,YAAY;IACZC;EACF,CAAC,GAAG8N,CAAC,CAACb,MAAM;;EAEZa,CAAC,CAACrO,0BAA0B;IAC1BpB,SAAS;IACTqB,cAAc;IACdC,cAAc;IACdC,SAAS;IACTC,SAAS;IACTC,cAAc;IACdC,YAAY;IACZC;EACF,CAAC;AACH,CAAC,CAAC;;AAEFkM,CAAC,CAACa,IAAI,CAAC,qCAAqC,CAAC;AAC7CC,IAAI;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,OAAO,CAAC,WAAW,EAAElQ,yBAAyB,CAAC;AAC/CkQ,OAAO,CAAC,WAAW,EAAElQ,yBAAyB,CAAC;AAC/CmQ,MAAM,CAAC,CAAC,EAAExN,SAAS,EAAEC,SAAS,CAAC,CAAC,KAAK;EACnC,MAAMwN,aAAa,GAAGtQ,kBAAkB,CAAC6C,SAAS,CAAC,CAAC0N,UAAU;EAC9D,MAAMC,aAAa,GAAGxQ,kBAAkB,CAAC8C,SAAS,CAAC,CAACyN,UAAU;EAC9D;IACE1N,SAAS,KAAKC,SAAS;IACvBwN,aAAa,KAAK5G,SAAS;IAC3B8G,aAAa,KAAK9G,SAAS;IAC3B4G,aAAa,KAAKE,aAAa;;AAEnC,CAAC,CAAC;AACFJ,OAAO,CAAC,WAAW,EAAErQ,kBAAkB,CAAC;AACxCsQ,MAAM;EACJ,CAAC,EAAE/O,SAAS,EAAEuB,SAAS,EAAEC,SAAS,CAAC,CAAC;EACpC1C,mCAAmC,CAACkB,SAAS,EAAEuB,SAAS,CAAC;EACzDzC,mCAAmC,CAACkB,SAAS,EAAEwB,SAAS;AAC1D,CAAC;AACD2N,aAAa,CAAC,CAAC;AACfL,OAAO,CAAC,qBAAqB,EAAE;AAC/B;AACA,EAAEtJ,GAAG,EAAE,EAAE3E,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,CAAC,CAAC,CAAC,EAAEqG,GAAG,EAAE,EAAEtG,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE;AACA,EAAE0E,GAAG,EAAE,EAAE3E,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,CAAC,CAAC,CAAC,EAAEqG,GAAG,EAAE,EAAEtG,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE;AACA;AACA,EAAE0E,GAAG,EAAE,EAAE3E,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,CAAC,CAAC,CAAC,EAAEqG,GAAG,EAAE,EAAEtG,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAChE;AACA,EAAE0E,GAAG,EAAE,EAAE3E,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,CAAC,CAAC,EAAEqG,GAAG,EAAE,EAAEtG,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACjE;AACA;AACA,EAAE0E,GAAG,EAAE,EAAE3E,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,CAAC,CAAC,CAAC,EAAEqG,GAAG,EAAE,EAAEtG,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AACjE;AACA,EAAE0E,GAAG,EAAE,EAAE3E,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,CAAC,CAAC,EAAEqG,GAAG,EAAE,EAAEtG,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAClE,CAAC;AACDgO,OAAO,CAAC,gBAAgB,EAAEN,4BAA4B,CAAC;AACvDM,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/BA,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAC9B,CAAC;AACDY,iBAAiB,CAAC,CAACD,CAAC,KAAK;EACvB,MAAM,EAAElO,SAAS,EAAEC,SAAS,CAAC,CAAC,GAAGiO,CAAC,CAACb,MAAM;EACzCa,CAAC,CAACE,+CAA+C,CAACpO,SAAS,EAAEC,SAAS,CAAC;EACvEiO,CAAC,CAACG,0BAA0B,CAAC;EAC7BlR,kBAAkB,CAAC6C,SAAS,CAAC,CAACsO,OAAO;EACrCnR,kBAAkB,CAAC8C,SAAS,CAAC,CAACqO,OAAO;EACrC,CAAC;AACH,CAAC,CAAC;AACFL,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAM;IACJzP,SAAS;IACT8P,mBAAmB;IACnBvO,SAAS;IACTC,SAAS;IACTC,cAAc;IACdC,YAAY;IACZC;EACF,CAAC,GAAG8N,CAAC,CAACb,MAAM;EACZ,MAAMmB,aAAa,GAAGrR,kBAAkB,CAAC6C,SAAS,CAAC,CAACd,UAAU;EAC9D,MAAMuP,cAAc,GAAGtR,kBAAkB,CAAC6C,SAAS,CAAC,CAACZ,WAAW;EAChE,MAAMsP,aAAa,GAAGvR,kBAAkB,CAAC8C,SAAS,CAAC,CAACf,UAAU;EAC9D,MAAMyP,cAAc,GAAGxR,kBAAkB,CAAC8C,SAAS,CAAC,CAACb,WAAW;;EAEhE8O,CAAC,CAACrO,0BAA0B;IAC1BpB,SAAS;IACT;MACEa,KAAK,EAAEiP,mBAAmB,CAACtK,GAAG,CAAC3E,KAAK,GAAGkP,aAAa;MACpDjP,MAAM,EAAEgP,mBAAmB,CAACtK,GAAG,CAAC1E,MAAM,GAAGkP,cAAc;MACvDhP,kBAAkB,EAAE;IACtB,CAAC;IACD;MACEH,KAAK,EAAEiP,mBAAmB,CAAC3I,GAAG,CAACtG,KAAK,GAAGoP,aAAa;MACpDnP,MAAM,EAAEgP,mBAAmB,CAAC3I,GAAG,CAACrG,MAAM,GAAGoP,cAAc;MACvDlP,kBAAkB,EAAE;IACtB,CAAC;IACDO,SAAS;IACTC,SAAS;IACTC,cAAc;IACdC,YAAY;IACZC;EACF,CAAC;AACH,CAAC,CAAC;;AAEFkM,CAAC,CAACa,IAAI,CAAC,qCAAqC,CAAC;AAC7CC,IAAI;EACF;AACF;AACA;AACA;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,OAAO,CAAC,WAAW,EAAEnQ,sBAAsB,CAAC;AAC5CmQ,OAAO,CAAC,WAAW,EAAEnQ,sBAAsB,CAAC;AAC5CoQ,MAAM,CAAC,CAAC,EAAExN,SAAS,EAAEC,SAAS,CAAC,CAAC,KAAK;EACnC,MAAMwN,aAAa,GAAGtQ,kBAAkB,CAAC6C,SAAS,CAAC,CAAC0N,UAAU;EAC9D,MAAMC,aAAa,GAAGxQ,kBAAkB,CAAC8C,SAAS,CAAC,CAACyN,UAAU;EAC9D;IACE1N,SAAS,KAAKC,SAAS;IACvBwN,aAAa,KAAK5G,SAAS;IAC3B8G,aAAa,KAAK9G,SAAS;IAC3B4G,aAAa,KAAKE,aAAa;;AAEnC,CAAC,CAAC;AACFJ,OAAO,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAClCC,MAAM;EACJ,CAAC,EAAE/O,SAAS,EAAEuB,SAAS,EAAEC,SAAS,CAAC,CAAC;EACpC1C,mCAAmC,CAACkB,SAAS,EAAEuB,SAAS,CAAC;EACzDzC,mCAAmC,CAACkB,SAAS,EAAEwB,SAAS;AAC1D,CAAC;AACD2N,aAAa,CAAC,CAAC;AACfL,OAAO,CAAC,aAAa,EAAE;AACvB;EACEzN,cAAc,EAAE,EAAER,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;EAChEM,cAAc,EAAE,EAAET,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AACjE,CAAC;AACD;EACEK,cAAc,EAAE,EAAER,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;EAChEM,cAAc,EAAE,EAAET,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AACjE,CAAC;AACD;EACEK,cAAc,EAAE,EAAER,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,EAAE,CAAC,CAAC;EACjEM,cAAc,EAAE,EAAET,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,EAAE,CAAC;AAClE,CAAC;AACD,CAAC;;AAED8N,OAAO,CAAC,gBAAgB,EAAEL,iCAAiC,CAAC;AAC5DK,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/BA,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAC9B,CAAC;AACDU,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAM;IACJzP,SAAS;IACTC,WAAW;IACXsB,SAAS;IACTC,SAAS;IACTC,cAAc;IACdC,YAAY;IACZC;EACF,CAAC,GAAG8N,CAAC,CAACb,MAAM;;EAEZa,CAAC,CAACrO,0BAA0B;IAC1BpB,SAAS;IACTC,WAAW,CAACoB,cAAc;IAC1BpB,WAAW,CAACqB,cAAc;IAC1BC,SAAS;IACTC,SAAS;IACTC,cAAc;IACdC,YAAY;IACZC;EACF,CAAC;AACH,CAAC,CAAC;;AAEFkM,CAAC,CAACa,IAAI,CAAC,iCAAiC,CAAC;AACzCC,IAAI;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,OAAO,CAAC,WAAW,EAAElQ,yBAAyB,CAAC;AAC/CkQ,OAAO,CAAC,WAAW,EAAElQ,yBAAyB,CAAC;AAC/CmQ,MAAM,CAAC,CAAC,EAAExN,SAAS,EAAEC,SAAS,CAAC,CAAC,KAAK;EACnC,MAAMwN,aAAa,GAAGtQ,kBAAkB,CAAC6C,SAAS,CAAC,CAAC0N,UAAU;EAC9D,MAAMC,aAAa,GAAGxQ,kBAAkB,CAAC8C,SAAS,CAAC,CAACyN,UAAU;EAC9D;IACE1N,SAAS,KAAKC,SAAS;IACvBwN,aAAa,KAAK5G,SAAS;IAC3B8G,aAAa,KAAK9G,SAAS;IAC3B4G,aAAa,KAAKE,aAAa;;AAEnC,CAAC,CAAC;AACFJ,OAAO,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAClCC,MAAM;EACJ,CAAC,EAAE/O,SAAS,EAAEuB,SAAS,EAAEC,SAAS,CAAC,CAAC;EACpC1C,mCAAmC,CAACkB,SAAS,EAAEuB,SAAS,CAAC;EACzDzC,mCAAmC,CAACkB,SAAS,EAAEwB,SAAS;AAC1D,CAAC;AACD2N,aAAa,CAAC,CAAC;AACfL,OAAO,CAAC,qBAAqB,EAAE;AAC/B;AACA,EAAEtJ,GAAG,EAAE,EAAE3E,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,CAAC,CAAC,EAAEqG,GAAG,EAAE,EAAEtG,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAC9D;AACA,EAAE0E,GAAG,EAAE,EAAE3E,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,CAAC,CAAC,EAAEqG,GAAG,EAAE,EAAEtG,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC;AAClE,CAAC;AACDgO,OAAO,CAAC,gBAAgB,EAAEL,iCAAiC,CAAC;AAC5DK,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/BA,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;AAC9B,CAAC;AACDY,iBAAiB,CAAC,CAACD,CAAC,KAAK;EACvB,MAAM,EAAElO,SAAS,EAAEC,SAAS,CAAC,CAAC,GAAGiO,CAAC,CAACb,MAAM;EACzCa,CAAC,CAACE,+CAA+C,CAACpO,SAAS,EAAEC,SAAS,CAAC;EACvEiO,CAAC,CAACG,0BAA0B,CAAC;EAC7BlR,kBAAkB,CAAC6C,SAAS,CAAC,CAACsO,OAAO;EACrCnR,kBAAkB,CAAC8C,SAAS,CAAC,CAACqO,OAAO;EACrC,CAAC;AACH,CAAC,CAAC;AACFL,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAM;IACJzP,SAAS;IACT8P,mBAAmB;IACnBvO,SAAS;IACTC,SAAS;IACTC,cAAc;IACdC,YAAY;IACZC;EACF,CAAC,GAAG8N,CAAC,CAACb,MAAM;EACZ,MAAMmB,aAAa,GAAGrR,kBAAkB,CAAC6C,SAAS,CAAC,CAACd,UAAU;EAC9D,MAAMuP,cAAc,GAAGtR,kBAAkB,CAAC6C,SAAS,CAAC,CAACZ,WAAW;EAChE,MAAMsP,aAAa,GAAGvR,kBAAkB,CAAC8C,SAAS,CAAC,CAACf,UAAU;EAC9D,MAAMyP,cAAc,GAAGxR,kBAAkB,CAAC8C,SAAS,CAAC,CAACb,WAAW;;EAEhE8O,CAAC,CAACrO,0BAA0B;IAC1BpB,SAAS;IACT;MACEa,KAAK,EAAEiP,mBAAmB,CAACtK,GAAG,CAAC3E,KAAK,GAAGkP,aAAa;MACpDjP,MAAM,EAAEgP,mBAAmB,CAACtK,GAAG,CAAC1E,MAAM,GAAGkP,cAAc;MACvDhP,kBAAkB,EAAE;IACtB,CAAC;IACD;MACEH,KAAK,EAAEiP,mBAAmB,CAAC3I,GAAG,CAACtG,KAAK,GAAGoP,aAAa;MACpDnP,MAAM,EAAEgP,mBAAmB,CAAC3I,GAAG,CAACrG,MAAM,GAAGoP,cAAc;MACvDlP,kBAAkB,EAAE;IACtB,CAAC;IACDO,SAAS;IACTC,SAAS;IACTC,cAAc;IACdC,YAAY;IACZC;EACF,CAAC;AACH,CAAC,CAAC;;AAEFkM,CAAC,CAACa,IAAI,CAAC,YAAY,CAAC;AACpBC,IAAI;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACDwB,kBAAkB,CAAC,CAACtB,CAAC;AACrBA,CAAC,CAAC;AAAA,CACDuB,iBAAiB,CAAC;AACnB,EAAEpQ,SAAS,EAAE,IAAI,EAAEC,WAAW,EAAE,EAAEY,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACjF,EAAEhB,SAAS,EAAE,IAAI,EAAEC,WAAW,EAAE,EAAEY,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAClF,EAAEhB,SAAS,EAAE,IAAI,EAAEC,WAAW,EAAE,EAAEY,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AAClF,CAAC;AACD8N,OAAO,CAAC,eAAe,EAAE;AACzB;AACA;EACEjL,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAE,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AAC7D,CAAC;AACD;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,EAAE,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAChCE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAE,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AAC7D,CAAC;AACD;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,EAAE,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAChCK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAE,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AAC7D,CAAC;AACD;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AAC7D,CAAC;AACD;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,EAAE,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAChCE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AAC7D,CAAC;AACD;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,EAAE,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAChCK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AAC7D,CAAC;AACD;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;AAC5D,CAAC;AACD;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AAC3D,CAAC;AACD;AACA;EACE6C,SAAS,EAAE,EAAED,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BE,SAAS,EAAE,EAAEL,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC/BK,UAAU,EAAE,EAAEvD,KAAK,EAAE,CAAC,EAAEC,MAAM,EAAE,CAAC,EAAEE,kBAAkB,EAAE,CAAC,CAAC;AAC3D,CAAC;AACD,CAAC;AACDuO,MAAM;EACJ,CAACF,CAAC;EACFA,CAAC,CAACrP,SAAS,KAAK,IAAI;EACpBqP,CAAC,CAACgB,aAAa,CAACjM,UAAU,CAACtD,MAAM,KAAK,CAAC;EACvCuO,CAAC,CAACgB,aAAa,CAACxM,SAAS,CAACC,CAAC,KAAK,CAAC;EACjCuL,CAAC,CAACgB,aAAa,CAACpM,SAAS,CAACH,CAAC,KAAK,CAAC;AACnC,CAAC;AACDgL,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/BA,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/BS,MAAM,CAAC,CAACF,CAAC,KAAKA,CAAC,CAACrP,SAAS,KAAK,IAAI,KAAKqP,CAAC,CAAC3N,YAAY,KAAK,CAAC,IAAI2N,CAAC,CAAC1N,YAAY,KAAK,CAAC,CAAC;AACpF,CAAC;AACD6N,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAM,EAAEzP,SAAS,EAAEC,WAAW,EAAEoQ,aAAa,EAAE3O,YAAY,EAAEC,YAAY,CAAC,CAAC,GAAG8N,CAAC,CAACb,MAAM;;EAEtF,MAAMrN,SAAS,GAAG,YAAY;EAC9B,MAAMC,SAAS,GAAG,YAAY;;EAE9BiO,CAAC,CAACrO,0BAA0B;IAC1BpB,SAAS;IACTC,WAAW;IACXA,WAAW;IACXsB,SAAS;IACTC,SAAS;IACT6O,aAAa;IACb3O,YAAY;IACZC;EACF,CAAC;AACH,CAAC,CAAC;;AAEFkM,CAAC,CAACa,IAAI,CAAC,oBAAoB,CAAC;AAC5BC,IAAI;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,OAAO,CAAC,QAAQ,EAAEjQ,oBAAoB,CAAC;AACvCsQ,aAAa,CAAC,CAAC;AACfL,OAAO,CAAC,gBAAgB,EAAE;AAC1B,EAAEjO,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;AAChD,EAAEH,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;AAChD,EAAEH,KAAK,EAAE,EAAE,EAAEC,MAAM,EAAE,EAAE,EAAEE,kBAAkB,EAAE,CAAC,CAAC,CAAC;AAChD,CAAC;AACD8N,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/BA,OAAO,CAAC,cAAc,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AAC/BA,OAAO,CAAC,uBAAuB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACxCA,OAAO,CAAC,uBAAuB,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACxCC,MAAM,CAAC,CAACU,CAAC,KAAK;EACZ;IACEA,CAAC,CAACpO,cAAc,CAACL,kBAAkB,GAAGyO,CAAC,CAAChH,qBAAqB;IAC7DgH,CAAC,CAACpO,cAAc,CAACL,kBAAkB,GAAGyO,CAAC,CAAC3G,qBAAqB;;AAEjE,CAAC;AACD,CAAC;AACD4G,iBAAiB,CAAC,CAACD,CAAC,KAAK;EACvB,MAAM,EAAEvP,MAAM,CAAC,CAAC,GAAGuP,CAAC,CAACb,MAAM;EAC3Ba,CAAC,CAACa,0CAA0C,CAACpQ,MAAM,CAAC;AACtD,CAAC,CAAC;AACFsP,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAM;IACJvP,MAAM;IACNmB,cAAc;IACdK,YAAY;IACZC,YAAY;IACZ8G,qBAAqB;IACrBK;EACF,CAAC,GAAG2G,CAAC,CAACb,MAAM;;EAEZ,MAAMlG,QAAQ,GAAG;EACjBrH,cAAc,CAACR,KAAK,IAAIa,YAAY;EACpCL,cAAc,CAACP,MAAM,IAAIY,YAAY;EACrCL,cAAc,CAACL,kBAAkB,GAAGuC,IAAI,CAACY,GAAG,CAACsE,qBAAqB,EAAEK,qBAAqB,CAAC,CAAC;;EAE3F,MAAMP,aAAa,GAAGkH,CAAC,CAACjN,oBAAoB,CAAC;IAC3CtC,MAAM;IACNiC,IAAI,EAAEd,cAAc;IACpBe,KAAK;IACLL,eAAe,CAACM,QAAQ,GAAGN,eAAe,CAACO,QAAQ,GAAGP,eAAe,CAAC0L,iBAAiB;IACvFxL,aAAa,EAAEP,YAAY,GAAG;EAChC,CAAC,CAAC;EACF,MAAMmH,kBAAkB,GAAG4G,CAAC,CAACjN,oBAAoB,CAAC;IAChDtC,MAAM;IACNiC,IAAI,EAAE;IACNuG,QAAQ,CAAC,CAAC,CAAC,IAAI/G,YAAY;IAC3B+G,QAAQ,CAAC,CAAC,CAAC,IAAI/G,YAAY;IAC3BN,cAAc,CAACL,kBAAkB,CAAC;;IAElCoB,KAAK;IACLL,eAAe,CAACM,QAAQ,GAAGN,eAAe,CAACO,QAAQ,GAAGP,eAAe,CAAC0L,iBAAiB;IACvFxL,aAAa,EAAEN,YAAY,GAAG;EAChC,CAAC,CAAC;;EAEF,IAAI6G,kBAAkB,GAAGJ,SAAS;EAClC,IAAI1J,kBAAkB,CAACwB,MAAM,CAAC,CAACiM,OAAO,EAAE;IACtC3D,kBAAkB,GAAGiH,CAAC,CAACvO,gCAAgC,CAACG,cAAc,EAAEnB,MAAM,EAAEwB,YAAY,CAAC;IAC7F+N,CAAC,CAACnH,uBAAuB;MACvBC,aAAa;MACbC,kBAAkB;MAClB9G,YAAY;MACZ+G,qBAAqB;MACrBC;IACF,CAAC;EACH;EACA,IAAIhK,kBAAkB,CAACwB,MAAM,CAAC,CAACqQ,KAAK,EAAE;IACpCd,CAAC,CAAC7D,qBAAqB,CAACrD,aAAa,EAAErI,MAAM,EAAEwB,YAAY,EAAE+G,qBAAqB,EAAEC,QAAQ,CAAC;EAC/F;;EAEA,MAAMlE,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAE+K,CAAC,CAAC1M,MAAM,EAAE0M,CAAC,CAAC1M,MAAM,CAAC4B,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAM+K,CAAC,CAAC1M,MAAM,EAAR0M,CAAC,CAAC1M,MAAM,CAAA4B,oBAAA,YAAR8K,CAAC,CAAC1M,MAAM,CAAC4B,oBAAoB,GAAE,CAAC;EACnJH,OAAO,CAACI,oBAAoB;IAC1B;MACE1B,OAAO,EAAEqF,aAAa;MACtBpI,QAAQ,EAAEuB,YAAY;MACtBmD,MAAM,EAAE,EAAEjB,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE0E,qBAAqB,CAAC;IACjD,CAAC;IACD;MACEvF,OAAO,EAAE2F,kBAAkB;MAC3B1I,QAAQ,EAAEwB,YAAY;MACtBkD,MAAM,EAAE,EAAEjB,CAAC,EAAE,CAAC,EAAEE,CAAC,EAAE,CAAC,EAAEC,CAAC,EAAE+E,qBAAqB,CAAC;IACjD,CAAC;IACDJ;EACF,CAAC;EACDjE,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAE+K,CAAC,EAAEA,CAAC,CAACzM,KAAK,CAAC8B,MAAM,EAAE,CAAC,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAAN,UAAA,CAAAC,YAAA,WAAM+K,CAAC,EAADA,CAAC,CAACzM,KAAK,CAAA8B,MAAA,GAAQ,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,SAAjC0K,CAAC,CAACzM,KAAK,CAAC8B,MAAM,CAAC,CAACN,OAAO,CAACO,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;;EAEpH,IAAIrG,kBAAkB,CAACwB,MAAM,CAAC,CAACiM,OAAO,EAAE;IACtC/N,MAAM,CAACoK,kBAAkB,KAAKJ,SAAS,CAAC;IACxCqH,CAAC,CAAC7G,mBAAmB;MACnBC,kBAAkB;MAClBL,kBAAkB;MAClB7G,YAAY;MACZmH,qBAAqB;MACrBJ;IACF,CAAC;EACH;EACA,IAAIhK,kBAAkB,CAACwB,MAAM,CAAC,CAACqQ,KAAK,EAAE;IACpCd,CAAC,CAAClC,iBAAiB;MACjB1E,kBAAkB;MAClB3I,MAAM;MACNyB,YAAY;MACZmH,qBAAqB;MACrBJ;IACF,CAAC;EACH;AACF,CAAC,CAAC;;AAEFmF,CAAC,CAACa,IAAI,CAAC,yBAAyB,CAAC;AACjCC,IAAI;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACDe,iBAAiB,CAAC,CAACD,CAAC,KAAK;EACvBA,CAAC,CAACe,MAAM,CAACf,CAAC,CAAC3N,eAAe,EAAE,6DAA6D,CAAC;AAC5F,CAAC,CAAC;AACF0N,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAMxP,WAAW,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAC/B,MAAMwQ,YAAY,GAAG,YAAY;EACjC,MAAMC,YAAY,GAAG,CAAC;;EAEtB,MAAMnI,aAAa,GAAGkH,CAAC,CAACjN,oBAAoB,CAAC;IAC3CtC,MAAM,EAAEuQ,YAAY;IACpBtO,IAAI,EAAElC,WAAW;IACjBmC,KAAK;IACLL,eAAe,CAACM,QAAQ;IACxBN,eAAe,CAACC,eAAe;IAC/BD,eAAe,CAAC0L,iBAAiB;IACjCkD,WAAW,EAAED;EACf,CAAC,CAAC;EACF,MAAM7H,kBAAkB,GAAG4G,CAAC,CAACjN,oBAAoB,CAAC;IAChDtC,MAAM,EAAEuQ,YAAY;IACpBtO,IAAI,EAAElC,WAAW;IACjBmC,KAAK;IACLL,eAAe,CAACO,QAAQ;IACxBP,eAAe,CAACC,eAAe;IAC/BD,eAAe,CAAC0L,iBAAiB;IACjCkD,WAAW,EAAED;EACf,CAAC,CAAC;;EAEF;EACA,MAAME,qBAAqB,GAAGnB,CAAC,CAAC1M,MAAM,CAACwH,oBAAoB,CAAC;IAC1DvB,MAAM,EAAE,MAAM;IACdgB,MAAM,EAAE;MACNC,MAAM,EAAEwF,CAAC,CAAC1M,MAAM,CAACmH,kBAAkB,CAAC;QAClCC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC,CAAC;MACFC,UAAU,EAAE;IACd,CAAC;IACDC,QAAQ,EAAE;MACRJ,MAAM,EAAEwF,CAAC,CAAC1M,MAAM,CAACmH,kBAAkB,CAAC;QAClCC,IAAI,EAAE;AACd;AACA;AACA;AACA;MACM,CAAC,CAAC;MACFC,UAAU,EAAE,MAAM;MAClBE,OAAO,EAAE,CAAC,EAAEpK,MAAM,EAAEuQ,YAAY,CAAC,CAAC;IACpC,CAAC;IACDI,WAAW,EAAE;MACXC,KAAK,EAAEJ;IACT;EACF,CAAC,CAAC;EACF,MAAMK,WAAW,GAAGtM,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAE+K,CAAC,CAAC1M,MAAM,EAAE0M,CAAC,CAAC1M,MAAM,CAAC4B,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAM+K,CAAC,CAAC1M,MAAM,EAAR0M,CAAC,CAAC1M,MAAM,CAAA4B,oBAAA,YAAR8K,CAAC,CAAC1M,MAAM,CAAC4B,oBAAoB,GAAE,CAAC;EACvJ,MAAMqM,iBAAiB,GAAGD,WAAW,CAACzE,eAAe,CAAC;IACpDC,gBAAgB,EAAE;IAClB;MACEE,IAAI,EAAElE,aAAa,CAACmE,UAAU,CAAC,CAAC;MAChCiB,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;MAChCK,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;IACX,CAAC;;EAEH,CAAC,CAAC;EACF+C,iBAAiB,CAAC5D,WAAW,CAACwD,qBAAqB,CAAC;EACpDI,iBAAiB,CAAC3D,IAAI,CAAC,CAAC,CAAC;EACzB2D,iBAAiB,CAAC1D,GAAG,CAAC,CAAC;EACvB7I,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAE+K,CAAC,EAAEA,CAAC,CAACzM,KAAK,CAAC8B,MAAM,EAAE,CAAC,CAACiM,WAAW,CAAChM,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAAN,UAAA,CAAAC,YAAA,WAAM+K,CAAC,EAADA,CAAC,CAACzM,KAAK,CAAA8B,MAAA,GAAQ,CAACiM,WAAW,CAAChM,MAAM,CAAC,CAAC,CAAC,SAArC0K,CAAC,CAACzM,KAAK,CAAC8B,MAAM,CAAC,CAACiM,WAAW,CAAChM,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;;EAE5H;EACA,MAAMkM,WAAW,GAAGxM,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAE+K,CAAC,CAAC1M,MAAM,EAAE0M,CAAC,CAAC1M,MAAM,CAAC4B,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAM+K,CAAC,CAAC1M,MAAM,EAAR0M,CAAC,CAAC1M,MAAM,CAAA4B,oBAAA,YAAR8K,CAAC,CAAC1M,MAAM,CAAC4B,oBAAoB,GAAE,CAAC;EACvJsM,WAAW,CAACrM,oBAAoB;IAC9B;MACE1B,OAAO,EAAEqF;IACX,CAAC;IACD;MACErF,OAAO,EAAE2F;IACX,CAAC;IACD5I;EACF,CAAC;EACDwE,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAE+K,CAAC,EAAEA,CAAC,CAACzM,KAAK,CAAC8B,MAAM,EAAE,CAAC,CAACmM,WAAW,CAAClM,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAAN,UAAA,CAAAC,YAAA,WAAM+K,CAAC,EAADA,CAAC,CAACzM,KAAK,CAAA8B,MAAA,GAAQ,CAACmM,WAAW,CAAClM,MAAM,CAAC,CAAC,CAAC,SAArC0K,CAAC,CAACzM,KAAK,CAAC8B,MAAM,CAAC,CAACmM,WAAW,CAAClM,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;;EAE5H;EACA;EACA,MAAMmM,2BAA2B,GAAGzB,CAAC,CAAC1M,MAAM,CAACwH,oBAAoB,CAAC;IAChEvB,MAAM,EAAE,MAAM;IACdgB,MAAM,EAAE;MACNC,MAAM,EAAEwF,CAAC,CAAC1M,MAAM,CAACmH,kBAAkB,CAAC;QAClCC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC,CAAC;MACFC,UAAU,EAAE;IACd,CAAC;IACDC,QAAQ,EAAE;MACRJ,MAAM,EAAEwF,CAAC,CAAC1M,MAAM,CAACmH,kBAAkB,CAAC;QAClCC,IAAI,EAAE;AACd;AACA;AACA;AACA;AACA;AACA,sDAAsDuG,YAAY;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACM,CAAC,CAAC;MACFtG,UAAU,EAAE,MAAM;MAClBE,OAAO,EAAE,CAAC,EAAEpK,MAAM,EAAEuQ,YAAY,CAAC,CAAC;IACpC;EACF,CAAC,CAAC;EACF,MAAMxE,SAAS,GAAGwD,CAAC,CAAC1M,MAAM,CAAC2I,eAAe,CAAC;IACzC1C,MAAM,EAAEkI,2BAA2B,CAACC,kBAAkB,CAAC,CAAC,CAAC;IACzDzG,OAAO,EAAE;IACT;MACEC,OAAO,EAAE,CAAC;MACVgB,QAAQ,EAAEpD,aAAa,CAACmE,UAAU,CAAC;IACrC,CAAC;IACD;MACE/B,OAAO,EAAE,CAAC;MACVgB,QAAQ,EAAE9C,kBAAkB,CAAC6D,UAAU,CAAC;IAC1C,CAAC;;EAEH,CAAC,CAAC;EACF,MAAM0E,qBAAqB,GAAG3B,CAAC,CAACjN,oBAAoB,CAAC;IACnDtC,MAAM,EAAEuQ,YAAY;IACpBtO,IAAI,EAAElC,WAAW;IACjBmC,KAAK,EAAEL,eAAe,CAACM,QAAQ,GAAGN,eAAe,CAAC0L;EACpD,CAAC,CAAC;EACF,MAAM4D,iBAAiB,GAAG5M,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAE+K,CAAC,CAAC1M,MAAM,EAAE0M,CAAC,CAAC1M,MAAM,CAAC4B,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAM+K,CAAC,CAAC1M,MAAM,EAAR0M,CAAC,CAAC1M,MAAM,CAAA4B,oBAAA,YAAR8K,CAAC,CAAC1M,MAAM,CAAC4B,oBAAoB,GAAE,CAAC;EAC7J,MAAM2M,uBAAuB,GAAGD,iBAAiB,CAAC/E,eAAe,CAAC;IAChEC,gBAAgB,EAAE;IAClB;MACEE,IAAI,EAAE2E,qBAAqB,CAAC1E,UAAU,CAAC,CAAC;MACxCiB,UAAU,EAAE,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;MAChCK,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE;IACX,CAAC;;EAEH,CAAC,CAAC;EACFqD,uBAAuB,CAAClE,WAAW,CAAC8D,2BAA2B,CAAC;EAChEI,uBAAuB,CAACnE,YAAY,CAAC,CAAC,EAAElB,SAAS,CAAC;EAClDqF,uBAAuB,CAACjE,IAAI,CAAC,CAAC,CAAC;EAC/BiE,uBAAuB,CAAChE,GAAG,CAAC,CAAC;EAC7B7I,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAE+K,CAAC,EAAEA,CAAC,CAACzM,KAAK,CAAC8B,MAAM,EAAE,CAAC,CAACuM,iBAAiB,CAACtM,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAAN,UAAA,CAAAC,YAAA,WAAM+K,CAAC,EAADA,CAAC,CAACzM,KAAK,CAAA8B,MAAA,GAAQ,CAACuM,iBAAiB,CAACtM,MAAM,CAAC,CAAC,CAAC,SAA3C0K,CAAC,CAACzM,KAAK,CAAC8B,MAAM,CAAC,CAACuM,iBAAiB,CAACtM,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;;EAExI0K,CAAC,CAACvB,iBAAiB,CAACkD,qBAAqB,EAAE,YAAY,EAAE;IACvDjP,IAAI,EAAE,CAAClC,WAAW,CAAC,CAAC,CAAC,EAAEA,WAAW,CAAC,CAAC,CAAC,EAAEA,WAAW,CAAC,CAAC,CAAC,CAAC;IACtDkO,GAAG,EAAE,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,CAAC;EACxC,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEFV,CAAC,CAACa,IAAI,CAAC,yBAAyB,CAAC;AACjCC,IAAI;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACDe,iBAAiB,CAAC,CAACD,CAAC,KAAK;EACvBA,CAAC,CAACe,MAAM,CAACf,CAAC,CAAC3N,eAAe,EAAE,6DAA6D,CAAC;AAC5F,CAAC,CAAC;AACF0N,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAMxP,WAAW,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;EAC/B,MAAMsR,YAAY,GAAG,aAAa;EAClC,MAAMb,YAAY,GAAG,CAAC;;EAEtB,MAAMnI,aAAa,GAAGkH,CAAC,CAACjN,oBAAoB,CAAC;IAC3CtC,MAAM,EAAEqR,YAAY;IACpBpP,IAAI,EAAElC,WAAW;IACjBmC,KAAK,EAAEL,eAAe,CAACM,QAAQ,GAAGN,eAAe,CAAC0L,iBAAiB;IACnEkD,WAAW,EAAED;EACf,CAAC,CAAC;EACF,MAAM7H,kBAAkB,GAAG4G,CAAC,CAACjN,oBAAoB,CAAC;IAChDtC,MAAM,EAAEqR,YAAY;IACpBpP,IAAI,EAAElC,WAAW;IACjBmC,KAAK,EAAEL,eAAe,CAACO,QAAQ,GAAGP,eAAe,CAAC0L,iBAAiB;IACnEkD,WAAW,EAAED;EACf,CAAC,CAAC;;EAEF,MAAMc,WAAW,GAAG;IAClBvH,MAAM,EAAEwF,CAAC,CAAC1M,MAAM,CAACmH,kBAAkB,CAAC;MAClCC,IAAI,EAAE;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACI,CAAC,CAAC;IACFC,UAAU,EAAE;EACd,CAAC;;EAED;EACA,MAAMwG,qBAAqB,GAAGnB,CAAC,CAAC1M,MAAM,CAACwH,oBAAoB,CAAC;IAC1DvB,MAAM,EAAE,MAAM;IACdgB,MAAM,EAAEwH,WAAW;IACnB5H,YAAY,EAAE;MACZ1J,MAAM,EAAEqR,YAAY;MACpBvF,YAAY,EAAE,QAAQ;MACtBD,iBAAiB,EAAE;IACrB,CAAC;IACD8E,WAAW,EAAE;MACXC,KAAK,EAAEJ;IACT;EACF,CAAC,CAAC;;EAEF,MAAMe,cAAc,GAAGhN,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAE+K,CAAC,CAAC1M,MAAM,EAAE0M,CAAC,CAAC1M,MAAM,CAAC4B,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAM+K,CAAC,CAAC1M,MAAM,EAAR0M,CAAC,CAAC1M,MAAM,CAAA4B,oBAAA,YAAR8K,CAAC,CAAC1M,MAAM,CAAC4B,oBAAoB,GAAE,CAAC;EAC1J,MAAMqM,iBAAiB,GAAGS,cAAc,CAACnF,eAAe,CAAC;IACvDC,gBAAgB,EAAE,EAAE;IACpBC,sBAAsB,EAAE;MACtBC,IAAI,EAAElE,aAAa,CAACmE,UAAU,CAAC,CAAC;MAChCI,eAAe,EAAE,GAAG;MACpBC,WAAW,EAAE,OAAO;MACpBC,YAAY,EAAE;IAChB;EACF,CAAC,CAAC;EACFgE,iBAAiB,CAAC5D,WAAW,CAACwD,qBAAqB,CAAC;EACpDI,iBAAiB,CAAC3D,IAAI,CAAC,CAAC,CAAC;EACzB2D,iBAAiB,CAAC1D,GAAG,CAAC,CAAC;EACvB7I,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAE+K,CAAC,EAAEA,CAAC,CAACzM,KAAK,CAAC8B,MAAM,EAAE,CAAC,CAAC2M,cAAc,CAAC1M,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAAN,UAAA,CAAAC,YAAA,WAAM+K,CAAC,EAADA,CAAC,CAACzM,KAAK,CAAA8B,MAAA,GAAQ,CAAC2M,cAAc,CAAC1M,MAAM,CAAC,CAAC,CAAC,SAAxC0K,CAAC,CAACzM,KAAK,CAAC8B,MAAM,CAAC,CAAC2M,cAAc,CAAC1M,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;;EAElI;EACA,MAAMkM,WAAW,GAAGxM,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAE+K,CAAC,CAAC1M,MAAM,EAAE0M,CAAC,CAAC1M,MAAM,CAAC4B,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAM+K,CAAC,CAAC1M,MAAM,EAAR0M,CAAC,CAAC1M,MAAM,CAAA4B,oBAAA,YAAR8K,CAAC,CAAC1M,MAAM,CAAC4B,oBAAoB,GAAE,CAAC;EACvJsM,WAAW,CAACrM,oBAAoB;IAC9B;MACE1B,OAAO,EAAEqF;IACX,CAAC;IACD;MACErF,OAAO,EAAE2F;IACX,CAAC;IACD5I;EACF,CAAC;EACDwE,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAE+K,CAAC,EAAEA,CAAC,CAACzM,KAAK,CAAC8B,MAAM,EAAE,CAAC,CAACmM,WAAW,CAAClM,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAAN,UAAA,CAAAC,YAAA,WAAM+K,CAAC,EAADA,CAAC,CAACzM,KAAK,CAAA8B,MAAA,GAAQ,CAACmM,WAAW,CAAClM,MAAM,CAAC,CAAC,CAAC,SAArC0K,CAAC,CAACzM,KAAK,CAAC8B,MAAM,CAAC,CAACmM,WAAW,CAAClM,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;;EAE5H;EACA;EACA,MAAM0L,YAAY,GAAG,YAAY;EACjC,MAAMiB,uBAAuB,GAAGjC,CAAC,CAAC1M,MAAM,CAACwH,oBAAoB,CAAC;IAC5DvB,MAAM,EAAE,MAAM;IACdgB,MAAM,EAAEwH,WAAW;IACnBnH,QAAQ,EAAE;MACRJ,MAAM,EAAEwF,CAAC,CAAC1M,MAAM,CAACmH,kBAAkB,CAAC;QAClCC,IAAI,EAAE;AACd;AACA;AACA;AACA;MACM,CAAC,CAAC;MACFC,UAAU,EAAE,MAAM;MAClBE,OAAO,EAAE,CAAC,EAAEpK,MAAM,EAAEuQ,YAAY,CAAC,CAAC;IACpC,CAAC;IACD7G,YAAY,EAAE;MACZ1J,MAAM,EAAEqR,YAAY;MACpBvF,YAAY,EAAE,OAAO;MACrBD,iBAAiB,EAAE;IACrB,CAAC;IACD8E,WAAW,EAAE;MACXC,KAAK,EAAEJ;IACT;EACF,CAAC,CAAC;EACF,MAAMiB,wBAAwB,GAAGlC,CAAC,CAACjN,oBAAoB,CAAC;IACtDtC,MAAM,EAAEuQ,YAAY;IACpBtO,IAAI,EAAElC,WAAW;IACjBmC,KAAK,EAAEL,eAAe,CAACM,QAAQ,GAAGN,eAAe,CAAC0L,iBAAiB;IACnEkD,WAAW,EAAED;EACf,CAAC,CAAC;EACF,MAAMkB,2BAA2B,GAAGnC,CAAC,CAACjN,oBAAoB,CAAC;IACzDtC,MAAM,EAAEuQ,YAAY;IACpBtO,IAAI,EAAElC,WAAW;IACjBmC,KAAK,EAAEL,eAAe,CAACM,QAAQ,GAAGN,eAAe,CAAC0L;EACpD,CAAC,CAAC;;EAEF,MAAMoE,gBAAgB,GAAGpN,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAE+K,CAAC,CAAC1M,MAAM,EAAE0M,CAAC,CAAC1M,MAAM,CAAC4B,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAM+K,CAAC,CAAC1M,MAAM,EAAR0M,CAAC,CAAC1M,MAAM,CAAA4B,oBAAA,YAAR8K,CAAC,CAAC1M,MAAM,CAAC4B,oBAAoB,GAAE,CAAC;EAC5J,MAAMmN,mBAAmB,GAAGD,gBAAgB,CAACvF,eAAe,CAAC;IAC3DC,gBAAgB,EAAE;IAClB;MACEE,IAAI,EAAEkF,wBAAwB,CAACjF,UAAU,CAAC,CAAC;MAC3CiB,UAAU,EAAE,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,CAAC,CAAC;MAC9CC,MAAM,EAAE,OAAO;MACfC,OAAO,EAAE,SAAS;MAClB8D,aAAa,EAAEH,2BAA2B,CAAClF,UAAU,CAAC;IACxD,CAAC,CAAC;;IAEFF,sBAAsB,EAAE;MACtBC,IAAI,EAAE5D,kBAAkB,CAAC6D,UAAU,CAAC,CAAC;MACrCK,WAAW,EAAE,MAAM;MACnBC,YAAY,EAAE;IAChB;EACF,CAAC,CAAC;EACF8E,mBAAmB,CAAC1E,WAAW,CAACsE,uBAAuB,CAAC;EACxDI,mBAAmB,CAACzE,IAAI,CAAC,CAAC,CAAC;EAC3ByE,mBAAmB,CAACxE,GAAG,CAAC,CAAC;EACzB7I,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAE+K,CAAC,EAAEA,CAAC,CAACzM,KAAK,CAAC8B,MAAM,EAAE,CAAC,CAAC+M,gBAAgB,CAAC9M,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAAN,UAAA,CAAAC,YAAA,WAAM+K,CAAC,EAADA,CAAC,CAACzM,KAAK,CAAA8B,MAAA,GAAQ,CAAC+M,gBAAgB,CAAC9M,MAAM,CAAC,CAAC,CAAC,SAA1C0K,CAAC,CAACzM,KAAK,CAAC8B,MAAM,CAAC,CAAC+M,gBAAgB,CAAC9M,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;;EAEtI0K,CAAC,CAACvB,iBAAiB,CAAC0D,2BAA2B,EAAEnB,YAAY,EAAE;IAC7DtO,IAAI,EAAE,CAAClC,WAAW,CAAC,CAAC,CAAC,EAAEA,WAAW,CAAC,CAAC,CAAC,EAAEA,WAAW,CAAC,CAAC,CAAC,CAAC;IACtDkO,GAAG,EAAE,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,EAAEC,CAAC,EAAE,GAAG,CAAC;EACxC,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}