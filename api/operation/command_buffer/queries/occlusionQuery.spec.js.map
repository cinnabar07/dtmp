{"version":3,"file":"occlusionQuery.spec.js","names":["description","kUnitCaseParamsBuilder","makeTestGroup","assert","range","unreachable","kMaxQueryCount","GPUTest","kRequiredQueryBufferOffsetAlignment","kBytesPerQuery","kTextureSize","kRenderModes","kBufferOffsets","RenderPassHelper","constructor","pass","helper","_pass","_helper","setScissorRect","x","y","width","height","_queryHelper","setStencilReference","ref","beginOcclusionQuery","queryIndex","begin","undefined","endOcclusionQuery","QueryHelperDirect","endFn","_endFn","setPipeline","pipeline","setVertexBuffer","buffer","draw","count","end","fn","QueryStarterDirect","QueryHelperRenderBundle","_encoder","QueryStarterRenderBundle","device","renderPassDescriptor","_device","colorAttachment","colorAttachments","_renderBundleEncoderDescriptor","colorFormats","depthStencilFormat","depthStencilAttachment","depthLoadOp","stencilLoadOp","sampleCount","resolveTarget","createRenderBundleEncoder","executeBundles","finish","OcclusionQueryTest","createVertexBuffer","data","makeBufferWithContents","GPUBufferUsage","VERTEX","createSingleTriangleVertexBuffer","z","Float32Array","readBufferAsBigUint64","globalThis","_TRAMPOLINE_","mapAsync","GPUMapMode","READ","result","BigUint64Array","getMappedRange","slice","unmap","setup","params","numQueries","sampleMask","alpha","writeMask","bufferOffset","renderMode","queryResolveBufferOffset","queryResolveBuffer","createBufferTracked","size","usage","QUERY_RESOLVE","COPY_SRC","readBuffer","MAP_READ","COPY_DST","vertexBuffer","renderTargetTexture","createTextureTracked","format","GPUTextureUsage","RENDER_ATTACHMENT","multisampleRenderTarget","depthStencilTexture","module","createShaderModule","code","haveDepth","includes","haveStencil","createRenderPipeline","layout","vertex","entryPoint","buffers","arrayStride","attributes","shaderLocation","offset","fragment","targets","multisample","mask","alphaToCoverageEnabled","depthStencil","depthWriteEnabled","depthCompare","stencilFront","compare","querySetOffset","occlusionQuerySet","createQuerySetTracked","type","view","createView","loadOp","storeOp","depthStoreOp","depthClearValue","stencilClearValue","stencilStoreOp","runQueryTest","resources","encodePassFn","checkQueryIndexResultFn","queryIndices","i","encoder","createCommandEncoder","beginRenderPass","resolveQuerySet","copyBufferToBuffer","queue","submit","resultNdx","passed","kQueryTestBaseParams","combine","g","test","desc","t","kNumQueries","expect","queryHelper","expectPassed","makeQueryRunner","makeQueryChecker","getScissorRect","occluded","name","scissorCase","vertexBufferAtZ0","vertexBufferAtZ1","createQuad","vertexBufferBL","vertexBufferTR","drawMask","xOffset","yOffset","vertexBuffers","numPassedPerGroup","Array","fill","queryCount","resultCount","groupIndex","expected","forEach","numPassed","queryGroup","readBuffer2","readBuffer3","renderSomething","results","Promise","all","r"],"sources":["../../../../../../src/webgpu/api/operation/command_buffer/queries/occlusionQuery.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nAPI operations tests for occlusion queries.\n\n- test query with\n  - scissor\n  - sample mask\n  - alpha to coverage\n  - stencil\n  - depth test\n- test empty query (no draw) (should be cleared?)\n- test via render bundle\n- test resolveQuerySet with non-zero firstIndex\n- test no queries is zero\n- test 0x0 -> 0x3 sample mask\n- test 0 -> 1 alpha to coverage\n- test resolving twice in same pass keeps values\n- test resolving twice across pass keeps values\n- test resolveQuerySet destinationOffset\n`;import { kUnitCaseParamsBuilder } from '../../../../../common/framework/params_builder.js';\nimport { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport {\n  assert,\n\n  range,\n  unreachable } from\n'../../../../../common/util/util.js';\nimport { kMaxQueryCount } from '../../../../capability_info.js';\n\nimport { GPUTest } from '../../../../gpu_test.js';\n\nconst kRequiredQueryBufferOffsetAlignment = 256;\nconst kBytesPerQuery = 8;\nconst kTextureSize = [4, 4];\n\nconst kRenderModes = ['direct', 'render-bundle'];\n\n\nconst kBufferOffsets = ['zero', 'non-zero'];\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// MAINTENANCE_TODO: Refactor these helper classes to use GPUTestBase.createEncoder\n//\n// The refactor would require some new features in CommandBufferMaker such as:\n//\n// * Multi render bundle in single render pass support\n//\n// * Some way to allow calling render pass commands on render bundle encoder.\n//   Potentially have a special abstract encoder that wraps the two and defers\n//   relevant calls appropriately.\n\n/**\n * This class is used by the RenderPassHelper below to\n * abstract calling these 4 functions on a RenderPassEncoder or a RenderBundleEncoder.\n */\n\n\n\n\n\n\n\n\n\n\n\n/**\n * This class helps use a render pass encoder or a render bundle encoder\n * in the correct way given the order that operations must happen, in order to be\n * compatible across both paths.\n */\nclass RenderPassHelper {\n\n\n\n\n  constructor(pass, helper) {\n    this._pass = pass;\n    this._helper = helper;\n  }\n  setScissorRect(x, y, width, height) {\n    assert(!this._queryHelper);\n    this._pass.setScissorRect(x, y, width, height);\n  }\n  setStencilReference(ref) {\n    assert(!this._queryHelper);\n    this._pass.setStencilReference(ref);\n  }\n  beginOcclusionQuery(queryIndex) {\n    assert(!this._queryHelper);\n    this._pass.beginOcclusionQuery(queryIndex);\n    this._queryHelper = this._helper.begin(() => {\n      assert(!!this._queryHelper);\n      this._queryHelper = undefined;\n      this._pass.endOcclusionQuery();\n    });\n    return this._queryHelper;\n  }\n}\n\n/**\n * Helper class for using a render pass encoder directly\n */\nclass QueryHelperDirect {\n\n\n\n  constructor(pass, endFn) {\n    this._pass = pass;\n    this._endFn = endFn;\n  }\n  setPipeline(pipeline) {\n    assert(!!this._pass);\n    this._pass.setPipeline(pipeline);\n  }\n  setVertexBuffer(buffer) {\n    assert(!!this._pass);\n    this._pass.setVertexBuffer(0, buffer);\n  }\n  draw(count) {\n    assert(!!this._pass);\n    this._pass.draw(count);\n  }\n  end() {\n    // make this object impossible to use after calling end\n    const fn = this._endFn;\n    this._endFn = unreachable;\n    this._pass = undefined;\n    fn();\n  }\n}\n\n/**\n * Helper class for starting a query on a render pass encoder directly\n */\nclass QueryStarterDirect {\n\n\n\n  constructor(pass) {\n    this._pass = pass;\n  }\n  begin(endFn) {\n    assert(!this._helper);\n    this._helper = new QueryHelperDirect(this._pass, () => {\n      this._helper = undefined;\n      endFn();\n    });\n    return this._helper;\n  }\n}\n\n/**\n * Helper class for using a render bundle encoder.\n */\nclass QueryHelperRenderBundle {\n\n\n\n  constructor(pass, endFn) {\n    this._encoder = pass;\n    this._endFn = endFn;\n  }\n  setPipeline(pipeline) {\n    assert(!!this._encoder);\n    this._encoder.setPipeline(pipeline);\n  }\n  setVertexBuffer(buffer) {\n    assert(!!this._encoder);\n    this._encoder.setVertexBuffer(0, buffer);\n  }\n  draw(count) {\n    assert(!!this._encoder);\n    this._encoder.draw(count);\n  }\n  end() {\n    // make this object impossible to use after calling end\n    const fn = this._endFn;\n    this._endFn = unreachable;\n    this._encoder = undefined;\n    fn();\n  }\n}\n\n/**\n * Helper class for starting a query on a render bundle encoder\n */\nclass QueryStarterRenderBundle {\n\n\n\n\n\n\n  constructor(\n  device,\n  pass,\n  renderPassDescriptor)\n  {\n    this._device = device;\n    this._pass = pass;\n    const colorAttachment =\n    renderPassDescriptor.colorAttachments[\n    0];\n    this._renderBundleEncoderDescriptor = {\n      colorFormats: ['rgba8unorm'],\n      depthStencilFormat: renderPassDescriptor.depthStencilAttachment?.depthLoadOp ?\n      'depth24plus' :\n      renderPassDescriptor.depthStencilAttachment?.stencilLoadOp ?\n      'stencil8' :\n      undefined,\n      sampleCount: colorAttachment.resolveTarget ? 4 : 1\n    };\n  }\n  begin(endFn) {\n    assert(!this._encoder);\n    this._encoder = this._device.createRenderBundleEncoder(this._renderBundleEncoderDescriptor);\n    this._helper = new QueryHelperRenderBundle(this._encoder, () => {\n      assert(!!this._encoder);\n      assert(!!this._helper);\n      this._pass.executeBundles([this._encoder.finish()]);\n      this._helper = undefined;\n      this._encoder = undefined;\n      endFn();\n    });\n    return this._helper;\n  }\n  setPipeline(pipeline) {\n    assert(!!this._encoder);\n    this._encoder.setPipeline(pipeline);\n  }\n  setVertexBuffer(buffer) {\n    assert(!!this._encoder);\n    this._encoder.setVertexBuffer(0, buffer);\n  }\n  draw(count) {\n    assert(!!this._encoder);\n    this._encoder.draw(count);\n  }\n}\n\nclass OcclusionQueryTest extends GPUTest {\n  createVertexBuffer(data) {\n    return this.makeBufferWithContents(data, GPUBufferUsage.VERTEX);\n  }\n  createSingleTriangleVertexBuffer(z) {\n\n    return this.createVertexBuffer(new Float32Array([\n    -0.5, -0.5, z,\n    0.5, -0.5, z,\n    -0.5, 0.5, z]\n    ));\n  }\n  async readBufferAsBigUint64(buffer) {\n    await globalThis._TRAMPOLINE_(\"mapAsync\", buffer, buffer.mapAsync, [GPUMapMode.READ], () => buffer.mapAsync(GPUMapMode.READ));\n    const result = new BigUint64Array(buffer.getMappedRange().slice(0));\n    buffer.unmap();\n    return result;\n  }\n  setup(params) {\n    const {\n      numQueries,\n      depthStencilFormat,\n      sampleMask = 0xffffffff,\n      alpha,\n      sampleCount,\n      writeMask = 0xf,\n      bufferOffset,\n      renderMode\n    } = params;\n    const { device } = this;\n\n    const queryResolveBufferOffset =\n    bufferOffset === 'non-zero' ? kRequiredQueryBufferOffsetAlignment : 0;\n    const queryResolveBuffer = this.createBufferTracked({\n      size: numQueries * 8 + queryResolveBufferOffset,\n      usage: GPUBufferUsage.QUERY_RESOLVE | GPUBufferUsage.COPY_SRC\n    });\n\n    const readBuffer = this.createBufferTracked({\n      size: numQueries * kBytesPerQuery,\n      usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST\n    });\n\n    const vertexBuffer = this.createSingleTriangleVertexBuffer(0);\n\n    const renderTargetTexture = this.createTextureTracked({\n      format: 'rgba8unorm',\n      size: kTextureSize,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT\n    });\n\n    const multisampleRenderTarget = sampleCount ?\n    this.createTextureTracked({\n      size: kTextureSize,\n      format: 'rgba8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT,\n      sampleCount\n    }) :\n    null;\n\n    const depthStencilTexture = depthStencilFormat ?\n    this.createTextureTracked({\n      format: depthStencilFormat,\n      size: kTextureSize,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT\n    }) :\n    undefined;\n\n    const module = device.createShaderModule({\n      code: `\n        @vertex fn vs(@location(0) pos: vec4f) -> @builtin(position) vec4f {\n          return pos;\n        }\n\n        @fragment fn fs() -> @location(0) vec4f {\n          return vec4f(0, 0, 0, ${alpha === undefined ? 1 : alpha});\n        }\n      `\n    });\n\n    const haveDepth = !!depthStencilFormat && depthStencilFormat.includes('depth');\n    const haveStencil = !!depthStencilFormat && depthStencilFormat.includes('stencil');\n    assert(!(haveDepth && haveStencil), 'code does not handle mixed depth-stencil');\n\n    const pipeline = device.createRenderPipeline({\n      layout: 'auto',\n      vertex: {\n        module,\n        entryPoint: 'vs',\n        buffers: [\n        {\n          arrayStride: 3 * 4,\n          attributes: [\n          {\n            shaderLocation: 0,\n            offset: 0,\n            format: 'float32x3'\n          }]\n\n        }]\n\n      },\n      fragment: {\n        module,\n        entryPoint: 'fs',\n        targets: [{ format: 'rgba8unorm', writeMask }]\n      },\n      ...(sampleCount && {\n        multisample: {\n          count: sampleCount,\n          mask: alpha === undefined ? sampleMask : 0xffffffff,\n          alphaToCoverageEnabled: alpha !== undefined\n        }\n      }),\n      ...(depthStencilTexture && {\n        depthStencil: {\n          format: depthStencilFormat,\n          depthWriteEnabled: haveDepth,\n          depthCompare: haveDepth ? 'less-equal' : 'always',\n          ...(haveStencil && {\n            stencilFront: {\n              compare: 'equal'\n            }\n          })\n        }\n      })\n    });\n\n    const querySetOffset = params?.querySetOffset === 'non-zero' ? 7 : 0;\n    const occlusionQuerySet = this.createQuerySetTracked({\n      type: 'occlusion',\n      count: numQueries + querySetOffset\n    });\n\n    const renderPassDescriptor = {\n      colorAttachments: sampleCount ?\n      [\n      {\n        view: multisampleRenderTarget.createView(),\n        resolveTarget: renderTargetTexture.createView(),\n        loadOp: 'clear',\n        storeOp: 'store'\n      }] :\n\n      [\n      {\n        view: renderTargetTexture.createView(),\n        loadOp: 'clear',\n        storeOp: 'store'\n      }],\n\n      ...(haveDepth && {\n        depthStencilAttachment: {\n          view: depthStencilTexture.createView(),\n          depthLoadOp: 'clear',\n          depthStoreOp: 'store',\n          depthClearValue: 0.5\n        }\n      }),\n      ...(haveStencil && {\n        depthStencilAttachment: {\n          view: depthStencilTexture.createView(),\n          stencilClearValue: 0,\n          stencilLoadOp: 'clear',\n          stencilStoreOp: 'store'\n        }\n      }),\n      occlusionQuerySet\n    };\n\n    return {\n      readBuffer,\n      vertexBuffer,\n      queryResolveBuffer,\n      queryResolveBufferOffset,\n      occlusionQuerySet,\n      renderTargetTexture,\n      renderPassDescriptor,\n      pipeline,\n      depthStencilTexture,\n      querySetOffset,\n      renderMode\n    };\n  }\n  async runQueryTest(\n  resources,\n  renderPassDescriptor,\n  encodePassFn,\n  checkQueryIndexResultFn)\n  {\n    const { device } = this;\n    const {\n      readBuffer,\n      queryResolveBuffer,\n      queryResolveBufferOffset,\n      occlusionQuerySet,\n      querySetOffset,\n      renderMode = 'direct'\n    } = resources;\n    const numQueries = occlusionQuerySet.count - querySetOffset;\n    const queryIndices = range(numQueries, (i) => i + querySetOffset);\n\n    const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", device, device.createCommandEncoder, [], () => device.createCommandEncoder());\n    if (renderPassDescriptor) {\n      const pass = encoder.beginRenderPass(renderPassDescriptor);\n      const helper = new RenderPassHelper(\n        pass,\n        renderMode === 'direct' ?\n        new QueryStarterDirect(pass) :\n        new QueryStarterRenderBundle(device, pass, renderPassDescriptor)\n      );\n\n      for (const queryIndex of queryIndices) {\n        encodePassFn(helper, queryIndex);\n      }\n      pass.end();\n    }\n\n    encoder.resolveQuerySet(\n      occlusionQuerySet,\n      querySetOffset,\n      numQueries,\n      queryResolveBuffer,\n      queryResolveBufferOffset\n    );\n    encoder.copyBufferToBuffer(\n      queryResolveBuffer,\n      queryResolveBufferOffset,\n      readBuffer,\n      0,\n      readBuffer.size\n    );\n    globalThis._TRAMPOLINE_(\"submit\", device, device.queue.submit, [[encoder.finish()]], () => device.queue.submit([encoder.finish()]));\n\n    const result = await this.readBufferAsBigUint64(readBuffer);\n    for (const queryIndex of queryIndices) {\n      const resultNdx = queryIndex - querySetOffset;\n      const passed = !!result[resultNdx];\n      checkQueryIndexResultFn(passed, queryIndex);\n    }\n\n    return result;\n  }\n}\n\nconst kQueryTestBaseParams = kUnitCaseParamsBuilder.\ncombine('writeMask', [0xf, 0x0]).\ncombine('renderMode', kRenderModes).\ncombine('bufferOffset', kBufferOffsets).\ncombine('querySetOffset', kBufferOffsets);\n\nexport const g = makeTestGroup(OcclusionQueryTest);\n\ng.test('occlusion_query,initial').\ndesc(`Test getting contents of QuerySet without any queries.`).\nfn(async (t) => {\n  const kNumQueries = kMaxQueryCount;\n  const resources = t.setup({ numQueries: kNumQueries });\n  await t.runQueryTest(\n    resources,\n    null,\n    () => {},\n    (passed) => {\n      t.expect(!passed);\n    }\n  );\n});\n\ng.test('occlusion_query,basic').\ndesc('Test all queries pass').\nparams(kQueryTestBaseParams).\nfn(async (t) => {\n  const { writeMask, renderMode, bufferOffset, querySetOffset } = t.params;\n  const kNumQueries = 30;\n  const resources = t.setup({\n    writeMask,\n    renderMode,\n    bufferOffset,\n    querySetOffset,\n    numQueries: kNumQueries\n  });\n  const { renderPassDescriptor, vertexBuffer, pipeline } = resources;\n\n  await t.runQueryTest(\n    resources,\n    renderPassDescriptor,\n    (helper, queryIndex) => {\n      const queryHelper = helper.beginOcclusionQuery(queryIndex);\n      queryHelper.setPipeline(pipeline);\n      queryHelper.setVertexBuffer(vertexBuffer);\n      queryHelper.draw(3);\n      queryHelper.end();\n    },\n    (passed, queryIndex) => {\n      const expectPassed = true;\n      t.expect(\n        !!passed === expectPassed,\n        `queryIndex: ${queryIndex}, was: ${!!passed}, expected: ${expectPassed}`\n      );\n    }\n  );\n});\n\ng.test('occlusion_query,empty').\ndesc(\n  `\n      Test beginOcclusionQuery/endOcclusionQuery with nothing in between clears the queries\n\n      Calls beginOcclusionQuery/draw/endOcclusionQuery that should show passing fragments\n      and validates they passed. Then executes the same queries (same QuerySet) without drawing.\n      Those queries should have not passed.\n    `\n).\nfn(async (t) => {\n  const kNumQueries = 30;\n  const resources = t.setup({ numQueries: kNumQueries });\n  const { vertexBuffer, renderPassDescriptor, pipeline } = resources;\n\n  const makeQueryRunner = (draw) => {\n    return (helper, queryIndex) => {\n      const queryHelper = helper.beginOcclusionQuery(queryIndex);\n      queryHelper.setPipeline(pipeline);\n      queryHelper.setVertexBuffer(vertexBuffer);\n      if (draw) {\n        queryHelper.draw(3);\n      }\n      queryHelper.end();\n    };\n  };\n\n  const makeQueryChecker = (draw) => {\n    return (passed, queryIndex) => {\n      const expectPassed = draw;\n      t.expect(\n        !!passed === expectPassed,\n        `draw: ${draw}, queryIndex: ${queryIndex}, was: ${!!passed}, expected: ${expectPassed}`\n      );\n    };\n  };\n\n  await t.runQueryTest(\n    resources,\n    renderPassDescriptor,\n    makeQueryRunner(true),\n    makeQueryChecker(true)\n  );\n  await t.runQueryTest(\n    resources,\n    renderPassDescriptor,\n    makeQueryRunner(false),\n    makeQueryChecker(false)\n  );\n});\n\ng.test('occlusion_query,scissor').\ndesc(\n  `\n      Test beginOcclusionQuery/endOcclusionQuery using scissor to occlude\n    `\n).\nparams(kQueryTestBaseParams).\nfn(async (t) => {\n  const { writeMask, renderMode, bufferOffset, querySetOffset } = t.params;\n  const kNumQueries = 30;\n  const resources = t.setup({\n    writeMask,\n    renderMode,\n    bufferOffset,\n    querySetOffset,\n    numQueries: kNumQueries\n  });\n  const { renderPassDescriptor, renderTargetTexture, vertexBuffer, pipeline } = resources;\n\n  const getScissorRect = (i) => {\n    const { width, height } = renderTargetTexture;\n    switch (i % 4) {\n      case 0: // whole target\n        return {\n          x: 0,\n          y: 0,\n          width,\n          height,\n          occluded: false,\n          name: 'whole target'\n        };\n      case 1: // center\n        return {\n          x: width / 4,\n          y: height / 4,\n          width: width / 2,\n          height: height / 2,\n          occluded: false,\n          name: 'center'\n        };\n      case 2: // none\n        return {\n          x: width / 4,\n          y: height / 4,\n          width: 0,\n          height: 0,\n          occluded: true,\n          name: 'none'\n        };\n      case 3: // top 1/4\n        return {\n          x: 0,\n          y: 0,\n          width,\n          height: height / 2,\n          occluded: true,\n          name: 'top quarter'\n        };\n      default:\n        unreachable();\n    }\n  };\n\n  await t.runQueryTest(\n    resources,\n    renderPassDescriptor,\n    (helper, queryIndex) => {\n      const { x, y, width, height } = getScissorRect(queryIndex);\n      helper.setScissorRect(x, y, width, height);\n      const queryHelper = helper.beginOcclusionQuery(queryIndex);\n      queryHelper.setPipeline(pipeline);\n      queryHelper.setVertexBuffer(vertexBuffer);\n      queryHelper.draw(3);\n      queryHelper.end();\n    },\n    (passed, queryIndex) => {\n      const { occluded, name: scissorCase } = getScissorRect(queryIndex);\n      const expectPassed = !occluded;\n      t.expect(\n        !!passed === expectPassed,\n        `queryIndex: ${queryIndex}, scissorCase: ${scissorCase}, was: ${!!passed}, expected: ${expectPassed}`\n      );\n    }\n  );\n});\n\ng.test('occlusion_query,depth').\ndesc(\n  `\n      Test beginOcclusionQuery/endOcclusionQuery using depth test to occlude\n\n      Compares depth against 0.5, with alternating vertex buffers which have a depth\n      of 0 and 1. When depth check passes, we expect non-zero successful fragments.\n    `\n).\nparams(kQueryTestBaseParams).\nfn(async (t) => {\n  const { writeMask, renderMode, bufferOffset, querySetOffset } = t.params;\n  const kNumQueries = 30;\n  const resources = t.setup({\n    writeMask,\n    renderMode,\n    bufferOffset,\n    querySetOffset,\n    numQueries: kNumQueries,\n    depthStencilFormat: 'depth24plus'\n  });\n  const { vertexBuffer: vertexBufferAtZ0, renderPassDescriptor, pipeline } = resources;\n  const vertexBufferAtZ1 = t.createSingleTriangleVertexBuffer(1);\n\n  await t.runQueryTest(\n    resources,\n    renderPassDescriptor,\n    (helper, queryIndex) => {\n      const queryHelper = helper.beginOcclusionQuery(queryIndex);\n      queryHelper.setPipeline(pipeline);\n      queryHelper.setVertexBuffer(queryIndex % 2 ? vertexBufferAtZ1 : vertexBufferAtZ0);\n      queryHelper.draw(3);\n      queryHelper.end();\n    },\n    (passed, queryIndex) => {\n      const expectPassed = queryIndex % 2 === 0;\n      t.expect(\n        !!passed === expectPassed,\n        `queryIndex: ${queryIndex}, was: ${!!passed}, expected: ${expectPassed}`\n      );\n    }\n  );\n});\n\ng.test('occlusion_query,stencil').\ndesc(\n  `\n      Test beginOcclusionQuery/endOcclusionQuery using stencil to occlude\n\n      Compares stencil against 0, with alternating stencil reference values of\n      of 0 and 1. When stencil test passes, we expect non-zero successful fragments.\n    `\n).\nparams(kQueryTestBaseParams).\nfn(async (t) => {\n  const { writeMask, renderMode, bufferOffset, querySetOffset } = t.params;\n  const kNumQueries = 30;\n  const resources = t.setup({\n    writeMask,\n    renderMode,\n    bufferOffset,\n    querySetOffset,\n    numQueries: kNumQueries,\n    depthStencilFormat: 'stencil8'\n  });\n  const { vertexBuffer, renderPassDescriptor, pipeline } = resources;\n\n  await t.runQueryTest(\n    resources,\n    renderPassDescriptor,\n    (helper, queryIndex) => {\n      helper.setStencilReference(queryIndex % 2);\n      const queryHelper = helper.beginOcclusionQuery(queryIndex);\n      queryHelper.setPipeline(pipeline);\n      queryHelper.setVertexBuffer(vertexBuffer);\n      queryHelper.draw(3);\n      queryHelper.end();\n    },\n    (passed, queryIndex) => {\n      const expectPassed = queryIndex % 2 === 0;\n      t.expect(\n        !!passed === expectPassed,\n        `queryIndex: ${queryIndex}, was: ${!!passed}, expected: ${expectPassed}`\n      );\n    }\n  );\n});\n\ng.test('occlusion_query,sample_mask').\ndesc(\n  `\n      Test beginOcclusionQuery/endOcclusionQuery using sample_mask to occlude\n\n      Set sampleMask to 0, 2, 4, 6 and draw quads in top right or bottom left corners of the texel.\n      If the corner we draw to matches the corner masked we expect non-zero successful fragments.\n\n      See: https://learn.microsoft.com/en-us/windows/win32/api/d3d11/ne-d3d11-d3d11_standard_multisample_quality_levels\n    `\n).\nparams(kQueryTestBaseParams.combine('sampleMask', [0, 2, 4, 6])).\nfn(async (t) => {\n  const { writeMask, renderMode, bufferOffset, querySetOffset, sampleMask } = t.params;\n  const kNumQueries = 30;\n  const sampleCount = 4;\n  const resources = t.setup({\n    writeMask,\n    renderMode,\n    bufferOffset,\n    querySetOffset,\n    numQueries: kNumQueries,\n    sampleCount,\n    sampleMask\n  });\n  const { renderPassDescriptor, pipeline } = resources;\n\n  const createQuad = (offset) => {\n\n    return t.createVertexBuffer(new Float32Array([\n    offset + 0, offset + 0, 0,\n    offset + 0.25, offset + 0, 0,\n    offset + 0, offset + 0.25, 0,\n    offset + 0, offset + 0.25, 0,\n    offset + 0.25, offset + 0, 0,\n    offset + 0.25, offset + 0.25, 0]\n    ));\n  };\n\n  const vertexBufferBL = createQuad(0);\n  const vertexBufferTR = createQuad(0.25);\n\n  await t.runQueryTest(\n    resources,\n    renderPassDescriptor,\n    (helper, queryIndex) => {\n      const queryHelper = helper.beginOcclusionQuery(queryIndex);\n      queryHelper.setPipeline(pipeline);\n      queryHelper.setVertexBuffer(queryIndex % 2 ? vertexBufferTR : vertexBufferBL);\n      queryHelper.draw(6);\n      queryHelper.end();\n    },\n    (passed, queryIndex) => {\n      // Above we draw to a specific corner (sample) of a multi-sampled texel\n      // drawMask is the \"sampleMask\" representation of that corner.\n      // In other words, if drawMask is 2 (we drew to the top right) and\n      // sampleMask is 2 (drawing is allowed to the top right) then we expect\n      // passing fragments.\n      const drawMask = queryIndex % 2 ? 2 : 4;\n      const expectPassed = !!(sampleMask & drawMask);\n      t.expect(\n        !!passed === expectPassed,\n        `queryIndex: ${queryIndex}, was: ${!!passed}, expected: ${expectPassed}`\n      );\n    }\n  );\n});\n\ng.test('occlusion_query,alpha_to_coverage').\ndesc(\n  `\n      Test beginOcclusionQuery/endOcclusionQuery using alphaToCoverage to occlude\n\n      Set alpha to 0, 0.25, 0.5, 0.75, and 1, draw quads in 4 corners of texel.\n      Some should be culled. We count how many passed via queries. It's undefined which\n      will pass but it is defined how many will pass for a given alpha value.\n\n      Note: It seems like the result is well defined but if we find some devices/drivers\n      don't follow this exactly then we can relax check for the expected number of passed\n      queries.\n\n      See: https://bgolus.medium.com/anti-aliased-alpha-test-the-esoteric-alpha-to-coverage-8b177335ae4f\n    `\n).\nparams(kQueryTestBaseParams.combine('alpha', [0, 0.25, 0.5, 0.75, 1.0])).\nfn(async (t) => {\n  const { writeMask, renderMode, bufferOffset, querySetOffset, alpha } = t.params;\n  const kNumQueries = 32;\n  const sampleCount = 4;\n  const resources = t.setup({\n    writeMask,\n    renderMode,\n    bufferOffset,\n    querySetOffset,\n    numQueries: kNumQueries,\n    sampleCount,\n    alpha\n  });\n  const { renderPassDescriptor, pipeline } = resources;\n\n  const createQuad = (xOffset, yOffset) => {\n\n    return t.createVertexBuffer(new Float32Array([\n    xOffset + 0, yOffset + 0, 0,\n    xOffset + 0.25, yOffset + 0, 0,\n    xOffset + 0, yOffset + 0.25, 0,\n    xOffset + 0, yOffset + 0.25, 0,\n    xOffset + 0.25, yOffset + 0, 0,\n    xOffset + 0.25, yOffset + 0.25, 0]\n    ));\n  };\n\n  const vertexBuffers = [\n  createQuad(0, 0),\n  createQuad(0.25, 0),\n  createQuad(0, 0.25),\n  createQuad(0.25, 0.25)];\n\n\n  const numPassedPerGroup = new Array(kNumQueries / 4).fill(0);\n\n  // These tests can't use queryIndex to decide what to draw because which mask\n  // a particular alpha converts to is implementation defined. When querySetOffset is\n  // non-zero the queryIndex will go 7, 8, 9, 10, ... but we need to guarantee\n  // 4 queries per pixel and group those results so `queryIndex / 4 | 0` won't work.\n  // Instead we count the queries to get 4 draws per group, one to each quadrant of a pixel\n  // Then we total up the passes for those 4 queries by queryCount.\n  let queryCount = 0;\n  let resultCount = 0;\n  await t.runQueryTest(\n    resources,\n    renderPassDescriptor,\n    (helper, queryIndex) => {\n      const queryHelper = helper.beginOcclusionQuery(queryIndex);\n      queryHelper.setPipeline(pipeline);\n      queryHelper.setVertexBuffer(vertexBuffers[queryCount++ % 4]);\n      queryHelper.draw(6);\n      queryHelper.end();\n    },\n    (passed) => {\n      const groupIndex = resultCount++ / 4 | 0;\n      numPassedPerGroup[groupIndex] += passed ? 1 : 0;\n    }\n  );\n\n  const expected = alpha / 0.25 | 0;\n  numPassedPerGroup.forEach((numPassed, queryGroup) => {\n    t.expect(\n      numPassed === expected,\n      `queryGroup: ${queryGroup}, was: ${numPassed}, expected: ${expected}`\n    );\n  });\n});\n\ng.test('occlusion_query,multi_resolve').\ndesc('Test calling resolveQuerySet more than once does not change results').\nfn(async (t) => {\n  const { device } = t;\n  const kNumQueries = 30;\n  const {\n    pipeline,\n    vertexBuffer,\n    occlusionQuerySet,\n    renderPassDescriptor,\n    renderTargetTexture,\n    queryResolveBuffer,\n    readBuffer\n  } = t.setup({ numQueries: kNumQueries });\n\n  const readBuffer2 = t.createBufferTracked(readBuffer);\n  const readBuffer3 = t.createBufferTracked(readBuffer);\n\n  const renderSomething = (encoder) => {\n    const pass = encoder.beginRenderPass(renderPassDescriptor);\n    pass.setPipeline(pipeline);\n    pass.setVertexBuffer(0, vertexBuffer);\n    pass.setScissorRect(0, 0, renderTargetTexture.width, renderTargetTexture.height);\n    pass.draw(3);\n    pass.end();\n  };\n\n  {\n    const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", device, device.createCommandEncoder, [], () => device.createCommandEncoder());\n    {\n      const pass = encoder.beginRenderPass(renderPassDescriptor);\n      pass.setPipeline(pipeline);\n      pass.setVertexBuffer(0, vertexBuffer);\n\n      for (let i = 0; i < kNumQueries; ++i) {\n        pass.beginOcclusionQuery(i);\n        if (i % 2) {\n          pass.setScissorRect(0, 0, renderTargetTexture.width, renderTargetTexture.height);\n        } else {\n          pass.setScissorRect(0, 0, 0, 0);\n        }\n        pass.draw(3);\n        pass.endOcclusionQuery();\n      }\n      pass.end();\n    }\n\n    // Intentionally call resolveQuerySet twice\n    encoder.resolveQuerySet(occlusionQuerySet, 0, kNumQueries, queryResolveBuffer, 0);\n    encoder.resolveQuerySet(occlusionQuerySet, 0, kNumQueries, queryResolveBuffer, 0);\n    encoder.copyBufferToBuffer(queryResolveBuffer, 0, readBuffer, 0, readBuffer.size);\n\n    // Rendering stuff unrelated should not affect results.\n    renderSomething(encoder);\n\n    encoder.resolveQuerySet(occlusionQuerySet, 0, kNumQueries, queryResolveBuffer, 0);\n    encoder.copyBufferToBuffer(queryResolveBuffer, 0, readBuffer2, 0, readBuffer2.size);\n    globalThis._TRAMPOLINE_(\"submit\", device, device.queue.submit, [[encoder.finish()]], () => device.queue.submit([encoder.finish()]));\n  }\n\n  // Encode something else and draw again, then read the results\n  // They should not be affected.\n  {\n    const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", device, device.createCommandEncoder, [], () => device.createCommandEncoder());\n    renderSomething(encoder);\n\n    encoder.resolveQuerySet(occlusionQuerySet, 0, kNumQueries, queryResolveBuffer, 0);\n    encoder.copyBufferToBuffer(queryResolveBuffer, 0, readBuffer3, 0, readBuffer3.size);\n    globalThis._TRAMPOLINE_(\"submit\", device, device.queue.submit, [[encoder.finish()]], () => device.queue.submit([encoder.finish()]));\n  }\n\n  const results = await Promise.all([\n  t.readBufferAsBigUint64(readBuffer),\n  t.readBufferAsBigUint64(readBuffer2),\n  t.readBufferAsBigUint64(readBuffer3)]\n  );\n\n  results.forEach((result, r) => {\n    for (let i = 0; i < kNumQueries; ++i) {\n      const passed = !!result[i];\n      const expectPassed = !!(i % 2);\n      t.expect(\n        passed === expectPassed,\n        `result(${r}): queryIndex: ${i}, passed: ${passed}, expected: ${expectPassed}`\n      );\n    }\n  });\n});"],"mappings":"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","ignoreList":[]}