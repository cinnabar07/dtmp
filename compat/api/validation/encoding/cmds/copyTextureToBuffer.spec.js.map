{"version":3,"file":"copyTextureToBuffer.spec.js","names":["description","makeTestGroup","kCompressedTextureFormats","kTextureFormatInfo","align","CompatibilityTest","g","test","desc","params","u","combine","beforeAllSubcases","t","format","selectDeviceOrSkipTestCase","feature","fn","info","textureSize","blockWidth","blockHeight","texture","createTextureTracked","size","usage","GPUTextureUsage","COPY_SRC","bytesPerRow","color","bytes","buffer","createBufferTracked","GPUBufferUsage","COPY_DST","encoder","globalThis","_TRAMPOLINE_","device","createCommandEncoder","copyTextureToBuffer","expectGPUErrorInCompatibilityMode","finish"],"sources":["../../../../../../../src/webgpu/compat/api/validation/encoding/cmds/copyTextureToBuffer.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTests limitations of copyTextureToBuffer in compat mode.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { kCompressedTextureFormats, kTextureFormatInfo } from '../../../../../format_info.js';\nimport { align } from '../../../../../util/math.js';\nimport { CompatibilityTest } from '../../../../compatibility_test.js';\n\nexport const g = makeTestGroup(CompatibilityTest);\n\ng.test('compressed').\ndesc(`Tests that you can not call copyTextureToBuffer with compressed textures in compat mode.`).\nparams((u) => u.combine('format', kCompressedTextureFormats)).\nbeforeAllSubcases((t) => {\n  const { format } = t.params;\n  t.selectDeviceOrSkipTestCase([kTextureFormatInfo[format].feature]);\n}).\nfn((t) => {\n  const { format } = t.params;\n\n  const info = kTextureFormatInfo[format];\n\n  const textureSize = [info.blockWidth, info.blockHeight, 1];\n  const texture = t.createTextureTracked({\n    size: textureSize,\n    format,\n    usage: GPUTextureUsage.COPY_SRC\n  });\n\n  const bytesPerRow = align(info.color.bytes, 256);\n\n  const buffer = t.createBufferTracked({\n    size: bytesPerRow,\n    usage: GPUBufferUsage.COPY_DST\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  encoder.copyTextureToBuffer({ texture }, { buffer, bytesPerRow }, textureSize);\n  t.expectGPUErrorInCompatibilityMode('validation', () => {\n    encoder.finish();\n  });\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG;AAC9B;AACA,CAAC,CAAC,SAASC,aAAa,QAAQ,kDAAkD,CAClF,SAASC,yBAAyB,EAAEC,kBAAkB,QAAQ,+BAA+B,CAC7F,SAASC,KAAK,QAAQ,6BAA6B;AACnD,SAASC,iBAAiB,QAAQ,mCAAmC;;AAErE,OAAO,MAAMC,CAAC,GAAGL,aAAa,CAACI,iBAAiB,CAAC;;AAEjDC,CAAC,CAACC,IAAI,CAAC,YAAY,CAAC;AACpBC,IAAI,CAAC,0FAA0F,CAAC;AAChGC,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,QAAQ,EAAET,yBAAyB,CAAC,CAAC;AAC7DU,iBAAiB,CAAC,CAACC,CAAC,KAAK;EACvB,MAAM,EAAEC,MAAM,CAAC,CAAC,GAAGD,CAAC,CAACJ,MAAM;EAC3BI,CAAC,CAACE,0BAA0B,CAAC,CAACZ,kBAAkB,CAACW,MAAM,CAAC,CAACE,OAAO,CAAC,CAAC;AACpE,CAAC,CAAC;AACFC,EAAE,CAAC,CAACJ,CAAC,KAAK;EACR,MAAM,EAAEC,MAAM,CAAC,CAAC,GAAGD,CAAC,CAACJ,MAAM;;EAE3B,MAAMS,IAAI,GAAGf,kBAAkB,CAACW,MAAM,CAAC;;EAEvC,MAAMK,WAAW,GAAG,CAACD,IAAI,CAACE,UAAU,EAAEF,IAAI,CAACG,WAAW,EAAE,CAAC,CAAC;EAC1D,MAAMC,OAAO,GAAGT,CAAC,CAACU,oBAAoB,CAAC;IACrCC,IAAI,EAAEL,WAAW;IACjBL,MAAM;IACNW,KAAK,EAAEC,eAAe,CAACC;EACzB,CAAC,CAAC;;EAEF,MAAMC,WAAW,GAAGxB,KAAK,CAACc,IAAI,CAACW,KAAK,CAACC,KAAK,EAAE,GAAG,CAAC;;EAEhD,MAAMC,MAAM,GAAGlB,CAAC,CAACmB,mBAAmB,CAAC;IACnCR,IAAI,EAAEI,WAAW;IACjBH,KAAK,EAAEQ,cAAc,CAACC;EACxB,CAAC,CAAC;;EAEF,MAAMC,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAExB,CAAC,CAACyB,MAAM,EAAEzB,CAAC,CAACyB,MAAM,CAACC,oBAAoB,EAAE,EAAE,EAAE,MAAAH,UAAA,CAAAC,YAAA,yBAAMxB,CAAC,CAACyB,MAAM,EAARzB,CAAC,CAACyB,MAAM,CAAAC,oBAAA,YAAR1B,CAAC,CAACyB,MAAM,CAACC,oBAAoB,GAAE,CAAC;EACnJJ,OAAO,CAACK,mBAAmB,CAAC,EAAElB,OAAO,CAAC,CAAC,EAAE,EAAES,MAAM,EAAEH,WAAW,CAAC,CAAC,EAAET,WAAW,CAAC;EAC9EN,CAAC,CAAC4B,iCAAiC,CAAC,YAAY,EAAE,MAAM;IACtDN,OAAO,CAACO,MAAM,CAAC,CAAC;EAClB,CAAC,CAAC;AACJ,CAAC,CAAC","ignoreList":[]}