{"version":3,"file":"fragment_state.spec.js","names":["description","makeTestGroup","keysOf","CompatibilityTest","g","cases","default","_targets","noBlendTarget0","targets","blend","noBlendTarget1","colorOperation","color","operation","colorSrcFactor","srcFactor","colorDstFactor","dstFactor","alphaOperation","alpha","alphaSrcFactor","alphaDstFactor","writeMask","GPUColorWrite","GREEN","caseNames","test","desc","params","u","combine","fn","t","caseName","module","device","createShaderModule","code","format","pipelineDescriptor","layout","vertex","entryPoint","fragment","isValid","expectGPUErrorInCompatibilityMode","createRenderPipeline"],"sources":["../../../../../../src/webgpu/compat/api/validation/render_pipeline/fragment_state.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTests that you can not create a render pipeline with different per target blend state or write mask in compat mode.\n`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../common/util/data_tables.js';\nimport { CompatibilityTest } from '../../../compatibility_test.js';\n\nexport const g = makeTestGroup(CompatibilityTest);\n\n\n\nconst cases = {\n  default(_targets) {\n    return true;\n  },\n  noBlendTarget0(targets) {\n    delete targets[0].blend;\n    return false;\n  },\n  noBlendTarget1(targets) {\n    delete targets[2].blend;\n    return false;\n  },\n  colorOperation(targets) {\n    targets[2].blend.color.operation = 'subtract';\n    return false;\n  },\n  colorSrcFactor(targets) {\n    targets[2].blend.color.srcFactor = 'src-alpha';\n    return false;\n  },\n  colorDstFactor(targets) {\n    targets[2].blend.color.dstFactor = 'dst-alpha';\n    return false;\n  },\n  alphaOperation(targets) {\n    targets[2].blend.alpha.operation = 'subtract';\n    return false;\n  },\n  alphaSrcFactor(targets) {\n    targets[2].blend.alpha.srcFactor = 'src-alpha';\n    return false;\n  },\n  alphaDstFactor(targets) {\n    targets[2].blend.alpha.dstFactor = 'dst-alpha';\n    return false;\n  },\n  writeMask(targets) {\n    targets[2].writeMask = GPUColorWrite.GREEN;\n    return false;\n  }\n};\nconst caseNames = keysOf(cases);\n\ng.test('colorState').\ndesc(\n  `\nTests that you can not create a render pipeline with different per target blend state or write mask in compat mode.\n\n- Test no blend state vs some blend state\n- Test different operation, srcFactor, dstFactor for color and alpha\n- Test different writeMask\n    `\n).\nparams((u) => u.combine('caseName', caseNames)).\nfn((t) => {\n  const { caseName } = t.params;\n\n  const module = t.device.createShaderModule({\n    code: `\n        @vertex fn vs() -> @builtin(position) vec4f {\n            return vec4f(0);\n        }\n\n        struct FragmentOut {\n            @location(0) fragColor0 : vec4f,\n            @location(1) fragColor1 : vec4f,\n            @location(2) fragColor2 : vec4f,\n        }\n\n        @fragment fn fs() -> FragmentOut {\n            var output : FragmentOut;\n            output.fragColor0 = vec4f(0);\n            output.fragColor1 = vec4f(0);\n            output.fragColor2 = vec4f(0);\n            return output;\n        }\n      `\n  });\n\n  const targets = [\n  {\n    format: 'rgba8unorm',\n    blend: {\n      color: {},\n      alpha: {}\n    }\n  },\n  null,\n  {\n    format: 'rgba8unorm',\n    blend: {\n      color: {},\n      alpha: {}\n    }\n  }];\n\n\n  const pipelineDescriptor = {\n    layout: 'auto',\n    vertex: {\n      module,\n      entryPoint: 'vs'\n    },\n    fragment: {\n      module,\n      entryPoint: 'fs',\n      targets\n    }\n  };\n  const isValid = cases[caseName](targets);\n  t.expectGPUErrorInCompatibilityMode(\n    'validation',\n    () => t.device.createRenderPipeline(pipelineDescriptor),\n    !isValid\n  );\n});"],"mappings":"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","ignoreList":[]}