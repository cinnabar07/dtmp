{"version":3,"file":"pipeline_creation.spec.js","names":["description","makeTestGroup","kShaderStages","CompatibilityTest","g","test","desc","params","u","combineWithParams","sampleWGSL","textureType","combine","filter","t","startsWith","stage","fn","async","usageWGSL","module","device","createShaderModule","code","success","isCompatibility","doCreateComputePipelineTest","layout","compute","doCreateRenderPipelineTest","vertex","fragment","targets","format","numCombosToNumber","maxCombos","numCombos","m","exec","parseInt","numNonSampledToNumber","maxTextures","numNonSampled","pass","numExternal","useSame","map","p","stages","flat","maxSampledTexturesPerShaderStage","maxSamplersPerShaderStage","limits","maxTexturesPerStage","Math","min","numCombinations","numNonSampledTextures","textureDeclarations","samplerDeclarations","usages","bindGroupLayoutEntries","numStages","visibilityByStage","GPUShaderStage","COMPUTE","VERTEX","FRAGMENT","addTextureDeclaration","binding","push","visibility","texture","addSamplerDeclaration","sampler","addExternalTextureDeclaration","id","externalTexture","count","s","length","et","eBinding","sBinding","join","includes","createPipelineLayout","bindGroupLayouts","entries","createBindGroupLayout"],"sources":["../../../../../src/webgpu/compat/api/validation/pipeline_creation.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTests that createComputePipeline(async), and createRenderPipeline(async)\nreject pipelines that are invalid in compat mode\n\n- test that depth textures can not be used with non-comparison samplers\n\nTODO:\n- test that a shader that has more than min(maxSamplersPerShaderStage, maxSampledTexturesPerShaderStage)\n  texture+sampler combinations generates a validation error.\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { kShaderStages } from '../../../shader/validation/decl/util.js';\nimport { CompatibilityTest } from '../../compatibility_test.js';\n\nexport const g = makeTestGroup(CompatibilityTest);\n\ng.test('depth_textures').\ndesc('Tests that depth textures can not be used with non-comparison samplers in compat mode.').\nparams((u) =>\nu //\n.combineWithParams([\n{\n  sampleWGSL: 'textureSample(t, s, vec2f(0))', // should pass\n  textureType: 'texture_2d<f32>'\n},\n{\n  sampleWGSL: 'textureSample(t, s, vec2f(0))',\n  textureType: 'texture_depth_2d'\n},\n{\n  sampleWGSL: 'textureSample(t, s, vec3f(0))',\n  textureType: 'texture_depth_cube'\n},\n{\n  sampleWGSL: 'textureSample(t, s, vec2f(0), 0)',\n  textureType: 'texture_depth_2d_array'\n},\n{\n  sampleWGSL: 'textureSample(t, s, vec2f(0), vec2i(0, 0))',\n  textureType: 'texture_depth_2d'\n},\n{\n  sampleWGSL: 'textureSample(t, s, vec2f(0), 0, vec2i(0, 0))',\n  textureType: 'texture_depth_2d_array'\n},\n{\n  sampleWGSL: 'textureSampleLevel(t, s, vec2f(0), 0)',\n  textureType: 'texture_depth_2d'\n},\n{\n  sampleWGSL: 'textureSampleLevel(t, s, vec3f(0), 0)',\n  textureType: 'texture_depth_cube'\n},\n{\n  sampleWGSL: 'textureSampleLevel(t, s, vec2f(0), 0, 0)',\n  textureType: 'texture_depth_2d_array'\n},\n{\n  sampleWGSL: 'textureSampleLevel(t, s, vec2f(0), 0, vec2i(0, 0))',\n  textureType: 'texture_depth_2d'\n},\n{\n  sampleWGSL: 'textureSampleLevel(t, s, vec2f(0), 0, 0, vec2i(0, 0))',\n  textureType: 'texture_depth_2d_array'\n},\n{\n  sampleWGSL: 'textureGather(t, s, vec2f(0))',\n  textureType: 'texture_depth_2d'\n},\n{\n  sampleWGSL: 'textureGather(t, s, vec3f(0))',\n  textureType: 'texture_depth_cube'\n},\n{\n  sampleWGSL: 'textureGather(t, s, vec2f(0), 0)',\n  textureType: 'texture_depth_2d_array'\n},\n{\n  sampleWGSL: 'textureGather(t, s, vec2f(0), vec2i(0, 0))',\n  textureType: 'texture_depth_2d'\n},\n{\n  sampleWGSL: 'textureGather(t, s, vec2f(0), 0, vec2i(0, 0))',\n  textureType: 'texture_depth_2d_array'\n}]\n).\ncombine('stage', kShaderStages).\nfilter((t) => t.sampleWGSL.startsWith('textureGather') || t.stage === 'fragment').\ncombine('async', [false, true])\n).\nfn((t) => {\n  const { sampleWGSL, textureType, stage, async } = t.params;\n\n  const usageWGSL = `_ = ${sampleWGSL};`;\n  const module = t.device.createShaderModule({\n    code: `\n        @group(0) @binding(0) var t: ${textureType};\n        @group(1) @binding(0) var s: sampler;\n\n        // make sure it's fine such a combination exists but it's not used.\n        fn unused() {\n          ${usageWGSL};\n        }\n\n        @vertex fn vs() -> @builtin(position) vec4f {\n            ${stage === 'vertex' ? usageWGSL : ''}\n            return vec4f(0);\n        }\n\n        @fragment fn fs() -> @location(0) vec4f {\n            ${stage === 'fragment' ? usageWGSL : ''}\n            return vec4f(0);\n        }\n\n        @compute @workgroup_size(1) fn cs() {\n            ${stage === 'compute' ? usageWGSL : ''};\n        }\n      `\n  });\n\n  const success = !t.isCompatibility || textureType === 'texture_2d<f32>';\n  switch (stage) {\n    case 'compute':\n      t.doCreateComputePipelineTest(async, success, {\n        layout: 'auto',\n        compute: {\n          module\n        }\n      });\n      break;\n    case 'fragment':\n    case 'vertex':\n      t.doCreateRenderPipelineTest(async, success, {\n        layout: 'auto',\n        vertex: {\n          module\n        },\n        fragment: {\n          module,\n          targets: [{ format: 'rgba8unorm' }]\n        }\n      });\n      break;\n  }\n});\n\nfunction numCombosToNumber(maxCombos, numCombos) {\n  const m = /^max([+-]?)(\\d+)$/.exec(numCombos);\n  if (m) {\n    if (m[1] === '+') {\n      return maxCombos + parseInt(m[2]);\n    } else if (m[1] === '-') {\n      return maxCombos - parseInt(m[2]);\n    } else {\n      return maxCombos;\n    }\n  }\n  return parseInt(numCombos);\n}\n\nfunction numNonSampledToNumber(maxTextures, numNonSampled) {\n  switch (numNonSampled) {\n    case '0':\n      return 0;\n    case '1':\n      return 1;\n    case 'max':\n      return maxTextures;\n  }\n}\n\ng.test('texture_sampler_combos').\ndesc(\n  `\nTest that you can not use more texture+sampler combos than\nmin(maxSamplersPerShaderStage, maxSampledTexturesPerShaderStage)\nin compatibility mode.\n\nThe spec, copy and pasted here:\n\nmaxCombinationsPerStage = min(maxSampledTexturesPerShaderStage, maxSamplersPerShaderStage)\nfor each stage of the pipeline:\n  sum = 0\n  for each texture binding in the pipeline layout which is visible to that stage:\n    sum += max(1, number of texture sampler combos for that texture binding)\n  for each external texture binding in the pipeline layout which is visible to that stage:\n    sum += 1 // for LUT texture + LUT sampler\n    sum += 3 * max(1, number of external_texture sampler combos) // for Y+U+V\n  if sum > maxCombinationsPerStage\n    generate a validation error.\n\n`\n).\nparams((u) =>\n\nu.\ncombineWithParams([\n...[\n{ pass: true, numCombos: 'max', numNonSampled: '1', numExternal: 0, useSame: false },\n{ pass: false, numCombos: 'max+1', numNonSampled: '1', numExternal: 0, useSame: false },\n{ pass: true, numCombos: '1', numNonSampled: 'max', numExternal: 0, useSame: false },\n{ pass: false, numCombos: '2', numNonSampled: 'max', numExternal: 0, useSame: false },\n{ pass: true, numCombos: 'max-4', numNonSampled: '0', numExternal: 1, useSame: false },\n{ pass: false, numCombos: 'max-3', numNonSampled: '0', numExternal: 1, useSame: false },\n{ pass: true, numCombos: 'max-8', numNonSampled: '0', numExternal: 2, useSame: false },\n{ pass: false, numCombos: 'max-7', numNonSampled: '0', numExternal: 2, useSame: false },\n{ pass: true, numCombos: 'max-7', numNonSampled: '0', numExternal: 2, useSame: true },\n{ pass: false, numCombos: 'max-6', numNonSampled: '0', numExternal: 2, useSame: true }].\nmap((p) => [{ ...p, stages: 'vertex' }, { ...p, stages: 'fragment' }, { ...p, stages: 'compute' }]).flat(),\n{ pass: true, numCombos: 'max', numNonSampled: '1', numExternal: 0, useSame: false, stages: 'vertex,fragment' }]\n).\ncombine('async', [false, true])\n).\nfn((t) => {\n  const { device } = t;\n  const { pass, stages, numCombos, numNonSampled, numExternal, useSame, async } = t.params;\n  const { maxSampledTexturesPerShaderStage, maxSamplersPerShaderStage } = device.limits;\n\n  const maxTexturesPerStage = maxSampledTexturesPerShaderStage - numExternal * 3;\n  const maxCombos = Math.min(maxSampledTexturesPerShaderStage, maxSamplersPerShaderStage);\n  const numCombinations = numCombosToNumber(maxCombos, numCombos);\n  const numNonSampledTextures = numNonSampledToNumber(\n    maxSampledTexturesPerShaderStage,\n    numNonSampled\n  );\n\n  const textureDeclarations = [[], []];\n  const samplerDeclarations = [[], []];\n  const usages = [[], []];\n  const bindGroupLayoutEntries = [[], [], [], []];\n  const numStages = stages === 'compute' ? 1 : 2;\n  const visibilityByStage =\n  stages === 'compute' ?\n  [GPUShaderStage.COMPUTE] :\n  [GPUShaderStage.VERTEX, GPUShaderStage.FRAGMENT];\n\n  const addTextureDeclaration = (stage, binding) => {\n    textureDeclarations[stage].push(\n      `@group(${stage * 2}) @binding(${binding}) var t${stage}_${binding}: texture_2d<f32>;`\n    );\n    bindGroupLayoutEntries[stage * 2].push({\n      binding,\n      visibility: visibilityByStage[stage],\n      texture: {}\n    });\n  };\n\n  const addSamplerDeclaration = (stage, binding) => {\n    samplerDeclarations[stage].push(\n      `@group(${stage * 2 + 1}) @binding(${binding}) var s${stage}_${binding}: sampler;`\n    );\n    bindGroupLayoutEntries[stage * 2 + 1].push({\n      binding,\n      visibility: visibilityByStage[stage],\n      sampler: {}\n    });\n  };\n\n  const addExternalTextureDeclaration = (stage, binding, id) => {\n    textureDeclarations[stage].push(\n      `@group(${stage * 2}) @binding(${binding}) var e${stage}_${id}: texture_external;`\n    );\n    bindGroupLayoutEntries[stage * 2].push({\n      binding,\n      visibility: visibilityByStage[stage],\n      externalTexture: {}\n    });\n  };\n\n  for (let stage = 0; stage < numStages; ++stage) {\n    let count = 0;\n    for (let t = 0; count < numCombinations && t < maxTexturesPerStage; ++t) {\n      addTextureDeclaration(stage, t);\n      for (let s = 0; count < numCombinations && s < maxSamplersPerShaderStage; ++s) {\n        if (t === 0) {\n          addSamplerDeclaration(stage, s);\n        }\n        usages[stage].push(\n          `  c += textureSampleLevel(t${stage}_${t}, s${stage}_${s}, vec2f(0), 0);`\n        );\n        ++count;\n      }\n    }\n\n    for (let t = 0; t < numNonSampledTextures; ++t) {\n      if (t >= textureDeclarations[stage].length) {\n        addTextureDeclaration(stage, t);\n      }\n      usages[stage].push(`  c += textureLoad(t${stage}_${t}, vec2u(0), 0);`);\n    }\n\n    for (let t = 0; t < numExternal; ++t) {\n      if (t === 0 || !useSame) {\n        const et = textureDeclarations[stage].length + t;\n        addExternalTextureDeclaration(stage, et, t);\n      }\n      const eBinding = useSame ? 0 : t;\n      const sBinding = useSame ? t : 0;\n      usages[stage].push(\n        `  c += textureSampleBaseClampToEdge(e${stage}_${eBinding}, s${stage}_${sBinding}, vec2f(0));`\n      );\n    }\n  }\n\n  const code = `\n${textureDeclarations[0].join('\\n')}\n${textureDeclarations[1].join('\\n')}\n\n${samplerDeclarations[0].join('\\n')}\n${samplerDeclarations[1].join('\\n')}\n\nfn usage0() -> vec4f {\n  var c: vec4f;\n  ${usages[0].join('\\n')}\n  return c;\n}\n\nfn usage1() -> vec4f {\n  var c: vec4f;\n  ${usages[1].join('\\n')}\n  return c;\n}\n\n@vertex fn vs() -> @builtin(position) vec4f {\n  _ = ${stages.includes('vertex') ? 'usage0()' : 'vec4f(0)'};\n  return vec4f(0);\n}\n\n@fragment fn fs() -> @location(0) vec4f {\n  return ${stages.includes('fragment') ? 'usage1()' : 'vec4f(0)'};\n}\n\n@compute @workgroup_size(1) fn cs() {\n  _ = usage0();\n}\n\n`;\n\n  // MAINTENANCE_TODO: remove this. It's only needed because of a bug in dawn\n  // with auto layouts.\n  const layout = device.createPipelineLayout({\n    bindGroupLayouts: bindGroupLayoutEntries.map((entries) =>\n    device.createBindGroupLayout({ entries })\n    )\n  });\n\n  const module = device.createShaderModule({ code });\n  if (stages === 'compute') {\n    t.doCreateComputePipelineTest(async, pass || !t.isCompatibility, {\n      layout,\n      compute: { module }\n    });\n  } else {\n    t.doCreateRenderPipelineTest(async, pass || !t.isCompatibility, {\n      layout,\n      vertex: { module },\n      fragment: { module, targets: [{ format: 'rgba8unorm' }] }\n    });\n  }\n});"],"mappings":"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","ignoreList":[]}