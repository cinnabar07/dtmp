{"version":3,"file":"semicolon.spec.js","names":["description","makeTestGroup","ShaderValidationTest","g","test","desc","fn","t","expectCompileResult","beforeAllSubcases","selectDeviceOrSkipTestCase","requiredFeatures","skipIfLanguageFeatureNotSupported"],"sources":["../../../../../src/webgpu/shader/validation/parse/semicolon.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `Validation tests for semicolon placements`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('module_scope_single').\ndesc(`Test that a semicolon can be placed at module scope.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `;`);\n});\n\ng.test('module_scope_multiple').\ndesc(`Test that multiple semicolons can be placed at module scope.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `;;;`);\n});\n\ng.test('after_enable').\ndesc(`Test that a semicolon must be placed after an enable directive.`).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase({ requiredFeatures: ['shader-f16'] });\n}).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `enable f16;`);\n  t.expectCompileResult(/* pass */false, `enable f16`);\n});\n\ng.test('after_requires').\ndesc(`Test that a semicolon must be placed after a requires directive.`).\nfn((t) => {\n  t.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures');\n  t.expectCompileResult(/* pass */true, `requires readonly_and_readwrite_storage_textures;`);\n  t.expectCompileResult(/* pass */false, `requires readonly_and_readwrite_storage_textures`);\n});\n\ng.test('after_diagnostic').\ndesc(`Test that a semicolon must be placed after a requires directive.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `diagnostic(info, derivative_uniformity);`);\n  t.expectCompileResult(/* pass */false, `diagnostic(info, derivative_uniformity)`);\n});\n\ng.test('after_struct_decl').\ndesc(`Test that a semicolon can be placed after an struct declaration.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `struct S { x : i32 };`);\n  t.expectCompileResult(/* pass */true, `struct S { x : i32 }`);\n});\n\ng.test('after_member').\ndesc(`Test that a semicolon must not be placed after an struct member declaration.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `struct S { x : i32 }`);\n  t.expectCompileResult(/* pass */false, `struct S { x : i32; }`);\n});\n\ng.test('after_func_decl').\ndesc(`Test that a semicolon can be placed after a function declaration.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() {};`);\n  t.expectCompileResult(/* pass */true, `fn f() {}`);\n});\n\ng.test('after_type_alias_decl').\ndesc(`Test that a semicolon must be placed after an type alias declaration.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `alias T = i32;`);\n  t.expectCompileResult(/* pass */false, `alias T = i32`);\n});\n\ng.test('after_return').\ndesc(`Test that a semicolon must be placed after a return statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { return; }`);\n  t.expectCompileResult(/* pass */false, `fn f() { return }`);\n});\n\ng.test('after_call').\ndesc(`Test that a semicolon must be placed after a function call.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { workgroupBarrier(); }`);\n  t.expectCompileResult(/* pass */false, `fn f() { workgroupBarrier() }`);\n});\n\ng.test('after_module_const_decl').\ndesc(`Test that a semicolon must be placed after a module-scope const declaration.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `const v = 1;`);\n  t.expectCompileResult(/* pass */false, `const v = 1`);\n});\n\ng.test('after_fn_const_decl').\ndesc(`Test that a semicolon must be placed after a function-scope const declaration.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { const v = 1; }`);\n  t.expectCompileResult(/* pass */false, `fn f() { const v = 1 }`);\n});\n\ng.test('after_module_var_decl').\ndesc(`Test that a semicolon must be placed after a module-scope var declaration.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `var<private> v = 1;`);\n  t.expectCompileResult(/* pass */false, `var<private> v = 1`);\n});\n\ng.test('after_fn_var_decl').\ndesc(`Test that a semicolon must be placed after a function-scope var declaration.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { var v = 1; }`);\n  t.expectCompileResult(/* pass */false, `fn f() { var v = 1 }`);\n});\n\ng.test('after_let_decl').\ndesc(`Test that a semicolon must be placed after a let declaration.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { let v = 1; }`);\n  t.expectCompileResult(/* pass */false, `fn f() { let v = 1 }`);\n});\n\ng.test('after_discard').\ndesc(`Test that a semicolon must be placed after a discard statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { discard; }`);\n  t.expectCompileResult(/* pass */false, `fn f() { discard }`);\n});\n\ng.test('after_assignment').\ndesc(`Test that a semicolon must be placed after an assignment statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { var v = 1; v = 2; }`);\n  t.expectCompileResult(/* pass */false, `fn f() { var v = 1; v = 2 }`);\n});\n\ng.test('after_fn_const_assert').\ndesc(`Test that a semicolon must be placed after an function-scope static assert.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { const_assert(true); }`);\n  t.expectCompileResult(/* pass */false, `fn f() { const_assert(true) }`);\n});\n\ng.test('function_body_single').\ndesc(`Test that a semicolon can be placed in a function body.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { ; }`);\n});\n\ng.test('function_body_multiple').\ndesc(`Test that multiple semicolons can be placed in a function body.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { ;;; }`);\n});\n\ng.test('compound_statement_single').\ndesc(`Test that a semicolon can be placed in a compound statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { { ; } }`);\n});\n\ng.test('compound_statement_multiple').\ndesc(`Test that multiple semicolons can be placed in a compound statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { { ;;; } }`);\n});\n\ng.test('after_compound_statement').\ndesc(`Test that a semicolon can be placed after a compound statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { {} ; }`);\n});\n\ng.test('after_if').\ndesc(`Test that a semicolon can be placed after an if-statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { if true {} ; }`);\n});\n\ng.test('after_if_else').\ndesc(`Test that a semicolon can be placed after an if-else-statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { if true {} else {} ; }`);\n});\n\ng.test('after_switch').\ndesc(`Test that a semicolon can be placed after an switch-statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { switch 1 { default {} } ; }`);\n});\n\ng.test('after_case').\ndesc(`Test that a semicolon cannot be placed after a non-default switch case.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */false, `fn f() { switch 1 { case 1 {}; default {} } }`);\n  t.expectCompileResult(/* pass */true, `fn f() { switch 1 { case 1 {} default {} } }`);\n});\n\ng.test('after_case_break').\ndesc(`Test that a semicolon must be placed after a case break statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */false, `fn f() { switch 1 { case 1 { break } default {} } }`);\n  t.expectCompileResult(/* pass */true, `fn f() { switch 1 { case 1 { break; } default {} } }`);\n});\n\ng.test('after_default_case').\ndesc(`Test that a semicolon cannot be placed after a default switch case.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */false, `fn f() { switch 1 { default {}; } }`);\n  t.expectCompileResult(/* pass */true, `fn f() { switch 1 { default {} } }`);\n});\n\ng.test('after_default_case_break').\ndesc(`Test that a semicolon cannot be placed after a default switch case.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */false, `fn f() { switch 1 { default { break } } }`);\n  t.expectCompileResult(/* pass */true, `fn f() { switch 1 { default { break; } } }`);\n});\n\ng.test('after_for').\ndesc(`Test that a semicolon can be placed after a for-loop.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { for (; false;) {}; }`);\n});\n\ng.test('after_for_break').\ndesc(`Test that a semicolon must be placed after a for-loop break statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { for (; false;) { break; } }`);\n  t.expectCompileResult(/* pass */false, `fn f() { for (; false;) { break } }`);\n});\n\ng.test('after_loop').\ndesc(`Test that a semicolon can be placed after a loop.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { loop { break; }; }`);\n});\n\ng.test('after_loop_break').\ndesc(`Test that a semicolon must be placed after a loop break statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { loop { break; }; }`);\n  t.expectCompileResult(/* pass */false, `fn f() { loop { break }; }`);\n});\n\ng.test('after_loop_break_if').\ndesc(`Test that a semicolon must be placed after a loop break-if statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { loop { continuing { break if true; } }; }`);\n  t.expectCompileResult(/* pass */false, `fn f() { loop { continuing { break if true } }; }`);\n});\n\ng.test('after_loop_continue').\ndesc(`Test that a semicolon must be placed after a loop continue statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { loop { if true { continue; } { break; } } }`);\n  t.expectCompileResult(/* pass */false, `fn f() { loop { if true { continue } { break; } } }`);\n});\n\ng.test('after_continuing').\ndesc(`Test that a semicolon cannot be placed after a continuing.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */false, `fn f() { loop { break; continuing{}; } }`);\n  t.expectCompileResult(/* pass */true, `fn f() { loop { break; continuing{} } }`);\n});\n\ng.test('after_while').\ndesc(`Test that a semicolon cannot be placed after a while-loop.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { while false {}; }`);\n});\n\ng.test('after_while_break').\ndesc(`Test that a semicolon must be placed after a while break statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { while false { break; } }`);\n  t.expectCompileResult(/* pass */false, `fn f() { while false { break } }`);\n});\n\ng.test('after_while_continue').\ndesc(`Test that a semicolon must be placed after a while continue statement.`).\nfn((t) => {\n  t.expectCompileResult(/* pass */true, `fn f() { while false { continue; } }`);\n  t.expectCompileResult(/* pass */false, `fn f() { while false { continue } }`);\n});"],"mappings":"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","ignoreList":[]}