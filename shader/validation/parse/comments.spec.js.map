{"version":3,"file":"comments.spec.js","names":["description","makeTestGroup","ShaderValidationTest","g","test","desc","fn","t","code","expectCompileResult","params","u","combine","beginSubcases","blankspace","includes","terminated"],"sources":["../../../../../src/webgpu/shader/validation/parse/comments.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `Validation tests for comments`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('comments').\ndesc(`Test that valid comments are handled correctly, including nesting.`).\nfn((t) => {\n  const code = `\n/**\n * Here is my shader.\n *\n * /* I can nest /**/ comments. */\n * // I can nest line comments too.\n **/\n@fragment // This is the stage\nfn main(/*\nno\nparameters\n*/) -> @location(0) vec4<f32> {\n  return/*block_comments_delimit_tokens*/vec4<f32>(.4, .2, .3, .1);\n}/* terminated block comments are OK at EOF...*/`;\n  t.expectCompileResult(true, code);\n});\n\ng.test('line_comment_eof').\ndesc(`Test that line comments can come at EOF.`).\nfn((t) => {\n  const code = `\n@fragment\nfn main() -> @location(0) vec4<f32> {\n  return vec4<f32>(.4, .2, .3, .1);\n}\n// line comments are OK at EOF...`;\n  t.expectCompileResult(true, code);\n});\n\ng.test('line_comment_terminators').\ndesc(`Test that line comments are terminated by any blankspace other than space and \\t`).\nparams((u) =>\nu.\ncombine('blankspace', [\n[' ', 'space'],\n['\\t', 'tab'],\n['\\u000a', 'line_feed'],\n['\\u000b', 'vertical_tab'],\n['\\u000c', 'form_feed'],\n['\\u000d', 'carriage_return'],\n['\\u000d\\u000a', 'carriage_return_line_feed'],\n['\\u0085', 'next_line'],\n['\\u2028', 'line_separator'],\n['\\u2029', 'paragraph_separator']]\n).\nbeginSubcases()\n).\nfn((t) => {\n  const code = `// Line comment${t.params.blankspace[0]}const invalid_outside_comment = should_fail`;\n\n  t.expectCompileResult([' ', '\\t'].includes(t.params.blankspace[0]), code);\n});\n\ng.test('unterminated_block_comment').\ndesc(`Test that unterminated block comments cause an error`).\nparams((u) => u.combine('terminated', [true, false]).beginSubcases()).\nfn((t) => {\n  const code = `\n/**\n * Unterminated block comment.\n *\n ${t.params.terminated ? '*/' : ''}`;\n\n  t.expectCompileResult(t.params.terminated, code);\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG,+BAA+B,CAAC,SAASC,aAAa,QAAQ,4CAA4C,CACxI,SAASC,oBAAoB,QAAQ,8BAA8B;AAEnE,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,oBAAoB,CAAC;;AAEpDC,CAAC,CAACC,IAAI,CAAC,UAAU,CAAC;AAClBC,IAAI,CAAC,oEAAoE,CAAC;AAC1EC,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAMC,IAAI,GAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD;EAC/CD,CAAC,CAACE,mBAAmB,CAAC,IAAI,EAAED,IAAI,CAAC;AACnC,CAAC,CAAC;;AAEFL,CAAC,CAACC,IAAI,CAAC,kBAAkB,CAAC;AAC1BC,IAAI,CAAC,0CAA0C,CAAC;AAChDC,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAMC,IAAI,GAAG;AACf;AACA;AACA;AACA;AACA,kCAAkC;EAChCD,CAAC,CAACE,mBAAmB,CAAC,IAAI,EAAED,IAAI,CAAC;AACnC,CAAC,CAAC;;AAEFL,CAAC,CAACC,IAAI,CAAC,0BAA0B,CAAC;AAClCC,IAAI,CAAC,kFAAkF,CAAC;AACxFK,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,OAAO,CAAC,YAAY,EAAE;AACtB,CAAC,GAAG,EAAE,OAAO,CAAC;AACd,CAAC,IAAI,EAAE,KAAK,CAAC;AACb,CAAC,QAAQ,EAAE,WAAW,CAAC;AACvB,CAAC,QAAQ,EAAE,cAAc,CAAC;AAC1B,CAAC,QAAQ,EAAE,WAAW,CAAC;AACvB,CAAC,QAAQ,EAAE,iBAAiB,CAAC;AAC7B,CAAC,cAAc,EAAE,2BAA2B,CAAC;AAC7C,CAAC,QAAQ,EAAE,WAAW,CAAC;AACvB,CAAC,QAAQ,EAAE,gBAAgB,CAAC;AAC5B,CAAC,QAAQ,EAAE,qBAAqB,CAAC;AACjC,CAAC;AACDC,aAAa,CAAC;AACd,CAAC;AACDP,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAMC,IAAI,GAAG,kBAAkBD,CAAC,CAACG,MAAM,CAACI,UAAU,CAAC,CAAC,CAAC,6CAA6C;;EAElGP,CAAC,CAACE,mBAAmB,CAAC,CAAC,GAAG,EAAE,IAAI,CAAC,CAACM,QAAQ,CAACR,CAAC,CAACG,MAAM,CAACI,UAAU,CAAC,CAAC,CAAC,CAAC,EAAEN,IAAI,CAAC;AAC3E,CAAC,CAAC;;AAEFL,CAAC,CAACC,IAAI,CAAC,4BAA4B,CAAC;AACpCC,IAAI,CAAC,sDAAsD,CAAC;AAC5DK,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAACC,aAAa,CAAC,CAAC,CAAC;AACrEP,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAMC,IAAI,GAAG;AACf;AACA;AACA;AACA,GAAGD,CAAC,CAACG,MAAM,CAACM,UAAU,GAAG,IAAI,GAAG,EAAE,EAAE;;EAElCT,CAAC,CAACE,mBAAmB,CAACF,CAAC,CAACG,MAAM,CAACM,UAAU,EAAER,IAAI,CAAC;AAClD,CAAC,CAAC","ignoreList":[]}