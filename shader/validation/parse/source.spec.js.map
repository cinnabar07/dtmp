{"version":3,"file":"source.spec.js","names":["description","makeTestGroup","ShaderValidationTest","g","test","desc","fn","t","code","expectCompileResult"],"sources":["../../../../../src/webgpu/shader/validation/parse/source.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `Validation tests for source parsing`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('valid_source').\ndesc(`Tests that a valid source is consumed successfully.`).\nfn((t) => {\n  const code = `\n    @fragment\n    fn main() -> @location(0) vec4<f32> {\n      return vec4<f32>(.4, .2, .3, .1);\n    }`;\n  t.expectCompileResult(true, code);\n});\n\ng.test('empty').\ndesc(`Test that an empty source is consumed successfully.`).\nfn((t) => {\n  t.expectCompileResult(true, '');\n});\n\ng.test('invalid_source').\ndesc(`Tests that a source which does not match the grammar fails.`).\nfn((t) => {\n  t.expectCompileResult(false, 'invalid_source');\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG,qCAAqC,CAAC,SAASC,aAAa,QAAQ,4CAA4C,CAC9I,SAASC,oBAAoB,QAAQ,8BAA8B;AAEnE,OAAO,MAAMC,CAAC,GAAGF,aAAa,CAACC,oBAAoB,CAAC;;AAEpDC,CAAC,CAACC,IAAI,CAAC,cAAc,CAAC;AACtBC,IAAI,CAAC,qDAAqD,CAAC;AAC3DC,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAMC,IAAI,GAAG;AACf;AACA;AACA;AACA,MAAM;EACJD,CAAC,CAACE,mBAAmB,CAAC,IAAI,EAAED,IAAI,CAAC;AACnC,CAAC,CAAC;;AAEFL,CAAC,CAACC,IAAI,CAAC,OAAO,CAAC;AACfC,IAAI,CAAC,qDAAqD,CAAC;AAC3DC,EAAE,CAAC,CAACC,CAAC,KAAK;EACRA,CAAC,CAACE,mBAAmB,CAAC,IAAI,EAAE,EAAE,CAAC;AACjC,CAAC,CAAC;;AAEFN,CAAC,CAACC,IAAI,CAAC,gBAAgB,CAAC;AACxBC,IAAI,CAAC,6DAA6D,CAAC;AACnEC,EAAE,CAAC,CAACC,CAAC,KAAK;EACRA,CAAC,CAACE,mBAAmB,CAAC,KAAK,EAAE,gBAAgB,CAAC;AAChD,CAAC,CAAC","ignoreList":[]}