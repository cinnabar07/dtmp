{"version":3,"file":"matrix.spec.js","names":["description","makeTestGroup","keysOf","Type","ShaderValidationTest","g","test","desc","params","u","combine","beforeAllSubcases","t","type","selectDeviceOrSkipTestCase","fn","ty","enable","requiresF16","code","create","wgsl","expect","expectCompileResult","beginSubcases","element","scalarTy","vectorTy","rows","matrixTy","columns","module_decl","decl","toString","function_decl","kOutOfBoundsCases","const_module_in_bounds","result","const_module_oob_neg","const_module_oob_pos","const_func_in_bounds","const_func_oob_neg","const_func_oob_pos","override_in_bounds","pipeline","value","override_oob_neg","override_oob_pos","runtime_in_bounds","runtime_oob_neg","runtime_oob_pos","runtime_array_const_oob_neg","runtime_array_override_oob_neg","testcase","case","v","expectPipelineResult","expectedResult","constants","x","reference"],"sources":["../../../../../../src/webgpu/shader/validation/expression/access/matrix.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nValidation tests for matrix access expressions\n\n* Index type\n* Result type\n* Early-evaluation errors\n`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../common/util/data_tables.js';\nimport { Type } from '../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('index_type').\ndesc('Tests valid index types for array access expressions').\nparams((u) =>\nu.combine('type', [\n'bool',\n'u32',\n'i32',\n'abstract-int',\n'f32',\n'f16',\n'abstract-float',\n'vec2i']\n)\n).\nbeforeAllSubcases((t) => {\n  if (t.params.type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const ty = Type[t.params.type];\n  const enable = ty.requiresF16() ? 'enable f16;' : '';\n  const code = `${enable}\n    fn foo() {\n      var x = mat2x2(1,2,3,4);\n      let tmp = x[${ty.create(0).wgsl()}];\n    }`;\n  const expect =\n  t.params.type === 'i32' || t.params.type === 'u32' || t.params.type === 'abstract-int';\n  t.expectCompileResult(expect, code);\n});\n\ng.test('result_type').\ndesc('Tests that correct result type is produced for an access expression').\nparams((u) =>\nu.\ncombine('element', ['f16', 'f32']).\ncombine('columns', [2, 3, 4]).\nbeginSubcases().\ncombine('rows', [2, 3, 4]).\ncombine('decl', ['function', 'module'])\n).\nbeforeAllSubcases((t) => {\n  if (t.params.element === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const enable = t.params.element === 'f16' ? 'enable f16;' : '';\n  const scalarTy = Type[t.params.element];\n  const vectorTy = Type['vec'](t.params.rows, scalarTy);\n  const matrixTy = Type['mat'](t.params.columns, t.params.rows, scalarTy);\n  const module_decl =\n  t.params.decl === 'module' ?\n  `@group(0) @binding(0) var<storage> x : ${matrixTy.toString()};` :\n  ``;\n  const function_decl = t.params.decl === 'module' ? `` : `var x : ${matrixTy.toString()};`;\n  const code = `${enable}\n    ${module_decl}\n    fn foo() {\n      ${function_decl}\n      let tmp1 : ${vectorTy.toString()} = x[0];\n      let tmp2 : ${vectorTy.toString()} = x[1];\n    }`;\n  t.expectCompileResult(true, code);\n});\n\n\n\n\n\n\n\n\nconst kOutOfBoundsCases = {\n  const_module_in_bounds: {\n    code: `const x = mat2x2(1,2,3,4)[0];`,\n    result: true\n  },\n  const_module_oob_neg: {\n    code: `const x = mat2x2(1,2,3,4)[-1];`,\n    result: false\n  },\n  const_module_oob_pos: {\n    code: `const x = mat2x2(1,2,3,4)[2];`,\n    result: false\n  },\n  const_func_in_bounds: {\n    code: `fn foo() {\n      const x = mat2x2(1,2,3,4)[0];\n    }`,\n    result: true\n  },\n  const_func_oob_neg: {\n    code: `fn foo {\n      const x = mat2x2(1,2,3,4)[-1];\n    }`,\n    result: false\n  },\n  const_func_oob_pos: {\n    code: `fn foo {\n      const x = mat2x2(1,2,3,4)[2];\n    }`,\n    result: false\n  },\n  override_in_bounds: {\n    code: `override x : i32;\n    fn y() -> u32 {\n      let tmp = mat2x2(1,2,3,4)[x];\n      return 0;\n    }`,\n    result: true,\n    pipeline: true,\n    value: 0\n  },\n  override_oob_neg: {\n    code: `override x : i32;\n    fn y() -> u32 {\n      let tmp = mat2x2(1,2,3,4)[x];\n      return 0;\n    }`,\n    result: false,\n    pipeline: true,\n    value: -1\n  },\n  override_oob_pos: {\n    code: `override x : i32;\n    fn y() -> u32 {\n      let tmp = mat2x2(1,2,3,4)[x];\n      return 0;\n    }`,\n    result: false,\n    pipeline: true,\n    value: 2\n  },\n  runtime_in_bounds: {\n    code: `fn foo() {\n      let idx = 0;\n      let x = mat2x2(1,2,3,4)[idx];\n    }`,\n    result: true\n  },\n  runtime_oob_neg: {\n    code: `fn foo() {\n      let idx = -1;\n      let x = mat2x2(1,2,3,4)[idx];\n    }`,\n    result: true\n  },\n  runtime_oob_pos: {\n    code: `fn foo() {\n      let idx = 3;\n      let x = mat2x2(1,2,3,4)[idx];\n    }`,\n    result: true\n  },\n  runtime_array_const_oob_neg: {\n    code: `@group(0) @binding(0) var<storage> x : mat2x2<f32>;\n    fn y() -> u32 {\n      let tmp = x[-1];\n      return 0;\n    }`,\n    result: false\n  },\n  runtime_array_override_oob_neg: {\n    code: `@group(0) @binding(0) var<storage> v : mat2x2<f32>;\n    override x : i32;\n    fn y() -> u32 {\n      let tmp = v[x];\n      return 0;\n    }`,\n    result: false,\n    pipeline: true,\n    value: -1\n  }\n};\n\ng.test('early_eval_errors').\ndesc('Tests early evaluation errors for out-of-bounds indexing').\nparams((u) => u.combine('case', keysOf(kOutOfBoundsCases))).\nfn((t) => {\n  const testcase = kOutOfBoundsCases[t.params.case];\n  if (testcase.pipeline) {\n    const v = testcase.value ?? 0;\n    t.expectPipelineResult({\n      expectedResult: testcase.result,\n      code: testcase.code,\n      constants: { x: v },\n      reference: ['y()']\n    });\n  } else {\n    t.expectCompileResult(testcase.result, testcase.code);\n  }\n});\n\ng.test('abstract_matrix_concrete_index').\ndesc('Tests that a concrete index type on an abstract array remains abstract').\nfn((t) => {\n  const code = `\n    const idx = 0i;\n    const_assert mat2x2(1.11001100110011008404,1,1,1)[0i][0i] == 1.11001100110011008404;`;\n  t.expectCompileResult(true, code);\n});"],"mappings":"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","ignoreList":[]}