{"version":3,"file":"structure.spec.js","names":["description","makeTestGroup","ShaderValidationTest","g","test","desc","params","u","combine","fn","t","code","decl","expectCompileResult","types","i","length","beforeAllSubcases","selectDeviceOrSkipTestCase"],"sources":["../../../../../../src/webgpu/shader/validation/expression/access/structure.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nValidation tests for structure access expressions.\n\n* Correct result type\n* Identifier matching\n`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('identifier_mismatch').\ndesc('Tests that the member identifier must match a member in the declaration').\nparams((u) => u.combine('decl', ['value', 'ref'])).\nfn((t) => {\n  const code = `\n    struct S {\n      x : u32\n    }\n    fn foo() {\n      ${t.params.decl === 'value' ? 'let' : 'var'} v : S = S();\n      _ = v.y;\n    }`;\n  t.expectCompileResult(false, code);\n});\n\ng.test('shadowed_member').\ndesc('Tests that other declarations do not interfere with member determination').\nparams((u) => u.combine('decl', ['value', 'ref'])).\nfn((t) => {\n  const code = `\n    struct S {\n      x : u32\n    }\n    fn foo() {\n      var x : i32;\n      ${t.params.decl === 'value' ? 'let' : 'var'} v : S = S();\n      let tmp : u32 = v.x;\n    }`;\n  t.expectCompileResult(true, code);\n});\n\ng.test('result_type').\ndesc('Tests correct result types are returned').\nparams((u) => u.combine('decl', ['value', 'ref'])).\nfn((t) => {\n  const types = [\n  'i32',\n  'u32',\n  'f32',\n  'bool',\n  'array<u32, 4>',\n  'array<T, 2>',\n  'vec2f',\n  'vec3u',\n  'vec4i',\n  'mat2x2f',\n  'T'];\n\n  let code = `\n    struct T {\n      a : f32\n    }\n    struct S {\\n`;\n\n  for (let i = 0; i < types.length; i++) {\n    code += `m${i} : ${types[i]},\\n`;\n  }\n\n  code += `}\n    fn foo() {\n      var x : i32;\n      ${t.params.decl === 'value' ? 'let' : 'var'} v : S = S();\\n`;\n\n  for (let i = 0; i < types.length; i++) {\n    code += `let tmp${i} : ${types[i]} = v.m${i};\\n`;\n  }\n\n  code += `}`;\n  t.expectCompileResult(true, code);\n});\n\ng.test('result_type_f16').\ndesc('Tests correct type is returned for f16').\nparams((u) => u.combine('decl', ['value', 'ref'])).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('shader-f16');\n}).\nfn((t) => {\n  const code = `\n    enable f16;\n    struct S {\n      x : f16\n    }\n    fn foo() {\n      ${t.params.decl === 'value' ? 'let' : 'var'} v : S = S();\n      let tmp : f16 = v.x;\n    }`;\n  t.expectCompileResult(true, code);\n});\n\ng.test('result_type_runtime_array').\ndesc('Tests correct type is returned for runtime arrays').\nfn((t) => {\n  const code = `\n    struct S {\n      x : array<u32>\n    }\n    @group(0) @binding(0) var<storage> v : S;\n    fn foo() {\n      let tmp : u32 = v.x[0];\n      let tmp_ptr : ptr<storage, array<u32>> = &v.x;\n    }`;\n  t.expectCompileResult(true, code);\n});"],"mappings":"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","ignoreList":[]}