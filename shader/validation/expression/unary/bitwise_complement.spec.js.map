{"version":3,"file":"bitwise_complement.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","kAllScalarsAndVectors","scalarTypeOf","Type","ShaderValidationTest","g","kScalarAndVectorTypes","test","desc","params","u","combine","beginSubcases","beforeAllSubcases","t","type","f16","selectDeviceOrSkipTestCase","fn","elementTy","hasF16","code","create","wgsl","expectCompileResult","abstractInt","i32","u32","includes","kInvalidTypes","mat2x2f","expr","control","e","array","ptr","atomic","texture","sampler","struct"],"sources":["../../../../../../src/webgpu/shader/validation/expression/unary/bitwise_complement.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nValidation tests for bitwise complement expressions.\n`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../common/util/data_tables.js';\nimport { kAllScalarsAndVectors, scalarTypeOf, Type } from '../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// A list of scalar and vector types.\nconst kScalarAndVectorTypes = objectsToRecord(kAllScalarsAndVectors);\n\ng.test('scalar_vector').\ndesc(\n  `\n  Validates that scalar and vector bitwise complement expressions are only accepted for integers.\n  `\n).\nparams((u) => u.combine('type', keysOf(kScalarAndVectorTypes)).beginSubcases()).\nbeforeAllSubcases((t) => {\n  if (scalarTypeOf(kScalarAndVectorTypes[t.params.type]) === Type.f16) {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const type = kScalarAndVectorTypes[t.params.type];\n  const elementTy = scalarTypeOf(type);\n  const hasF16 = elementTy === Type.f16;\n  const code = `\n${hasF16 ? 'enable f16;' : ''}\nconst rhs = ${type.create(0).wgsl()};\nconst foo = ~rhs;\n`;\n\n  t.expectCompileResult([Type.abstractInt, Type.i32, Type.u32].includes(elementTy), code);\n});\n\n\n\n\n\n\n\nconst kInvalidTypes = {\n  mat2x2f: {\n    expr: 'm',\n    control: (e) => `i32(${e}[0][0])`\n  },\n\n  array: {\n    expr: 'arr',\n    control: (e) => `${e}[0]`\n  },\n\n  ptr: {\n    expr: '(&u)',\n    control: (e) => `*${e}`\n  },\n\n  atomic: {\n    expr: 'a',\n    control: (e) => `atomicLoad(&${e})`\n  },\n\n  texture: {\n    expr: 't',\n    control: (e) => `i32(textureLoad(${e}, vec2(), 0).x)`\n  },\n\n  sampler: {\n    expr: 's',\n    control: (e) => `i32(textureSampleLevel(t, ${e}, vec2(), 0).x)`\n  },\n\n  struct: {\n    expr: 'str',\n    control: (e) => `${e}.u`\n  }\n};\n\ng.test('invalid_types').\ndesc(\n  `\n  Validates that bitwise complement expressions are never accepted for non-scalar and non-vector types.\n  `\n).\nparams((u) =>\nu.combine('type', keysOf(kInvalidTypes)).combine('control', [true, false]).beginSubcases()\n).\nfn((t) => {\n  const type = kInvalidTypes[t.params.type];\n  const expr = t.params.control ? type.control(type.expr) : type.expr;\n  const code = `\n@group(0) @binding(0) var t : texture_2d<f32>;\n@group(0) @binding(1) var s : sampler;\n@group(0) @binding(2) var<storage, read_write> a : atomic<i32>;\n\nstruct S { u : u32 }\n\nvar<private> u : u32;\nvar<private> m : mat2x2f;\nvar<private> arr : array<u32, 4>;\nvar<private> str : S;\n\n@compute @workgroup_size(1)\nfn main() {\n  let foo = ~${expr};\n}\n`;\n\n  t.expectCompileResult(t.params.control, code);\n});"],"mappings":"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","ignoreList":[]}