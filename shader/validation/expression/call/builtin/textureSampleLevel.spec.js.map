{"version":3,"file":"textureSampleLevel.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","ShaderValidationTest","kTestTextureTypes","kValidTextureSampleLevelParameterTypes","coordsArgType","vec2f","levelIsF32","offsetArgType","vec2i","hasArrayIndexArg","vec3f","vec3i","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","kTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","expand","t","textureType","fn","returnType","offset","returnVarType","returnExpectedType","includes","f32","vec4f","varWGSL","toString","coordWGSL","create","wgsl","arrayWGSL","offsetWGSL","code","expectSuccess","expectCompileResult","filter","coordType","value","coordArgType","coordsRequiredType","arrayIndexType","arrayIndexArgType","args","map","arg","join","i32","u32","levelType","levelArgType","levelWGSL","offsetType","offsetRequiredType","varType","testTextureType","types","typesMatch","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureSampleLevel.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/const builtin = 'textureSampleLevel';export const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureSampleLevel coords parameter must be correct type\n* test textureSampleLevel array_index parameter must be correct type\n* test textureSampleLevel level parameter must be correct type\n* test textureSampleLevel offset parameter must be correct type\n* test textureSampleLevel offset parameter must be a const-expression\n* test textureSampleLevel offset parameter must be between -8 and +7 inclusive\n* test textureSampleLevel returns the correct type\n* test textureSampleLevel doesn't work with texture types it's not supposed to\n`;\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n\n\n  isUnsignedType } from\n'../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport { kTestTextureTypes } from './shader_builtin_utils.js';\n\n\n\n\n\n\n\n\nconst kValidTextureSampleLevelParameterTypes = {\n  'texture_2d<f32>': { coordsArgType: Type.vec2f, levelIsF32: true, offsetArgType: Type.vec2i },\n  'texture_2d_array<f32>': {\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    levelIsF32: true,\n    offsetArgType: Type.vec2i\n  },\n  'texture_3d<f32>': { coordsArgType: Type.vec3f, levelIsF32: true, offsetArgType: Type.vec3i },\n  'texture_cube<f32>': { coordsArgType: Type.vec3f, levelIsF32: true },\n  'texture_cube_array<f32>': {\n    coordsArgType: Type.vec3f,\n    hasArrayIndexArg: true,\n    levelIsF32: true\n  },\n  texture_depth_2d: { coordsArgType: Type.vec2f, offsetArgType: Type.vec2i },\n  texture_depth_2d_array: {\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    offsetArgType: Type.vec2i\n  },\n  texture_depth_cube: { coordsArgType: Type.vec3f },\n  texture_depth_cube_array: { coordsArgType: Type.vec3f, hasArrayIndexArg: true }\n};\n\nconst kTextureTypes = keysOf(kValidTextureSampleLevelParameterTypes);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('return_type').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplelevel').\ndesc(\n  `\nValidates the return type of ${builtin} is the expected type.\n`\n).\nparams((u) =>\nu.\ncombine('returnType', keysOf(kValuesTypes)).\ncombine('textureType', keysOf(kValidTextureSampleLevelParameterTypes)).\nbeginSubcases().\nexpand('offset', (t) =>\nkValidTextureSampleLevelParameterTypes[t.textureType].offsetArgType ?\n[false, true] :\n[false]\n)\n).\nfn((t) => {\n  const { returnType, textureType, offset } = t.params;\n  const returnVarType = kValuesTypes[returnType];\n  const { offsetArgType, coordsArgType, hasArrayIndexArg } =\n  kValidTextureSampleLevelParameterTypes[textureType];\n  const returnExpectedType = textureType.includes('depth') ? Type.f32 : Type.vec4f;\n\n  const varWGSL = returnVarType.toString();\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureSampleLevel(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess = isConvertible(returnExpectedType, returnVarType);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('coords_argument').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplelevel').\ndesc(\n  `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', keysOf(kValidTextureSampleLevelParameterTypes)).\ncombine('coordType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('value', [-1, 0, 1])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0).\nexpand('offset', (t) =>\nkValidTextureSampleLevelParameterTypes[t.textureType].offsetArgType ?\n[false, true] :\n[false]\n)\n).\nfn((t) => {\n  const { textureType, coordType, offset, value } = t.params;\n  const coordArgType = kValuesTypes[coordType];\n  const {\n    offsetArgType,\n    coordsArgType: coordsRequiredType,\n    hasArrayIndexArg\n  } = kValidTextureSampleLevelParameterTypes[textureType];\n\n  const coordWGSL = coordArgType.create(value).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleLevel(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess = isConvertible(coordArgType, coordsRequiredType);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('array_index_argument').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplelevel').\ndesc(\n  `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kTextureTypes)\n// filter out types with no array_index\n.filter((t) => !!kValidTextureSampleLevelParameterTypes[t.textureType].hasArrayIndexArg).\ncombine('arrayIndexType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('value', [-9, -8, 0, 7, 8])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0).\nexpand('offset', (t) =>\nkValidTextureSampleLevelParameterTypes[t.textureType].offsetArgType ?\n[false, true] :\n[false]\n)\n).\nfn((t) => {\n  const { textureType, arrayIndexType, value, offset } = t.params;\n  const arrayIndexArgType = kValuesTypes[arrayIndexType];\n  const args = [arrayIndexArgType.create(value)];\n  const { coordsArgType, offsetArgType } = kValidTextureSampleLevelParameterTypes[textureType];\n\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = args.map((arg) => arg.wgsl()).join(', ');\n  const offsetWGSL = offset ? `, ${offsetArgType.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleLevel(t, s, ${coordWGSL}, ${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('level_argument').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplelevel').\ndesc(\n  `\nValidates that only incorrect level arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kTextureTypes).\ncombine('levelType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('value', [-1, 0, 1])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.levelType]) || t.value >= 0).\nexpand('offset', (t) =>\nkValidTextureSampleLevelParameterTypes[t.textureType].offsetArgType ?\n[false, true] :\n[false]\n)\n).\nfn((t) => {\n  const { textureType, levelType, value, offset } = t.params;\n  const levelArgType = kValuesTypes[levelType];\n  const args = [levelArgType.create(value)];\n  const { coordsArgType, hasArrayIndexArg, offsetArgType, levelIsF32 } =\n  kValidTextureSampleLevelParameterTypes[textureType];\n\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const levelWGSL = args.map((arg) => arg.wgsl()).join(', ');\n  const offsetWGSL = offset ? `, ${offsetArgType.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleLevel(t, s, ${coordWGSL}${arrayWGSL}, ${levelWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess = levelIsF32 ?\n  isConvertible(levelArgType, Type.f32) :\n  isConvertible(levelArgType, Type.i32) || isConvertible(levelArgType, Type.u32);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('offset_argument').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplelevel').\ndesc(\n  `\nValidates that only incorrect offset arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kTextureTypes)\n// filter out types with no offset\n.filter((t) => !!kValidTextureSampleLevelParameterTypes[t.textureType].offsetArgType).\ncombine('offsetType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('value', [-9, -8, 0, 7, 8])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.offsetType]) || t.value >= 0)\n).\nfn((t) => {\n  const { textureType, offsetType, value } = t.params;\n  const offsetArgType = kValuesTypes[offsetType];\n  const args = [offsetArgType.create(value)];\n  const {\n    coordsArgType,\n    hasArrayIndexArg,\n    offsetArgType: offsetRequiredType\n  } = kValidTextureSampleLevelParameterTypes[textureType];\n\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = args.map((arg) => arg.wgsl()).join(', ');\n\n  const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleLevel(t, s, ${coordWGSL}${arrayWGSL}, 0, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  isConvertible(offsetArgType, offsetRequiredType) && value >= -8 && value <= 7;\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('offset_argument,non_const').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplelevel').\ndesc(\n  `\nValidates that only non-const offset arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kTextureTypes).\ncombine('varType', ['c', 'u', 'l'])\n// filter out types with no offset\n.filter((t) => !!kValidTextureSampleLevelParameterTypes[t.textureType].offsetArgType)\n).\nfn((t) => {\n  const { textureType, varType } = t.params;\n  const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n  kValidTextureSampleLevelParameterTypes[textureType];\n\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = `${offsetArgType}(${varType})`;\n\n  const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType};\n@group(0) @binding(2) var<uniform> u: ${offsetArgType};\n@fragment fn fs() -> @location(0) vec4f {\n  const c = 1;\n  let l = ${offsetArgType.create(0).wgsl()};\n  let v = textureSampleLevel(t, s, ${coordWGSL}${arrayWGSL}, 0, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess = varType === 'c';\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('texture_type').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplelevel').\ndesc(\n  `\nValidates that incompatible texture types don't work with ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('testTextureType', kTestTextureTypes).\nbeginSubcases().\ncombine('textureType', keysOf(kValidTextureSampleLevelParameterTypes)).\nexpand('offset', (t) =>\nkValidTextureSampleLevelParameterTypes[t.textureType].offsetArgType ?\n[false, true] :\n[false]\n)\n).\nfn((t) => {\n  const { testTextureType, textureType, offset } = t.params;\n  const { coordsArgType, offsetArgType, hasArrayIndexArg } =\n  kValidTextureSampleLevelParameterTypes[textureType];\n\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${testTextureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleLevel(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n\n  const types = kValidTextureSampleLevelParameterTypes[testTextureType];\n  const typesMatch = types ?\n  types.coordsArgType === coordsArgType &&\n  types.hasArrayIndexArg === hasArrayIndexArg && (\n  offset ? types.offsetArgType === offsetArgType : true) :\n  false;\n\n  const expectSuccess = testTextureType === textureType || typesMatch;\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('must_use').\ndesc('Tests that the result must be used').\nparams((u) => u.combine('use', [true, false])).\nfn((t) => {\n  const code = `\n    @group(0) @binding(0) var t : texture_2d<f32>;\n    @group(0) @binding(1) var s : sampler;\n    fn foo() {\n      ${t.params.use ? '_ =' : ''} textureSampleLevel(t,s,vec2(0,0), 0);\n    }`;\n  t.expectCompileResult(t.params.use, code);\n});"],"mappings":"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","ignoreList":[]}