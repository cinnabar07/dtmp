{"version":3,"file":"textureDimensions.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","kAllTextureFormats","kTextureFormatInfo","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","stringToType","ShaderValidationTest","getNonStorageTextureTypeWGSL","getSampleAndBaseTextureTypeForTextureType","kNonStorageTextureTypeInfo","kTestTextureTypes","kValidTextureDimensionParameterTypesForNonStorageTextures","texture_1d","returnType","u32","hasLevelArg","texture_2d","vec2u","texture_2d_array","texture_cube","texture_cube_array","texture_3d","vec3u","texture_multisampled_2d","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","texture_depth_multisampled_2d","texture_external","kValidTextureDimensionParameterTypesForStorageTextures","texture_storage_1d","texture_storage_2d","texture_storage_2d_array","texture_storage_3d","kNonStorageTextureTypes","kStorageTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","expand","t","textureType","texelTypes","map","v","toString","fn","texelType","returnVarType","returnRequiredType","varWGSL","texelArgType","textureWGSL","levelWGSL","code","expectSuccess","expectCompileResult","filter","format","color","storage","skipIfTextureFormatNotUsableAsStorageTexture","levelType","value","levelArgType","create","wgsl","i32","testTextureType","baseTestTextureType","types","typesMatch","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureDimensions.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/const builtin = 'textureDimension';export const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureDimension returns the correct type\n* test textureDimension level parameter must be correct type\n* test textureDimension doesn't work with texture types it's not supposed to\n`;\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { kAllTextureFormats, kTextureFormatInfo } from '../../../../../format_info.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  isUnsignedType,\n  stringToType } from\n'../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  getNonStorageTextureTypeWGSL,\n  getSampleAndBaseTextureTypeForTextureType,\n  kNonStorageTextureTypeInfo,\n  kTestTextureTypes } from\n'./shader_builtin_utils.js';\n\n\n\n\n\n\nconst kValidTextureDimensionParameterTypesForNonStorageTextures =\n\n{\n  texture_1d: {\n    returnType: Type.u32,\n    hasLevelArg: true\n  },\n  texture_2d: {\n    returnType: Type.vec2u,\n    hasLevelArg: true\n  },\n  texture_2d_array: {\n    returnType: Type.vec2u,\n    hasLevelArg: true\n  },\n  texture_cube: {\n    returnType: Type.vec2u,\n    hasLevelArg: true\n  },\n  texture_cube_array: {\n    returnType: Type.vec2u,\n    hasLevelArg: true\n  },\n  texture_3d: {\n    returnType: Type.vec3u,\n    hasLevelArg: true\n  },\n  texture_multisampled_2d: {\n    returnType: Type.vec2u\n  },\n  texture_depth_2d: {\n    returnType: Type.vec2u,\n    hasLevelArg: true\n  },\n  texture_depth_2d_array: {\n    returnType: Type.vec2u,\n    hasLevelArg: true\n  },\n  texture_depth_cube: {\n    returnType: Type.vec2u,\n    hasLevelArg: true\n  },\n  texture_depth_cube_array: {\n    returnType: Type.vec2u,\n    hasLevelArg: true\n  },\n  texture_depth_multisampled_2d: {\n    returnType: Type.vec2u\n  },\n  texture_external: { returnType: Type.vec2u }\n};\n\nconst kValidTextureDimensionParameterTypesForStorageTextures =\n\n{\n  texture_storage_1d: {\n    returnType: Type.u32\n  },\n  texture_storage_2d: {\n    returnType: Type.vec2u\n  },\n  texture_storage_2d_array: {\n    returnType: Type.vec2u\n  },\n  texture_storage_3d: {\n    returnType: Type.vec3u\n  }\n};\n\nconst kNonStorageTextureTypes = keysOf(kValidTextureDimensionParameterTypesForNonStorageTextures);\nconst kStorageTextureTypes = keysOf(kValidTextureDimensionParameterTypesForStorageTextures);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('return_type,non_storage').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturedimensions').\ndesc(\n  `\nValidates the return type of ${builtin} is the expected type.\n`\n).\nparams((u) =>\nu.\ncombine('returnType', keysOf(kValuesTypes)).\ncombine('textureType', kNonStorageTextureTypes).\nbeginSubcases().\nexpand('texelType', (t) =>\nkNonStorageTextureTypeInfo[t.textureType].texelTypes.map((v) => v.toString())\n)\n).\nfn((t) => {\n  const { returnType, textureType, texelType } = t.params;\n  const returnVarType = kValuesTypes[returnType];\n  const { returnType: returnRequiredType, hasLevelArg } =\n  kValidTextureDimensionParameterTypesForNonStorageTextures[textureType];\n\n  const varWGSL = returnVarType.toString();\n  const texelArgType = stringToType(texelType);\n  const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n  const levelWGSL = hasLevelArg ? ', 0' : '';\n\n  const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureDimensions(t${levelWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess = isConvertible(returnRequiredType, returnVarType);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('return_type,storage').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturedimensions').\ndesc(\n  `\nValidates the return type of ${builtin} is the expected type.\n`\n).\nparams((u) =>\nu.\ncombine('returnType', keysOf(kValuesTypes)).\ncombine('textureType', kStorageTextureTypes).\nbeginSubcases().\ncombine('format', kAllTextureFormats)\n// filter to only storage texture formats.\n.filter((t) => !!kTextureFormatInfo[t.format].color?.storage)\n).\nfn((t) => {\n  const { returnType, textureType, format } = t.params;\n  t.skipIfTextureFormatNotUsableAsStorageTexture(format);\n\n  const returnVarType = kValuesTypes[returnType];\n  const { returnType: returnRequiredType, hasLevelArg } =\n  kValidTextureDimensionParameterTypesForStorageTextures[textureType];\n\n  const varWGSL = returnVarType.toString();\n  const levelWGSL = hasLevelArg ? ', 0' : '';\n\n  const code = `\n@group(0) @binding(0) var t: ${textureType}<${format}, read>;\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureDimensions(t${levelWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess = isConvertible(returnRequiredType, returnVarType);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('level_argument,non_storage').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturedimensions').\ndesc(\n  `\nValidates that only incorrect level arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kNonStorageTextureTypes)\n// filter out types with no level\n.filter(\n  (t) => !!kValidTextureDimensionParameterTypesForNonStorageTextures[t.textureType].hasLevelArg\n).\ncombine('levelType', keysOf(kValuesTypes)).\nbeginSubcases().\nexpand('texelType', (t) =>\nkNonStorageTextureTypeInfo[t.textureType].texelTypes.map((v) => v.toString())\n).\ncombine('value', [-1, 0, 1])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.levelType]) || t.value >= 0)\n).\nfn((t) => {\n  const { textureType, levelType, texelType, value } = t.params;\n  const levelArgType = kValuesTypes[levelType];\n\n  const texelArgType = stringToType(texelType);\n  const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n  const levelWGSL = levelArgType.create(value).wgsl();\n\n  const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureDimensions(t, ${levelWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  isConvertible(levelArgType, Type.i32) || isConvertible(levelArgType, Type.u32);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('texture_type,non_storage').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturedimensions').\ndesc(\n  `\nValidates that incompatible texture types don't work with ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('testTextureType', kTestTextureTypes).\nbeginSubcases().\ncombine('textureType', keysOf(kValidTextureDimensionParameterTypesForNonStorageTextures)).\nexpand('hasLevelArg', (t) =>\nkValidTextureDimensionParameterTypesForNonStorageTextures[t.textureType].hasLevelArg ?\n[false, true] :\n[false]\n)\n).\nfn((t) => {\n  const { testTextureType, hasLevelArg } = t.params;\n\n  const levelWGSL = hasLevelArg ? ', 0' : '';\n\n  const code = `\n@group(0) @binding(1) var t: ${testTextureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureDimensions(t${levelWGSL});\n  return vec4f(0);\n}\n`;\n\n  const [baseTestTextureType] = getSampleAndBaseTextureTypeForTextureType(testTextureType);\n\n  let expectSuccess = true;\n  const types =\n  kValidTextureDimensionParameterTypesForNonStorageTextures[baseTestTextureType] ||\n  kValidTextureDimensionParameterTypesForStorageTextures[baseTestTextureType];\n  if (types) {\n    const typesMatch = !hasLevelArg || !!types.hasLevelArg;\n    expectSuccess = typesMatch;\n  }\n\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('must_use').\ndesc('Tests that the result must be used').\nparams((u) => u.combine('use', [true, false])).\nfn((t) => {\n  const code = `\n    @group(0) @binding(0) var t : texture_2d<f32>;\n    fn foo() {\n      ${t.params.use ? '_ =' : ''} textureDimensions(t);\n    }`;\n  t.expectCompileResult(t.params.use, code);\n});"],"mappings":"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","ignoreList":[]}