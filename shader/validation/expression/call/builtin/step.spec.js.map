{"version":3,"file":"step.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kConvertableToFloatScalarsAndVectors","scalarTypeOf","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","stageSupportsType","validateConstOrOverrideBuiltinEval","g","kValidArgumentTypes","test","desc","params","u","combine","filter","stage","type","beginSubcases","expand","beforeAllSubcases","t","f16","selectDeviceOrSkipTestCase","fn","expectedResult","create","a","b","kArgCases","good","bad_no_parens","bad_0args","bad_1arg","bad_3arg","bad_0bool","bad_0array","bad_0struct","bad_0uint","bad_0int","bad_0vec2i","bad_0vec2u","bad_0vec3i","bad_0vec3u","bad_0vec4i","bad_0vec4u","bad_1bool","bad_1array","bad_1struct","bad_1uint","bad_1int","bad_1vec2i","bad_1vec2u","bad_1vec3i","bad_1vec3u","bad_1vec4i","bad_1vec4u","expectCompileResult","arg","use_it","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/step.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/const builtin = 'step';export const description = `\nValidation tests for the ${builtin}() builtin.\n`;\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kConvertableToFloatScalarsAndVectors,\n  scalarTypeOf } from\n'../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  stageSupportsType,\n  validateConstOrOverrideBuiltinEval } from\n'./const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValidArgumentTypes = objectsToRecord(kConvertableToFloatScalarsAndVectors);\n\ng.test('values').\ndesc(\n  `\nValidates that constant evaluation and override evaluation of ${builtin}() error on invalid inputs.\n`\n).\nparams((u) =>\nu.\ncombine('stage', kConstantAndOverrideStages).\ncombine('type', keysOf(kValidArgumentTypes)).\nfilter((u) => stageSupportsType(u.stage, kValidArgumentTypes[u.type])).\nbeginSubcases().\nexpand('a', (u) => fullRangeForType(kValidArgumentTypes[u.type], 5)).\nexpand('b', (u) => fullRangeForType(kValidArgumentTypes[u.type], 5))\n).\nbeforeAllSubcases((t) => {\n  if (scalarTypeOf(kValidArgumentTypes[t.params.type]) === Type.f16) {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const expectedResult = true;\n\n  const type = kValidArgumentTypes[t.params.type];\n  validateConstOrOverrideBuiltinEval(\n    t,\n    builtin,\n    expectedResult,\n    [type.create(t.params.a), type.create(t.params.b)],\n    t.params.stage\n  );\n});\n\nconst kArgCases = {\n  good: '(1.2, 2.3)',\n  bad_no_parens: '',\n  // Bad number of args\n  bad_0args: '()',\n  bad_1arg: '(1.2)',\n  bad_3arg: '(1.2, 2.3, 4.5)',\n  // Bad value for arg 0\n  bad_0bool: '(false, 2.3)',\n  bad_0array: '(array(1.1,2.2), 2.3)',\n  bad_0struct: '(modf(2.2), 2.3)',\n  bad_0uint: '(1u, 2.3)',\n  bad_0int: '(1i, 2.3)',\n  bad_0vec2i: '(vec2i(), 2.3)',\n  bad_0vec2u: '(vec2u(), 2.3)',\n  bad_0vec3i: '(vec3i(), 2.3)',\n  bad_0vec3u: '(vec3u(), 2.3)',\n  bad_0vec4i: '(vec4i(), 2.3)',\n  bad_0vec4u: '(vec4u(), 2.3)',\n  // Bad value for arg 1\n  bad_1bool: '(1.2, false)',\n  bad_1array: '(1.2, array(1.1,2.2))',\n  bad_1struct: '(1.2, modf(2.2))',\n  bad_1uint: '(1.2, 1u)',\n  bad_1int: '(1.2, 1i)',\n  bad_1vec2i: '(1.2, vec2i())',\n  bad_1vec2u: '(1.2, vec2u())',\n  bad_1vec3i: '(1.2, vec3i())',\n  bad_1vec3u: '(1.2, vec3u())',\n  bad_1vec4i: '(1.2, vec4i())',\n  bad_1vec4u: '(1.2, vec4u())'\n};\n\ng.test('args').\ndesc(`Test compilation failure of ${builtin} with variously shaped and typed arguments`).\nparams((u) => u.combine('arg', keysOf(kArgCases))).\nfn((t) => {\n  t.expectCompileResult(\n    t.params.arg === 'good',\n    `const c = ${builtin}${kArgCases[t.params.arg]};`\n  );\n});\n\ng.test('must_use').\ndesc(`Result of ${builtin} must be used`).\nparams((u) => u.combine('use', [true, false])).\nfn((t) => {\n  const use_it = t.params.use ? '_ = ' : '';\n  t.expectCompileResult(t.params.use, `fn f() { ${use_it}${builtin}${kArgCases['good']}; }`);\n});"],"mappings":"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","ignoreList":[]}