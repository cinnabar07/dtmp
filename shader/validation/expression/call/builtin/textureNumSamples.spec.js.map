{"version":3,"file":"textureNumSamples.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kAllScalarsAndVectors","isConvertible","stringToType","ShaderValidationTest","getNonStorageTextureTypeWGSL","kNonStorageTextureTypeInfo","kTestTextureTypes","kTextureNumSamplesTextureTypesForNonStorageTextures","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","expand","t","textureType","texelTypes","map","v","toString","fn","returnType","texelType","returnVarType","varWGSL","texelArgType","textureWGSL","code","expectSuccess","u32","expectCompileResult","testTextureType","includes","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureNumSamples.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/const builtin = 'textureNumSamples';export const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureNumSamples returns the correct type\n* test textureNumSamples doesn't work with texture types it's not supposed to\n`;\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n  stringToType } from\n'../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  getNonStorageTextureTypeWGSL,\n  kNonStorageTextureTypeInfo,\n  kTestTextureTypes } from\n'./shader_builtin_utils.js';\n\nconst kTextureNumSamplesTextureTypesForNonStorageTextures = [\n'texture_multisampled_2d',\n'texture_depth_multisampled_2d'];\n\n\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('return_type').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturenumsamples').\ndesc(\n  `\nValidates the return type of ${builtin} is the expected type.\n`\n).\nparams((u) =>\nu.\ncombine('returnType', keysOf(kValuesTypes)).\ncombine('textureType', kTextureNumSamplesTextureTypesForNonStorageTextures).\nbeginSubcases().\nexpand('texelType', (t) =>\nkNonStorageTextureTypeInfo[t.textureType].texelTypes.map((v) => v.toString())\n)\n).\nfn((t) => {\n  const { returnType, textureType, texelType } = t.params;\n  const returnVarType = kValuesTypes[returnType];\n\n  const varWGSL = returnVarType.toString();\n  const texelArgType = stringToType(texelType);\n  const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n\n  const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureNumSamples(t);\n  return vec4f(0);\n}\n`;\n  const expectSuccess = isConvertible(Type.u32, returnVarType);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('texture_type').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturenumsamples').\ndesc(\n  `\nValidates that incompatible texture types don't work with ${builtin}\n`\n).\nparams((u) => u.combine('testTextureType', kTestTextureTypes)).\nfn((t) => {\n  const { testTextureType } = t.params;\n  const code = `\n@group(0) @binding(1) var t: ${testTextureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureNumSamples(t);\n  return vec4f(0);\n}\n`;\n  const expectSuccess = testTextureType.includes('multisample');\n\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('must_use').\ndesc('Tests that the result must be used').\nparams((u) => u.combine('use', [true, false])).\nfn((t) => {\n  const code = `\n    @group(0) @binding(0) var t : texture_multisampled_2d<f32>;\n    fn foo() {\n      ${t.params.use ? '_ =' : ''} textureDimensions(t);\n    }`;\n  t.expectCompileResult(t.params.use, code);\n});"],"mappings":"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","ignoreList":[]}