{"version":3,"file":"textureLoad.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","assert","kAllTextureFormats","kTextureFormatInfo","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","stringToType","ShaderValidationTest","getNonStorageTextureTypeWGSL","getSampleAndBaseTextureTypeForTextureType","kNonStorageTextureTypeInfo","kTestTextureTypes","kCoords1DTypes","i32","u32","kCoords2DTypes","vec2i","vec2u","kCoords3DTypes","vec3i","vec3u","kValidTextureLoadParameterTypesForNonStorageTextures","texture_1d","coordsArgTypes","hasLevelArg","texture_2d","texture_2d_array","hasArrayIndexArg","texture_3d","texture_multisampled_2d","hasSampleIndexArg","texture_depth_2d","texture_depth_2d_array","texture_depth_multisampled_2d","texture_external","kValidTextureLoadParameterTypesForStorageTextures","texture_storage_1d","texture_storage_2d","texture_storage_2d_array","texture_storage_3d","kNonStorageTextureTypes","kStorageTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","expand","t","textureType","texelTypes","map","v","toString","beforeAllSubcases","skipIfTextureLoadNotSupportedForTextureType","fn","returnType","texelType","returnVarType","varWGSL","texelArgType","textureWGSL","coordWGSL","create","wgsl","arrayWGSL","levelWGSL","sampleIndexWGSL","code","expectSuccess","expectCompileResult","filter","coordType","value","coordArgType","format","color","storage","skipIfLanguageFeatureNotSupported","skipIfTextureFormatNotUsableAsStorageTexture","arrayIndexType","arrayIndexArgType","args","arg","join","levelType","levelArgType","sampleIndexType","sampleIndexArgType","testTextureType","baseTestTextureType","types","numTestNumberArgs","numExpectNumberArgs","typesMatch","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureLoad.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/const builtin = 'textureLoad';export const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureLoad coords parameter must be correct type\n* test textureLoad array_index parameter must be correct type\n* test textureLoad level parameter must be correct type\n* test textureLoad sample_index parameter must be correct type\n* test textureLoad returns the correct type\n* test textureLoad doesn't work with texture types it's not supposed to\n`;\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { assert } from '../../../../../../common/util/util.js';\nimport { kAllTextureFormats, kTextureFormatInfo } from '../../../../../format_info.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n\n\n  isUnsignedType,\n  stringToType } from\n'../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  getNonStorageTextureTypeWGSL,\n  getSampleAndBaseTextureTypeForTextureType,\n  kNonStorageTextureTypeInfo,\n  kTestTextureTypes } from\n'./shader_builtin_utils.js';\n\n\n\n\n\n\n\n\nconst kCoords1DTypes = [Type.i32, Type.u32];\nconst kCoords2DTypes = [Type.vec2i, Type.vec2u];\nconst kCoords3DTypes = [Type.vec3i, Type.vec3u];\n\nconst kValidTextureLoadParameterTypesForNonStorageTextures =\n{\n  texture_1d: {\n    coordsArgTypes: kCoords1DTypes,\n    hasLevelArg: true\n  },\n  texture_2d: {\n    coordsArgTypes: kCoords2DTypes,\n    hasLevelArg: true\n  },\n  texture_2d_array: {\n    coordsArgTypes: kCoords2DTypes,\n    hasArrayIndexArg: true,\n    hasLevelArg: true\n  },\n  texture_3d: {\n    coordsArgTypes: kCoords3DTypes,\n    hasLevelArg: true\n  },\n  texture_multisampled_2d: {\n    coordsArgTypes: kCoords2DTypes,\n    hasSampleIndexArg: true\n  },\n  texture_depth_2d: {\n    coordsArgTypes: kCoords2DTypes,\n    hasLevelArg: true\n  },\n  texture_depth_2d_array: {\n    coordsArgTypes: kCoords2DTypes,\n    hasArrayIndexArg: true,\n    hasLevelArg: true\n  },\n  texture_depth_multisampled_2d: {\n    coordsArgTypes: kCoords2DTypes,\n    hasSampleIndexArg: true\n  },\n  texture_external: { coordsArgTypes: kCoords2DTypes }\n};\n\nconst kValidTextureLoadParameterTypesForStorageTextures = {\n  texture_storage_1d: { coordsArgTypes: [Type.i32, Type.u32] },\n  texture_storage_2d: { coordsArgTypes: [Type.vec2i, Type.vec2u] },\n  texture_storage_2d_array: {\n    coordsArgTypes: [Type.vec2i, Type.vec2u],\n    hasArrayIndexArg: true\n  },\n  texture_storage_3d: { coordsArgTypes: [Type.vec3i, Type.vec3u] }\n};\n\nconst kNonStorageTextureTypes = keysOf(kValidTextureLoadParameterTypesForNonStorageTextures);\nconst kStorageTextureTypes = keysOf(kValidTextureLoadParameterTypesForStorageTextures);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('return_type,non_storage').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload').\ndesc(\n  `\nValidates the return type of ${builtin} is the expected type.\n`\n).\nparams((u) =>\nu.\ncombine('returnType', keysOf(kValuesTypes)).\ncombine('textureType', kNonStorageTextureTypes).\nbeginSubcases().\nexpand('texelType', (t) =>\nkNonStorageTextureTypeInfo[t.textureType].texelTypes.map((v) => v.toString())\n)\n).\nbeforeAllSubcases((t) => t.skipIfTextureLoadNotSupportedForTextureType(t.params.textureType)).\nfn((t) => {\n  const { returnType, textureType, texelType } = t.params;\n  const returnVarType = kValuesTypes[returnType];\n  const { coordsArgTypes, hasArrayIndexArg, hasLevelArg, hasSampleIndexArg } =\n  kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n\n  const varWGSL = returnVarType.toString();\n  const texelArgType = stringToType(texelType);\n  const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n  const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const levelWGSL = hasLevelArg ? ', 0' : '';\n  const sampleIndexWGSL = hasSampleIndexArg ? ', 0' : '';\n\n  const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureLoad(t, ${coordWGSL}${arrayWGSL}${levelWGSL}${sampleIndexWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess = isConvertible(texelArgType, returnVarType);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('coords_argument,non_storage').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload').\ndesc(\n  `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kNonStorageTextureTypes).\ncombine('coordType', keysOf(kValuesTypes)).\nbeginSubcases().\nexpand('texelType', (t) =>\nkNonStorageTextureTypeInfo[t.textureType].texelTypes.map((v) => v.toString())\n).\ncombine('value', [-1, 0, 1])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n).\nbeforeAllSubcases((t) => t.skipIfTextureLoadNotSupportedForTextureType(t.params.textureType)).\nfn((t) => {\n  const { textureType, coordType, texelType, value } = t.params;\n  const coordArgType = kValuesTypes[coordType];\n  const { coordsArgTypes, hasArrayIndexArg, hasLevelArg, hasSampleIndexArg } =\n  kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n\n  const texelArgType = stringToType(texelType);\n  const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n  const coordWGSL = coordArgType.create(value).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const levelWGSL = hasLevelArg ? ', 0' : '';\n  const sampleIndexWGSL = hasSampleIndexArg ? ', 0' : '';\n\n  const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}${arrayWGSL}${levelWGSL}${sampleIndexWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  isConvertible(coordArgType, coordsArgTypes[0]) ||\n  isConvertible(coordArgType, coordsArgTypes[1]);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('coords_argument,storage').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload').\ndesc(\n  `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kStorageTextureTypes).\ncombine('coordType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('format', kAllTextureFormats)\n// filter to only storage texture formats.\n.filter((t) => !!kTextureFormatInfo[t.format].color?.storage).\ncombine('value', [-1, 0, 1])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n).\nbeforeAllSubcases((t) =>\nt.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures')\n).\nfn((t) => {\n  const { textureType, coordType, format, value } = t.params;\n  t.skipIfTextureFormatNotUsableAsStorageTexture(format);\n\n  const coordArgType = kValuesTypes[coordType];\n  const { coordsArgTypes, hasArrayIndexArg } =\n  kValidTextureLoadParameterTypesForStorageTextures[textureType];\n\n  const coordWGSL = coordArgType.create(value).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n\n  const code = `\n@group(0) @binding(0) var t: ${textureType}<${format}, read>;\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}${arrayWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  isConvertible(coordArgType, coordsArgTypes[0]) ||\n  isConvertible(coordArgType, coordsArgTypes[1]);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('array_index_argument,non_storage').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload').\ndesc(\n  `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kNonStorageTextureTypes)\n// filter out types with no array_index\n.filter(\n  (t) => !!kValidTextureLoadParameterTypesForNonStorageTextures[t.textureType].hasArrayIndexArg\n).\ncombine('arrayIndexType', keysOf(kValuesTypes)).\nbeginSubcases().\nexpand('texelType', (t) =>\nkNonStorageTextureTypeInfo[t.textureType].texelTypes.map((v) => v.toString())\n).\ncombine('value', [-1, 0, 1])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0)\n).\nbeforeAllSubcases((t) => t.skipIfTextureLoadNotSupportedForTextureType(t.params.textureType)).\nfn((t) => {\n  const { textureType, arrayIndexType, texelType, value } = t.params;\n  const arrayIndexArgType = kValuesTypes[arrayIndexType];\n  const args = [arrayIndexArgType.create(value)];\n  const { coordsArgTypes, hasLevelArg } =\n  kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n\n  const texelArgType = stringToType(texelType);\n  const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n  const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n  const arrayWGSL = args.map((arg) => arg.wgsl()).join(', ');\n  const levelWGSL = hasLevelArg ? ', 0' : '';\n\n  const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}, ${arrayWGSL}${levelWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('array_index_argument,storage').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload').\ndesc(\n  `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kStorageTextureTypes)\n// filter out types with no array_index\n.filter(\n  (t) => !!kValidTextureLoadParameterTypesForStorageTextures[t.textureType].hasArrayIndexArg\n).\ncombine('arrayIndexType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('format', kAllTextureFormats)\n// filter to only storage texture formats.\n.filter((t) => !!kTextureFormatInfo[t.format].color?.storage).\ncombine('value', [-1, 0, 1])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0)\n).\nbeforeAllSubcases((t) =>\nt.skipIfLanguageFeatureNotSupported('readonly_and_readwrite_storage_textures')\n).\nfn((t) => {\n  const { textureType, arrayIndexType, format, value } = t.params;\n  t.skipIfTextureFormatNotUsableAsStorageTexture(format);\n\n  const arrayIndexArgType = kValuesTypes[arrayIndexType];\n  const args = [arrayIndexArgType.create(value)];\n  const { coordsArgTypes, hasLevelArg } =\n  kValidTextureLoadParameterTypesForStorageTextures[textureType];\n\n  const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n  const arrayWGSL = args.map((arg) => arg.wgsl()).join(', ');\n  const levelWGSL = hasLevelArg ? ', 0' : '';\n\n  const code = `\n@group(0) @binding(0) var t: ${textureType}<${format}, read>;\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}, ${arrayWGSL}${levelWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('level_argument,non_storage').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload').\ndesc(\n  `\nValidates that only incorrect level arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kNonStorageTextureTypes)\n// filter out types with no level\n.filter(\n  (t) => !!kValidTextureLoadParameterTypesForNonStorageTextures[t.textureType].hasLevelArg\n).\ncombine('levelType', keysOf(kValuesTypes)).\nbeginSubcases().\nexpand('texelType', (t) =>\nkNonStorageTextureTypeInfo[t.textureType].texelTypes.map((v) => v.toString())\n).\ncombine('value', [-1, 0, 1])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.levelType]) || t.value >= 0)\n).\nbeforeAllSubcases((t) => t.skipIfTextureLoadNotSupportedForTextureType(t.params.textureType)).\nfn((t) => {\n  const { textureType, levelType, texelType, value } = t.params;\n  const levelArgType = kValuesTypes[levelType];\n  const { coordsArgTypes, hasArrayIndexArg } =\n  kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n\n  const texelArgType = stringToType(texelType);\n  const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n  const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const levelWGSL = levelArgType.create(value).wgsl();\n\n  const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}${arrayWGSL}, ${levelWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  isConvertible(levelArgType, Type.i32) || isConvertible(levelArgType, Type.u32);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('sample_index_argument,non_storage').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload').\ndesc(\n  `\nValidates that only incorrect sample_index arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kNonStorageTextureTypes)\n// filter out types with no sample_index\n.filter(\n  (t) => !!kValidTextureLoadParameterTypesForNonStorageTextures[t.textureType].hasSampleIndexArg\n).\ncombine('sampleIndexType', keysOf(kValuesTypes)).\nbeginSubcases().\nexpand('texelType', (t) =>\nkNonStorageTextureTypeInfo[t.textureType].texelTypes.map((v) => v.toString())\n).\ncombine('value', [-1, 0, 1])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.sampleIndexType]) || t.value >= 0)\n).\nbeforeAllSubcases((t) => t.skipIfTextureLoadNotSupportedForTextureType(t.params.textureType)).\nfn((t) => {\n  const { textureType, sampleIndexType, texelType, value } = t.params;\n  const sampleIndexArgType = kValuesTypes[sampleIndexType];\n  const { coordsArgTypes, hasArrayIndexArg, hasLevelArg } =\n  kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n  assert(!hasLevelArg);\n\n  const texelArgType = stringToType(texelType);\n  const textureWGSL = getNonStorageTextureTypeWGSL(textureType, texelArgType);\n  const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const sampleIndexWGSL = sampleIndexArgType.create(value).wgsl();\n\n  const code = `\n@group(0) @binding(0) var t: ${textureWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  _ = textureLoad(t, ${coordWGSL}${arrayWGSL}, ${sampleIndexWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  isConvertible(sampleIndexArgType, Type.i32) || isConvertible(sampleIndexArgType, Type.u32);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('texture_type,non_storage').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload').\ndesc(\n  `\nValidates that incompatible texture types don't work with ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('testTextureType', kTestTextureTypes).\nbeginSubcases().\ncombine('textureType', kNonStorageTextureTypes)\n).\nbeforeAllSubcases((t) => t.skipIfTextureLoadNotSupportedForTextureType(t.params.testTextureType)).\nfn((t) => {\n  const { testTextureType, textureType } = t.params;\n  const { coordsArgTypes, hasArrayIndexArg, hasLevelArg, hasSampleIndexArg } =\n  kValidTextureLoadParameterTypesForNonStorageTextures[textureType];\n\n  const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const levelWGSL = hasLevelArg ? ', 0' : '';\n  const sampleIndexWGSL = hasSampleIndexArg ? ', 0' : '';\n\n  const code = `\n@group(0) @binding(1) var t: ${testTextureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureLoad(t, ${coordWGSL}${arrayWGSL}${levelWGSL}${sampleIndexWGSL});\n  return vec4f(0);\n}\n`;\n\n  const [baseTestTextureType] = getSampleAndBaseTextureTypeForTextureType(testTextureType);\n\n  let expectSuccess = false;\n  const types =\n  kValidTextureLoadParameterTypesForNonStorageTextures[baseTestTextureType] ||\n  kValidTextureLoadParameterTypesForStorageTextures[baseTestTextureType];\n  if (types) {\n    const numTestNumberArgs =\n    (types.hasArrayIndexArg ? 1 : 0) + (\n    types.hasLevelArg ? 1 : 0) + (\n    types.hasSampleIndexArg ? 1 : 0);\n    const numExpectNumberArgs =\n    (hasArrayIndexArg ? 1 : 0) + (hasLevelArg ? 1 : 0) + (hasSampleIndexArg ? 1 : 0);\n    const typesMatch = types ?\n    types.coordsArgTypes[0] === coordsArgTypes[0] && numTestNumberArgs === numExpectNumberArgs :\n    false;\n    expectSuccess = typesMatch;\n  }\n\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('texture_type,storage').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#textureload').\ndesc(\n  `\nValidates that incompatible texture types don't work with ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('testTextureType', kTestTextureTypes).\nbeginSubcases().\ncombine('textureType', kStorageTextureTypes).\ncombine('format', kAllTextureFormats)\n).\nbeforeAllSubcases((t) => t.skipIfTextureLoadNotSupportedForTextureType(t.params.testTextureType)).\nfn((t) => {\n  const { testTextureType, textureType } = t.params;\n  const { coordsArgTypes, hasArrayIndexArg, hasLevelArg, hasSampleIndexArg } =\n  kValidTextureLoadParameterTypesForStorageTextures[textureType];\n\n  const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const levelWGSL = hasLevelArg ? ', 0' : '';\n  const sampleIndexWGSL = hasSampleIndexArg ? ', 0' : '';\n\n  const code = `\n@group(0) @binding(1) var t: ${testTextureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureLoad(t, ${coordWGSL}${arrayWGSL}${levelWGSL}${sampleIndexWGSL});\n  return vec4f(0);\n}\n`;\n\n  const [baseTestTextureType] = getSampleAndBaseTextureTypeForTextureType(testTextureType);\n\n  let expectSuccess = false;\n  const types =\n  kValidTextureLoadParameterTypesForNonStorageTextures[baseTestTextureType] ||\n  kValidTextureLoadParameterTypesForStorageTextures[baseTestTextureType];\n  if (types) {\n    const numTestNumberArgs =\n    (types.hasArrayIndexArg ? 1 : 0) + (\n    types.hasLevelArg ? 1 : 0) + (\n    types.hasSampleIndexArg ? 1 : 0);\n    const numExpectNumberArgs =\n    (hasArrayIndexArg ? 1 : 0) + (hasLevelArg ? 1 : 0) + (hasSampleIndexArg ? 1 : 0);\n    const typesMatch = types ?\n    types.coordsArgTypes[0] === coordsArgTypes[0] && numTestNumberArgs === numExpectNumberArgs :\n    false;\n    expectSuccess = typesMatch;\n  }\n\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('must_use').\ndesc('Tests that the result must be used').\nparams((u) => u.combine('use', [true, false])).\nfn((t) => {\n  const code = `\n    @group(0) @binding(0) var t : texture_2d<f32>;\n    fn foo() {\n      ${t.params.use ? '_ =' : ''} textureLoad(t, vec2(0,0), 0);\n    }`;\n  t.expectCompileResult(t.params.use, code);\n});"],"mappings":"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","ignoreList":[]}