{"version":3,"file":"exp.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","kValue","Type","kConvertableToFloatScalarsAndVectors","scalarTypeOf","isRepresentable","ShaderValidationTest","kConstantAndOverrideStages","rangeForType","stageSupportsType","validateConstOrOverrideBuiltinEval","g","kValuesTypes","valueForType","Math","log2","f16","positive","max","f32","test","desc","params","u","combine","filter","stage","type","beginSubcases","expand","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","expectedResult","exp","Number","value","kind","abstractFloat","create","kArgCases","good","bad_no_parens","bad_0args","bad_2arg","bad_0bool","bad_0array","bad_0struct","bad_0uint","bad_0int","bad_0vec2i","bad_0vec2u","bad_0vec3i","bad_0vec3u","bad_0vec4i","bad_0vec4u","expectCompileResult","arg","use_it","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/exp.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/const builtin = 'exp';export const description = `\nValidation tests for the ${builtin}() builtin.\n`;\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport {\n  Type,\n  kConvertableToFloatScalarsAndVectors,\n  scalarTypeOf } from\n'../../../../../util/conversion.js';\nimport { isRepresentable } from '../../../../../util/floating_point.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  kConstantAndOverrideStages,\n  rangeForType,\n  stageSupportsType,\n  validateConstOrOverrideBuiltinEval } from\n'./const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValuesTypes = objectsToRecord(kConvertableToFloatScalarsAndVectors);\n\nconst valueForType = rangeForType(\n  [\n  -1e2,\n  -1e3,\n  -4,\n  -3,\n  -2,\n  -1,\n  -1e-1,\n  -1e-2,\n  -1e-3,\n  0,\n  1e-3,\n  1e-2,\n  1e-1,\n  1,\n  2,\n  3,\n  4,\n  1e2,\n  1e3,\n  Math.log2(kValue.f16.positive.max) - 0.1,\n  Math.log2(kValue.f16.positive.max) + 0.1,\n  Math.log2(kValue.f32.positive.max) - 0.1,\n  Math.log2(kValue.f32.positive.max) + 0.1],\n\n  [-100n, -1000n, -4n, -3n, -2n, -1n, 0n, 1n, 2n, 3n, 4n, 100n, 1000n]\n);\n\ng.test('values').\ndesc(\n  `\nValidates that constant evaluation and override evaluation of ${builtin}() rejects invalid values\n`\n).\nparams((u) =>\nu.\ncombine('stage', kConstantAndOverrideStages).\ncombine('type', keysOf(kValuesTypes)).\nfilter((u) => stageSupportsType(u.stage, kValuesTypes[u.type])).\nbeginSubcases().\nexpand('value', (u) => valueForType(kValuesTypes[u.type]))\n).\nbeforeAllSubcases((t) => {\n  if (scalarTypeOf(kValuesTypes[t.params.type]) === Type.f16) {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const type = kValuesTypes[t.params.type];\n  const expectedResult = isRepresentable(\n    Math.exp(Number(t.params.value)),\n    // AbstractInt is converted to AbstractFloat before calling into the builtin\n    scalarTypeOf(type).kind === 'abstract-int' ? Type.abstractFloat : scalarTypeOf(type)\n  );\n  validateConstOrOverrideBuiltinEval(\n    t,\n    builtin,\n    expectedResult,\n    [type.create(t.params.value)],\n    t.params.stage\n  );\n});\n\nconst kArgCases = {\n  good: '(1.2)',\n  bad_no_parens: '',\n  // Bad number of args\n  bad_0args: '()',\n  bad_2arg: '(1.2, 2.3)',\n  // Bad value for arg 0\n  bad_0bool: '(false)',\n  bad_0array: '(array(1.1,2.2))',\n  bad_0struct: '(modf(2.2))',\n  bad_0uint: '(1u)',\n  bad_0int: '(1i)',\n  bad_0vec2i: '(vec2i())',\n  bad_0vec2u: '(vec2u())',\n  bad_0vec3i: '(vec3i())',\n  bad_0vec3u: '(vec3u())',\n  bad_0vec4i: '(vec4i())',\n  bad_0vec4u: '(vec4u())'\n};\n\ng.test('args').\ndesc(`Test compilation failure of ${builtin} with variously shaped and typed arguments`).\nparams((u) => u.combine('arg', keysOf(kArgCases))).\nfn((t) => {\n  t.expectCompileResult(\n    t.params.arg === 'good',\n    `const c = ${builtin}${kArgCases[t.params.arg]};`\n  );\n});\n\ng.test('must_use').\ndesc(`Result of ${builtin} must be used`).\nparams((u) => u.combine('use', [true, false])).\nfn((t) => {\n  const use_it = t.params.use ? '_ = ' : '';\n  t.expectCompileResult(t.params.use, `fn f() { ${use_it}${builtin}${kArgCases['good']}; }`);\n});"],"mappings":"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","ignoreList":[]}