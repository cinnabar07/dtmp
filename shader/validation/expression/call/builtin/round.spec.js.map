{"version":3,"file":"round.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kConcreteIntegerScalarsAndVectors","kConvertableToFloatScalarsAndVectors","scalarTypeOf","fpTraitsFor","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","stageSupportsType","unique","validateConstOrOverrideBuiltinEval","g","kValuesTypes","test","desc","params","u","combine","filter","stage","type","beginSubcases","expand","kind","constants","negative","min","positive","max","beforeAllSubcases","t","f16","selectDeviceOrSkipTestCase","fn","expectedResult","create","value","kIntegerArgumentTypes","f32","kTests","valid","args","pass","no_parens","too_few_args","too_many_args","alias","bool","vec_bool","matrix","atomic","array","preamble","array_runtime","struct","enumerant","ptr","ptr_deref","sampler","texture","expectCompileResult","use_it","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/round.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/const builtin = 'round';export const description = `\nValidation tests for the ${builtin}() builtin.\n`;\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kConcreteIntegerScalarsAndVectors,\n  kConvertableToFloatScalarsAndVectors,\n  scalarTypeOf } from\n'../../../../../util/conversion.js';\nimport { fpTraitsFor } from '../../../../../util/floating_point.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  stageSupportsType,\n  unique,\n  validateConstOrOverrideBuiltinEval } from\n'./const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValuesTypes = objectsToRecord(kConvertableToFloatScalarsAndVectors);\n\ng.test('values').\ndesc(\n  `\nValidates that constant evaluation and override evaluation of ${builtin}() inputs rejects invalid values\n`\n).\nparams((u) =>\nu.\ncombine('stage', kConstantAndOverrideStages).\ncombine('type', keysOf(kValuesTypes)).\nfilter((u) => stageSupportsType(u.stage, kValuesTypes[u.type])).\nbeginSubcases().\nexpand('value', (u) => {\n  if (scalarTypeOf(kValuesTypes[u.type]).kind === 'abstract-int') {\n    return fullRangeForType(kValuesTypes[u.type]);\n  } else {\n    const constants = fpTraitsFor(scalarTypeOf(kValuesTypes[u.type])).constants();\n    return unique(fullRangeForType(kValuesTypes[u.type]), [\n    constants.negative.min + 0.1,\n    constants.positive.max - 0.1]\n    );\n  }\n})\n).\nbeforeAllSubcases((t) => {\n  if (scalarTypeOf(kValuesTypes[t.params.type]) === Type.f16) {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const expectedResult = true; // Result should always be representable by the type\n  validateConstOrOverrideBuiltinEval(\n    t,\n    builtin,\n    expectedResult,\n    [kValuesTypes[t.params.type].create(t.params.value)],\n    t.params.stage\n  );\n});\n\n// f32 is included here to confirm that validation is failing due to a type issue and not something else.\nconst kIntegerArgumentTypes = objectsToRecord([Type.f32, ...kConcreteIntegerScalarsAndVectors]);\n\ng.test('integer_argument').\ndesc(\n  `\nValidates that scalar and vector integer arguments are rejected by ${builtin}()\n`\n).\nparams((u) => u.combine('type', keysOf(kIntegerArgumentTypes))).\nfn((t) => {\n  const type = kIntegerArgumentTypes[t.params.type];\n  validateConstOrOverrideBuiltinEval(\n    t,\n    builtin,\n    /* expectedResult */type === Type.f32,\n    [type.create(1)],\n    'constant'\n  );\n});\n\nconst kTests =\n\n\n\n\n\n\n\n\n{\n  valid: {\n    args: '(1.0f)',\n    pass: true\n  },\n  // Number of arguments.\n  no_parens: {\n    args: '',\n    pass: false\n  },\n  too_few_args: {\n    args: '()',\n    pass: false\n  },\n  too_many_args: {\n    args: '(1.f,2.f)',\n    pass: false\n  },\n  // Arguments types (only 1 argument for this builtin).\n  alias: {\n    args: '(f32_alias(1.f))',\n    pass: true\n  },\n  bool: {\n    args: '(false)',\n    pass: false\n  },\n  vec_bool: {\n    args: '(vec2<bool>(false,true))',\n    pass: false\n  },\n  matrix: {\n    args: '(mat2x2(1.f,1.f,1.f,1.f))',\n    pass: false\n  },\n  atomic: {\n    args: '(a)',\n    pass: false\n  },\n  array: {\n    preamble: 'var arry: array<f32, 5>;',\n    args: '(arry)',\n    pass: false\n  },\n  array_runtime: {\n    args: '(k.arry)',\n    pass: false\n  },\n  struct: {\n    preamble: 'var x: A;',\n    args: '(x)',\n    pass: false\n  },\n  enumerant: {\n    args: '(read_write)',\n    pass: false\n  },\n  ptr: {\n    preamble: `var<function> f = 1.f;\n                     let p: ptr<function, f32> = &f;`,\n    args: '(p)',\n    pass: false\n  },\n  ptr_deref: {\n    preamble: `var<function> f = 1.f;\n                     let p: ptr<function, f32> = &f;`,\n    args: '(*p)',\n    pass: true\n  },\n  sampler: {\n    args: '(s)',\n    pass: false\n  },\n  texture: {\n    args: '(t)',\n    pass: false\n  }\n};\n\ng.test('arguments').\ndesc(`Test compilation validation of ${builtin} with variously shaped and typed arguments`).\nparams((u) => u.combine('test', keysOf(kTests))).\nfn((t) => {\n  const test = kTests[t.params.test];\n  t.expectCompileResult(\n    test.pass,\n    `alias f32_alias = f32;\n\n            @group(0) @binding(0) var s: sampler;\n            @group(0) @binding(1) var t: texture_2d<f32>;\n\n            var<workgroup> a: atomic<u32>;\n\n            struct A {\n              i: f32,\n            }\n            struct B {\n              arry: array<f32>,\n            }\n            @group(0) @binding(3) var<storage> k: B;\n\n\n            @vertex\n            fn main() -> @builtin(position) vec4<f32> {\n              ${test.preamble ? test.preamble : ''}\n              _ = ${builtin}${test.args};\n              return vec4<f32>(.4, .2, .3, .1);\n            }`\n  );\n});\n\ng.test('must_use').\ndesc(`Result of ${builtin} must be used`).\nparams((u) => u.combine('use', [true, false])).\nfn((t) => {\n  const use_it = t.params.use ? '_ = ' : '';\n  t.expectCompileResult(t.params.use, `fn f() { ${use_it}${builtin}(1.0f); }`);\n});"],"mappings":"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","ignoreList":[]}