{"version":3,"file":"textureSampleCompareLevel.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","ShaderValidationTest","kTestTextureTypes","kValidTextureSampleCompareLevelParameterTypes","texture_depth_2d","coordsArgType","vec2f","offsetArgType","vec2i","texture_depth_2d_array","hasArrayIndexArg","texture_depth_cube","vec3f","texture_depth_cube_array","kTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","expand","t","textureType","fn","returnType","offset","returnVarType","varWGSL","toString","coordWGSL","create","wgsl","arrayWGSL","offsetWGSL","code","expectSuccess","f32","expectCompileResult","filter","coordType","value","coordArgType","coordsRequiredType","arrayIndexType","arrayIndexArgType","args","map","arg","join","i32","u32","depthRefType","depthRefArgType","depthRefWGSL","offsetType","offsetRequiredType","varType","testTextureType","types","typesMatch","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureSampleCompareLevel.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/const builtin = 'textureSampleCompareLevel';export const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureSampleCompareLevel coords parameter must be correct type\n* test textureSampleCompareLevel array_index parameter must be correct type\n* test textureSampleCompareLevel depth_ref parameter must be correct type\n* test textureSampleCompareLevel offset parameter must be correct type\n* test textureSampleCompareLevel offset parameter must be a const-expression\n* test textureSampleCompareLevel offset parameter must be between -8 and +7 inclusive\n* test textureSampleCompareLevel returns the correct type\n* test textureSampleCompareLevel doesn't work with texture types it's not supposed to\n`;\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n\n\n  isUnsignedType } from\n'../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport { kTestTextureTypes } from './shader_builtin_utils.js';\n\n\n\n\n\n\n\nconst kValidTextureSampleCompareLevelParameterTypes =\n\n{\n  texture_depth_2d: { coordsArgType: Type.vec2f, offsetArgType: Type.vec2i },\n  texture_depth_2d_array: {\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    offsetArgType: Type.vec2i\n  },\n  texture_depth_cube: { coordsArgType: Type.vec3f },\n  texture_depth_cube_array: { coordsArgType: Type.vec3f, hasArrayIndexArg: true }\n};\n\nconst kTextureTypes = keysOf(kValidTextureSampleCompareLevelParameterTypes);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('return_type').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplecomparelevel').\ndesc(\n  `\nValidates the return type of ${builtin} is the expected type.\n`\n).\nparams((u) =>\nu.\ncombine('returnType', keysOf(kValuesTypes)).\ncombine('textureType', keysOf(kValidTextureSampleCompareLevelParameterTypes)).\nbeginSubcases().\nexpand('offset', (t) =>\nkValidTextureSampleCompareLevelParameterTypes[t.textureType].offsetArgType ?\n[false, true] :\n[false]\n)\n).\nfn((t) => {\n  const { returnType, textureType, offset } = t.params;\n  const returnVarType = kValuesTypes[returnType];\n  const { offsetArgType, coordsArgType, hasArrayIndexArg } =\n  kValidTextureSampleCompareLevelParameterTypes[textureType];\n\n  const varWGSL = returnVarType.toString();\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler_comparison;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureSampleCompareLevel(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess = isConvertible(Type.f32, returnVarType);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('coords_argument').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplecomparelevel').\ndesc(\n  `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', keysOf(kValidTextureSampleCompareLevelParameterTypes)).\ncombine('coordType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('value', [-1, 0, 1])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0).\nexpand('offset', (t) =>\nkValidTextureSampleCompareLevelParameterTypes[t.textureType].offsetArgType ?\n[false, true] :\n[false]\n)\n).\nfn((t) => {\n  const { textureType, coordType, offset, value } = t.params;\n  const coordArgType = kValuesTypes[coordType];\n  const {\n    offsetArgType,\n    coordsArgType: coordsRequiredType,\n    hasArrayIndexArg\n  } = kValidTextureSampleCompareLevelParameterTypes[textureType];\n\n  const coordWGSL = coordArgType.create(value).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler_comparison;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleCompareLevel(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess = isConvertible(coordArgType, coordsRequiredType);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('array_index_argument').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplecomparelevel').\ndesc(\n  `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kTextureTypes)\n// filter out types with no array_index\n.filter((t) => !!kValidTextureSampleCompareLevelParameterTypes[t.textureType].hasArrayIndexArg).\ncombine('arrayIndexType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('value', [-9, -8, 0, 7, 8])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0).\nexpand('offset', (t) =>\nkValidTextureSampleCompareLevelParameterTypes[t.textureType].offsetArgType ?\n[false, true] :\n[false]\n)\n).\nfn((t) => {\n  const { textureType, arrayIndexType, value, offset } = t.params;\n  const arrayIndexArgType = kValuesTypes[arrayIndexType];\n  const args = [arrayIndexArgType.create(value)];\n  const { coordsArgType, offsetArgType } =\n  kValidTextureSampleCompareLevelParameterTypes[textureType];\n\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = args.map((arg) => arg.wgsl()).join(', ');\n  const offsetWGSL = offset ? `, ${offsetArgType.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler_comparison;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleCompareLevel(t, s, ${coordWGSL}, ${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('depth_ref_argument').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplecomparelevel').\ndesc(\n  `\nValidates that only incorrect depth_ref arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kTextureTypes).\ncombine('depthRefType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('value', [-1, 0, 1])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.depthRefType]) || t.value >= 0).\nexpand('offset', (t) =>\nkValidTextureSampleCompareLevelParameterTypes[t.textureType].offsetArgType ?\n[false, true] :\n[false]\n)\n).\nfn((t) => {\n  const { textureType, depthRefType, value, offset } = t.params;\n  const depthRefArgType = kValuesTypes[depthRefType];\n  const args = [depthRefArgType.create(value)];\n  const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n  kValidTextureSampleCompareLevelParameterTypes[textureType];\n\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const depthRefWGSL = args.map((arg) => arg.wgsl()).join(', ');\n  const offsetWGSL = offset ? `, ${offsetArgType.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler_comparison;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleCompareLevel(t, s, ${coordWGSL}${arrayWGSL}, ${depthRefWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess = isConvertible(depthRefArgType, Type.f32);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('offset_argument').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplecomparelevel').\ndesc(\n  `\nValidates that only incorrect offset arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kTextureTypes)\n// filter out types with no offset\n.filter((t) => !!kValidTextureSampleCompareLevelParameterTypes[t.textureType].offsetArgType).\ncombine('offsetType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('value', [-9, -8, 0, 7, 8])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.offsetType]) || t.value >= 0)\n).\nfn((t) => {\n  const { textureType, offsetType, value } = t.params;\n  const offsetArgType = kValuesTypes[offsetType];\n  const args = [offsetArgType.create(value)];\n  const {\n    coordsArgType,\n    hasArrayIndexArg,\n    offsetArgType: offsetRequiredType\n  } = kValidTextureSampleCompareLevelParameterTypes[textureType];\n\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = args.map((arg) => arg.wgsl()).join(', ');\n\n  const code = `\n@group(0) @binding(0) var s: sampler_comparison;\n@group(0) @binding(1) var t: ${textureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleCompareLevel(t, s, ${coordWGSL}${arrayWGSL}, 0, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  isConvertible(offsetArgType, offsetRequiredType) && value >= -8 && value <= 7;\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('offset_argument,non_const').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplecomparelevel').\ndesc(\n  `\nValidates that only non-const offset arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kTextureTypes).\ncombine('varType', ['c', 'u', 'l'])\n// filter out types with no offset\n.filter((t) => !!kValidTextureSampleCompareLevelParameterTypes[t.textureType].offsetArgType)\n).\nfn((t) => {\n  const { textureType, varType } = t.params;\n  const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n  kValidTextureSampleCompareLevelParameterTypes[textureType];\n\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = `${offsetArgType}(${varType})`;\n\n  const code = `\n@group(0) @binding(0) var s: sampler_comparison;\n@group(0) @binding(1) var t: ${textureType};\n@group(0) @binding(2) var<uniform> u: ${offsetArgType};\n@fragment fn fs() -> @location(0) vec4f {\n  const c = 1;\n  let l = ${offsetArgType?.create(0).wgsl()};\n  let v = textureSampleCompareLevel(t, s, ${coordWGSL}${arrayWGSL}, 0, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess = varType === 'c';\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('texture_type').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturesamplecomparelevel').\ndesc(\n  `\nValidates that incompatible texture types don't work with ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('testTextureType', kTestTextureTypes).\nbeginSubcases().\ncombine('textureType', keysOf(kValidTextureSampleCompareLevelParameterTypes)).\nexpand('offset', (t) =>\nkValidTextureSampleCompareLevelParameterTypes[t.textureType].offsetArgType ?\n[false, true] :\n[false]\n)\n).\nfn((t) => {\n  const { testTextureType, textureType, offset } = t.params;\n  const { coordsArgType, offsetArgType, hasArrayIndexArg } =\n  kValidTextureSampleCompareLevelParameterTypes[textureType];\n\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler_comparison;\n@group(0) @binding(1) var t: ${testTextureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureSampleCompareLevel(t, s, ${coordWGSL}${arrayWGSL}, 0${offsetWGSL});\n  return vec4f(0);\n}\n`;\n\n  const types = kValidTextureSampleCompareLevelParameterTypes[testTextureType];\n  const typesMatch = types ?\n  types.coordsArgType === coordsArgType &&\n  types.hasArrayIndexArg === hasArrayIndexArg && (\n  offset ? types.offsetArgType === offsetArgType : true) :\n  false;\n\n  const expectSuccess = testTextureType === textureType || typesMatch;\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('must_use').\ndesc('Tests that the result must be used').\nparams((u) => u.combine('use', [true, false])).\nfn((t) => {\n  const code = `\n    @group(0) @binding(0) var t : texture_depth_2d;\n    @group(0) @binding(1) var s : sampler_comparison;\n    fn foo() {\n      ${t.params.use ? '_ =' : ''} textureSampleCompareLevel(t, s, vec2(0,0), 0);\n    }`;\n  t.expectCompileResult(t.params.use, code);\n});"],"mappings":"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","ignoreList":[]}