{"version":3,"file":"const_override_validation.js","names":["assert","unreachable","kValue","Type","elementTypeOf","isAbstractType","scalarElementsOf","scalarTypeOf","scalarF16Range","scalarF32Range","scalarF64Range","linearRange","linearRangeBigInt","quantizeToF32","quantizeToF16","rangeForType","number_range","bigint_range","type","kind","minusTwoToTwoRangeForType","minusThreePiToThreePiRangeForType","Math","PI","sparseMinusThreePiToThreePiRangeForType","kConstantAndOverrideStages","stageSupportsType","stage","validateConstOrOverrideBuiltinEval","t","builtin","expectedResult","args","returnType","elTys","map","arg","enables","some","ty","f16","optionalVarType","toString","expectCompileResult","wgsl","join","constants","overrideDecls","callArgs","numOverrides","argOverrides","el","name","push","Number","value","expectPipelineResult","code","reference","validateConstOrOverrideBinaryOpEval","binaryOp","leftStage","left","rightStage","right","allArgs","codeLines","addOperand","elName","leftOperand","rightOperand","fullRangeForType","count","undefined","pos_sub","ceil","pos_norm","i32","negative","min","positive","max","f","floor","u32","i64","unique","arrays","set","Set","arr","item","add","ConstantOrOverrideValueChecker","allChecksPassed","floatLimits","quantizeFn","constructor","f32","v","quantize","isAmbiguousOverflow","isFinite","abs","pow","emax","isNearZero","checkedResult","skip","quantizedValue","checkedResultBigInt","isOOB","skipIfCheckFails"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/const_override_validation.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { assert, unreachable } from '../../../../../../common/util/util.js';import { kValue } from '../../../../../util/constants.js';import {\n\n  Type,\n\n  elementTypeOf,\n  isAbstractType,\n  scalarElementsOf,\n  scalarTypeOf } from\n'../../../../../util/conversion.js';\nimport {\n  scalarF16Range,\n  scalarF32Range,\n  scalarF64Range,\n  linearRange,\n  linearRangeBigInt,\n  quantizeToF32,\n  quantizeToF16 } from\n\n'../../../../../util/math.js';\n\n\n/** @returns a function that can select between ranges depending on type */\nexport function rangeForType(\nnumber_range,\nbigint_range)\n{\n  return (type) => {\n    switch (scalarTypeOf(type).kind) {\n      case 'abstract-float':\n      case 'f32':\n      case 'f16':\n        return number_range;\n      case 'abstract-int':\n        return bigint_range;\n    }\n    unreachable(`Received unexpected type '${type}'`);\n  };\n}\n\n/* @returns a linear sweep between -2 to 2 for type */\n\nexport const minusTwoToTwoRangeForType = rangeForType(\n  linearRange(-2, 2, 10),\n  [-2n, -1n, 0n, 1n, 2n]\n);\n\n/* @returns array of values ranging from -3π to 3π, with a focus on multiples of π */\nexport const minusThreePiToThreePiRangeForType = rangeForType(\n  [\n  -3 * Math.PI,\n  -2.999 * Math.PI,\n\n  -2.501 * Math.PI,\n  -2.5 * Math.PI,\n  -2.499 * Math.PI,\n\n  -2.001 * Math.PI,\n  -2.0 * Math.PI,\n  -1.999 * Math.PI,\n\n  -1.501 * Math.PI,\n  -1.5 * Math.PI,\n  -1.499 * Math.PI,\n\n  -1.001 * Math.PI,\n  -1.0 * Math.PI,\n  -0.999 * Math.PI,\n\n  -0.501 * Math.PI,\n  -0.5 * Math.PI,\n  -0.499 * Math.PI,\n\n  -0.001,\n  0,\n  0.001,\n\n  0.499 * Math.PI,\n  0.5 * Math.PI,\n  0.501 * Math.PI,\n\n  0.999 * Math.PI,\n  1.0 * Math.PI,\n  1.001 * Math.PI,\n\n  1.499 * Math.PI,\n  1.5 * Math.PI,\n  1.501 * Math.PI,\n\n  1.999 * Math.PI,\n  2.0 * Math.PI,\n  2.001 * Math.PI,\n\n  2.499 * Math.PI,\n  2.5 * Math.PI,\n  2.501 * Math.PI,\n\n  2.999 * Math.PI,\n  3 * Math.PI],\n\n  [-2n, -1n, 0n, 1n, 2n]\n);\n\n/**\n * @returns a minimal array of values ranging from -3π to 3π, with a focus on\n * multiples of π.\n *\n * Used when multiple parameters are being passed in, so the number of cases\n * becomes the square or more of this list. */\nexport const sparseMinusThreePiToThreePiRangeForType = rangeForType(\n  [\n  -3 * Math.PI,\n  -2.5 * Math.PI,\n  -2.0 * Math.PI,\n  -1.5 * Math.PI,\n  -1.0 * Math.PI,\n  -0.5 * Math.PI,\n  0,\n  0.5 * Math.PI,\n  Math.PI,\n  1.5 * Math.PI,\n  2.0 * Math.PI,\n  2.5 * Math.PI,\n  3 * Math.PI],\n\n  [-2n, -1n, 0n, 1n, 2n]\n);\n\n/// The evaluation stages to test\nexport const kConstantAndOverrideStages = ['constant', 'override'];\n\n\n\n\n/**\n * @returns true if evaluation stage `stage` supports expressions of type @p.\n */\nexport function stageSupportsType(stage, type) {\n  if (stage === 'override' && isAbstractType(elementTypeOf(type))) {\n    // Abstract numerics are concretized before being used in an override expression.\n    return false;\n  }\n  return true;\n}\n\n/**\n * Runs a validation test to check that evaluation of `builtin` either evaluates with or without\n * error at shader creation time or pipeline creation time.\n * @param t the ShaderValidationTest\n * @param builtin the name of the builtin\n * @param expectedResult false if an error is expected, true if no error is expected\n * @param args the arguments to pass to the builtin\n * @param stage the evaluation stage\n * @param returnType the explicit return type of the result variable, if provided (implicit otherwise)\n */\nexport function validateConstOrOverrideBuiltinEval(\nt,\nbuiltin,\nexpectedResult,\nargs,\nstage,\nreturnType)\n{\n  const elTys = args.map((arg) => elementTypeOf(arg.type));\n  const enables = elTys.some((ty) => ty === Type.f16) ? 'enable f16;' : '';\n  const optionalVarType = returnType ? `: ${returnType.toString()}` : '';\n\n  switch (stage) {\n    case 'constant':{\n        t.expectCompileResult(\n          expectedResult,\n          `${enables}\nconst v ${optionalVarType} = ${builtin}(${args.map((arg) => arg.wgsl()).join(', ')});`\n        );\n        break;\n      }\n    case 'override':{\n        assert(!elTys.some((ty) => isAbstractType(ty)));\n        const constants = {};\n        const overrideDecls = [];\n        const callArgs = [];\n        let numOverrides = 0;\n        for (const arg of args) {\n          const argOverrides = [];\n          for (const el of scalarElementsOf(arg)) {\n            const name = `o${numOverrides++}`;\n            overrideDecls.push(`override ${name} : ${el.type};`);\n            argOverrides.push(name);\n            constants[name] = Number(el.value);\n          }\n          callArgs.push(`${arg.type}(${argOverrides.join(', ')})`);\n        }\n        t.expectPipelineResult({\n          expectedResult,\n          code: `${enables}\n${overrideDecls.join('\\n')}\nvar<private> v ${optionalVarType} = ${builtin}(${callArgs.join(', ')});`,\n          constants,\n          reference: ['v']\n        });\n        break;\n      }\n  }\n}\n\n/**\n * Runs a validation test to check that evaluation of `binaryOp` either evaluates with or without\n * error at shader creation time or pipeline creation time.\n * @param t the ShaderValidationTest\n * @param binaryOp the symbol of the binary operator\n * @param expectedResult false if an error is expected, true if no error is expected\n * @param leftStage the evaluation stage for the left argument\n * @param left the left-hand side of the binary operation\n * @param rightStage the evaluation stage for the right argument\n * @param right the right-hand side of the binary operation\n */\nexport function validateConstOrOverrideBinaryOpEval(\nt,\nbinaryOp,\nexpectedResult,\nleftStage,\nleft,\nrightStage,\nright)\n{\n  const allArgs = [left, right];\n  const elTys = allArgs.map((arg) => elementTypeOf(arg.type));\n  const enables = elTys.some((ty) => ty === Type.f16) ? 'enable f16;' : '';\n\n  const codeLines = [enables];\n  const constants = {};\n  let numOverrides = 0;\n\n  function addOperand(name, stage, value) {\n    switch (stage) {\n      case 'runtime':\n        assert(!isAbstractType(value.type));\n        codeLines.push(`var<private> ${name} = ${value.wgsl()};`);\n        return name;\n\n      case 'constant':\n        codeLines.push(`const ${name} = ${value.wgsl()};`);\n        return name;\n\n      case 'override':{\n          assert(!isAbstractType(value.type));\n          const argOverrides = [];\n          for (const el of scalarElementsOf(value)) {\n            const elName = `o${numOverrides++}`;\n            codeLines.push(`override ${elName} : ${el.type};`);\n            constants[elName] = Number(el.value);\n            argOverrides.push(elName);\n          }\n          return `${value.type}(${argOverrides.join(', ')})`;\n        }\n    }\n  }\n\n  const leftOperand = addOperand('left', leftStage, left);\n  const rightOperand = addOperand('right', rightStage, right);\n\n  if (leftStage === 'override' || rightStage === 'override') {\n    t.expectPipelineResult({\n      expectedResult,\n      code: codeLines.join('\\n'),\n      constants,\n      reference: [`${leftOperand} ${binaryOp} ${rightOperand}`]\n    });\n  } else {\n    codeLines.push(`fn f() { _ = ${leftOperand} ${binaryOp} ${rightOperand}; }`);\n    t.expectCompileResult(expectedResult, codeLines.join('\\n'));\n  }\n}\n/** @returns a sweep of the representable values for element type of `type` */\nexport function fullRangeForType(type, count) {\n  if (count === undefined) {\n    count = 25;\n  }\n  switch (scalarTypeOf(type)?.kind) {\n    case 'abstract-float':\n      return scalarF64Range({\n        pos_sub: Math.ceil(count * 1 / 5),\n        pos_norm: Math.ceil(count * 4 / 5)\n      });\n    case 'f32':\n      return scalarF32Range({\n        pos_sub: Math.ceil(count * 1 / 5),\n        pos_norm: Math.ceil(count * 4 / 5)\n      });\n    case 'f16':\n      return scalarF16Range({\n        pos_sub: Math.ceil(count * 1 / 5),\n        pos_norm: Math.ceil(count * 4 / 5)\n      });\n    case 'i32':\n      return linearRange(kValue.i32.negative.min, kValue.i32.positive.max, count).map((f) =>\n      Math.floor(f)\n      );\n    case 'u32':\n      return linearRange(0, kValue.u32.max, count).map((f) => Math.floor(f));\n    case 'abstract-int':\n      // Returned values are already ints, so don't need to be floored.\n      return linearRangeBigInt(kValue.i64.negative.min, kValue.i64.positive.max, count);\n  }\n  unreachable();\n}\n\n/** @returns all the values in the provided arrays with duplicates removed */\nexport function unique(...arrays) {\n  const set = new Set();\n  for (const arr of arrays) {\n    for (const item of arr) {\n      set.add(item);\n    }\n  }\n  return [...set];\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Provides an easy way to validate steps in an equation that will trigger a validation error with\n * constant or override values due to overflow/underflow. Typical call pattern is:\n *\n * const vCheck = new ConstantOrOverrideValueChecker(t, Type.f32);\n * const c = vCheck.checkedResult(a + b);\n * const d = vCheck.checkedResult(c * c);\n * const expectedResult = vCheck.allChecksPassed();\n */\nexport class ConstantOrOverrideValueChecker {\n  #allChecksPassed = true;\n  #floatLimits;\n  #quantizeFn;\n\n  constructor(\n  t,\n  type)\n  {this.t = t;\n    switch (type) {\n      case Type.f32:\n        this.#quantizeFn = quantizeToF32;\n        this.#floatLimits = kValue.f32;\n        break;\n      case Type.f16:\n        this.#quantizeFn = quantizeToF16;\n        this.#floatLimits = kValue.f16;\n        break;\n      default:\n        this.#quantizeFn = (v) => v;\n        break;\n    }\n  }\n\n  quantize(value) {\n    return this.#quantizeFn(value);\n  }\n\n  // Some overflow floating point values may fall into an abiguously rounded scenario, where they\n  // can either round up to Infinity or down to the maximum representable value. In these cases the\n  // test should be skipped, because it's valid for implementations to differ.\n  // See: https://www.w3.org/TR/WGSL/#floating-point-overflow\n  isAmbiguousOverflow(value) {\n    // Non-finite values are not ambiguous, and can still be validated.\n    if (!Number.isFinite(value)) {\n      return false;\n    }\n\n    // Values within the min/max range for the given type are not ambiguous.\n    if (\n    !this.#floatLimits ||\n    value <= this.#floatLimits.positive.max && value >= this.#floatLimits.negative.min)\n    {\n      return false;\n    }\n\n    // If a value falls outside the min/max range, check to see if it is under\n    // 2^(EMAX(T)+1). If so, the rounding behavior is implementation specific,\n    // and should not be validated.\n    return Math.abs(value) < Math.pow(2, this.#floatLimits.emax + 1);\n  }\n\n  // Returns true if the value may be quantized to zero with the given type.\n  isNearZero(value) {\n    if (!Number.isFinite(value)) {\n      return false;\n    }\n    if (!this.#floatLimits) {\n      return value === 0;\n    }\n\n    return value < this.#floatLimits.positive.min && value > this.#floatLimits.negative.max;\n  }\n\n  checkedResult(value) {\n    if (this.isAmbiguousOverflow(value)) {\n      this.t.skip(`Checked value, ${value}, was within the ambiguous overflow rounding range.`);\n    }\n\n    const quantizedValue = this.quantize(value);\n    if (!Number.isFinite(quantizedValue)) {\n      this.#allChecksPassed = false;\n    }\n    return quantizedValue;\n  }\n\n  checkedResultBigInt(value) {\n    if (kValue.i64.isOOB(value)) {\n      this.#allChecksPassed = false;\n    }\n    return value;\n  }\n\n  skipIfCheckFails(value) {\n    if (this.isAmbiguousOverflow(value)) {\n      this.t.skip(`Checked value, ${value}, was within the ambiguous overflow rounding range.`);\n    }\n\n    const quantizedValue = this.quantize(value);\n    if (!Number.isFinite(quantizedValue)) {\n      this.t.skip(`Checked value, ${value}, was not finite after quantization.`);\n    }\n    return value;\n  }\n\n  allChecksPassed() {\n    return this.#allChecksPassed;\n  }\n}"],"mappings":"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","ignoreList":[]}