{"version":3,"file":"sqrt.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kConcreteIntegerScalarsAndVectors","kConvertableToFloatScalarsAndVectors","scalarTypeOf","isRepresentable","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","minusTwoToTwoRangeForType","stageSupportsType","unique","validateConstOrOverrideBuiltinEval","g","kValuesTypes","test","desc","params","u","combine","filter","stage","type","beginSubcases","expand","beforeAllSubcases","t","f16","selectDeviceOrSkipTestCase","fn","expectedResult","value","Math","sqrt","Number","kind","abstractFloat","create","kIntegerArgumentTypes","f32","kArgCases","good","bad_no_parens","bad_too_few","bad_too_many","bad_0i32","bad_0u32","bad_0bool","bad_0vec2u","bad_0array","bad_0struct","expectCompileResult","arg","use_it","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/sqrt.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/const builtin = 'sqrt';export const description = `\nValidation tests for the ${builtin}() builtin.\n`;\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kConcreteIntegerScalarsAndVectors,\n  kConvertableToFloatScalarsAndVectors,\n  scalarTypeOf } from\n'../../../../../util/conversion.js';\nimport { isRepresentable } from '../../../../../util/floating_point.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  minusTwoToTwoRangeForType,\n  stageSupportsType,\n  unique,\n  validateConstOrOverrideBuiltinEval } from\n'./const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValuesTypes = objectsToRecord(kConvertableToFloatScalarsAndVectors);\n\ng.test('values').\ndesc(\n  `\nValidates that constant evaluation and override evaluation of ${builtin}() inputs rejects invalid values\n`\n).\nparams((u) =>\nu.\ncombine('stage', kConstantAndOverrideStages).\ncombine('type', keysOf(kValuesTypes)).\nfilter((u) => stageSupportsType(u.stage, kValuesTypes[u.type])).\nbeginSubcases().\nexpand('value', (u) =>\nunique(\n  minusTwoToTwoRangeForType(kValuesTypes[u.type]),\n  fullRangeForType(kValuesTypes[u.type])\n)\n)\n).\nbeforeAllSubcases((t) => {\n  if (scalarTypeOf(kValuesTypes[t.params.type]) === Type.f16) {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const type = kValuesTypes[t.params.type];\n  const expectedResult =\n  t.params.value >= 0 &&\n  isRepresentable(\n    Math.sqrt(Number(t.params.value)),\n    // AbstractInt is converted to AbstractFloat before calling into the builtin\n    scalarTypeOf(type).kind === 'abstract-int' ? Type.abstractFloat : scalarTypeOf(type)\n  );\n  validateConstOrOverrideBuiltinEval(\n    t,\n    builtin,\n    expectedResult,\n    [type.create(t.params.value)],\n    t.params.stage\n  );\n});\n\nconst kIntegerArgumentTypes = objectsToRecord([Type.f32, ...kConcreteIntegerScalarsAndVectors]);\n\ng.test('integer_argument').\ndesc(\n  `\nValidates that scalar and vector integer arguments are rejected by ${builtin}()\n`\n).\nparams((u) => u.combine('type', keysOf(kIntegerArgumentTypes))).\nfn((t) => {\n  const type = kIntegerArgumentTypes[t.params.type];\n  validateConstOrOverrideBuiltinEval(\n    t,\n    builtin,\n    /* expectedResult */type === Type.f32,\n    [type.create(1)],\n    'constant'\n  );\n});\n\nconst kArgCases = {\n  good: '(1.1)',\n  bad_no_parens: '',\n  // Bad number of args\n  bad_too_few: '()',\n  bad_too_many: '(1.0,2.0)',\n  // Bad value type for arg 0\n  bad_0i32: '(1i)',\n  bad_0u32: '(1u)',\n  bad_0bool: '(false)',\n  bad_0vec2u: '(vec2u())',\n  bad_0array: '(array(1.1,2.2))',\n  bad_0struct: '(modf(2.2))'\n};\n\ng.test('args').\ndesc(`Test compilation failure of ${builtin} with variously shaped and typed arguments`).\nparams((u) => u.combine('arg', keysOf(kArgCases))).\nfn((t) => {\n  t.expectCompileResult(\n    t.params.arg === 'good',\n    `const c = ${builtin}${kArgCases[t.params.arg]};`\n  );\n});\n\ng.test('must_use').\ndesc(`Result of ${builtin} must be used`).\nparams((u) => u.combine('use', [true, false])).\nfn((t) => {\n  const use_it = t.params.use ? '_ = ' : '';\n  t.expectCompileResult(t.params.use, `fn f() { ${use_it}${builtin}${kArgCases['good']}; }`);\n});"],"mappings":"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","ignoreList":[]}