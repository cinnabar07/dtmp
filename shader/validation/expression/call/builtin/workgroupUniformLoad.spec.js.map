{"version":3,"file":"workgroupUniformLoad.spec.js","names":["description","makeTestGroup","keysOf","ShaderValidationTest","g","kEntryPoints","none","supportsBarrier","code","compute","vertex","fragment","compute_and_fragment","fragment_without_call","test","specURL","desc","params","u","combine","fn","t","config","entry_point","call","expectCompileResult","kAtomicTypes","type","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/workgroupUniformLoad.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nValidation tests for the workgroupUniformLoad() builtin.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../../common/util/data_tables.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kEntryPoints = {\n  none: { supportsBarrier: true, code: `` },\n  compute: {\n    supportsBarrier: true,\n    code: `@compute @workgroup_size(1)\nfn main() {\n  foo();\n}`\n  },\n  vertex: {\n    supportsBarrier: false,\n    code: `@vertex\nfn main() -> @builtin(position) vec4f {\n  foo();\n  return vec4f();\n}`\n  },\n  fragment: {\n    supportsBarrier: false,\n    code: `@fragment\nfn main() {\n  foo();\n}`\n  },\n  compute_and_fragment: {\n    supportsBarrier: false,\n    code: `@compute @workgroup_size(1)\nfn main1() {\n  foo();\n}\n\n@fragment\nfn main2() {\n  foo();\n}\n`\n  },\n  fragment_without_call: {\n    supportsBarrier: true,\n    code: `@fragment\nfn main() {\n}\n`\n  }\n};\n\ng.test('only_in_compute').\nspecURL('https://www.w3.org/TR/WGSL/#sync-builtin-functions').\ndesc(\n  `\nSynchronization functions must only be used in the compute shader stage.\n`\n).\nparams((u) =>\nu.\ncombine('entry_point', keysOf(kEntryPoints)).\ncombine('call', ['bar()', 'workgroupUniformLoad(&wgvar)'])\n).\nfn((t) => {\n  const config = kEntryPoints[t.params.entry_point];\n  const code = `\n${config.code}\n\nvar<workgroup> wgvar : u32;\n\nfn bar() -> u32 {\n  return 0;\n}\n\nfn foo() {\n  _ = ${t.params.call};\n}`;\n  t.expectCompileResult(t.params.call === 'bar()' || config.supportsBarrier, code);\n});\n\n// A list of types that contains atomics, with a single control case.\nconst kAtomicTypes = [\n'bool', // control case\n'atomic<i32>',\n'atomic<u32>',\n'array<atomic<i32>, 4>',\n'AtomicStruct'];\n\n\ng.test('no_atomics').\ndesc(\n  `\nThe argument passed to workgroupUniformLoad cannot contain any atomic types.\n\nNOTE: Various other valid types are tested via execution tests, so we only check for invalid types here.\n`\n).\nparams((u) =>\nu.combine('type', kAtomicTypes).combine('call', ['bar()', 'workgroupUniformLoad(&wgvar)'])\n).\nfn((t) => {\n  const code = `\nstruct AtomicStruct {\n  a : atomic<u32>\n}\n\nvar<workgroup> wgvar : ${t.params.type};\n\nfn bar() -> bool {\n  return true;\n}\n\nfn foo() {\n  _ = ${t.params.call};\n}`;\n  t.expectCompileResult(t.params.type === 'bool' || t.params.call === 'bar()', code);\n});\n\ng.test('must_use').\ndesc('Tests that the result must be used').\nparams((u) => u.combine('use', [true, false])).\nfn((t) => {\n  const code = `\n    var<workgroup> v : u32;\n    fn foo() {\n      ${t.params.use ? '_ =' : ''} workgroupUniformLoad(&v);\n    }`;\n  t.expectCompileResult(t.params.use, code);\n});"],"mappings":"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","ignoreList":[]}