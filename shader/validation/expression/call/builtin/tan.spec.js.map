{"version":3,"file":"tan.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kConvertableToFloatScalarsAndVectors","scalarTypeOf","fpTraitsFor","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","minusThreePiToThreePiRangeForType","stageSupportsType","unique","validateConstOrOverrideBuiltinEval","g","kValuesTypes","test","desc","params","u","combine","filter","stage","type","beginSubcases","expand","beforeAllSubcases","t","f16","selectDeviceOrSkipTestCase","fn","fp","kind","abstractFloat","smallestPositive","constants","positive","min","v","quantize","Number","value","expectedResult","Math","abs","cos","create","kArgCases","good","bad_no_parens","bad_0args","bad_2arg","bad_0bool","bad_0array","bad_0struct","bad_0uint","bad_0int","bad_0vec2i","bad_0vec2u","bad_0vec3i","bad_0vec3u","bad_0vec4i","bad_0vec4u","expectCompileResult","arg","use_it","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/tan.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/const builtin = 'tan';export const description = `\nValidation tests for the ${builtin}() builtin.\n`;\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kConvertableToFloatScalarsAndVectors,\n  scalarTypeOf } from\n'../../../../../util/conversion.js';\nimport { fpTraitsFor } from '../../../../../util/floating_point.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  minusThreePiToThreePiRangeForType,\n  stageSupportsType,\n  unique,\n  validateConstOrOverrideBuiltinEval } from\n'./const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValuesTypes = objectsToRecord(kConvertableToFloatScalarsAndVectors);\n\ng.test('values').\ndesc(\n  `\nValidates that constant evaluation and override evaluation of ${builtin}() rejects invalid values\n`\n).\nparams((u) =>\nu.\ncombine('stage', kConstantAndOverrideStages).\ncombine('type', keysOf(kValuesTypes)).\nfilter((u) => stageSupportsType(u.stage, kValuesTypes[u.type])).\nbeginSubcases().\nexpand('value', (u) =>\nunique(\n  minusThreePiToThreePiRangeForType(kValuesTypes[u.type]),\n  fullRangeForType(kValuesTypes[u.type])\n)\n)\n).\nbeforeAllSubcases((t) => {\n  if (scalarTypeOf(kValuesTypes[t.params.type]) === Type.f16) {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const type = kValuesTypes[t.params.type];\n  const fp = fpTraitsFor(\n    // AbstractInt is converted to AbstractFloat before calling into the builtin\n    scalarTypeOf(type).kind === 'abstract-int' ? Type.abstractFloat : scalarTypeOf(type)\n  );\n  const smallestPositive = fp.constants().positive.min;\n  const v = fp.quantize(Number(t.params.value));\n  const expectedResult = Math.abs(Math.cos(v)) > smallestPositive;\n  validateConstOrOverrideBuiltinEval(\n    t,\n    builtin,\n    expectedResult,\n    [type.create(t.params.value)],\n    t.params.stage\n  );\n});\n\nconst kArgCases = {\n  good: '(1.2)',\n  bad_no_parens: '',\n  // Bad number of args\n  bad_0args: '()',\n  bad_2arg: '(1.2, 2.3)',\n  // Bad value for arg 0\n  bad_0bool: '(false)',\n  bad_0array: '(array(1.1,2.2))',\n  bad_0struct: '(modf(2.2))',\n  bad_0uint: '(1u)',\n  bad_0int: '(1i)',\n  bad_0vec2i: '(vec2i())',\n  bad_0vec2u: '(vec2u())',\n  bad_0vec3i: '(vec3i())',\n  bad_0vec3u: '(vec3u())',\n  bad_0vec4i: '(vec4i())',\n  bad_0vec4u: '(vec4u())'\n};\n\ng.test('args').\ndesc(`Test compilation failure of ${builtin} with variously shaped and typed arguments`).\nparams((u) => u.combine('arg', keysOf(kArgCases))).\nfn((t) => {\n  t.expectCompileResult(\n    t.params.arg === 'good',\n    `const c = ${builtin}${kArgCases[t.params.arg]};`\n  );\n});\n\ng.test('must_use').\ndesc(`Result of ${builtin} must be used`).\nparams((u) => u.combine('use', [true, false])).\nfn((t) => {\n  const use_it = t.params.use ? '_ = ' : '';\n  t.expectCompileResult(t.params.use, `fn f() { ${use_it}${builtin}${kArgCases['good']}; }`);\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,MAAMA,OAAO,GAAG,KAAK,CAAC,OAAO,MAAMC,WAAW,GAAG;AACpD,2BAA2BD,OAAO;AAClC,CAAC,CACD,SAASE,aAAa,QAAQ,kDAAkD,CAChF,SAASC,MAAM,EAAEC,eAAe,QAAQ,8CAA8C;AACtF;EACEC,IAAI;EACJC,oCAAoC;EACpCC,YAAY;AACd,mCAAmC;AACnC,SAASC,WAAW,QAAQ,uCAAuC;AACnE,SAASC,oBAAoB,QAAQ,oCAAoC;;AAEzE;EACEC,gBAAgB;EAChBC,0BAA0B;EAC1BC,iCAAiC;EACjCC,iBAAiB;EACjBC,MAAM;EACNC,kCAAkC;AACpC,gCAAgC;;AAEhC,OAAO,MAAMC,CAAC,GAAGd,aAAa,CAACO,oBAAoB,CAAC;;AAEpD,MAAMQ,YAAY,GAAGb,eAAe,CAACE,oCAAoC,CAAC;;AAE1EU,CAAC,CAACE,IAAI,CAAC,QAAQ,CAAC;AAChBC,IAAI;EACF;AACF,gEAAgEnB,OAAO;AACvE;AACA,CAAC;AACDoB,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,OAAO,CAAC,OAAO,EAAEX,0BAA0B,CAAC;AAC5CW,OAAO,CAAC,MAAM,EAAEnB,MAAM,CAACc,YAAY,CAAC,CAAC;AACrCM,MAAM,CAAC,CAACF,CAAC,KAAKR,iBAAiB,CAACQ,CAAC,CAACG,KAAK,EAAEP,YAAY,CAACI,CAAC,CAACI,IAAI,CAAC,CAAC,CAAC;AAC/DC,aAAa,CAAC,CAAC;AACfC,MAAM,CAAC,OAAO,EAAE,CAACN,CAAC;AAClBP,MAAM;EACJF,iCAAiC,CAACK,YAAY,CAACI,CAAC,CAACI,IAAI,CAAC,CAAC;EACvDf,gBAAgB,CAACO,YAAY,CAACI,CAAC,CAACI,IAAI,CAAC;AACvC;AACA;AACA,CAAC;AACDG,iBAAiB,CAAC,CAACC,CAAC,KAAK;EACvB,IAAItB,YAAY,CAACU,YAAY,CAACY,CAAC,CAACT,MAAM,CAACK,IAAI,CAAC,CAAC,KAAKpB,IAAI,CAACyB,GAAG,EAAE;IAC1DD,CAAC,CAACE,0BAA0B,CAAC,YAAY,CAAC;EAC5C;AACF,CAAC,CAAC;AACFC,EAAE,CAAC,CAACH,CAAC,KAAK;EACR,MAAMJ,IAAI,GAAGR,YAAY,CAACY,CAAC,CAACT,MAAM,CAACK,IAAI,CAAC;EACxC,MAAMQ,EAAE,GAAGzB,WAAW;IACpB;IACAD,YAAY,CAACkB,IAAI,CAAC,CAACS,IAAI,KAAK,cAAc,GAAG7B,IAAI,CAAC8B,aAAa,GAAG5B,YAAY,CAACkB,IAAI;EACrF,CAAC;EACD,MAAMW,gBAAgB,GAAGH,EAAE,CAACI,SAAS,CAAC,CAAC,CAACC,QAAQ,CAACC,GAAG;EACpD,MAAMC,CAAC,GAAGP,EAAE,CAACQ,QAAQ,CAACC,MAAM,CAACb,CAAC,CAACT,MAAM,CAACuB,KAAK,CAAC,CAAC;EAC7C,MAAMC,cAAc,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACP,CAAC,CAAC,CAAC,GAAGJ,gBAAgB;EAC/DrB,kCAAkC;IAChCc,CAAC;IACD7B,OAAO;IACP4C,cAAc;IACd,CAACnB,IAAI,CAACuB,MAAM,CAACnB,CAAC,CAACT,MAAM,CAACuB,KAAK,CAAC,CAAC;IAC7Bd,CAAC,CAACT,MAAM,CAACI;EACX,CAAC;AACH,CAAC,CAAC;;AAEF,MAAMyB,SAAS,GAAG;EAChBC,IAAI,EAAE,OAAO;EACbC,aAAa,EAAE,EAAE;EACjB;EACAC,SAAS,EAAE,IAAI;EACfC,QAAQ,EAAE,YAAY;EACtB;EACAC,SAAS,EAAE,SAAS;EACpBC,UAAU,EAAE,kBAAkB;EAC9BC,WAAW,EAAE,aAAa;EAC1BC,SAAS,EAAE,MAAM;EACjBC,QAAQ,EAAE,MAAM;EAChBC,UAAU,EAAE,WAAW;EACvBC,UAAU,EAAE,WAAW;EACvBC,UAAU,EAAE,WAAW;EACvBC,UAAU,EAAE,WAAW;EACvBC,UAAU,EAAE,WAAW;EACvBC,UAAU,EAAE;AACd,CAAC;;AAEDhD,CAAC,CAACE,IAAI,CAAC,MAAM,CAAC;AACdC,IAAI,CAAC,+BAA+BnB,OAAO,4CAA4C,CAAC;AACxFoB,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,KAAK,EAAEnB,MAAM,CAAC8C,SAAS,CAAC,CAAC,CAAC;AAClDjB,EAAE,CAAC,CAACH,CAAC,KAAK;EACRA,CAAC,CAACoC,mBAAmB;IACnBpC,CAAC,CAACT,MAAM,CAAC8C,GAAG,KAAK,MAAM;IACvB,aAAalE,OAAO,GAAGiD,SAAS,CAACpB,CAAC,CAACT,MAAM,CAAC8C,GAAG,CAAC;EAChD,CAAC;AACH,CAAC,CAAC;;AAEFlD,CAAC,CAACE,IAAI,CAAC,UAAU,CAAC;AAClBC,IAAI,CAAC,aAAanB,OAAO,eAAe,CAAC;AACzCoB,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;AAC9CU,EAAE,CAAC,CAACH,CAAC,KAAK;EACR,MAAMsC,MAAM,GAAGtC,CAAC,CAACT,MAAM,CAACgD,GAAG,GAAG,MAAM,GAAG,EAAE;EACzCvC,CAAC,CAACoC,mBAAmB,CAACpC,CAAC,CAACT,MAAM,CAACgD,GAAG,EAAE,YAAYD,MAAM,GAAGnE,OAAO,GAAGiD,SAAS,CAAC,MAAM,CAAC,KAAK,CAAC;AAC5F,CAAC,CAAC","ignoreList":[]}