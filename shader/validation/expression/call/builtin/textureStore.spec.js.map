{"version":3,"file":"textureStore.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","kAllTextureFormats","kTextureFormatInfo","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","ShaderValidationTest","getSampleAndBaseTextureTypeForTextureType","kTestTextureTypes","kTextureColorTypeToType","sint","vec4i","uint","vec4u","float","vec4f","kValidTextureStoreParameterTypes","texture_storage_1d","coordsArgTypes","i32","u32","texture_storage_2d","vec2i","vec2u","texture_storage_2d_array","hasArrayIndexArg","texture_storage_3d","vec3i","vec3u","kTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","beginSubcases","filter","t","coordType","value","fn","textureType","coordArgType","coordWGSL","create","wgsl","arrayWGSL","format","valueWGSL","code","expectSuccess","expectCompileResult","arrayIndexType","arrayIndexArgType","args","map","arg","join","color","storage","valueType","skipIfTextureFormatNotUsableAsStorageTexture","valueArgType","colorType","type","requiredValueType","testTextureType","replace","baseTestTextureType","sampleType","types","typesMatch"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureStore.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/const builtin = 'textureStore';export const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureStore coords parameter must be correct type\n* test textureStore array_index parameter must be correct type\n* test textureStore value parameter must be correct type\n* test textureStore doesn't work with texture types it's not supposed to\n`;\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { kAllTextureFormats, kTextureFormatInfo } from '../../../../../format_info.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n\n\n  isUnsignedType } from\n'../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  getSampleAndBaseTextureTypeForTextureType,\n  kTestTextureTypes } from\n'./shader_builtin_utils.js';\n\nconst kTextureColorTypeToType = {\n  sint: Type.vec4i,\n  uint: Type.vec4u,\n  float: Type.vec4f,\n  'unfilterable-float': Type.vec4f\n};\n\n\n\n\n\n\nconst kValidTextureStoreParameterTypes = {\n  texture_storage_1d: { coordsArgTypes: [Type.i32, Type.u32] },\n  texture_storage_2d: { coordsArgTypes: [Type.vec2i, Type.vec2u] },\n  texture_storage_2d_array: {\n    coordsArgTypes: [Type.vec2i, Type.vec2u],\n    hasArrayIndexArg: true\n  },\n  texture_storage_3d: { coordsArgTypes: [Type.vec3i, Type.vec3u] }\n};\n\nconst kTextureTypes = keysOf(kValidTextureStoreParameterTypes);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('coords_argument').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturestore').\ndesc(\n  `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', keysOf(kValidTextureStoreParameterTypes)).\ncombine('coordType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('value', [-1, 0, 1])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0)\n).\nfn((t) => {\n  const { textureType, coordType, value } = t.params;\n  const coordArgType = kValuesTypes[coordType];\n  const { coordsArgTypes, hasArrayIndexArg } = kValidTextureStoreParameterTypes[textureType];\n\n  const coordWGSL = coordArgType.create(value).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const format = 'rgba8unorm';\n  const valueWGSL = 'vec4f(0)';\n\n  const code = `\n@group(0) @binding(0) var t: ${textureType}<${format},write>;\n@fragment fn fs() -> @location(0) vec4f {\n  textureStore(t, ${coordWGSL}${arrayWGSL}, ${valueWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  isConvertible(coordArgType, coordsArgTypes[0]) ||\n  isConvertible(coordArgType, coordsArgTypes[1]);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('array_index_argument').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturestore').\ndesc(\n  `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kTextureTypes)\n// filter out types with no array_index\n.filter((t) => !!kValidTextureStoreParameterTypes[t.textureType].hasArrayIndexArg).\ncombine('arrayIndexType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('value', [-9, -8, 0, 7, 8])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0)\n).\nfn((t) => {\n  const { textureType, arrayIndexType, value } = t.params;\n  const arrayIndexArgType = kValuesTypes[arrayIndexType];\n  const args = [arrayIndexArgType.create(value)];\n  const { coordsArgTypes } = kValidTextureStoreParameterTypes[textureType];\n\n  const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n  const arrayWGSL = args.map((arg) => arg.wgsl()).join(', ');\n  const format = 'rgba8unorm';\n  const valueWGSL = 'vec4f(0)';\n\n  const code = `\n@group(0) @binding(0) var t: ${textureType}<${format}, write>;\n@fragment fn fs() -> @location(0) vec4f {\n  textureStore(t, ${coordWGSL}, ${arrayWGSL}, ${valueWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('value_argument').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturestore').\ndesc(\n  `\nValidates that only incorrect value arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kTextureTypes).\ncombine('valueType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('format', kAllTextureFormats)\n// filter to only storage texture formats.\n.filter((t) => !!kTextureFormatInfo[t.format].color?.storage).\ncombine('value', [0, 1, 2])\n).\nfn((t) => {\n  const { textureType, valueType, format, value } = t.params;\n  t.skipIfTextureFormatNotUsableAsStorageTexture(format);\n\n  const valueArgType = kValuesTypes[valueType];\n  const args = [valueArgType.create(value)];\n  const { coordsArgTypes, hasArrayIndexArg } = kValidTextureStoreParameterTypes[textureType];\n\n  const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const valueWGSL = args.map((arg) => arg.wgsl()).join(', ');\n\n  const code = `\n@group(0) @binding(0) var t: ${textureType}<${format}, write>;\n@fragment fn fs() -> @location(0) vec4f {\n  textureStore(t, ${coordWGSL}${arrayWGSL}, ${valueWGSL});\n  return vec4f(0);\n}\n`;\n  const colorType = kTextureFormatInfo[format].color?.type;\n  const requiredValueType = kTextureColorTypeToType[colorType];\n  const expectSuccess = isConvertible(valueArgType, requiredValueType);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('texture_type,storage').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturestore').\ndesc(\n  `\nValidates that incompatible texture types don't work with ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('testTextureType', kTestTextureTypes).\nbeginSubcases().\ncombine('textureType', keysOf(kValidTextureStoreParameterTypes)).\ncombine('format', kAllTextureFormats)\n// filter to only storage texture formats.\n.filter((t) => !!kTextureFormatInfo[t.format].color?.storage)\n).\nfn((t) => {\n  const { testTextureType, textureType, format } = t.params;\n  const { coordsArgTypes, hasArrayIndexArg } = kValidTextureStoreParameterTypes[textureType];\n\n  const coordWGSL = coordsArgTypes[0].create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const colorType = kTextureFormatInfo[format].color?.type;\n  const valueType = kTextureColorTypeToType[colorType];\n  const valueWGSL = valueType.create(0).wgsl();\n\n  const code = `\n@group(0) @binding(1) var t: ${testTextureType.replace(', read', ', write')};\n@fragment fn fs() -> @location(0) vec4f {\n  textureStore(t, ${coordWGSL}${arrayWGSL}, ${valueWGSL});\n  return vec4f(0);\n}\n`;\n\n  const [baseTestTextureType, sampleType] =\n  getSampleAndBaseTextureTypeForTextureType(testTextureType);\n\n  let expectSuccess = false;\n  const types = kValidTextureStoreParameterTypes[baseTestTextureType];\n  if (types) {\n    const typesMatch = types ?\n    types.coordsArgTypes[0] === coordsArgTypes[0] &&\n    types.hasArrayIndexArg === hasArrayIndexArg &&\n    isConvertible(valueType, sampleType) :\n    false;\n    expectSuccess = typesMatch;\n  }\n\n  t.expectCompileResult(expectSuccess, code);\n});"],"mappings":"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","ignoreList":[]}