{"version":3,"file":"textureGather.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kAllScalarsAndVectors","isConvertible","isUnsignedType","scalarTypeOf","stringToType","ShaderValidationTest","getSampleAndBaseTextureTypeForTextureType","kTestTextureTypes","kColorSampleTypes","vec4f","vec4i","vec4u","kDepthSampleTypes","kValidTextureGatherParameterTypes","texture_2d","sampleTypes","hasComponentArg","coordsArgType","vec2f","offsetArgType","vec2i","texture_2d_array","hasArrayIndexArg","texture_cube","vec3f","texture_cube_array","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","kTextureTypes","kValuesTypes","g","test","specURL","desc","params","u","combine","expand","t","textureType","map","v","toString","beginSubcases","fn","returnType","sampleType","offset","returnVarType","sampleVarType","sampleTypeWGSL","includes","componentWGSL","varWGSL","coordWGSL","create","wgsl","arrayWGSL","offsetWGSL","code","expectSuccess","expectCompileResult","filter","componentType","value","componentArgType","i32","u32","varType","coordType","coordArgType","coordsRequiredType","arrayIndexType","arrayIndexArgType","args","arg","join","offsetType","offsetRequiredType","testTextureType","baseTestTextureType","types","typesMatch","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/textureGather.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/const builtin = 'textureGather';export const description = `\nValidation tests for the ${builtin}() builtin.\n\n* test textureGather component parameter must be correct type\n* test textureGather component parameter must be between 0 and 3 inclusive\n* test textureGather component parameter must be a const expression\n* test textureGather coords parameter must be correct type\n* test textureGather array_index parameter must be correct type\n* test textureGather offset parameter must be correct type\n* test textureGather offset parameter must be a const-expression\n* test textureGather offset parameter must be between -8 and +7 inclusive\n* test textureGather returns the correct type\n* test textureGather doesn't work with texture types it's not supposed to\n`;\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  isConvertible,\n\n\n  isUnsignedType,\n  scalarTypeOf,\n  stringToType } from\n'../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  getSampleAndBaseTextureTypeForTextureType,\n  kTestTextureTypes } from\n'./shader_builtin_utils.js';\n\nconst kColorSampleTypes = [Type.vec4f, Type.vec4i, Type.vec4u];\nconst kDepthSampleTypes = [Type.vec4f];\n\n\n\n\n\n\n\n\n\nconst kValidTextureGatherParameterTypes = {\n  texture_2d: {\n    sampleTypes: kColorSampleTypes,\n    hasComponentArg: true,\n    coordsArgType: Type.vec2f,\n    offsetArgType: Type.vec2i\n  },\n  texture_2d_array: {\n    sampleTypes: kColorSampleTypes,\n    hasComponentArg: true,\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    offsetArgType: Type.vec2i\n  },\n  texture_cube: {\n    sampleTypes: kColorSampleTypes,\n    hasComponentArg: true,\n    coordsArgType: Type.vec3f\n  },\n  texture_cube_array: {\n    sampleTypes: kColorSampleTypes,\n    hasComponentArg: true,\n    coordsArgType: Type.vec3f,\n    hasArrayIndexArg: true\n  },\n  texture_depth_2d: {\n    sampleTypes: kDepthSampleTypes,\n    coordsArgType: Type.vec2f,\n    offsetArgType: Type.vec2i\n  },\n  texture_depth_2d_array: {\n    sampleTypes: kDepthSampleTypes,\n    coordsArgType: Type.vec2f,\n    hasArrayIndexArg: true,\n    offsetArgType: Type.vec2i\n  },\n  texture_depth_cube: {\n    sampleTypes: kDepthSampleTypes,\n    coordsArgType: Type.vec3f\n  },\n  texture_depth_cube_array: {\n    sampleTypes: kDepthSampleTypes,\n    coordsArgType: Type.vec3f,\n    hasArrayIndexArg: true\n  }\n};\n\nconst kTextureTypes = keysOf(kValidTextureGatherParameterTypes);\nconst kValuesTypes = objectsToRecord(kAllScalarsAndVectors);\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('return_type').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather').\ndesc(\n  `\nValidates the return type of ${builtin} is the expected type.\n`\n).\nparams((u) =>\nu.\ncombine('returnType', keysOf(kValuesTypes)).\ncombine('textureType', keysOf(kValidTextureGatherParameterTypes)).\nexpand('sampleType', (t) =>\nkValidTextureGatherParameterTypes[t.textureType].sampleTypes.map((v) => v.toString())\n).\nbeginSubcases().\nexpand('offset', (t) =>\nkValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n)\n).\nfn((t) => {\n  const { returnType, textureType, sampleType, offset } = t.params;\n  const returnVarType = kValuesTypes[returnType];\n  const sampleVarType = stringToType(sampleType);\n  const { hasComponentArg, offsetArgType, coordsArgType, hasArrayIndexArg } =\n  kValidTextureGatherParameterTypes[textureType];\n\n  const sampleTypeWGSL = textureType.includes('depth') ? '' : `<${scalarTypeOf(sampleVarType)}>`;\n  const componentWGSL = hasComponentArg ? '0, ' : '';\n  const varWGSL = returnVarType.toString();\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType}${sampleTypeWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v: ${varWGSL} = textureGather(${componentWGSL}t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess = isConvertible(sampleVarType, returnVarType);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('component_argument').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather').\ndesc(\n  `\nValidates that only incorrect components arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', keysOf(kValidTextureGatherParameterTypes))\n// filter out types with no component argument\n.filter((t) => !!kValidTextureGatherParameterTypes[t.textureType].hasComponentArg).\ncombine('componentType', keysOf(kValuesTypes)).\nexpand('sampleType', (t) =>\nkValidTextureGatherParameterTypes[t.textureType].sampleTypes.map((v) => v.toString())\n).\nbeginSubcases().\ncombine('value', [-1, 0, 1, 2, 3, 4])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.componentType]) || t.value >= 0).\nexpand('offset', (t) =>\nkValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n)\n).\nfn((t) => {\n  const { textureType, componentType, sampleType, offset, value } = t.params;\n  const sampleVarType = stringToType(sampleType);\n  const componentArgType = kValuesTypes[componentType];\n  const { offsetArgType, coordsArgType, hasArrayIndexArg } =\n  kValidTextureGatherParameterTypes[textureType];\n\n  const sampleTypeWGSL = textureType.includes('depth') ? '' : `<${scalarTypeOf(sampleVarType)}>`;\n  const componentWGSL = componentArgType.create(value).wgsl();\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType}${sampleTypeWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureGather(${componentWGSL}, t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  (isConvertible(componentArgType, Type.i32) || isConvertible(componentArgType, Type.u32)) &&\n  value >= 0 &&\n  value <= 3;\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('component_argument,non_const').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather').\ndesc(\n  `\nValidates that only non-const components arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', keysOf(kValidTextureGatherParameterTypes))\n// filter out types with no component argument\n.filter((t) => !!kValidTextureGatherParameterTypes[t.textureType].hasComponentArg).\nexpand('sampleType', (t) =>\nkValidTextureGatherParameterTypes[t.textureType].sampleTypes.map((v) => v.toString())\n).\ncombine('varType', ['c', 'u', 'l']).\nbeginSubcases().\nexpand('offset', (t) =>\nkValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n)\n).\nfn((t) => {\n  const { textureType, sampleType, varType, offset } = t.params;\n  const sampleVarType = stringToType(sampleType);\n  const componentArgType = Type.u32;\n  const { coordsArgType, hasArrayIndexArg, offsetArgType } =\n  kValidTextureGatherParameterTypes[textureType];\n\n  const sampleTypeWGSL = textureType.includes('depth') ? '' : `<${scalarTypeOf(sampleVarType)}>`;\n  const componentWGSL = `${componentArgType}(${varType})`;\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType}${sampleTypeWGSL};\n@group(0) @binding(2) var<uniform> u: ${componentArgType};\n\n@fragment fn fs() -> @location(0) vec4f {\n  const c = 1;\n  let l = 1;\n  let v = textureGather(${componentWGSL}, t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess = varType === 'c';\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('coords_argument').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather').\ndesc(\n  `\nValidates that only incorrect coords arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', keysOf(kValidTextureGatherParameterTypes)).\nexpand('sampleType', (t) =>\nkValidTextureGatherParameterTypes[t.textureType].sampleTypes.map((v) => v.toString())\n).\ncombine('coordType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('value', [-1, 0, 1])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.coordType]) || t.value >= 0).\nexpand('offset', (t) =>\nkValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n)\n).\nfn((t) => {\n  const { textureType, sampleType, coordType, offset, value } = t.params;\n  const sampleVarType = stringToType(sampleType);\n  const coordArgType = kValuesTypes[coordType];\n  const {\n    hasComponentArg,\n    offsetArgType,\n    coordsArgType: coordsRequiredType,\n    hasArrayIndexArg\n  } = kValidTextureGatherParameterTypes[textureType];\n\n  const sampleTypeWGSL = textureType.includes('depth') ? '' : `<${scalarTypeOf(sampleVarType)}>`;\n  const componentWGSL = hasComponentArg ? '0, ' : '';\n  const coordWGSL = coordArgType.create(value).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType}${sampleTypeWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureGather(${componentWGSL}t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess = isConvertible(coordArgType, coordsRequiredType);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('array_index_argument').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather').\ndesc(\n  `\nValidates that only incorrect array_index arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kTextureTypes)\n// filter out types with no array_index\n.filter((t) => !!kValidTextureGatherParameterTypes[t.textureType].hasArrayIndexArg).\nexpand('sampleType', (t) =>\nkValidTextureGatherParameterTypes[t.textureType].sampleTypes.map((v) => v.toString())\n).\ncombine('arrayIndexType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('value', [-9, -8, 0, 7, 8])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.arrayIndexType]) || t.value >= 0).\nexpand('offset', (t) =>\nkValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n)\n).\nfn((t) => {\n  const { textureType, sampleType, arrayIndexType, value, offset } = t.params;\n  const sampleVarType = stringToType(sampleType);\n  const arrayIndexArgType = kValuesTypes[arrayIndexType];\n  const args = [arrayIndexArgType.create(value)];\n  const { hasComponentArg, coordsArgType, offsetArgType } =\n  kValidTextureGatherParameterTypes[textureType];\n\n  const sampleTypeWGSL = textureType.includes('depth') ? '' : `<${scalarTypeOf(sampleVarType)}>`;\n  const componentWGSL = hasComponentArg ? '0, ' : '';\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = args.map((arg) => arg.wgsl()).join(', ');\n  const offsetWGSL = offset ? `, ${offsetArgType.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType}${sampleTypeWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureGather(${componentWGSL}t, s, ${coordWGSL}, ${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  isConvertible(arrayIndexArgType, Type.i32) || isConvertible(arrayIndexArgType, Type.u32);\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('offset_argument').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather').\ndesc(\n  `\nValidates that only incorrect offset arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kTextureTypes)\n// filter out types with no offset\n.filter((t) => !!kValidTextureGatherParameterTypes[t.textureType].offsetArgType).\nexpand('sampleType', (t) =>\nkValidTextureGatherParameterTypes[t.textureType].sampleTypes.map((v) => v.toString())\n).\ncombine('offsetType', keysOf(kValuesTypes)).\nbeginSubcases().\ncombine('value', [-9, -8, 0, 7, 8])\n// filter out unsigned types with negative values\n.filter((t) => !isUnsignedType(kValuesTypes[t.offsetType]) || t.value >= 0)\n).\nfn((t) => {\n  const { textureType, sampleType, offsetType, value } = t.params;\n  const sampleVarType = stringToType(sampleType);\n  const offsetArgType = kValuesTypes[offsetType];\n  const args = [offsetArgType.create(value)];\n  const {\n    hasComponentArg,\n    coordsArgType,\n    hasArrayIndexArg,\n    offsetArgType: offsetRequiredType\n  } = kValidTextureGatherParameterTypes[textureType];\n\n  const sampleTypeWGSL = textureType.includes('depth') ? '' : `<${scalarTypeOf(sampleVarType)}>`;\n  const componentWGSL = hasComponentArg ? '0, ' : '';\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = args.map((arg) => arg.wgsl()).join(', ');\n\n  const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType}${sampleTypeWGSL};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureGather(${componentWGSL}t, s, ${coordWGSL}${arrayWGSL}, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess =\n  isConvertible(offsetArgType, offsetRequiredType) && value >= -8 && value <= 7;\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('offset_argument,non_const').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather').\ndesc(\n  `\nValidates that only non-const offset arguments are rejected by ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('textureType', kTextureTypes).\nexpand('sampleType', (t) =>\nkValidTextureGatherParameterTypes[t.textureType].sampleTypes.map((v) => v.toString())\n).\ncombine('varType', ['c', 'u', 'l'])\n// filter out types with no offset\n.filter((t) => !!kValidTextureGatherParameterTypes[t.textureType].offsetArgType)\n).\nfn((t) => {\n  const { textureType, sampleType, varType } = t.params;\n  const sampleVarType = stringToType(sampleType);\n  const { hasComponentArg, coordsArgType, hasArrayIndexArg, offsetArgType } =\n  kValidTextureGatherParameterTypes[textureType];\n\n  const sampleTypeWGSL = textureType.includes('depth') ? '' : `<${scalarTypeOf(sampleVarType)}>`;\n  const componentWGSL = hasComponentArg ? '0, ' : '';\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = `${offsetArgType}(${varType})`;\n\n  const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${textureType}${sampleTypeWGSL};\n@group(0) @binding(2) var<uniform> u: ${offsetArgType};\n@fragment fn fs() -> @location(0) vec4f {\n  const c = 1;\n  let l = ${offsetArgType.create(0).wgsl()};\n  let v = textureGather(${componentWGSL}t, s, ${coordWGSL}${arrayWGSL}, ${offsetWGSL});\n  return vec4f(0);\n}\n`;\n  const expectSuccess = varType === 'c';\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('texture_type').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#texturegather').\ndesc(\n  `\nValidates that incompatible texture types don't work with ${builtin}\n`\n).\nparams((u) =>\nu.\ncombine('testTextureType', kTestTextureTypes).\ncombine('textureType', keysOf(kValidTextureGatherParameterTypes)).\nexpand('offset', (t) =>\nkValidTextureGatherParameterTypes[t.textureType].offsetArgType ? [false, true] : [false]\n)\n).\nfn((t) => {\n  const { testTextureType, textureType, offset } = t.params;\n  const { hasComponentArg, coordsArgType, offsetArgType, hasArrayIndexArg } =\n  kValidTextureGatherParameterTypes[textureType];\n\n  const componentWGSL = hasComponentArg ? '0, ' : '';\n  const coordWGSL = coordsArgType.create(0).wgsl();\n  const arrayWGSL = hasArrayIndexArg ? ', 0' : '';\n  const offsetWGSL = offset ? `, ${offsetArgType?.create(0).wgsl()}` : '';\n\n  const code = `\n@group(0) @binding(0) var s: sampler;\n@group(0) @binding(1) var t: ${testTextureType};\n@fragment fn fs() -> @location(0) vec4f {\n  let v = textureGather(${componentWGSL}t, s, ${coordWGSL}${arrayWGSL}${offsetWGSL});\n  return vec4f(0);\n}\n`;\n\n  const [baseTestTextureType] = getSampleAndBaseTextureTypeForTextureType(testTextureType);\n\n  const types = kValidTextureGatherParameterTypes[baseTestTextureType];\n  const typesMatch = types ?\n  types.hasComponentArg === hasComponentArg &&\n  types.coordsArgType === coordsArgType &&\n  types.hasArrayIndexArg === hasArrayIndexArg && (\n  offset ? types.offsetArgType === offsetArgType : true) :\n  false;\n\n  const expectSuccess = typesMatch;\n  t.expectCompileResult(expectSuccess, code);\n});\n\ng.test('must_use').\ndesc('Tests that the result must be used').\nparams((u) => u.combine('use', [true, false])).\nfn((t) => {\n  const code = `\n    @group(0) @binding(0) var t : texture_2d<f32>;\n    @group(0) @binding(1) var s : sampler;\n    fn foo() {\n      ${t.params.use ? '_ =' : ''} textureGather(0, t, s, vec2(0,0));\n    }`;\n  t.expectCompileResult(t.params.use, code);\n});"],"mappings":"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","ignoreList":[]}