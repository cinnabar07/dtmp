{"version":3,"file":"modf.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kConcreteIntegerScalarsAndVectors","kConvertableToFloatScalarsAndVectors","scalarTypeOf","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","stageSupportsType","validateConstOrOverrideBuiltinEval","g","kValuesTypes","test","desc","params","u","combine","filter","stage","type","beginSubcases","expand","beforeAllSubcases","t","f16","selectDeviceOrSkipTestCase","fn","expectedResult","create","value","kIntegerArgumentTypes","f32","kTests","valid","args","pass","no_parens","too_few_args","too_many_args","alias","bool","vec_bool","matrix","atomic","array","preamble","array_runtime","struct","enumerant","ptr","ptr_deref","sampler","texture","expectCompileResult","use_it","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/modf.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/const builtin = 'modf';export const description = `\nValidation tests for the ${builtin}() builtin.\n`;\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kConcreteIntegerScalarsAndVectors,\n  kConvertableToFloatScalarsAndVectors,\n  scalarTypeOf } from\n'../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  stageSupportsType,\n  validateConstOrOverrideBuiltinEval } from\n'./const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValuesTypes = objectsToRecord(kConvertableToFloatScalarsAndVectors);\n\ng.test('values').\ndesc(\n  `\nValidates that constant evaluation and override evaluation of ${builtin}() rejects invalid values\n`\n).\nparams((u) =>\nu.\ncombine('stage', kConstantAndOverrideStages).\ncombine('type', keysOf(kValuesTypes)).\nfilter((u) => stageSupportsType(u.stage, kValuesTypes[u.type])).\nbeginSubcases().\nexpand('value', (u) => fullRangeForType(kValuesTypes[u.type]))\n).\nbeforeAllSubcases((t) => {\n  if (scalarTypeOf(kValuesTypes[t.params.type]) === Type.f16) {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const expectedResult = true; // Result should always be representable by the type\n  validateConstOrOverrideBuiltinEval(\n    t,\n    builtin,\n    expectedResult,\n    [kValuesTypes[t.params.type].create(t.params.value)],\n    t.params.stage\n  );\n});\n\n// f32 is included here to confirm that validation is failing due to a type issue and not something else.\nconst kIntegerArgumentTypes = objectsToRecord([Type.f32, ...kConcreteIntegerScalarsAndVectors]);\n\ng.test('integer_argument').\ndesc(\n  `\nValidates that scalar and vector integer arguments are rejected by ${builtin}()\n`\n).\nparams((u) => u.combine('type', keysOf(kIntegerArgumentTypes))).\nfn((t) => {\n  const type = kIntegerArgumentTypes[t.params.type];\n  validateConstOrOverrideBuiltinEval(\n    t,\n    builtin,\n    /* expectedResult */type === Type.f32,\n    [type.create(0)],\n    'constant'\n  );\n});\n\nconst kTests =\n\n\n\n\n\n\n\n\n{\n  valid: {\n    args: '(1.0f)',\n    pass: true\n  },\n  // Number of arguments.\n  no_parens: {\n    args: '',\n    pass: false\n  },\n  too_few_args: {\n    args: '()',\n    pass: false\n  },\n  too_many_args: {\n    args: '(1.f,2.f)',\n    pass: false\n  },\n  // Arguments types (only 1 argument for this builtin).\n  alias: {\n    args: '(f32_alias(1.f))',\n    pass: true\n  },\n  bool: {\n    args: '(false)',\n    pass: false\n  },\n  vec_bool: {\n    args: '(vec2<bool>(false,true))',\n    pass: false\n  },\n  matrix: {\n    args: '(mat2x2(1.f,1.f,1.f,1.f))',\n    pass: false\n  },\n  atomic: {\n    args: '(a)',\n    pass: false\n  },\n  array: {\n    preamble: 'var arry: array<f32, 5>;',\n    args: '(arry)',\n    pass: false\n  },\n  array_runtime: {\n    args: '(k.arry)',\n    pass: false\n  },\n  struct: {\n    preamble: 'var x: A;',\n    args: '(x)',\n    pass: false\n  },\n  enumerant: {\n    args: '(read_write)',\n    pass: false\n  },\n  ptr: {\n    preamble: `var<function> f = 1.f;\n                   let p: ptr<function, f32> = &f;`,\n    args: '(p)',\n    pass: false\n  },\n  ptr_deref: {\n    preamble: `var<function> f = 1.f;\n                   let p: ptr<function, f32> = &f;`,\n    args: '(*p)',\n    pass: true\n  },\n  sampler: {\n    args: '(s)',\n    pass: false\n  },\n  texture: {\n    args: '(t)',\n    pass: false\n  }\n};\n\ng.test('arguments').\ndesc(`Test compilation validation of ${builtin} with variously shaped and typed arguments`).\nparams((u) => u.combine('test', keysOf(kTests))).\nfn((t) => {\n  const test = kTests[t.params.test];\n  t.expectCompileResult(\n    test.pass,\n    `alias f32_alias = f32;\n\n          @group(0) @binding(0) var s: sampler;\n          @group(0) @binding(1) var t: texture_2d<f32>;\n\n          var<workgroup> a: atomic<u32>;\n\n          struct A {\n            i: f32,\n          }\n          struct B {\n            arry: array<f32>,\n          }\n          @group(0) @binding(3) var<storage> k: B;\n\n\n          @vertex\n          fn main() -> @builtin(position) vec4<f32> {\n            ${test.preamble ? test.preamble : ''}\n            _ = ${builtin}${test.args};\n            return vec4<f32>(.4, .2, .3, .1);\n          }`\n  );\n});\n\ng.test('must_use').\ndesc(`Result of ${builtin} must be used`).\nparams((u) => u.combine('use', [true, false])).\nfn((t) => {\n  const use_it = t.params.use ? '_ = ' : '';\n  t.expectCompileResult(t.params.use, `fn f() { ${use_it}${builtin}(1.0f); }`);\n});"],"mappings":"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","ignoreList":[]}