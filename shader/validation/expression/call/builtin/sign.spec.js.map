{"version":3,"file":"sign.spec.js","names":["builtin","description","makeTestGroup","keysOf","objectsToRecord","Type","kFloatScalarsAndVectors","kConcreteSignedIntegerScalarsAndVectors","scalarTypeOf","ShaderValidationTest","fullRangeForType","kConstantAndOverrideStages","stageSupportsType","validateConstOrOverrideBuiltinEval","g","kValuesTypes","test","desc","params","u","combine","filter","stage","type","beginSubcases","expand","beforeAllSubcases","t","f16","selectDeviceOrSkipTestCase","fn","expectedResult","create","value","kArgCases","good","bad_no_parens","bad_0args","bad_2arg","bad_0bool","bad_0array","bad_0struct","bad_0uint","bad_0vec2u","bad_0vec3u","bad_0vec4u","expectCompileResult","arg","use_it","use"],"sources":["../../../../../../../src/webgpu/shader/validation/expression/call/builtin/sign.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/const builtin = 'sign';export const description = `\nValidation tests for the ${builtin}() builtin.\n`;\nimport { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kFloatScalarsAndVectors,\n  kConcreteSignedIntegerScalarsAndVectors,\n  scalarTypeOf } from\n'../../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../../shader_validation_test.js';\n\nimport {\n  fullRangeForType,\n  kConstantAndOverrideStages,\n  stageSupportsType,\n  validateConstOrOverrideBuiltinEval } from\n'./const_override_validation.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kValuesTypes = objectsToRecord([\n...kFloatScalarsAndVectors,\n...kConcreteSignedIntegerScalarsAndVectors]\n);\n\ng.test('values').\ndesc(\n  `\nValidates that constant evaluation and override evaluation of ${builtin}() inputs rejects invalid values\n`\n).\nparams((u) =>\nu.\ncombine('stage', kConstantAndOverrideStages).\ncombine('type', keysOf(kValuesTypes)).\nfilter((u) => stageSupportsType(u.stage, kValuesTypes[u.type])).\nbeginSubcases().\nexpand('value', (u) => fullRangeForType(kValuesTypes[u.type]))\n).\nbeforeAllSubcases((t) => {\n  if (scalarTypeOf(kValuesTypes[t.params.type]) === Type.f16) {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const expectedResult = true; // Result should always be representable by the type\n  validateConstOrOverrideBuiltinEval(\n    t,\n    builtin,\n    expectedResult,\n    [kValuesTypes[t.params.type].create(t.params.value)],\n    t.params.stage\n  );\n});\n\nconst kArgCases = {\n  good: '(1.0)',\n  bad_no_parens: '',\n  // Bad number of args\n  bad_0args: '()',\n  bad_2arg: '(1.0, 1.0)',\n  // Bad value for arg 0\n  bad_0bool: '(false)',\n  bad_0array: '(array(1.1,2.2))',\n  bad_0struct: '(modf(2.2))',\n  bad_0uint: '(1u)',\n  bad_0vec2u: '(vec2u(1))',\n  bad_0vec3u: '(vec3u(1))',\n  bad_0vec4u: '(vec4u(1))'\n};\n\ng.test('args').\ndesc(`Test compilation failure of ${builtin} with variously shaped and typed arguments`).\nparams((u) => u.combine('arg', keysOf(kArgCases))).\nfn((t) => {\n  t.expectCompileResult(\n    t.params.arg === 'good',\n    `const c = ${builtin}${kArgCases[t.params.arg]};`\n  );\n});\n\ng.test('must_use').\ndesc(`Result of ${builtin} must be used`).\nparams((u) => u.combine('use', [true, false])).\nfn((t) => {\n  const use_it = t.params.use ? '_ = ' : '';\n  t.expectCompileResult(t.params.use, `fn f() { ${use_it}${builtin}${kArgCases['good']}; }`);\n});"],"mappings":"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","ignoreList":[]}