{"version":3,"file":"parse.spec.js","names":["description","makeTestGroup","keysOf","ShaderValidationTest","g","kTests","and_bool_literal_bool_literal","src","pass","and_bool_expr_bool_expr","and_bool_literal_bool_expr","and_bool_expr_bool_literal","and_bool_literal_int_literal","and_int_literal_bool_literal","and_bool_expr_int_literal","and_int_literal_bool_expr","or_bool_literal_bool_literal","or_bool_expr_bool_expr","or_bool_literal_bool_expr","or_bool_expr_bool_literal","or_bool_literal_int_literal","or_int_literal_bool_literal","or_bool_expr_int_literal","or_int_literal_bool_expr","test","desc","params","u","combine","fn","t","code","stmt","expectCompileResult"],"sources":["../../../../../../src/webgpu/shader/validation/expression/binary/parse.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `Validation tests for binary ops`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../common/util/data_tables.js';\nimport { ShaderValidationTest } from '../../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kTests = {\n  and_bool_literal_bool_literal: {\n    src: `let a = true & true;`,\n    pass: true\n  },\n  and_bool_expr_bool_expr: {\n    src: `let a = (1 == 2) & (3 == 4);`,\n    pass: true\n  },\n  and_bool_literal_bool_expr: {\n    src: `let a = true & (1 == 2);`,\n    pass: true\n  },\n  and_bool_expr_bool_literal: {\n    src: `let a = (1 == 2) & true;`,\n    pass: true\n  },\n  and_bool_literal_int_literal: {\n    src: `let a = true & 1;`,\n    pass: false\n  },\n  and_int_literal_bool_literal: {\n    src: `let a = 1 & true;`,\n    pass: false\n  },\n  and_bool_expr_int_literal: {\n    src: `let a = (1 == 2) & 1;`,\n    pass: false\n  },\n  and_int_literal_bool_expr: {\n    src: `let a = 1 & (1 == 2);`,\n    pass: false\n  },\n\n  or_bool_literal_bool_literal: {\n    src: `let a = true | true;`,\n    pass: true\n  },\n  or_bool_expr_bool_expr: {\n    src: `let a = (1 == 2) | (3 == 4);`,\n    pass: true\n  },\n  or_bool_literal_bool_expr: {\n    src: `let a = true | (1 == 2);`,\n    pass: true\n  },\n  or_bool_expr_bool_literal: {\n    src: `let a = (1 == 2) | true;`,\n    pass: true\n  },\n  or_bool_literal_int_literal: {\n    src: `let a = true | 1;`,\n    pass: false\n  },\n  or_int_literal_bool_literal: {\n    src: `let a = 1 | true;`,\n    pass: false\n  },\n  or_bool_expr_int_literal: {\n    src: `let a = (1 == 2) | 1;`,\n    pass: false\n  },\n  or_int_literal_bool_expr: {\n    src: `let a = 1 | (1 == 2);`,\n    pass: false\n  }\n};\n\ng.test('all').\ndesc('Test that binary operators are validated correctly').\nparams((u) => u.combine('stmt', keysOf(kTests))).\nfn((t) => {\n  const code = `\n@vertex\nfn vtx() -> @builtin(position) vec4f {\n  ${kTests[t.params.stmt].src}\n  return vec4f(1);\n}\n    `;\n  t.expectCompileResult(kTests[t.params.stmt].pass, code);\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG,iCAAiC,CAAC,SAASC,aAAa,QAAQ,+CAA+C,CAC7I,SAASC,MAAM,QAAQ,2CAA2C,CAClE,SAASC,oBAAoB,QAAQ,iCAAiC;;AAEtE,OAAO,MAAMC,CAAC,GAAGH,aAAa,CAACE,oBAAoB,CAAC;;AAEpD,MAAME,MAAM,GAAG;EACbC,6BAA6B,EAAE;IAC7BC,GAAG,EAAE,sBAAsB;IAC3BC,IAAI,EAAE;EACR,CAAC;EACDC,uBAAuB,EAAE;IACvBF,GAAG,EAAE,8BAA8B;IACnCC,IAAI,EAAE;EACR,CAAC;EACDE,0BAA0B,EAAE;IAC1BH,GAAG,EAAE,0BAA0B;IAC/BC,IAAI,EAAE;EACR,CAAC;EACDG,0BAA0B,EAAE;IAC1BJ,GAAG,EAAE,0BAA0B;IAC/BC,IAAI,EAAE;EACR,CAAC;EACDI,4BAA4B,EAAE;IAC5BL,GAAG,EAAE,mBAAmB;IACxBC,IAAI,EAAE;EACR,CAAC;EACDK,4BAA4B,EAAE;IAC5BN,GAAG,EAAE,mBAAmB;IACxBC,IAAI,EAAE;EACR,CAAC;EACDM,yBAAyB,EAAE;IACzBP,GAAG,EAAE,uBAAuB;IAC5BC,IAAI,EAAE;EACR,CAAC;EACDO,yBAAyB,EAAE;IACzBR,GAAG,EAAE,uBAAuB;IAC5BC,IAAI,EAAE;EACR,CAAC;;EAEDQ,4BAA4B,EAAE;IAC5BT,GAAG,EAAE,sBAAsB;IAC3BC,IAAI,EAAE;EACR,CAAC;EACDS,sBAAsB,EAAE;IACtBV,GAAG,EAAE,8BAA8B;IACnCC,IAAI,EAAE;EACR,CAAC;EACDU,yBAAyB,EAAE;IACzBX,GAAG,EAAE,0BAA0B;IAC/BC,IAAI,EAAE;EACR,CAAC;EACDW,yBAAyB,EAAE;IACzBZ,GAAG,EAAE,0BAA0B;IAC/BC,IAAI,EAAE;EACR,CAAC;EACDY,2BAA2B,EAAE;IAC3Bb,GAAG,EAAE,mBAAmB;IACxBC,IAAI,EAAE;EACR,CAAC;EACDa,2BAA2B,EAAE;IAC3Bd,GAAG,EAAE,mBAAmB;IACxBC,IAAI,EAAE;EACR,CAAC;EACDc,wBAAwB,EAAE;IACxBf,GAAG,EAAE,uBAAuB;IAC5BC,IAAI,EAAE;EACR,CAAC;EACDe,wBAAwB,EAAE;IACxBhB,GAAG,EAAE,uBAAuB;IAC5BC,IAAI,EAAE;EACR;AACF,CAAC;;AAEDJ,CAAC,CAACoB,IAAI,CAAC,KAAK,CAAC;AACbC,IAAI,CAAC,oDAAoD,CAAC;AAC1DC,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,MAAM,EAAE1B,MAAM,CAACG,MAAM,CAAC,CAAC,CAAC;AAChDwB,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAMC,IAAI,GAAG;AACf;AACA;AACA,IAAI1B,MAAM,CAACyB,CAAC,CAACJ,MAAM,CAACM,IAAI,CAAC,CAACzB,GAAG;AAC7B;AACA;AACA,KAAK;EACHuB,CAAC,CAACG,mBAAmB,CAAC5B,MAAM,CAACyB,CAAC,CAACJ,MAAM,CAACM,IAAI,CAAC,CAACxB,IAAI,EAAEuB,IAAI,CAAC;AACzD,CAAC,CAAC","ignoreList":[]}