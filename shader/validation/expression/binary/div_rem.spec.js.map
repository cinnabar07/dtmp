{"version":3,"file":"div_rem.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","assert","kBit","ScalarType","Type","VectorType","concreteTypeOf","isAbstractType","isConvertible","kAllScalarsAndVectors","kConcreteNumericScalarsAndVectors","scalarTypeOf","ShaderValidationTest","kConstantAndOverrideStages","validateConstOrOverrideBinaryOpEval","resultType","g","kOperators","div","op","rem","kScalarAndVectorTypes","kConcreteNumericScalarAndVectorTypes","test","desc","params","u","combine","filter","value","startsWith","beginSubcases","beforeAllSubcases","t","lhs","f16","rhs","selectDeviceOrSkipTestCase","fn","lhsElement","rhsElement","hasBool","bool","hasF16","resType","canConvertScalarToVector","resTypeIsTypeable","code","compound_assignment","create","wgsl","rhs_value","scalarLHS","integral","u32","i32","valid","expectCompileResult","expand","p","toString","lType","width","nonOneIndex","expandWithParams","partialDivByZeroIsError","includes","cases","leftValue","rightValue","error","leftRuntime","push","negative","min","swap","type","index","values","Array","fill","stage","kInvalidTypes","array","expr","control","e","ptr","atomic","texture","sampler","struct"],"sources":["../../../../../../src/webgpu/shader/validation/expression/binary/div_rem.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nValidation tests for division and remainder expressions.\n`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../common/util/data_tables.js';\nimport { assert } from '../../../../../common/util/util.js';\nimport { kBit } from '../../../../util/constants.js';\nimport {\n  ScalarType,\n  Type,\n\n  VectorType,\n  concreteTypeOf,\n  isAbstractType,\n  isConvertible,\n  kAllScalarsAndVectors,\n  kConcreteNumericScalarsAndVectors,\n  scalarTypeOf } from\n'../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../shader_validation_test.js';\nimport {\n  kConstantAndOverrideStages,\n  validateConstOrOverrideBinaryOpEval } from\n'../call/builtin/const_override_validation.js';\n\nimport { resultType } from './result_type.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// A list of operators tested in this file.\nconst kOperators = {\n  div: { op: '/' },\n  rem: { op: '%' }\n};\n\n// A list of scalar and vector types.\nconst kScalarAndVectorTypes = objectsToRecord(kAllScalarsAndVectors);\nconst kConcreteNumericScalarAndVectorTypes = objectsToRecord(kConcreteNumericScalarsAndVectors);\n\ng.test('scalar_vector').\ndesc(\n  `\n  Validates that scalar and vector expressions are only accepted for compatible numeric types.\n  `\n).\nparams((u) =>\nu.\ncombine('lhs', keysOf(kScalarAndVectorTypes)).\ncombine(\n  'rhs',\n  // Skip vec3 and vec4 on the RHS to keep the number of subcases down.\n  // vec3 + vec3 and vec4 + vec4 is tested in execution tests.\n  keysOf(kScalarAndVectorTypes).filter(\n    (value) => !(value.startsWith('vec3') || value.startsWith('vec4'))\n  )\n).\ncombine('compound_assignment', [false, true]).\nbeginSubcases().\ncombine('op', keysOf(kOperators)).\ncombine('rhs_value', [0, 1])\n).\nbeforeAllSubcases((t) => {\n  if (\n  scalarTypeOf(kScalarAndVectorTypes[t.params.lhs]) === Type.f16 ||\n  scalarTypeOf(kScalarAndVectorTypes[t.params.rhs]) === Type.f16)\n  {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const op = kOperators[t.params.op];\n  const lhs = kScalarAndVectorTypes[t.params.lhs];\n  const rhs = kScalarAndVectorTypes[t.params.rhs];\n  const lhsElement = scalarTypeOf(lhs);\n  const rhsElement = scalarTypeOf(rhs);\n  const hasBool = lhsElement === Type.bool || rhsElement === Type.bool;\n  const hasF16 = lhsElement === Type.f16 || rhsElement === Type.f16;\n  const resType = resultType({ lhs, rhs, canConvertScalarToVector: true });\n  const resTypeIsTypeable = resType && !isAbstractType(scalarTypeOf(resType));\n  const code = t.params.compound_assignment ?\n  `\n${hasF16 ? 'enable f16;' : ''}\nfn f() {\n  var v = ${lhs.create(0).wgsl()};\n  v ${op.op}= ${rhs.create(t.params.rhs_value).wgsl()};\n}\n` :\n  `\n${hasF16 ? 'enable f16;' : ''}\nconst lhs = ${lhs.create(1).wgsl()};\nconst rhs = ${rhs.create(t.params.rhs_value).wgsl()};\nconst foo ${resTypeIsTypeable ? `: ${resType}` : ''} = lhs ${op.op} rhs;\n`;\n\n  const scalarLHS = scalarTypeOf(concreteTypeOf(lhs));\n  const integral = scalarLHS === Type.u32 || scalarLHS === Type.i32;\n  let valid = !hasBool && resType !== null;\n  if (valid && t.params.compound_assignment) {\n    valid =\n    valid &&\n    isConvertible(resType, concreteTypeOf(lhs)) && (\n    !integral || t.params.rhs_value === 1);\n  } else {\n    valid = valid && t.params.rhs_value === 1;\n  }\n  t.expectCompileResult(valid, code);\n});\n\ng.test('scalar_vector_out_of_range').\ndesc(\n  `\n    Checks that constant or override evaluation of div/rem operations on scalar/vectors that produce out of division by 0 or out of range values cause validation errors.\n      - Checks for all concrete numeric scalar and vector types, including scalar * vector and vector * scalar.\n      - Checks for all vector elements that could cause the out of range to happen.\n      - Checks for valid small cases and 0, also the minimum i32.\n  `\n).\nparams((u) =>\nu.\ncombine('op', keysOf(kOperators)).\ncombine('lhs', keysOf(kConcreteNumericScalarAndVectorTypes)).\nexpand('rhs', (p) => {\n  if (kScalarAndVectorTypes[p.lhs] instanceof VectorType) {\n    return [p.lhs, scalarTypeOf(kScalarAndVectorTypes[p.lhs]).toString()];\n  }\n  return [p.lhs];\n}).\nbeginSubcases().\nexpand('swap', (p) => {\n  if (p.lhs === p.rhs) {\n    return [false];\n  }\n  return [false, true];\n}).\ncombine('nonOneIndex', [0, 1, 2, 3]).\nfilter((p) => {\n  const lType = kScalarAndVectorTypes[p.lhs];\n  if (lType instanceof VectorType) {\n    return lType.width > p.nonOneIndex;\n  }\n  return p.nonOneIndex === 0;\n}).\nexpandWithParams((p) => {\n  // When lhs is a non-const expression, division by zero is only an error for integral types.\n  const partialDivByZeroIsError = [Type.i32, Type.u32].includes(\n    scalarTypeOf(kScalarAndVectorTypes[p.rhs])\n  );\n  const cases = [\n  { leftValue: 42, rightValue: 0, error: true, leftRuntime: false },\n  { leftValue: 42, rightValue: 0, error: partialDivByZeroIsError, leftRuntime: true },\n  { leftValue: 0, rightValue: 0, error: partialDivByZeroIsError, leftRuntime: true },\n  { leftValue: 0, rightValue: 42, error: false, leftRuntime: false }];\n\n  if (p.lhs === 'i32') {\n    cases.push({\n      leftValue: -kBit.i32.negative.min,\n      rightValue: -1,\n      error: true,\n      leftRuntime: false\n    });\n    cases.push({\n      leftValue: -kBit.i32.negative.min + 1,\n      rightValue: -1,\n      error: false,\n      leftRuntime: false\n    });\n  }\n  return cases;\n}).\ncombine('stage', kConstantAndOverrideStages)\n).\nbeforeAllSubcases((t) => {\n  if (\n  scalarTypeOf(kScalarAndVectorTypes[t.params.lhs]) === Type.f16 ||\n  scalarTypeOf(kScalarAndVectorTypes[t.params.rhs]) === Type.f16)\n  {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const { op, leftValue, rightValue, error, leftRuntime, nonOneIndex, swap } = t.params;\n  let { lhs, rhs } = t.params;\n\n  // Handle the swapping of LHS and RHS to test all cases of scalar * vector.\n  if (swap) {\n    [rhs, lhs] = [lhs, rhs];\n  }\n\n  // Creates either a scalar with the value, or a vector with the value only at a specific index.\n  const create = (type, index, value) => {\n    if (type instanceof ScalarType) {\n      return type.create(value);\n    } else {\n      assert(type instanceof VectorType);\n      const values = new Array(type.width);\n      values.fill(1);\n      values[index] = value;\n      return type.create(values);\n    }\n  };\n\n  // Check if there is overflow\n  validateConstOrOverrideBinaryOpEval(\n    t,\n    kOperators[op].op,\n    !error,\n    leftRuntime ? 'runtime' : t.params.stage,\n    create(kScalarAndVectorTypes[lhs], nonOneIndex, leftValue),\n    t.params.stage,\n    create(kScalarAndVectorTypes[rhs], nonOneIndex, rightValue)\n  );\n});\n\n\n\n\n\n\n\nconst kInvalidTypes = {\n  array: {\n    expr: 'arr',\n    control: (e) => `${e}[0]`\n  },\n\n  ptr: {\n    expr: '(&u)',\n    control: (e) => `*${e}`\n  },\n\n  atomic: {\n    expr: 'a',\n    control: (e) => `atomicLoad(&${e})`\n  },\n\n  texture: {\n    expr: 't',\n    control: (e) => `i32(textureLoad(${e}, vec2(), 0).x)`\n  },\n\n  sampler: {\n    expr: 's',\n    control: (e) => `i32(textureSampleLevel(t, ${e}, vec2(), 0).x)`\n  },\n\n  struct: {\n    expr: 'str',\n    control: (e) => `${e}.u`\n  }\n};\n\ng.test('invalid_type_with_itself').\ndesc(\n  `\n  Validates that expressions are never accepted for non-scalar, non-vector, and non-matrix types.\n  `\n).\nparams((u) =>\nu.\ncombine('op', keysOf(kOperators)).\ncombine('type', keysOf(kInvalidTypes)).\ncombine('control', [true, false]).\nbeginSubcases()\n).\nfn((t) => {\n  const op = kOperators[t.params.op];\n  const type = kInvalidTypes[t.params.type];\n  const expr = t.params.control ? type.control(type.expr) : type.expr;\n  const code = `\n@group(0) @binding(0) var t : texture_2d<f32>;\n@group(0) @binding(1) var s : sampler;\n@group(0) @binding(2) var<storage, read_write> a : atomic<i32>;\n\nstruct S { u : u32 }\n\nvar<private> u : u32;\nvar<private> m : mat2x2f;\nvar<private> arr : array<i32, 4>;\nvar<private> str : S;\n\n@compute @workgroup_size(1)\nfn main() {\n  let foo = ${expr} ${op.op} ${expr};\n}\n`;\n\n  t.expectCompileResult(t.params.control, code);\n});"],"mappings":"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","ignoreList":[]}