{"version":3,"file":"short_circuiting_and_or.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","kAllScalarsAndVectors","ScalarType","scalarTypeOf","Type","ShaderValidationTest","g","kScalarAndVectorTypes","test","desc","params","u","combine","filter","value","startsWith","beginSubcases","beforeAllSubcases","t","lhs","f16","rhs","selectDeviceOrSkipTestCase","fn","lhsElement","rhsElement","hasF16","code","create","wgsl","op","valid","bool","expectCompileResult","kInvalidTypes","mat2x2f","expr","control","e","array","ptr","atomic","texture","sampler","struct","type","kLhsForShortCircuit","kInvalidRhsExpressions","overflow","div_zero_i32","div_zero_f32","builtin","short_circuit","constants","expectPipelineResult","expectedResult","reference","kInvalidArrayCounts","negative","sqrt_neg1","nested"],"sources":["../../../../../../src/webgpu/shader/validation/expression/binary/short_circuiting_and_or.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nValidation tests for short-circuiting && and || expressions.\n`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../common/util/data_tables.js';\nimport {\n  kAllScalarsAndVectors,\n  ScalarType,\n  scalarTypeOf,\n  Type } from\n'../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// A list of scalar and vector types.\nconst kScalarAndVectorTypes = objectsToRecord(kAllScalarsAndVectors);\n\ng.test('scalar_vector').\ndesc(\n  `\n  Validates that scalar and vector short-circuiting operators are only accepted for scalar booleans.\n  `\n).\nparams((u) =>\nu.\ncombine('op', ['&&', '||']).\ncombine('lhs', keysOf(kScalarAndVectorTypes)).\ncombine(\n  'rhs',\n  // Skip vec3 and vec4 on the RHS to keep the number of subcases down.\n  keysOf(kScalarAndVectorTypes).filter(\n    (value) => !(value.startsWith('vec3') || value.startsWith('vec4'))\n  )\n).\nbeginSubcases()\n).\nbeforeAllSubcases((t) => {\n  if (\n  scalarTypeOf(kScalarAndVectorTypes[t.params.lhs]) === Type.f16 ||\n  scalarTypeOf(kScalarAndVectorTypes[t.params.rhs]) === Type.f16)\n  {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const lhs = kScalarAndVectorTypes[t.params.lhs];\n  const rhs = kScalarAndVectorTypes[t.params.rhs];\n  const lhsElement = scalarTypeOf(lhs);\n  const rhsElement = scalarTypeOf(rhs);\n  const hasF16 = lhsElement === Type.f16 || rhsElement === Type.f16;\n  const code = `\n${hasF16 ? 'enable f16;' : ''}\nconst lhs = ${lhs.create(0).wgsl()};\nconst rhs = ${rhs.create(0).wgsl()};\nconst foo = lhs ${t.params.op} rhs;\n`;\n\n  // Determine if the types are compatible.\n  let valid = false;\n  if (lhs instanceof ScalarType && rhs instanceof ScalarType) {\n    valid = lhsElement === Type.bool && rhsElement === Type.bool;\n  }\n\n  t.expectCompileResult(valid, code);\n});\n\n\n\n\n\n\n\nconst kInvalidTypes = {\n  mat2x2f: {\n    expr: 'm',\n    control: (e) => `bool(${e}[0][0])`\n  },\n\n  array: {\n    expr: 'arr',\n    control: (e) => `${e}[0]`\n  },\n\n  ptr: {\n    expr: '(&b)',\n    control: (e) => `*${e}`\n  },\n\n  atomic: {\n    expr: 'a',\n    control: (e) => `bool(atomicLoad(&${e}))`\n  },\n\n  texture: {\n    expr: 't',\n    control: (e) => `bool(textureLoad(${e}, vec2(), 0).x)`\n  },\n\n  sampler: {\n    expr: 's',\n    control: (e) => `bool(textureSampleLevel(t, ${e}, vec2(), 0).x)`\n  },\n\n  struct: {\n    expr: 'str',\n    control: (e) => `${e}.b`\n  }\n};\n\ng.test('invalid_types').\ndesc(\n  `\n  Validates that short-circuiting expressions are never accepted for non-scalar and non-vector types.\n  `\n).\nparams((u) =>\nu.\ncombine('op', ['&&', '||']).\ncombine('type', keysOf(kInvalidTypes)).\ncombine('control', [true, false]).\nbeginSubcases()\n).\nfn((t) => {\n  const type = kInvalidTypes[t.params.type];\n  const expr = t.params.control ? type.control(type.expr) : type.expr;\n  const code = `\n@group(0) @binding(0) var t : texture_2d<f32>;\n@group(0) @binding(1) var s : sampler;\n@group(0) @binding(2) var<storage, read_write> a : atomic<i32>;\n\nstruct S { b : bool }\n\nvar<private> b : bool;\nvar<private> m : mat2x2f;\nvar<private> arr : array<bool, 4>;\nvar<private> str : S;\n\n@compute @workgroup_size(1)\nfn main() {\n  let foo = ${expr} ${t.params.op} ${expr};\n}\n`;\n\n  t.expectCompileResult(t.params.control, code);\n});\n\n// A map from operator to the value of the LHS that will cause short-circuiting.\nconst kLhsForShortCircuit = {\n  '&&': false,\n  '||': true\n};\n\n// A list of expressions that are invalid unless guarded by a short-circuiting expression.\nconst kInvalidRhsExpressions = {\n  overflow: 'i32(1<<thirty_one) < 0',\n  div_zero_i32: '(1 / zero_i32) == 0',\n  div_zero_f32: '(one_f32 / 0) == 0',\n  builtin: 'sqrt(-one_f32) == 0'\n};\n\ng.test('invalid_rhs_const').\ndesc(\n  `\n  Validates that a short-circuiting expression with a const-expression LHS guards the evaluation of its RHS expression.\n  `\n).\nparams((u) =>\nu.\ncombine('op', ['&&', '||']).\ncombine('rhs', keysOf(kInvalidRhsExpressions)).\ncombine('short_circuit', [true, false]).\nbeginSubcases()\n).\nfn((t) => {\n  let lhs = kLhsForShortCircuit[t.params.op];\n  if (!t.params.short_circuit) {\n    lhs = !lhs;\n  }\n  const code = `\nconst thirty_one = 31u;\nconst zero_i32 = 0i;\nconst one_f32 = 1.0f;\n\n@compute @workgroup_size(1)\nfn main() {\n  let foo = ${lhs} ${t.params.op} ${kInvalidRhsExpressions[t.params.rhs]};\n}\n`;\n\n  t.expectCompileResult(t.params.short_circuit, code);\n});\n\ng.test('invalid_rhs_override').\ndesc(\n  `\n  Validates that a short-circuiting expression with an override-expression LHS guards the evaluation of its RHS expression.\n  `\n).\nparams((u) =>\nu.\ncombine('op', ['&&', '||']).\ncombine('rhs', keysOf(kInvalidRhsExpressions)).\ncombine('short_circuit', [true, false]).\nbeginSubcases()\n).\nfn((t) => {\n  let lhs = kLhsForShortCircuit[t.params.op];\n  if (!t.params.short_circuit) {\n    lhs = !lhs;\n  }\n  const code = `\noverride cond : bool;\noverride zero_i32 = 0i;\noverride one_f32 = 1.0f;\noverride thirty_one = 31u;\noverride foo = cond ${t.params.op} ${kInvalidRhsExpressions[t.params.rhs]};\n`;\n\n  const constants = {};\n  constants['cond'] = lhs ? 1 : 0;\n  t.expectPipelineResult({\n    expectedResult: t.params.short_circuit,\n    code,\n    constants,\n    reference: ['foo']\n  });\n});\n\n// A list of expressions that are invalid unless guarded by a short-circuiting expression.\n// The control case will use `value = 10`, the failure case will use `value = 1`.\nconst kInvalidArrayCounts = {\n  negative: 'value - 2',\n  sqrt_neg1: 'u32(sqrt(value - 2))',\n  nested: '10 + array<i32, value - 2>()[0]'\n};\n\ng.test('invalid_array_count_on_rhs').\ndesc(\n  `\n  Validates that an invalid array count expression is not guarded by a short-circuiting expression.\n  `\n).\nparams((u) =>\nu.\ncombine('op', ['&&', '||']).\ncombine('rhs', keysOf(kInvalidArrayCounts)).\ncombine('control', [true, false]).\nbeginSubcases()\n).\nfn((t) => {\n  const lhs = t.params.op === '&&' ? 'false' : 'true';\n  const code = `\nconst value = ${t.params.control ? '10' : '1'};\n\n@compute @workgroup_size(1)\nfn main() {\n  let foo = ${lhs} ${t.params.op} array<bool, ${kInvalidArrayCounts[t.params.rhs]}>()[0];\n}\n`;\n\n  t.expectCompileResult(t.params.control, code);\n});"],"mappings":"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","ignoreList":[]}