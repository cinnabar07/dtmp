{"version":3,"file":"bitwise_shift.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","Type","kAllScalarsAndVectors","numElementsOf","scalarTypeOf","ShaderValidationTest","g","signed","v","Int32Array","vectorize","size","undefined","kScalarAndVectorTypes","test","desc","params","u","combine","filter","value","startsWith","beginSubcases","beforeAllSubcases","t","lhs","f16","rhs","selectDeviceOrSkipTestCase","fn","lhsElement","rhsElement","hasF16","code","compound_assignment","create","wgsl","op","lhs_valid","abstractInt","i32","u32","includes","rhs_valid","valid","expectCompileResult","kInvalidTypes","mat2x2f","expr","control","e","array","ptr","atomic","texture","sampler","struct","type","kLeftShiftCases","pass","case","vec_size","kRightShiftCases","stage","expect","constants","expectPipelineResult","expectedResult","reference"],"sources":["../../../../../../src/webgpu/shader/validation/expression/binary/bitwise_shift.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nValidation tests for the bitwise shift binary expression operations\n`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../common/util/data_tables.js';\nimport {\n  Type,\n  kAllScalarsAndVectors,\n  numElementsOf,\n  scalarTypeOf } from\n'../../../../util/conversion.js';\nimport { ShaderValidationTest } from '../../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\n// Converts v to signed decimal number.\n// Required because JS binary literals are always interpreted as unsigned numbers.\nfunction signed(v) {\n  return new Int32Array([v])[0];\n}\n\n// Return vector form of size `size` of input value `v`, or `v` if size is undefined.\nfunction vectorize(v, size) {\n  if (size !== undefined) {\n    return `vec${size}(${v})`;\n  }\n  return v;\n}\n\n// A list of scalar and vector types.\nconst kScalarAndVectorTypes = objectsToRecord(kAllScalarsAndVectors);\n\ng.test('scalar_vector').\ndesc(\n  `\n  Validates that scalar and vector expressions are only accepted when the LHS is an integer and the RHS is abstract or unsigned.\n  `\n).\nparams((u) =>\nu.\ncombine('lhs', keysOf(kScalarAndVectorTypes)).\ncombine(\n  'rhs',\n  // Skip vec3 and vec4 on the RHS to keep the number of subcases down.\n  keysOf(kScalarAndVectorTypes).filter(\n    (value) => !(value.startsWith('vec3') || value.startsWith('vec4'))\n  )\n).\ncombine('compound_assignment', [false, true]).\nbeginSubcases().\ncombine('op', ['<<', '>>'])\n).\nbeforeAllSubcases((t) => {\n  if (\n  scalarTypeOf(kScalarAndVectorTypes[t.params.lhs]) === Type.f16 ||\n  scalarTypeOf(kScalarAndVectorTypes[t.params.rhs]) === Type.f16)\n  {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const lhs = kScalarAndVectorTypes[t.params.lhs];\n  const rhs = kScalarAndVectorTypes[t.params.rhs];\n  const lhsElement = scalarTypeOf(lhs);\n  const rhsElement = scalarTypeOf(rhs);\n  const hasF16 = lhsElement === Type.f16 || rhsElement === Type.f16;\n  const code = t.params.compound_assignment ?\n  `\n${hasF16 ? 'enable f16;' : ''}\nfn f() {\n  var foo = ${lhs.create(0).wgsl()};\n  foo ${t.params.op}= ${rhs.create(0).wgsl()};\n}\n` :\n  `\n${hasF16 ? 'enable f16;' : ''}\nconst lhs = ${lhs.create(0).wgsl()};\nconst rhs = ${rhs.create(0).wgsl()};\nconst foo = lhs ${t.params.op} rhs;\n`;\n\n  // The LHS must be an integer, and the RHS must be an abstract/unsigned integer.\n  // The vector widths must also match.\n  const lhs_valid = [Type.abstractInt, Type.i32, Type.u32].includes(lhsElement);\n  const rhs_valid = [Type.abstractInt, Type.u32].includes(rhsElement);\n  const valid = lhs_valid && rhs_valid && numElementsOf(lhs) === numElementsOf(rhs);\n  t.expectCompileResult(valid, code);\n});\n\n\n\n\n\n\n\nconst kInvalidTypes = {\n  mat2x2f: {\n    expr: 'm',\n    control: (e) => `u32(${e}[0][0])`\n  },\n\n  array: {\n    expr: 'arr',\n    control: (e) => `${e}[0]`\n  },\n\n  ptr: {\n    expr: '(&u)',\n    control: (e) => `*${e}`\n  },\n\n  atomic: {\n    expr: 'a',\n    control: (e) => `atomicLoad(&${e})`\n  },\n\n  texture: {\n    expr: 't',\n    control: (e) => `u32(textureLoad(${e}, vec2(), 0).x)`\n  },\n\n  sampler: {\n    expr: 's',\n    control: (e) => `u32(textureSampleLevel(t, ${e}, vec2(), 0).x)`\n  },\n\n  struct: {\n    expr: 'str',\n    control: (e) => `${e}.u`\n  }\n};\n\ng.test('invalid_types').\ndesc(\n  `\n  Validates that expressions are never accepted for non-scalar and non-vector types.\n  `\n).\nparams((u) =>\nu.\ncombine('op', ['<<', '>>']).\ncombine('type', keysOf(kInvalidTypes)).\ncombine('control', [true, false]).\nbeginSubcases()\n).\nfn((t) => {\n  const type = kInvalidTypes[t.params.type];\n  const expr = t.params.control ? type.control(type.expr) : type.expr;\n  const code = `\n@group(0) @binding(0) var t : texture_2d<f32>;\n@group(0) @binding(1) var s : sampler;\n@group(0) @binding(2) var<storage, read_write> a : atomic<u32>;\n\nstruct S { u : u32 }\n\nvar<private> u : u32;\nvar<private> m : mat2x2f;\nvar<private> arr : array<u32, 4>;\nvar<private> str : S;\n\n@compute @workgroup_size(1)\nfn main() {\n  let foo = ${expr} ${t.params.op} ${expr};\n}\n`;\n\n  t.expectCompileResult(t.params.control, code);\n});\n\nconst kLeftShiftCases = [\n// rhs >= bitwidth fails\n{ lhs: `0u`, rhs: `31u`, pass: true },\n{ lhs: `0u`, rhs: `32u`, pass: false },\n{ lhs: `0u`, rhs: `33u`, pass: false },\n{ lhs: `0u`, rhs: `1000u`, pass: false },\n{ lhs: `0u`, rhs: `0xFFFFFFFFu`, pass: false },\n\n{ lhs: `0i`, rhs: `31u`, pass: true },\n{ lhs: `0i`, rhs: `32u`, pass: false },\n{ lhs: `0i`, rhs: `33u`, pass: false },\n{ lhs: `0i`, rhs: `1000u`, pass: false },\n{ lhs: `0i`, rhs: `0xFFFFFFFFu`, pass: false },\n\n// Signed overflow (sign change)\n{ lhs: `${0b01000000000000000000000000000000}i`, rhs: `1u`, pass: false },\n{ lhs: `${0b01111111111111111111111111111111}i`, rhs: `1u`, pass: false },\n{ lhs: `${0b00000000000000000000000000000001}i`, rhs: `31u`, pass: false },\n// Same cases should pass if lhs is unsigned\n{ lhs: `${0b01000000000000000000000000000000}u`, rhs: `1u`, pass: true },\n{ lhs: `${0b01111111111111111111111111111111}u`, rhs: `1u`, pass: true },\n{ lhs: `${0b00000000000000000000000000000001}u`, rhs: `31u`, pass: true },\n\n// Unsigned overflow\n{ lhs: `${0b11000000000000000000000000000000}u`, rhs: `1u`, pass: false },\n{ lhs: `${0b11111111111111111111111111111111}u`, rhs: `1u`, pass: false },\n{ lhs: `${0b11111111111111111111111111111111}u`, rhs: `31u`, pass: false },\n// Same cases should pass if lhs is signed\n{ lhs: `${signed(0b11000000000000000000000000000000)}i`, rhs: `1u`, pass: true },\n{ lhs: `${signed(0b11111111111111111111111111111111)}i`, rhs: `1u`, pass: true },\n{ lhs: `${signed(0b11111111111111111111111111111111)}i`, rhs: `31u`, pass: true },\n\n// Shift by negative is an error\n{ lhs: `1`, rhs: `-1`, pass: false },\n{ lhs: `1i`, rhs: `-1`, pass: false },\n{ lhs: `1u`, rhs: `-1`, pass: false },\n\n// Signed overflow (sign change) for abstract\n{ lhs: `1`, rhs: `63`, pass: false },\n{ lhs: `2`, rhs: `62`, pass: false },\n{\n  lhs: `${0b0100000000000000000000000000000000000000000000000000000000000000}`,\n  rhs: `1u`,\n  pass: false\n}];\n\n\ng.test('shift_left_concrete').\ndesc('Tests validation of binary left shift of concrete values').\nparams((u) =>\nu.\ncombine('case', kLeftShiftCases) //\n.combine('vectorize', [undefined, 2, 3, 4])\n).\nfn((t) => {\n  const lhs = t.params.case.lhs;\n  const rhs = t.params.case.rhs;\n  const vec_size = t.params.vectorize;\n\n  const code = `\n@compute @workgroup_size(1)\nfn main() {\n    const r = ${vectorize(lhs, vec_size)} << ${vectorize(rhs, vec_size)};\n}\n    `;\n  t.expectCompileResult(t.params.case.pass, code);\n});\n\nconst kRightShiftCases = [\n// rhs >= bitwidth fails\n{ lhs: `0u`, rhs: `31u`, pass: true },\n{ lhs: `0u`, rhs: `32u`, pass: false },\n{ lhs: `0u`, rhs: `33u`, pass: false },\n{ lhs: `0u`, rhs: `1000u`, pass: false },\n{ lhs: `0u`, rhs: `0xFFFFFFFFu`, pass: false },\n\n{ lhs: `0i`, rhs: `31u`, pass: true },\n{ lhs: `0i`, rhs: `32u`, pass: false },\n{ lhs: `0i`, rhs: `33u`, pass: false },\n{ lhs: `0i`, rhs: `1000u`, pass: false },\n{ lhs: `0i`, rhs: `0xFFFFFFFFu`, pass: false },\n\n// Shift by negative is an error\n{ lhs: `1`, rhs: `-1`, pass: false },\n{ lhs: `1i`, rhs: `-1`, pass: false },\n{ lhs: `1u`, rhs: `-1`, pass: false }];\n\n\ng.test('shift_right_concrete').\ndesc('Tests validation of binary right shift of concrete values').\nparams((u) =>\nu.\ncombine('case', kRightShiftCases) //\n.combine('vectorize', [undefined, 2, 3, 4])\n).\nfn((t) => {\n  const lhs = t.params.case.lhs;\n  const rhs = t.params.case.rhs;\n  const vec_size = t.params.vectorize;\n\n  const code = `\n@compute @workgroup_size(1)\nfn main() {\n    const r = ${vectorize(lhs, vec_size)} >> ${vectorize(rhs, vec_size)};\n}\n    `;\n  t.expectCompileResult(t.params.case.pass, code);\n});\n\ng.test('shift_left_abstract').\ndesc('Validates that the result when the LHS is abstract is also abstract').\nfn((t) => {\n  const wgsl = `\n    const lhs = 0xfffff0000; // too large for 32 bits\n    const res = lhs << 4u;\n    const_assert res == 0xfffff00000;`;\n  t.expectCompileResult(true, wgsl);\n});\n\ng.test('shift_right_abstract').\ndesc('Validates that the result when the LHS is abstract is also abstract').\nfn((t) => {\n  const wgsl = `\n    const lhs = 0xfffff0000; // too large for 32 bits\n    const res = lhs >> 1u;\n    const_assert res == 0x7ffff8000;`;\n  t.expectCompileResult(true, wgsl);\n});\n\ng.test('partial_eval_errors').\ndesc('Tests partial evaluation errors for left and right shift').\nparams((u) =>\nu.\ncombine('op', ['<<', '>>']).\ncombine('type', ['i32', 'u32']).\nbeginSubcases().\ncombine('stage', ['shader', 'pipeline']).\ncombine('value', [31, 32, 33, 64])\n).\nfn((t) => {\n  const u32 = Type.u32;\n  let rhs = 'o';\n  if (t.params.stage === 'shader') {\n    rhs = `${u32.create(t.params.value).wgsl()}`;\n  }\n  const wgsl = `\noverride o = 0u;\nfn foo() -> ${t.params.type} {\n  var v : ${t.params.type} = 0;\n  return v ${t.params.op} ${rhs};\n}`;\n\n  const expect = t.params.value < 32;\n  if (t.params.stage === 'shader') {\n    t.expectCompileResult(expect, wgsl);\n  } else {\n    const constants = {};\n    constants['o'] = t.params.value;\n    t.expectPipelineResult({\n      expectedResult: expect,\n      code: wgsl,\n      constants,\n      reference: ['o', 'foo()']\n    });\n  }\n});"],"mappings":"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","ignoreList":[]}