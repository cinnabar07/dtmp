{"version":3,"file":"atomics.spec.js","names":["description","makeTestGroup","keysOf","ShaderValidationTest","g","test","desc","specURL","params","u","combine","beforeAllSubcases","t","type","selectDeviceOrSkipTestCase","fn","code","expect","expectCompileResult","kSpecifierCases","no_type","valid","missing_l_template","missing_r_template","template_comma","missing_template_param","space_in_specifier","space_as_l_template","comment","testcase","case","beginSubcases","moduleVar","functionVar","aspace","kInvalidOperations","add","load","store","deref","equality","abs","address_abs","op","comma"],"sources":["../../../../../src/webgpu/shader/validation/types/atomics.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nValidation tests for atomic types\n\nTests covered:\n* Base type\n* Address spaces\n* Invalid operations (non-exhaustive)\n\nNote: valid operations (e.g. atomic built-in functions) are tested in the builtin tests.\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('type').\ndesc('Test of the underlying atomic data type').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#atomic-types').\nparams((u) =>\nu.combine('type', [\n'u32',\n'i32',\n'f32',\n'f16',\n'bool',\n'vec2u',\n'vec3i',\n'vec4f',\n'mat2x2f',\n'R',\n'S',\n'array<u32, 1>',\n'array<i32, 4>',\n'array<u32>',\n'array<i32>',\n'atomic<u32>',\n'atomic<i32>',\n'sampler']\n)\n).\nbeforeAllSubcases((t) => {\n  if (t.params.type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const code = `\nstruct S {\n  x : u32\n}\nstruct T {\n  x : i32\n}\nstruct R {\n  x : f32\n}\n\nstruct Test {\n  x : atomic<${t.params.type}>\n}\n`;\n\n  const expect = t.params.type === 'u32' || t.params.type === 'i32';\n  t.expectCompileResult(expect, code);\n});\n\nconst kSpecifierCases = {\n  no_type: {\n    code: `alias T = atomic;`,\n    valid: false\n  },\n  missing_l_template: {\n    code: `alias T = atomici32>;`,\n    valid: false\n  },\n  missing_r_template: {\n    code: `alias T = atomic<i32;`,\n    valid: false\n  },\n  template_comma: {\n    code: `alias T = atomic<i32,>;`,\n    valid: true\n  },\n  missing_template_param: {\n    code: `alias T = atomic<>;`,\n    valid: false\n  },\n  space_in_specifier: {\n    code: `alias T = atomic <i32>;`,\n    valid: true\n  },\n  space_as_l_template: {\n    code: `alias T = atomic i32>;`,\n    valid: false\n  },\n  comment: {\n    code: `alias T = atomic\n    /* comment */\n    <i32>;`,\n    valid: true\n  }\n};\n\ng.test('parse').\ndesc('Test atomic parsing').\nparams((u) => u.combine('case', keysOf(kSpecifierCases))).\nfn((t) => {\n  const testcase = kSpecifierCases[t.params.case];\n  t.expectCompileResult(testcase.valid, testcase.code);\n});\n\ng.test('address_space').\ndesc('Test allowed address spaces for atomics').\nspecURL('https://gpuweb.github.io/gpuweb/wgsl/#atomic-types').\nparams((u) =>\nu.\ncombine('aspace', [\n'storage',\n'workgroup',\n'storage-ro',\n'uniform',\n'private',\n'function',\n'function-let']\n).\nbeginSubcases().\ncombine('type', ['i32', 'u32'])\n).\nfn((t) => {\n  let moduleVar = ``;\n  let functionVar = '';\n  switch (t.params.aspace) {\n    case 'storage-ro':\n      moduleVar = `@group(0) @binding(0) var<storage> x : atomic<${t.params.type}>;\\n`;\n      break;\n    case 'storage':\n      moduleVar = `@group(0) @binding(0) var<storage, read_write> x : atomic<${t.params.type}>;\\n`;\n      break;\n    case 'uniform':\n      moduleVar = `@group(0) @binding(0) var<uniform> x : atomic<${t.params.type}>;\\n`;\n      break;\n    case 'workgroup':\n    case 'private':\n      moduleVar = `var<${t.params.aspace}> x : atomic<${t.params.type}>;\\n`;\n      break;\n    case 'function':\n      functionVar = `var x : atomic<${t.params.type}>;\\n`;\n      break;\n    case 'function-let':\n      functionVar = `let x : atomic<${t.params.type}>;\\n`;\n      break;\n  }\n  const code = `\n${moduleVar}\n\nfn foo() {\n  ${functionVar}\n}\n`;\n\n  const expect = t.params.aspace === 'storage' || t.params.aspace === 'workgroup';\n  t.expectCompileResult(expect, code);\n});\n\nconst kInvalidOperations = {\n  add: `a1 + a2`,\n  load: `a1`,\n  store: `a1 = 1u`,\n  deref: `*a1 = 1u`,\n  equality: `a1 == a2`,\n  abs: `abs(a1)`,\n  address_abs: `abs(&a1)`\n};\n\ng.test('invalid_operations').\ndesc('Tests that a selection of invalid operations are invalid').\nparams((u) => u.combine('op', keysOf(kInvalidOperations))).\nfn((t) => {\n  const code = `\nvar<workgroup> a1 : atomic<u32>;\nvar<workgroup> a2 : atomic<u32>;\n\nfn foo() {\n  let x : u32 = ${kInvalidOperations[t.params.op]};\n}\n`;\n\n  t.expectCompileResult(false, code);\n});\n\ng.test('trailing_comma').\ndesc('Test that trailing commas are accepted').\nparams((u) => u.combine('type', ['u32', 'i32']).combine('comma', ['', ','])).\nfn((t) => {\n  const code = `alias T = atomic<${t.params.type}${t.params.comma}>;`;\n  t.expectCompileResult(true, code);\n});"],"mappings":"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","ignoreList":[]}