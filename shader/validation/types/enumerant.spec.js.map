{"version":3,"file":"enumerant.spec.js","names":["description","makeTestGroup","ShaderValidationTest","g","kEnumerantTypes","test","desc","params","u","combine","fn","t","code","enum","expectCompileResult","kValueDecls","beginSubcases","decl","kEnumerantValues","value"],"sources":["../../../../../src/webgpu/shader/validation/types/enumerant.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nValidation tests for enumerant types.\n\n* Values cannot be declared with the type\n* Enumerant values cannot be used as values\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\nconst kEnumerantTypes = ['access_mode', 'address_space', 'texel_format'];\n\ng.test('type_declaration').\ndesc('Tests that enumerants cannot be used as a type').\nparams((u) => u.combine('enum', kEnumerantTypes)).\nfn((t) => {\n  const code = `alias T = ${t.params.enum};`;\n  t.expectCompileResult(false, code);\n});\n\nconst kValueDecls = ['var', 'let', 'const', 'override'];\n\ng.test('value_type').\ndesc('Tests that enumerant types cannot be the type of declaration').\nparams((u) => u.combine('enum', kEnumerantTypes).beginSubcases().combine('decl', kValueDecls)).\nfn((t) => {\n  const decl = `${t.params.decl} x : ${t.params.enum};`;\n  let code = ``;\n  if (t.params.decl === 'override') {\n    code = `${decl}`;\n  } else {\n    code = `fn foo() {\n        ${decl}\n      }`;\n  }\n  t.expectCompileResult(false, code);\n});\n\nconst kEnumerantValues = [\n// Access modes\n'read',\n'write',\n'read_write',\n\n// Address spaces\n'function',\n'private',\n'workgroup',\n'storage',\n'uniform',\n'handle',\n\n// Texel formats\n'rgba8unorm',\n'rgba8snorm',\n'rgba8uint',\n'rgba8sint',\n'rgba16uint',\n'rgba16sint',\n'rgba16float',\n'r32uint',\n'r32sint',\n'r32float',\n'rg32uint',\n'rg32sint',\n'rg32float',\n'rgba32uint',\n'rgba32sint',\n'rgba32float',\n'bgra8unorm'];\n\n\ng.test('decl_value').\ndesc('Tests that enumerant values cannot be used as declaration value').\nparams((u) => u.combine('value', kEnumerantValues).beginSubcases().combine('decl', kValueDecls)).\nfn((t) => {\n  const decl = `${t.params.decl} x = ${t.params.value};`;\n  let code = ``;\n  if (t.params.decl === 'override') {\n    code = `${decl}`;\n  } else {\n    code = `fn foo() {\n        ${decl}\n      }`;\n  }\n  t.expectCompileResult(false, code);\n});"],"mappings":"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","ignoreList":[]}