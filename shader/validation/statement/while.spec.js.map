{"version":3,"file":"while.spec.js","names":["description","makeTestGroup","keysOf","ShaderValidationTest","kTestTypes","g","test","desc","params","u","combine","beforeAllSubcases","t","type","requires","selectDeviceOrSkipTestCase","fn","code","header","value","pass","expectCompileResult","kTests","true","wgsl","paren_true","true_break","true_discard","true_return","expr","paren_expr","while","block","semicolon","true_lbrace","true_rbrace","lparen_true","rparen_true","true_lparen","true_rparen","lparen_true_lparen","rparen_true_rparen"],"sources":["../../../../../src/webgpu/shader/validation/statement/while.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `Validation tests for 'while' statements'`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../common/util/data_tables.js';\nimport { ShaderValidationTest } from '../shader_validation_test.js';\n\nimport { kTestTypes } from './test_types.js';\n\nexport const g = makeTestGroup(ShaderValidationTest);\n\ng.test('condition_type').\ndesc(`Tests that a 'while' condition must be a bool type`).\nparams((u) => u.combine('type', keysOf(kTestTypes))).\nbeforeAllSubcases((t) => {\n  if (kTestTypes[t.params.type].requires === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn((t) => {\n  const type = kTestTypes[t.params.type];\n  const code = `\n${type.requires ? `enable ${type.requires};` : ''}\n\n${type.header ?? ''}\n\nfn f() -> bool {\n  while (${type.value}) {\n    return true;\n  }\n  return false;\n}\n`;\n\n  const pass = t.params.type === 'bool';\n  t.expectCompileResult(pass, code);\n});\n\nconst kTests = {\n  true: { wgsl: `while true {}`, pass: true },\n  paren_true: { wgsl: `while (true) {}`, pass: true },\n  true_break: { wgsl: `while true { break; }`, pass: true },\n  true_discard: { wgsl: `while true { discard; }`, pass: true },\n  true_return: { wgsl: `while true { return; }`, pass: true },\n  expr: { wgsl: `while expr {}`, pass: true },\n  paren_expr: { wgsl: `while (expr) {}`, pass: true },\n\n  while: { wgsl: `while`, pass: false },\n  block: { wgsl: `while{}`, pass: false },\n  semicolon: { wgsl: `while;`, pass: false },\n  true_lbrace: { wgsl: `while true {`, pass: false },\n  true_rbrace: { wgsl: `while true }`, pass: false },\n\n  lparen_true: { wgsl: `while (true {}`, pass: false },\n  rparen_true: { wgsl: `while )true {}`, pass: false },\n  true_lparen: { wgsl: `while true( {}`, pass: false },\n  true_rparen: { wgsl: `while true) {}`, pass: false },\n  lparen_true_lparen: { wgsl: `while (true( {}`, pass: false },\n  rparen_true_rparen: { wgsl: `while )true) {}`, pass: false }\n};\n\ng.test('parse').\ndesc(`Test that 'while' statements are parsed correctly.`).\nparams((u) => u.combine('test', keysOf(kTests))).\nfn((t) => {\n  const code = `\nfn f() {\n  let expr = true;\n  ${kTests[t.params.test].wgsl}\n}`;\n  t.expectCompileResult(kTests[t.params.test].pass, code);\n});"],"mappings":"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","ignoreList":[]}