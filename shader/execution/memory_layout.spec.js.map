{"version":3,"file":"memory_layout.spec.js","names":["description","makeTestGroup","keysOf","iterRange","GPUTest","g","kLayoutCases","vec2u_align8","type","decl","read_assign","write_assign","offset","vec3u_align16","vec4u_align16","struct_align32","vec2h_align4","f16","vec3h_align8","vec4h_align8","vec2f_align8","f32","vec3f_align16","vec4f_align16","vec3i_size12","vec3h_size6","size80","atomic_align4","atomic_size4","mat2x2f_align8","mat3x2f_align8","mat4x2f_align8","mat2x3f_align16","mat3x3f_align16","mat4x3f_align16","mat2x4f_align16","mat3x4f_align16","mat4x4f_align16","mat2x2h_align4","mat3x2h_align4","mat4x2h_align4","mat2x3h_align8","mat3x3h_align8","mat4x3h_align8","mat2x4h_align8","mat3x4h_align8","mat4x4h_align8","mat2x2f_size","mat3x2f_size","mat4x2f_size","mat2x3f_size","mat3x3f_size","mat4x3f_size","mat2x4f_size","mat3x4f_size","mat4x4f_size","mat2x2h_size","mat3x2h_size","mat4x2h_size","mat2x3h_size","mat3x3h_size","mat4x3h_size","mat2x4h_size","mat3x4h_size","mat4x4h_size","struct_align_vec2i","skip_uniform","struct_align_vec3i","struct_align_vec4i","struct_align_vec2h","struct_align_vec3h","struct_align_vec4h","struct_size_roundup","struct_inner_size","struct_inner_align","struct_inner_size_and_align","struct_override_size","struct_double_align","array_vec3u_align","array_vec3h_align","array_vec3u_stride","array_vec3h_stride","array_stride_size","array_mat2x2f_stride","array_mat2x2h_stride","array_mat3x2f_stride","array_mat3x2h_stride","array_mat4x2f_stride","array_mat4x2h_stride","array_mat2x3f_stride","array_mat2x3h_stride","array_mat3x3f_stride","array_mat3x3h_stride","array_mat4x3f_stride","array_mat4x3h_stride","array_mat2x4f_stride","array_mat2x4h_stride","array_mat3x4f_stride","array_mat3x4h_stride","array_mat4x4f_stride","array_mat4x4h_stride","test","desc","params","u","combine","beginSubcases","beforeAllSubcases","t","testcase","case","selectDeviceOrSkipTestCase","skipIf","includes","aspace","fn","code","usage","GPUBufferUsage","COPY_SRC","UNIFORM","STORAGE","inMagicNumber","in_buffer","makeBufferWithContents","Uint32Array","x","out_buffer","COPY_DST","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","entryPoint","bg","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expectGPUBufferValuesEqual","outMagicNumber","expect"],"sources":["../../../../src/webgpu/shader/execution/memory_layout.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `Test memory layout requirements`;import { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { keysOf } from '../../../common/util/data_tables.js';\nimport { iterRange } from '../../../common/util/util.js';\nimport { GPUTest } from '../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n\n\n\n\n\n\n\n\n\n\n\nconst kLayoutCases = {\n  vec2u_align8: {\n    type: `S_vec2u_align`,\n    decl: `struct S_vec2u_align {\n      x : u32,\n      y : vec2u,\n    }`,\n    read_assign: `out = in.y[1]`,\n    write_assign: `out.y[1] = in`,\n    offset: 12\n  },\n  vec3u_align16: {\n    type: `S_vec3u_align`,\n    decl: `struct S_vec3u_align {\n      x : u32,\n      y : vec3u,\n    }`,\n    read_assign: `out = in.y[2]`,\n    write_assign: `out.y[2] = in`,\n    offset: 24\n  },\n  vec4u_align16: {\n    type: `S_vec4u_align`,\n    decl: `struct S_vec4u_align {\n      x : u32,\n      y : vec4u,\n    }`,\n    read_assign: `out = in.y[0]`,\n    write_assign: `out.y[0] = in`,\n    offset: 16\n  },\n  struct_align32: {\n    type: `S_align32`,\n    decl: `struct S_align32 {\n      x : u32,\n      @align(32) y : u32,\n    }`,\n    read_assign: `out = in.y;`,\n    write_assign: `out.y = in`,\n    offset: 32\n  },\n  vec2h_align4: {\n    type: `S_vec2h_align`,\n    decl: `struct S_vec2h_align {\n      x : f16,\n      y : vec2h,\n    }`,\n    read_assign: `out = u32(in.y[0])`,\n    write_assign: `out.y[0] = f16(in)`,\n    offset: 4,\n    f16: true\n  },\n  vec3h_align8: {\n    type: `S_vec3h_align`,\n    decl: `struct S_vec3h_align {\n      x : f16,\n      y : vec3h,\n    }`,\n    read_assign: `out = u32(in.y[2])`,\n    write_assign: `out.y[2] = f16(in)`,\n    offset: 12,\n    f16: true\n  },\n  vec4h_align8: {\n    type: `S_vec4h_align`,\n    decl: `struct S_vec4h_align {\n      x : f16,\n      y : vec4h,\n    }`,\n    read_assign: `out = u32(in.y[2])`,\n    write_assign: `out.y[2] = f16(in)`,\n    offset: 12,\n    f16: true\n  },\n  vec2f_align8: {\n    type: `S_vec2f_align`,\n    decl: `struct S_vec2f_align {\n      x : u32,\n      y : vec2f,\n    }`,\n    read_assign: `out = u32(in.y[1])`,\n    write_assign: `out.y[1] = f32(in)`,\n    offset: 12,\n    f32: true\n  },\n  vec3f_align16: {\n    type: `S_vec3f_align`,\n    decl: `struct S_vec3f_align {\n      x : u32,\n      y : vec3f,\n    }`,\n    read_assign: `out = u32(in.y[2])`,\n    write_assign: `out.y[2] = f32(in)`,\n    offset: 24,\n    f32: true\n  },\n  vec4f_align16: {\n    type: `S_vec4f_align`,\n    decl: `struct S_vec4f_align {\n      x : u32,\n      y : vec4f,\n    }`,\n    read_assign: `out = u32(in.y[0])`,\n    write_assign: `out.y[0] = f32(in)`,\n    offset: 16,\n    f32: true\n  },\n  vec3i_size12: {\n    type: `S_vec3i_size`,\n    decl: `struct S_vec3i_size {\n      x : vec3i,\n      y : u32,\n    }`,\n    read_assign: `out = in.y`,\n    write_assign: `out.y = in`,\n    offset: 12\n  },\n  vec3h_size6: {\n    type: `S_vec3h_size`,\n    decl: `struct S_vec3h_size {\n      x : vec3h,\n      y : f16,\n      z : f16,\n    }`,\n    read_assign: `out = u32(in.z)`,\n    write_assign: `out.z = f16(in)`,\n    offset: 8,\n    f16: true\n  },\n  size80: {\n    type: `S_size80`,\n    decl: `struct S_size80 {\n      @size(80) x : u32,\n      y : u32,\n    }`,\n    read_assign: `out = in.y`,\n    write_assign: `out.y = in`,\n    offset: 80\n  },\n  atomic_align4: {\n    type: `S_atomic_align`,\n    decl: `struct S_atomic_align {\n      x : u32,\n      y : atomic<u32>,\n    }`,\n    read_assign: `out = atomicLoad(&in.y)`,\n    write_assign: `atomicStore(&out.y, in)`,\n    offset: 4\n  },\n  atomic_size4: {\n    type: `S_atomic_size`,\n    decl: `struct S_atomic_size {\n      x : atomic<u32>,\n      y : u32,\n    }`,\n    read_assign: `out = in.y`,\n    write_assign: `out.y = in`,\n    offset: 4\n  },\n  mat2x2f_align8: {\n    type: `S_mat2x2f_align`,\n    decl: `struct S_mat2x2f_align {\n      x : u32,\n      y : mat2x2f,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f32(in)`,\n    offset: 8,\n    f32: true\n  },\n  mat3x2f_align8: {\n    type: `S_mat3x2f_align`,\n    decl: `struct S_mat3x2f_align {\n      x : u32,\n      y : mat3x2f,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f32(in)`,\n    offset: 8,\n    f32: true\n  },\n  mat4x2f_align8: {\n    type: `S_mat4x2f_align`,\n    decl: `struct S_mat4x2f_align {\n      x : u32,\n      y : mat4x2f,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f32(in)`,\n    offset: 8,\n    f32: true\n  },\n  mat2x3f_align16: {\n    type: `S_mat2x3f_align`,\n    decl: `struct S_mat2x3f_align {\n      x : u32,\n      y : mat2x3f,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f32(in)`,\n    offset: 16,\n    f32: true\n  },\n  mat3x3f_align16: {\n    type: `S_mat3x3f_align`,\n    decl: `struct S_mat3x3f_align {\n      x : u32,\n      y : mat3x3f,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f32(in)`,\n    offset: 16,\n    f32: true\n  },\n  mat4x3f_align16: {\n    type: `S_mat4x3f_align`,\n    decl: `struct S_mat4x3f_align {\n      x : u32,\n      y : mat4x3f,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f32(in)`,\n    offset: 16,\n    f32: true\n  },\n  mat2x4f_align16: {\n    type: `S_mat2x4f_align`,\n    decl: `struct S_mat2x4f_align {\n      x : u32,\n      y : mat2x4f,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f32(in)`,\n    offset: 16,\n    f32: true\n  },\n  mat3x4f_align16: {\n    type: `S_mat3x4f_align`,\n    decl: `struct S_mat3x4f_align {\n      x : u32,\n      y : mat3x4f,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f32(in)`,\n    offset: 16,\n    f32: true\n  },\n  mat4x4f_align16: {\n    type: `S_mat4x4f_align`,\n    decl: `struct S_mat4x4f_align {\n      x : u32,\n      y : mat4x4f,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f32(in)`,\n    offset: 16,\n    f32: true\n  },\n  mat2x2h_align4: {\n    type: `S_mat2x2h_align`,\n    decl: `struct S_mat2x2h_align {\n      x : u32,\n      y : mat2x2h,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f16(in)`,\n    offset: 4,\n    f16: true\n  },\n  mat3x2h_align4: {\n    type: `S_mat3x2h_align`,\n    decl: `struct S_mat3x2h_align {\n      x : u32,\n      y : mat3x2h,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f16(in)`,\n    offset: 4,\n    f16: true\n  },\n  mat4x2h_align4: {\n    type: `S_mat4x2h_align`,\n    decl: `struct S_mat4x2h_align {\n      x : u32,\n      y : mat4x2h,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f16(in)`,\n    offset: 4,\n    f16: true\n  },\n  mat2x3h_align8: {\n    type: `S_mat2x3h_align`,\n    decl: `struct S_mat2x3h_align {\n      x : u32,\n      y : mat2x3h,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f16(in)`,\n    offset: 8,\n    f16: true\n  },\n  mat3x3h_align8: {\n    type: `S_mat3x3h_align`,\n    decl: `struct S_mat3x3h_align {\n      x : u32,\n      y : mat2x3h,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f16(in)`,\n    offset: 8,\n    f16: true\n  },\n  mat4x3h_align8: {\n    type: `S_mat4x3h_align`,\n    decl: `struct S_mat4x3h_align {\n      x : u32,\n      y : mat4x3h,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f16(in)`,\n    offset: 8,\n    f16: true\n  },\n  mat2x4h_align8: {\n    type: `S_mat2x4h_align`,\n    decl: `struct S_mat2x4h_align {\n      x : u32,\n      y : mat2x4h,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f16(in)`,\n    offset: 8,\n    f16: true\n  },\n  mat3x4h_align8: {\n    type: `S_mat3x4h_align`,\n    decl: `struct S_mat3x4h_align {\n      x : u32,\n      y : mat3x4h,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f16(in)`,\n    offset: 8,\n    f16: true\n  },\n  mat4x4h_align8: {\n    type: `S_mat4x4h_align`,\n    decl: `struct S_mat4x4h_align {\n      x : u32,\n      y : mat4x4h,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f16(in)`,\n    offset: 8,\n    f16: true\n  },\n  mat2x2f_size: {\n    type: `S_mat2x2f_size`,\n    decl: `struct S_mat2x2f_size {\n      x : mat2x2f,\n      y : u32,\n    }`,\n    read_assign: `out = in.y`,\n    write_assign: `out.y = in`,\n    offset: 16\n  },\n  mat3x2f_size: {\n    type: `S_mat3x2f_size`,\n    decl: `struct S_mat3x2f_size {\n      x : mat3x2f,\n      y : u32,\n    }`,\n    read_assign: `out = in.y`,\n    write_assign: `out.y = in`,\n    offset: 24\n  },\n  mat4x2f_size: {\n    type: `S_mat4x2f_size`,\n    decl: `struct S_mat4x2f_size {\n      x : mat4x2f,\n      y : u32,\n    }`,\n    read_assign: `out = in.y`,\n    write_assign: `out.y = in`,\n    offset: 32\n  },\n  mat2x3f_size: {\n    type: `S_mat2x3f_size`,\n    decl: `struct S_mat2x3f_size {\n      x : mat2x3f,\n      y : u32,\n    }`,\n    read_assign: `out = in.y`,\n    write_assign: `out.y = in`,\n    offset: 32\n  },\n  mat3x3f_size: {\n    type: `S_mat3x3f_size`,\n    decl: `struct S_mat3x3f_size {\n      x : mat3x3f,\n      y : u32,\n    }`,\n    read_assign: `out = in.y`,\n    write_assign: `out.y = in`,\n    offset: 48\n  },\n  mat4x3f_size: {\n    type: `S_mat4x3f_size`,\n    decl: `struct S_mat4x3f_size {\n      x : mat4x3f,\n      y : u32,\n    }`,\n    read_assign: `out = in.y`,\n    write_assign: `out.y = in`,\n    offset: 64\n  },\n  mat2x4f_size: {\n    type: `S_mat2x4f_size`,\n    decl: `struct S_mat2x4f_size {\n      x : mat2x4f,\n      y : u32,\n    }`,\n    read_assign: `out = in.y`,\n    write_assign: `out.y = in`,\n    offset: 32\n  },\n  mat3x4f_size: {\n    type: `S_mat3x4f_size`,\n    decl: `struct S_mat3x4f_size {\n      x : mat3x4f,\n      y : u32,\n    }`,\n    read_assign: `out = in.y`,\n    write_assign: `out.y = in`,\n    offset: 48\n  },\n  mat4x4f_size: {\n    type: `S_mat4x4f_size`,\n    decl: `struct S_mat4x4f_size {\n      x : mat4x4f,\n      y : u32,\n    }`,\n    read_assign: `out = in.y`,\n    write_assign: `out.y = in`,\n    offset: 64\n  },\n  mat2x2h_size: {\n    type: `S_mat2x2h_size`,\n    decl: `struct S_mat2x2h_size {\n      x : mat2x2h,\n      y : f16,\n    }`,\n    read_assign: `out = u32(in.y)`,\n    write_assign: `out.y = f16(in)`,\n    offset: 8,\n    f16: true\n  },\n  mat3x2h_size: {\n    type: `S_mat3x2h_size`,\n    decl: `struct S_mat3x2h_size {\n      x : mat3x2h,\n      y : f16,\n    }`,\n    read_assign: `out = u32(in.y)`,\n    write_assign: `out.y = f16(in)`,\n    offset: 12,\n    f16: true\n  },\n  mat4x2h_size: {\n    type: `S_mat4x2h_size`,\n    decl: `struct S_mat4x2h_size {\n      x : mat4x2h,\n      y : f16,\n    }`,\n    read_assign: `out = u32(in.y)`,\n    write_assign: `out.y = f16(in)`,\n    offset: 16,\n    f16: true\n  },\n  mat2x3h_size: {\n    type: `S_mat2x3h_size`,\n    decl: `struct S_mat2x3h_size {\n      x : mat2x3h,\n      y : f16,\n    }`,\n    read_assign: `out = u32(in.y)`,\n    write_assign: `out.y = f16(in)`,\n    offset: 16,\n    f16: true\n  },\n  mat3x3h_size: {\n    type: `S_mat3x3h_size`,\n    decl: `struct S_mat3x3h_size {\n      x : mat3x3h,\n      y : f16,\n    }`,\n    read_assign: `out = u32(in.y)`,\n    write_assign: `out.y = f16(in)`,\n    offset: 24,\n    f16: true\n  },\n  mat4x3h_size: {\n    type: `S_mat4x3h_size`,\n    decl: `struct S_mat4x3h_size {\n      x : mat4x3h,\n      y : f16,\n    }`,\n    read_assign: `out = u32(in.y)`,\n    write_assign: `out.y = f16(in)`,\n    offset: 32,\n    f16: true\n  },\n  mat2x4h_size: {\n    type: `S_mat2x4h_size`,\n    decl: `struct S_mat2x4h_size {\n      x : mat2x4h,\n      y : f16,\n    }`,\n    read_assign: `out = u32(in.y)`,\n    write_assign: `out.y = f16(in)`,\n    offset: 16,\n    f16: true\n  },\n  mat3x4h_size: {\n    type: `S_mat3x4h_size`,\n    decl: `struct S_mat3x4h_size {\n      x : mat3x4h,\n      y : f16,\n    }`,\n    read_assign: `out = u32(in.y)`,\n    write_assign: `out.y = f16(in)`,\n    offset: 24,\n    f16: true\n  },\n  mat4x4h_size: {\n    type: `S_mat4x4h_size`,\n    decl: `struct S_mat4x4h_size {\n      x : mat4x4h,\n      y : f16,\n    }`,\n    read_assign: `out = u32(in.y)`,\n    write_assign: `out.y = f16(in)`,\n    offset: 32,\n    f16: true\n  },\n  struct_align_vec2i: {\n    type: `S_struct_align_vec2i`,\n    decl: `struct Inner {\n      x : u32,\n      y : vec2i,\n    }\n    struct S_struct_align_vec2i {\n      x : u32,\n      y : Inner,\n    }`,\n    read_assign: `out = in.y.x`,\n    write_assign: `out.y.x = in`,\n    offset: 8,\n    skip_uniform: true\n  },\n  struct_align_vec3i: {\n    type: `S_struct_align_vec3i`,\n    decl: `struct Inner {\n      x : u32,\n      y : vec3i,\n    }\n    struct S_struct_align_vec3i {\n      x : u32,\n      y : Inner,\n    }`,\n    read_assign: `out = in.y.x`,\n    write_assign: `out.y.x = in`,\n    offset: 16\n  },\n  struct_align_vec4i: {\n    type: `S_struct_align_vec4i`,\n    decl: `struct Inner {\n      x : u32,\n      y : vec4i,\n    }\n    struct S_struct_align_vec4i {\n      x : u32,\n      y : Inner,\n    }`,\n    read_assign: `out = in.y.x`,\n    write_assign: `out.y.x = in`,\n    offset: 16\n  },\n  struct_align_vec2h: {\n    type: `S_struct_align_vec2h`,\n    decl: `struct Inner {\n      x : f16,\n      y : vec2h,\n    }\n    struct S_struct_align_vec2h {\n      x : f16,\n      y : Inner,\n    }`,\n    read_assign: `out = u32(in.y.x)`,\n    write_assign: `out.y.x = f16(in)`,\n    offset: 4,\n    f16: true,\n    skip_uniform: true\n  },\n  struct_align_vec3h: {\n    type: `S_struct_align_vec3h`,\n    decl: `struct Inner {\n      x : f16,\n      y : vec3h,\n    }\n    struct S_struct_align_vec3h {\n      x : f16,\n      y : Inner,\n    }`,\n    read_assign: `out = u32(in.y.x)`,\n    write_assign: `out.y.x = f16(in)`,\n    offset: 8,\n    f16: true,\n    skip_uniform: true\n  },\n  struct_align_vec4h: {\n    type: `S_struct_align_vec4h`,\n    decl: `struct Inner {\n      x : f16,\n      y : vec4h,\n    }\n    struct S_struct_align_vec4h {\n      x : f16,\n      y : Inner,\n    }`,\n    read_assign: `out = u32(in.y.x)`,\n    write_assign: `out.y.x = f16(in)`,\n    offset: 8,\n    f16: true,\n    skip_uniform: true\n  },\n  struct_size_roundup: {\n    type: `S_struct_size_roundup`,\n    decl: `struct Inner {\n      x : vec3u,\n    }\n    struct S_struct_size_roundup {\n      x : Inner,\n      y : u32,\n    }`,\n    read_assign: `out = in.y`,\n    write_assign: `out.y = in`,\n    offset: 16\n  },\n  struct_inner_size: {\n    type: `S_struct_inner_size`,\n    decl: `struct Inner {\n      @size(112) x : u32,\n    }\n    struct S_struct_inner_size {\n      x : Inner,\n      y : u32,\n    }`,\n    read_assign: `out = in.y`,\n    write_assign: `out.y = in`,\n    offset: 112\n  },\n  struct_inner_align: {\n    type: `S_struct_inner_align`,\n    decl: `struct Inner {\n      @align(64) x : u32,\n    }\n    struct S_struct_inner_align {\n      x : u32,\n      y : Inner,\n    }`,\n    read_assign: `out = in.y.x`,\n    write_assign: `out.y.x = in`,\n    offset: 64\n  },\n  struct_inner_size_and_align: {\n    type: `S_struct_inner_size_and_align`,\n    decl: `struct Inner {\n      @align(32) @size(33) x : u32,\n    }\n    struct S_struct_inner_size_and_align {\n      x : Inner,\n      y : Inner,\n    }`,\n    read_assign: `out = in.y.x`,\n    write_assign: `out.y.x = in`,\n    offset: 64\n  },\n  struct_override_size: {\n    type: `S_struct_override_size`,\n    decl: `struct Inner {\n      @size(32) x : u32,\n    }\n    struct S_struct_override_size {\n      @size(64) x : Inner,\n      y : u32,\n    }`,\n    read_assign: `out = in.y`,\n    write_assign: `out.y = in`,\n    offset: 64\n  },\n  struct_double_align: {\n    type: `S_struct_double_align`,\n    decl: `struct Inner {\n      x : u32,\n      @align(32) y : u32,\n    }\n    struct S_struct_double_align {\n      x : u32,\n      @align(64) y : Inner,\n    }`,\n    read_assign: `out = in.y.y`,\n    write_assign: `out.y.y = in`,\n    offset: 96\n  },\n  array_vec3u_align: {\n    type: `S_array_vec3u_align`,\n    decl: `struct S_array_vec3u_align {\n      x : u32,\n      y : array<vec3u, 2>,\n    }`,\n    read_assign: `out = in.y[0][0]`,\n    write_assign: `out.y[0][0] = in`,\n    offset: 16\n  },\n  array_vec3h_align: {\n    type: `S_array_vec3h_align`,\n    decl: `struct S_array_vec3h_align {\n      x : f16,\n      y : array<vec3h, 2>,\n    }`,\n    read_assign: `out = u32(in.y[0][0])`,\n    write_assign: `out.y[0][0] = f16(in)`,\n    offset: 8,\n    f16: true,\n    skip_uniform: true\n  },\n  array_vec3u_stride: {\n    type: `S_array_vec3u_stride`,\n    decl: `struct S_array_vec3u_stride {\n      x : array<vec3u, 4>,\n    }`,\n    read_assign: `out = in.x[1][0]`,\n    write_assign: `out.x[1][0] = in`,\n    offset: 16\n  },\n  array_vec3h_stride: {\n    type: `S_array_vec3h_stride`,\n    decl: `struct S_array_vec3h_stride {\n      x : array<vec3h, 4>,\n    }`,\n    read_assign: `out = u32(in.x[1][0])`,\n    write_assign: `out.x[1][0] = f16(in)`,\n    offset: 8,\n    f16: true,\n    skip_uniform: true\n  },\n  array_stride_size: {\n    type: `array<S_stride, 4>`,\n    decl: `struct S_stride {\n      @size(16) x : u32,\n    }`,\n    read_assign: `out = in[2].x`,\n    write_assign: `out[2].x = in`,\n    offset: 32\n  },\n  array_mat2x2f_stride: {\n    type: `array<mat2x2f, 4>`,\n    read_assign: `out = u32(in[1][0][0])`,\n    write_assign: `out[1][0][0] = f32(in)`,\n    offset: 16,\n    f32: true\n  },\n  array_mat2x2h_stride: {\n    type: `array<mat2x2h, 2>`,\n    read_assign: `out = u32(in[1][0][0])`,\n    write_assign: `out[1][0][0] = f16(in)`,\n    offset: 8,\n    f16: true,\n    skip_uniform: true\n  },\n  array_mat3x2f_stride: {\n    type: `array<mat3x2f, 3>`,\n    read_assign: `out = u32(in[2][0][0])`,\n    write_assign: `out[2][0][0] = f32(in)`,\n    offset: 48,\n    f32: true,\n    skip_uniform: true\n  },\n  array_mat3x2h_stride: {\n    type: `array<mat3x2h, 2>`,\n    read_assign: `out = u32(in[1][0][0])`,\n    write_assign: `out[1][0][0] = f16(in)`,\n    offset: 12,\n    f16: true,\n    skip_uniform: true\n  },\n  array_mat4x2f_stride: {\n    type: `array<mat4x2f, 4>`,\n    read_assign: `out = u32(in[1][0][0])`,\n    write_assign: `out[1][0][0] = f32(in)`,\n    offset: 32,\n    f32: true\n  },\n  array_mat4x2h_stride: {\n    type: `array<mat4x2h, 2>`,\n    read_assign: `out = u32(in[1][0][0])`,\n    write_assign: `out[1][0][0] = f16(in)`,\n    offset: 16,\n    f16: true\n  },\n  array_mat2x3f_stride: {\n    type: `array<mat2x3f, 4>`,\n    read_assign: `out = u32(in[1][0][0])`,\n    write_assign: `out[1][0][0] = f32(in)`,\n    offset: 32,\n    f32: true\n  },\n  array_mat2x3h_stride: {\n    type: `array<mat2x3h, 2>`,\n    read_assign: `out = u32(in[1][0][0])`,\n    write_assign: `out[1][0][0] = f16(in)`,\n    offset: 16,\n    f16: true\n  },\n  array_mat3x3f_stride: {\n    type: `array<mat3x3f, 3>`,\n    read_assign: `out = u32(in[2][0][0])`,\n    write_assign: `out[2][0][0] = f32(in)`,\n    offset: 96,\n    f32: true\n  },\n  array_mat3x3h_stride: {\n    type: `array<mat3x3h, 2>`,\n    read_assign: `out = u32(in[1][0][0])`,\n    write_assign: `out[1][0][0] = f16(in)`,\n    offset: 24,\n    f16: true,\n    skip_uniform: true\n  },\n  array_mat4x3f_stride: {\n    type: `array<mat4x3f, 4>`,\n    read_assign: `out = u32(in[1][0][0])`,\n    write_assign: `out[1][0][0] = f32(in)`,\n    offset: 64,\n    f32: true\n  },\n  array_mat4x3h_stride: {\n    type: `array<mat4x3h, 2>`,\n    read_assign: `out = u32(in[1][0][0])`,\n    write_assign: `out[1][0][0] = f16(in)`,\n    offset: 32,\n    f16: true\n  },\n  array_mat2x4f_stride: {\n    type: `array<mat2x4f, 4>`,\n    read_assign: `out = u32(in[1][0][0])`,\n    write_assign: `out[1][0][0] = f32(in)`,\n    offset: 32,\n    f32: true\n  },\n  array_mat2x4h_stride: {\n    type: `array<mat2x4h, 2>`,\n    read_assign: `out = u32(in[1][0][0])`,\n    write_assign: `out[1][0][0] = f16(in)`,\n    offset: 16,\n    f16: true\n  },\n  array_mat3x4f_stride: {\n    type: `array<mat3x4f, 3>`,\n    read_assign: `out = u32(in[2][0][0])`,\n    write_assign: `out[2][0][0] = f32(in)`,\n    offset: 96,\n    f32: true\n  },\n  array_mat3x4h_stride: {\n    type: `array<mat3x4h, 2>`,\n    read_assign: `out = u32(in[1][0][0])`,\n    write_assign: `out[1][0][0] = f16(in)`,\n    offset: 24,\n    f16: true,\n    skip_uniform: true\n  },\n  array_mat4x4f_stride: {\n    type: `array<mat4x4f, 4>`,\n    read_assign: `out = u32(in[1][0][0])`,\n    write_assign: `out[1][0][0] = f32(in)`,\n    offset: 64,\n    f32: true\n  },\n  array_mat4x4h_stride: {\n    type: `array<mat4x4h, 2>`,\n    read_assign: `out = u32(in[1][0][0])`,\n    write_assign: `out[1][0][0] = f16(in)`,\n    offset: 32,\n    f16: true\n  }\n};\n\ng.test('read_layout').\ndesc('Test reading memory layouts').\nparams((u) =>\nu.\ncombine('case', keysOf(kLayoutCases)).\ncombine('aspace', ['storage', 'uniform', 'workgroup', 'function', 'private']).\nbeginSubcases()\n).\nbeforeAllSubcases((t) => {\n  const testcase = kLayoutCases[t.params.case];\n  if (testcase.f16) {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n  // Don't test atomics in workgroup due to initialization boilerplate.\n  t.skipIf(\n    testcase.type.includes('atomic') && t.params.aspace !== 'storage',\n    `Skipping atomic test for non-storage address space`\n  );\n\n  t.skipIf(\n    testcase.skip_uniform === true && t.params.aspace === 'uniform',\n    `Uniform requires 16 byte alignment`\n  );\n}).\nfn((t) => {\n  const testcase = kLayoutCases[t.params.case];\n  let code = `\n${testcase.f16 ? 'enable f16;' : ''}\n${testcase.decl ?? ''}\n\n@group(0) @binding(1)\nvar<storage, read_write> out : u32;\n`;\n\n  if (t.params.aspace === 'uniform') {\n    code += `@group(0) @binding(0)\n      var<${t.params.aspace}> in : ${testcase.type};`;\n  } else if (t.params.aspace === 'storage') {\n    // Use read_write for input data to support atomics.\n    code += `@group(0) @binding(0)\n      var<${t.params.aspace}, read_write> in : ${testcase.type};`;\n  } else {\n    code += `@group(0) @binding(0)\n      var<storage> pre_in : ${testcase.type};`;\n    if (t.params.aspace === 'workgroup') {\n      code += `\n        var<workgroup> in : ${testcase.type};`;\n    } else if (t.params.aspace === 'private') {\n      code += `\n        var<private> in : ${testcase.type};`;\n    }\n  }\n\n  code += `\n@compute @workgroup_size(1,1,1)\nfn main() {\n`;\n\n  if (\n  t.params.aspace === 'workgroup' ||\n  t.params.aspace === 'function' ||\n  t.params.aspace === 'private')\n  {\n    if (t.params.aspace === 'function') {\n      code += `var in : ${testcase.type};\\n`;\n    }\n    code += `in = pre_in;`;\n    if (t.params.aspace === 'workgroup') {\n      code += `workgroupBarrier();\\n`;\n    }\n  }\n\n  code += `\\n${testcase.read_assign};\\n}`;\n\n  let usage = GPUBufferUsage.COPY_SRC;\n  if (t.params.aspace === 'uniform') {\n    usage |= GPUBufferUsage.UNIFORM;\n  } else {\n    usage |= GPUBufferUsage.STORAGE;\n  }\n\n  // Magic number is 42 in various representations.\n  const inMagicNumber = testcase.f16 ? 0x5140 : testcase.f32 ? 0x42280000 : 42;\n  const in_buffer = t.makeBufferWithContents(\n    new Uint32Array([\n    ...iterRange(128, (x) => {\n      if (x * 4 === testcase.offset) {\n        return inMagicNumber;\n      } else {\n        return 0;\n      }\n    })]\n    ),\n    usage\n  );\n\n  const out_buffer = t.makeBufferWithContents(\n    new Uint32Array([...iterRange(1, (x) => 0)]),\n    GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  );\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code\n      }),\n      entryPoint: 'main'\n    }\n  });\n\n  const bg = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n    {\n      binding: 0,\n      resource: {\n        buffer: in_buffer\n      }\n    },\n    {\n      binding: 1,\n      resource: {\n        buffer: out_buffer\n      }\n    }]\n\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatchWorkgroups(1, 1, 1);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  t.expectGPUBufferValuesEqual(out_buffer, new Uint32Array([42]));\n});\n\ng.test('write_layout').\ndesc('Test writing memory layouts').\nparams((u) =>\nu.\ncombine('case', keysOf(kLayoutCases)).\ncombine('aspace', ['storage', 'workgroup', 'function', 'private']).\nbeginSubcases()\n).\nbeforeAllSubcases((t) => {\n  const testcase = kLayoutCases[t.params.case];\n  if (testcase.f16) {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n  // Don't test atomics in workgroup due to initialization boilerplate.\n  t.skipIf(\n    testcase.type.includes('atomic') && t.params.aspace !== 'storage',\n    `Skipping atomic test for non-storage address space`\n  );\n}).\nfn((t) => {\n  const testcase = kLayoutCases[t.params.case];\n  let code = `\n${testcase.f16 ? 'enable f16;' : ''}\n${testcase.decl ?? ''}\n\n@group(0) @binding(0)\nvar<storage> in : u32;\n`;\n\n  if (t.params.aspace === 'storage') {\n    code += `@group(0) @binding(1)\n      var<storage, read_write> out : ${testcase.type};\\n`;\n  } else {\n    code += `@group(0) @binding(1)\n      var<storage, read_write> post_out : ${testcase.type};\\n`;\n\n    if (t.params.aspace === 'workgroup') {\n      code += `var<workgroup> out : ${testcase.type};\\n`;\n    } else if (t.params.aspace === 'private') {\n      code += `var<private> out : ${testcase.type};\\n`;\n    }\n  }\n\n  code += `\n@compute @workgroup_size(1,1,1)\nfn main() {\n`;\n\n  if (t.params.aspace === 'function') {\n    code += `var out : ${testcase.type};\\n`;\n  }\n\n  code += `${testcase.write_assign};\\n`;\n  if (\n  t.params.aspace === 'workgroup' ||\n  t.params.aspace === 'function' ||\n  t.params.aspace === 'private')\n  {\n    if (t.params.aspace === 'workgroup') {\n      code += `workgroupBarrier();\\n`;\n    }\n    code += `post_out = out;`;\n  }\n\n  code += `\\n}`;\n\n  const in_buffer = t.makeBufferWithContents(\n    new Uint32Array([42]),\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE\n  );\n\n  const out_buffer = t.makeBufferWithContents(\n    new Uint32Array([...iterRange(128, (x) => 0)]),\n    GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  );\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code\n      }),\n      entryPoint: 'main'\n    }\n  });\n\n  const bg = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n    {\n      binding: 0,\n      resource: {\n        buffer: in_buffer\n      }\n    },\n    {\n      binding: 1,\n      resource: {\n        buffer: out_buffer\n      }\n    }]\n\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatchWorkgroups(1, 1, 1);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  // Magic number is 42 in various representations.\n  const outMagicNumber = testcase.f16 ? 0x5140 : testcase.f32 ? 0x42280000 : 42;\n  const expect = new Uint32Array([\n  ...iterRange(128, (x) => {\n    if (x * 4 === testcase.offset) {\n      return outMagicNumber;\n    } else {\n      return 0;\n    }\n  })]\n  );\n\n  t.expectGPUBufferValuesEqual(out_buffer, expect);\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG,iCAAiC,CAAC,SAASC,aAAa,QAAQ,yCAAyC,CACvI,SAASC,MAAM,QAAQ,qCAAqC,CAC5D,SAASC,SAAS,QAAQ,8BAA8B;AACxD,SAASC,OAAO,QAAQ,mBAAmB;;AAE3C,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACG,OAAO,CAAC;;;;;;;;;;;;;AAavC,MAAME,YAAY,GAAG;EACnBC,YAAY,EAAE;IACZC,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,eAAe;IAC5BC,YAAY,EAAE,eAAe;IAC7BC,MAAM,EAAE;EACV,CAAC;EACDC,aAAa,EAAE;IACbL,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,eAAe;IAC5BC,YAAY,EAAE,eAAe;IAC7BC,MAAM,EAAE;EACV,CAAC;EACDE,aAAa,EAAE;IACbN,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,eAAe;IAC5BC,YAAY,EAAE,eAAe;IAC7BC,MAAM,EAAE;EACV,CAAC;EACDG,cAAc,EAAE;IACdP,IAAI,EAAE,WAAW;IACjBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,aAAa;IAC1BC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACDI,YAAY,EAAE;IACZR,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,oBAAoB;IACjCC,YAAY,EAAE,oBAAoB;IAClCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE;EACP,CAAC;EACDC,YAAY,EAAE;IACZV,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,oBAAoB;IACjCC,YAAY,EAAE,oBAAoB;IAClCC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE;EACP,CAAC;EACDE,YAAY,EAAE;IACZX,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,oBAAoB;IACjCC,YAAY,EAAE,oBAAoB;IAClCC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE;EACP,CAAC;EACDG,YAAY,EAAE;IACZZ,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,oBAAoB;IACjCC,YAAY,EAAE,oBAAoB;IAClCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACDC,aAAa,EAAE;IACbd,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,oBAAoB;IACjCC,YAAY,EAAE,oBAAoB;IAClCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACDE,aAAa,EAAE;IACbf,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,oBAAoB;IACjCC,YAAY,EAAE,oBAAoB;IAClCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACDG,YAAY,EAAE;IACZhB,IAAI,EAAE,cAAc;IACpBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,YAAY;IACzBC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACDa,WAAW,EAAE;IACXjB,IAAI,EAAE,cAAc;IACpBC,IAAI,EAAE;AACV;AACA;AACA;AACA,MAAM;IACFC,WAAW,EAAE,iBAAiB;IAC9BC,YAAY,EAAE,iBAAiB;IAC/BC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE;EACP,CAAC;EACDS,MAAM,EAAE;IACNlB,IAAI,EAAE,UAAU;IAChBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,YAAY;IACzBC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACDe,aAAa,EAAE;IACbnB,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,yBAAyB;IACtCC,YAAY,EAAE,yBAAyB;IACvCC,MAAM,EAAE;EACV,CAAC;EACDgB,YAAY,EAAE;IACZpB,IAAI,EAAE,eAAe;IACrBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,YAAY;IACzBC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACDiB,cAAc,EAAE;IACdrB,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,CAAC;IACTS,GAAG,EAAE;EACP,CAAC;EACDS,cAAc,EAAE;IACdtB,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,CAAC;IACTS,GAAG,EAAE;EACP,CAAC;EACDU,cAAc,EAAE;IACdvB,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,CAAC;IACTS,GAAG,EAAE;EACP,CAAC;EACDW,eAAe,EAAE;IACfxB,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACDY,eAAe,EAAE;IACfzB,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACDa,eAAe,EAAE;IACf1B,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACDc,eAAe,EAAE;IACf3B,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACDe,eAAe,EAAE;IACf5B,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACDgB,eAAe,EAAE;IACf7B,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACDiB,cAAc,EAAE;IACd9B,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE;EACP,CAAC;EACDsB,cAAc,EAAE;IACd/B,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE;EACP,CAAC;EACDuB,cAAc,EAAE;IACdhC,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE;EACP,CAAC;EACDwB,cAAc,EAAE;IACdjC,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE;EACP,CAAC;EACDyB,cAAc,EAAE;IACdlC,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE;EACP,CAAC;EACD0B,cAAc,EAAE;IACdnC,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE;EACP,CAAC;EACD2B,cAAc,EAAE;IACdpC,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE;EACP,CAAC;EACD4B,cAAc,EAAE;IACdrC,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE;EACP,CAAC;EACD6B,cAAc,EAAE;IACdtC,IAAI,EAAE,iBAAiB;IACvBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE;EACP,CAAC;EACD8B,YAAY,EAAE;IACZvC,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,YAAY;IACzBC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACDoC,YAAY,EAAE;IACZxC,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,YAAY;IACzBC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACDqC,YAAY,EAAE;IACZzC,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,YAAY;IACzBC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACDsC,YAAY,EAAE;IACZ1C,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,YAAY;IACzBC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACDuC,YAAY,EAAE;IACZ3C,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,YAAY;IACzBC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACDwC,YAAY,EAAE;IACZ5C,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,YAAY;IACzBC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACDyC,YAAY,EAAE;IACZ7C,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,YAAY;IACzBC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACD0C,YAAY,EAAE;IACZ9C,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,YAAY;IACzBC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACD2C,YAAY,EAAE;IACZ/C,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,YAAY;IACzBC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACD4C,YAAY,EAAE;IACZhD,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,iBAAiB;IAC9BC,YAAY,EAAE,iBAAiB;IAC/BC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE;EACP,CAAC;EACDwC,YAAY,EAAE;IACZjD,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,iBAAiB;IAC9BC,YAAY,EAAE,iBAAiB;IAC/BC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE;EACP,CAAC;EACDyC,YAAY,EAAE;IACZlD,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,iBAAiB;IAC9BC,YAAY,EAAE,iBAAiB;IAC/BC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE;EACP,CAAC;EACD0C,YAAY,EAAE;IACZnD,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,iBAAiB;IAC9BC,YAAY,EAAE,iBAAiB;IAC/BC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE;EACP,CAAC;EACD2C,YAAY,EAAE;IACZpD,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,iBAAiB;IAC9BC,YAAY,EAAE,iBAAiB;IAC/BC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE;EACP,CAAC;EACD4C,YAAY,EAAE;IACZrD,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,iBAAiB;IAC9BC,YAAY,EAAE,iBAAiB;IAC/BC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE;EACP,CAAC;EACD6C,YAAY,EAAE;IACZtD,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,iBAAiB;IAC9BC,YAAY,EAAE,iBAAiB;IAC/BC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE;EACP,CAAC;EACD8C,YAAY,EAAE;IACZvD,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,iBAAiB;IAC9BC,YAAY,EAAE,iBAAiB;IAC/BC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE;EACP,CAAC;EACD+C,YAAY,EAAE;IACZxD,IAAI,EAAE,gBAAgB;IACtBC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,iBAAiB;IAC9BC,YAAY,EAAE,iBAAiB;IAC/BC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE;EACP,CAAC;EACDgD,kBAAkB,EAAE;IAClBzD,IAAI,EAAE,sBAAsB;IAC5BC,IAAI,EAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;IACFC,WAAW,EAAE,cAAc;IAC3BC,YAAY,EAAE,cAAc;IAC5BC,MAAM,EAAE,CAAC;IACTsD,YAAY,EAAE;EAChB,CAAC;EACDC,kBAAkB,EAAE;IAClB3D,IAAI,EAAE,sBAAsB;IAC5BC,IAAI,EAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;IACFC,WAAW,EAAE,cAAc;IAC3BC,YAAY,EAAE,cAAc;IAC5BC,MAAM,EAAE;EACV,CAAC;EACDwD,kBAAkB,EAAE;IAClB5D,IAAI,EAAE,sBAAsB;IAC5BC,IAAI,EAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;IACFC,WAAW,EAAE,cAAc;IAC3BC,YAAY,EAAE,cAAc;IAC5BC,MAAM,EAAE;EACV,CAAC;EACDyD,kBAAkB,EAAE;IAClB7D,IAAI,EAAE,sBAAsB;IAC5BC,IAAI,EAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;IACFC,WAAW,EAAE,mBAAmB;IAChCC,YAAY,EAAE,mBAAmB;IACjCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE,IAAI;IACTiD,YAAY,EAAE;EAChB,CAAC;EACDI,kBAAkB,EAAE;IAClB9D,IAAI,EAAE,sBAAsB;IAC5BC,IAAI,EAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;IACFC,WAAW,EAAE,mBAAmB;IAChCC,YAAY,EAAE,mBAAmB;IACjCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE,IAAI;IACTiD,YAAY,EAAE;EAChB,CAAC;EACDK,kBAAkB,EAAE;IAClB/D,IAAI,EAAE,sBAAsB;IAC5BC,IAAI,EAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;IACFC,WAAW,EAAE,mBAAmB;IAChCC,YAAY,EAAE,mBAAmB;IACjCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE,IAAI;IACTiD,YAAY,EAAE;EAChB,CAAC;EACDM,mBAAmB,EAAE;IACnBhE,IAAI,EAAE,uBAAuB;IAC7BC,IAAI,EAAE;AACV;AACA;AACA;AACA;AACA;AACA,MAAM;IACFC,WAAW,EAAE,YAAY;IACzBC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACD6D,iBAAiB,EAAE;IACjBjE,IAAI,EAAE,qBAAqB;IAC3BC,IAAI,EAAE;AACV;AACA;AACA;AACA;AACA;AACA,MAAM;IACFC,WAAW,EAAE,YAAY;IACzBC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACD8D,kBAAkB,EAAE;IAClBlE,IAAI,EAAE,sBAAsB;IAC5BC,IAAI,EAAE;AACV;AACA;AACA;AACA;AACA;AACA,MAAM;IACFC,WAAW,EAAE,cAAc;IAC3BC,YAAY,EAAE,cAAc;IAC5BC,MAAM,EAAE;EACV,CAAC;EACD+D,2BAA2B,EAAE;IAC3BnE,IAAI,EAAE,+BAA+B;IACrCC,IAAI,EAAE;AACV;AACA;AACA;AACA;AACA;AACA,MAAM;IACFC,WAAW,EAAE,cAAc;IAC3BC,YAAY,EAAE,cAAc;IAC5BC,MAAM,EAAE;EACV,CAAC;EACDgE,oBAAoB,EAAE;IACpBpE,IAAI,EAAE,wBAAwB;IAC9BC,IAAI,EAAE;AACV;AACA;AACA;AACA;AACA;AACA,MAAM;IACFC,WAAW,EAAE,YAAY;IACzBC,YAAY,EAAE,YAAY;IAC1BC,MAAM,EAAE;EACV,CAAC;EACDiE,mBAAmB,EAAE;IACnBrE,IAAI,EAAE,uBAAuB;IAC7BC,IAAI,EAAE;AACV;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;IACFC,WAAW,EAAE,cAAc;IAC3BC,YAAY,EAAE,cAAc;IAC5BC,MAAM,EAAE;EACV,CAAC;EACDkE,iBAAiB,EAAE;IACjBtE,IAAI,EAAE,qBAAqB;IAC3BC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,kBAAkB;IAC/BC,YAAY,EAAE,kBAAkB;IAChCC,MAAM,EAAE;EACV,CAAC;EACDmE,iBAAiB,EAAE;IACjBvE,IAAI,EAAE,qBAAqB;IAC3BC,IAAI,EAAE;AACV;AACA;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE,IAAI;IACTiD,YAAY,EAAE;EAChB,CAAC;EACDc,kBAAkB,EAAE;IAClBxE,IAAI,EAAE,sBAAsB;IAC5BC,IAAI,EAAE;AACV;AACA,MAAM;IACFC,WAAW,EAAE,kBAAkB;IAC/BC,YAAY,EAAE,kBAAkB;IAChCC,MAAM,EAAE;EACV,CAAC;EACDqE,kBAAkB,EAAE;IAClBzE,IAAI,EAAE,sBAAsB;IAC5BC,IAAI,EAAE;AACV;AACA,MAAM;IACFC,WAAW,EAAE,uBAAuB;IACpCC,YAAY,EAAE,uBAAuB;IACrCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE,IAAI;IACTiD,YAAY,EAAE;EAChB,CAAC;EACDgB,iBAAiB,EAAE;IACjB1E,IAAI,EAAE,oBAAoB;IAC1BC,IAAI,EAAE;AACV;AACA,MAAM;IACFC,WAAW,EAAE,eAAe;IAC5BC,YAAY,EAAE,eAAe;IAC7BC,MAAM,EAAE;EACV,CAAC;EACDuE,oBAAoB,EAAE;IACpB3E,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACD+D,oBAAoB,EAAE;IACpB5E,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,CAAC;IACTK,GAAG,EAAE,IAAI;IACTiD,YAAY,EAAE;EAChB,CAAC;EACDmB,oBAAoB,EAAE;IACpB7E,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE,IAAI;IACT6C,YAAY,EAAE;EAChB,CAAC;EACDoB,oBAAoB,EAAE;IACpB9E,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE,IAAI;IACTiD,YAAY,EAAE;EAChB,CAAC;EACDqB,oBAAoB,EAAE;IACpB/E,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACDmE,oBAAoB,EAAE;IACpBhF,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE;EACP,CAAC;EACDwE,oBAAoB,EAAE;IACpBjF,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACDqE,oBAAoB,EAAE;IACpBlF,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE;EACP,CAAC;EACD0E,oBAAoB,EAAE;IACpBnF,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACDuE,oBAAoB,EAAE;IACpBpF,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE,IAAI;IACTiD,YAAY,EAAE;EAChB,CAAC;EACD2B,oBAAoB,EAAE;IACpBrF,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACDyE,oBAAoB,EAAE;IACpBtF,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE;EACP,CAAC;EACD8E,oBAAoB,EAAE;IACpBvF,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACD2E,oBAAoB,EAAE;IACpBxF,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE;EACP,CAAC;EACDgF,oBAAoB,EAAE;IACpBzF,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACD6E,oBAAoB,EAAE;IACpB1F,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE,IAAI;IACTiD,YAAY,EAAE;EAChB,CAAC;EACDiC,oBAAoB,EAAE;IACpB3F,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVS,GAAG,EAAE;EACP,CAAC;EACD+E,oBAAoB,EAAE;IACpB5F,IAAI,EAAE,mBAAmB;IACzBE,WAAW,EAAE,wBAAwB;IACrCC,YAAY,EAAE,wBAAwB;IACtCC,MAAM,EAAE,EAAE;IACVK,GAAG,EAAE;EACP;AACF,CAAC;;AAEDZ,CAAC,CAACgG,IAAI,CAAC,aAAa,CAAC;AACrBC,IAAI,CAAC,6BAA6B,CAAC;AACnCC,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,OAAO,CAAC,MAAM,EAAEvG,MAAM,CAACI,YAAY,CAAC,CAAC;AACrCmG,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;AAC7EC,aAAa,CAAC;AACd,CAAC;AACDC,iBAAiB,CAAC,CAACC,CAAC,KAAK;EACvB,MAAMC,QAAQ,GAAGvG,YAAY,CAACsG,CAAC,CAACL,MAAM,CAACO,IAAI,CAAC;EAC5C,IAAID,QAAQ,CAAC5F,GAAG,EAAE;IAChB2F,CAAC,CAACG,0BAA0B,CAAC,YAAY,CAAC;EAC5C;EACA;EACAH,CAAC,CAACI,MAAM;IACNH,QAAQ,CAACrG,IAAI,CAACyG,QAAQ,CAAC,QAAQ,CAAC,IAAIL,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,SAAS;IACjE;EACF,CAAC;;EAEDN,CAAC,CAACI,MAAM;IACNH,QAAQ,CAAC3C,YAAY,KAAK,IAAI,IAAI0C,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,SAAS;IAC/D;EACF,CAAC;AACH,CAAC,CAAC;AACFC,EAAE,CAAC,CAACP,CAAC,KAAK;EACR,MAAMC,QAAQ,GAAGvG,YAAY,CAACsG,CAAC,CAACL,MAAM,CAACO,IAAI,CAAC;EAC5C,IAAIM,IAAI,GAAG;AACb,EAAEP,QAAQ,CAAC5F,GAAG,GAAG,aAAa,GAAG,EAAE;AACnC,EAAE4F,QAAQ,CAACpG,IAAI,IAAI,EAAE;AACrB;AACA;AACA;AACA,CAAC;;EAEC,IAAImG,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,SAAS,EAAE;IACjCE,IAAI,IAAI;AACZ,YAAYR,CAAC,CAACL,MAAM,CAACW,MAAM,UAAUL,QAAQ,CAACrG,IAAI,GAAG;EACnD,CAAC,MAAM,IAAIoG,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,SAAS,EAAE;IACxC;IACAE,IAAI,IAAI;AACZ,YAAYR,CAAC,CAACL,MAAM,CAACW,MAAM,sBAAsBL,QAAQ,CAACrG,IAAI,GAAG;EAC/D,CAAC,MAAM;IACL4G,IAAI,IAAI;AACZ,8BAA8BP,QAAQ,CAACrG,IAAI,GAAG;IAC1C,IAAIoG,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,WAAW,EAAE;MACnCE,IAAI,IAAI;AACd,8BAA8BP,QAAQ,CAACrG,IAAI,GAAG;IAC1C,CAAC,MAAM,IAAIoG,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,SAAS,EAAE;MACxCE,IAAI,IAAI;AACd,4BAA4BP,QAAQ,CAACrG,IAAI,GAAG;IACxC;EACF;;EAEA4G,IAAI,IAAI;AACV;AACA;AACA,CAAC;;EAEC;EACAR,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,WAAW;EAC/BN,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,UAAU;EAC9BN,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,SAAS;EAC7B;IACE,IAAIN,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,UAAU,EAAE;MAClCE,IAAI,IAAI,YAAYP,QAAQ,CAACrG,IAAI,KAAK;IACxC;IACA4G,IAAI,IAAI,cAAc;IACtB,IAAIR,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,WAAW,EAAE;MACnCE,IAAI,IAAI,uBAAuB;IACjC;EACF;;EAEAA,IAAI,IAAI,KAAKP,QAAQ,CAACnG,WAAW,MAAM;;EAEvC,IAAI2G,KAAK,GAAGC,cAAc,CAACC,QAAQ;EACnC,IAAIX,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,SAAS,EAAE;IACjCG,KAAK,IAAIC,cAAc,CAACE,OAAO;EACjC,CAAC,MAAM;IACLH,KAAK,IAAIC,cAAc,CAACG,OAAO;EACjC;;EAEA;EACA,MAAMC,aAAa,GAAGb,QAAQ,CAAC5F,GAAG,GAAG,MAAM,GAAG4F,QAAQ,CAACxF,GAAG,GAAG,UAAU,GAAG,EAAE;EAC5E,MAAMsG,SAAS,GAAGf,CAAC,CAACgB,sBAAsB;IACxC,IAAIC,WAAW,CAAC;IAChB,GAAG1H,SAAS,CAAC,GAAG,EAAE,CAAC2H,CAAC,KAAK;MACvB,IAAIA,CAAC,GAAG,CAAC,KAAKjB,QAAQ,CAACjG,MAAM,EAAE;QAC7B,OAAO8G,aAAa;MACtB,CAAC,MAAM;QACL,OAAO,CAAC;MACV;IACF,CAAC,CAAC;IACF,CAAC;IACDL;EACF,CAAC;;EAED,MAAMU,UAAU,GAAGnB,CAAC,CAACgB,sBAAsB;IACzC,IAAIC,WAAW,CAAC,CAAC,GAAG1H,SAAS,CAAC,CAAC,EAAE,CAAC2H,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC5CR,cAAc,CAACG,OAAO,GAAGH,cAAc,CAACC,QAAQ,GAAGD,cAAc,CAACU;EACpE,CAAC;;EAED,MAAMC,QAAQ,GAAGrB,CAAC,CAACsB,MAAM,CAACC,qBAAqB,CAAC;IAC9CC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE1B,CAAC,CAACsB,MAAM,CAACK,kBAAkB,CAAC;QAClCnB;MACF,CAAC,CAAC;MACFoB,UAAU,EAAE;IACd;EACF,CAAC,CAAC;;EAEF,MAAMC,EAAE,GAAG7B,CAAC,CAACsB,MAAM,CAACQ,eAAe,CAAC;IAClCN,MAAM,EAAEH,QAAQ,CAACU,kBAAkB,CAAC,CAAC,CAAC;IACtCC,OAAO,EAAE;IACT;MACEC,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE;QACRC,MAAM,EAAEpB;MACV;IACF,CAAC;IACD;MACEkB,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE;QACRC,MAAM,EAAEhB;MACV;IACF,CAAC;;EAEH,CAAC,CAAC;;EAEF,MAAMiB,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAEtC,CAAC,CAACsB,MAAM,EAAEtB,CAAC,CAACsB,MAAM,CAACiB,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAMtC,CAAC,CAACsB,MAAM,EAARtB,CAAC,CAACsB,MAAM,CAAAiB,oBAAA,YAARvC,CAAC,CAACsB,MAAM,CAACiB,oBAAoB,GAAE,CAAC;EACnJ,MAAMC,IAAI,GAAGJ,OAAO,CAACK,gBAAgB,CAAC,CAAC;EACvCD,IAAI,CAACE,WAAW,CAACrB,QAAQ,CAAC;EAC1BmB,IAAI,CAACG,YAAY,CAAC,CAAC,EAAEd,EAAE,CAAC;EACxBW,IAAI,CAACI,kBAAkB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAChCJ,IAAI,CAACK,GAAG,CAAC,CAAC;EACVR,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAEtC,CAAC,EAAEA,CAAC,CAAC8C,KAAK,CAACC,MAAM,EAAE,CAAC,CAACX,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAAX,UAAA,CAAAC,YAAA,WAAMtC,CAAC,EAADA,CAAC,CAAC8C,KAAK,CAAAC,MAAA,GAAQ,CAACX,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC,SAAjChD,CAAC,CAAC8C,KAAK,CAACC,MAAM,CAAC,CAACX,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;;EAEpHhD,CAAC,CAACiD,0BAA0B,CAAC9B,UAAU,EAAE,IAAIF,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACjE,CAAC,CAAC;;AAEFxH,CAAC,CAACgG,IAAI,CAAC,cAAc,CAAC;AACtBC,IAAI,CAAC,6BAA6B,CAAC;AACnCC,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,OAAO,CAAC,MAAM,EAAEvG,MAAM,CAACI,YAAY,CAAC,CAAC;AACrCmG,OAAO,CAAC,QAAQ,EAAE,CAAC,SAAS,EAAE,WAAW,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC;AAClEC,aAAa,CAAC;AACd,CAAC;AACDC,iBAAiB,CAAC,CAACC,CAAC,KAAK;EACvB,MAAMC,QAAQ,GAAGvG,YAAY,CAACsG,CAAC,CAACL,MAAM,CAACO,IAAI,CAAC;EAC5C,IAAID,QAAQ,CAAC5F,GAAG,EAAE;IAChB2F,CAAC,CAACG,0BAA0B,CAAC,YAAY,CAAC;EAC5C;EACA;EACAH,CAAC,CAACI,MAAM;IACNH,QAAQ,CAACrG,IAAI,CAACyG,QAAQ,CAAC,QAAQ,CAAC,IAAIL,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,SAAS;IACjE;EACF,CAAC;AACH,CAAC,CAAC;AACFC,EAAE,CAAC,CAACP,CAAC,KAAK;EACR,MAAMC,QAAQ,GAAGvG,YAAY,CAACsG,CAAC,CAACL,MAAM,CAACO,IAAI,CAAC;EAC5C,IAAIM,IAAI,GAAG;AACb,EAAEP,QAAQ,CAAC5F,GAAG,GAAG,aAAa,GAAG,EAAE;AACnC,EAAE4F,QAAQ,CAACpG,IAAI,IAAI,EAAE;AACrB;AACA;AACA;AACA,CAAC;;EAEC,IAAImG,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,SAAS,EAAE;IACjCE,IAAI,IAAI;AACZ,uCAAuCP,QAAQ,CAACrG,IAAI,KAAK;EACvD,CAAC,MAAM;IACL4G,IAAI,IAAI;AACZ,4CAA4CP,QAAQ,CAACrG,IAAI,KAAK;;IAE1D,IAAIoG,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,WAAW,EAAE;MACnCE,IAAI,IAAI,wBAAwBP,QAAQ,CAACrG,IAAI,KAAK;IACpD,CAAC,MAAM,IAAIoG,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,SAAS,EAAE;MACxCE,IAAI,IAAI,sBAAsBP,QAAQ,CAACrG,IAAI,KAAK;IAClD;EACF;;EAEA4G,IAAI,IAAI;AACV;AACA;AACA,CAAC;;EAEC,IAAIR,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,UAAU,EAAE;IAClCE,IAAI,IAAI,aAAaP,QAAQ,CAACrG,IAAI,KAAK;EACzC;;EAEA4G,IAAI,IAAI,GAAGP,QAAQ,CAAClG,YAAY,KAAK;EACrC;EACAiG,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,WAAW;EAC/BN,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,UAAU;EAC9BN,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,SAAS;EAC7B;IACE,IAAIN,CAAC,CAACL,MAAM,CAACW,MAAM,KAAK,WAAW,EAAE;MACnCE,IAAI,IAAI,uBAAuB;IACjC;IACAA,IAAI,IAAI,iBAAiB;EAC3B;;EAEAA,IAAI,IAAI,KAAK;;EAEb,MAAMO,SAAS,GAAGf,CAAC,CAACgB,sBAAsB;IACxC,IAAIC,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;IACrBP,cAAc,CAACC,QAAQ,GAAGD,cAAc,CAACG;EAC3C,CAAC;;EAED,MAAMM,UAAU,GAAGnB,CAAC,CAACgB,sBAAsB;IACzC,IAAIC,WAAW,CAAC,CAAC,GAAG1H,SAAS,CAAC,GAAG,EAAE,CAAC2H,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9CR,cAAc,CAACG,OAAO,GAAGH,cAAc,CAACC,QAAQ,GAAGD,cAAc,CAACU;EACpE,CAAC;;EAED,MAAMC,QAAQ,GAAGrB,CAAC,CAACsB,MAAM,CAACC,qBAAqB,CAAC;IAC9CC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACPC,MAAM,EAAE1B,CAAC,CAACsB,MAAM,CAACK,kBAAkB,CAAC;QAClCnB;MACF,CAAC,CAAC;MACFoB,UAAU,EAAE;IACd;EACF,CAAC,CAAC;;EAEF,MAAMC,EAAE,GAAG7B,CAAC,CAACsB,MAAM,CAACQ,eAAe,CAAC;IAClCN,MAAM,EAAEH,QAAQ,CAACU,kBAAkB,CAAC,CAAC,CAAC;IACtCC,OAAO,EAAE;IACT;MACEC,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE;QACRC,MAAM,EAAEpB;MACV;IACF,CAAC;IACD;MACEkB,OAAO,EAAE,CAAC;MACVC,QAAQ,EAAE;QACRC,MAAM,EAAEhB;MACV;IACF,CAAC;;EAEH,CAAC,CAAC;;EAEF,MAAMiB,OAAO,GAAGC,UAAU,CAACC,YAAY,CAAC,sBAAsB,EAAEtC,CAAC,CAACsB,MAAM,EAAEtB,CAAC,CAACsB,MAAM,CAACiB,oBAAoB,EAAE,EAAE,EAAE,MAAAF,UAAA,CAAAC,YAAA,yBAAMtC,CAAC,CAACsB,MAAM,EAARtB,CAAC,CAACsB,MAAM,CAAAiB,oBAAA,YAARvC,CAAC,CAACsB,MAAM,CAACiB,oBAAoB,GAAE,CAAC;EACnJ,MAAMC,IAAI,GAAGJ,OAAO,CAACK,gBAAgB,CAAC,CAAC;EACvCD,IAAI,CAACE,WAAW,CAACrB,QAAQ,CAAC;EAC1BmB,IAAI,CAACG,YAAY,CAAC,CAAC,EAAEd,EAAE,CAAC;EACxBW,IAAI,CAACI,kBAAkB,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EAChCJ,IAAI,CAACK,GAAG,CAAC,CAAC;EACVR,UAAU,CAACC,YAAY,CAAC,QAAQ,EAAEtC,CAAC,EAAEA,CAAC,CAAC8C,KAAK,CAACC,MAAM,EAAE,CAAC,CAACX,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,MAAAX,UAAA,CAAAC,YAAA,WAAMtC,CAAC,EAADA,CAAC,CAAC8C,KAAK,CAAAC,MAAA,GAAQ,CAACX,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC,SAAjChD,CAAC,CAAC8C,KAAK,CAACC,MAAM,CAAC,CAACX,OAAO,CAACY,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;;EAEpH;EACA,MAAME,cAAc,GAAGjD,QAAQ,CAAC5F,GAAG,GAAG,MAAM,GAAG4F,QAAQ,CAACxF,GAAG,GAAG,UAAU,GAAG,EAAE;EAC7E,MAAM0I,MAAM,GAAG,IAAIlC,WAAW,CAAC;EAC/B,GAAG1H,SAAS,CAAC,GAAG,EAAE,CAAC2H,CAAC,KAAK;IACvB,IAAIA,CAAC,GAAG,CAAC,KAAKjB,QAAQ,CAACjG,MAAM,EAAE;MAC7B,OAAOkJ,cAAc;IACvB,CAAC,MAAM;MACL,OAAO,CAAC;IACV;EACF,CAAC,CAAC;EACF,CAAC;;EAEDlD,CAAC,CAACiD,0BAA0B,CAAC9B,UAAU,EAAEgC,MAAM,CAAC;AAClD,CAAC,CAAC","ignoreList":[]}