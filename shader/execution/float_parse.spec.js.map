{"version":3,"file":"float_parse.spec.js","names":["description","makeTestGroup","keysOf","iterRange","GPUTest","g","runShaderTest","t","wgsl","expected","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","outputBuffer","makeBufferWithContents","Float32Array","length","_i","GPUBufferUsage","STORAGE","COPY_SRC","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expectGPUBufferValuesEqual","kTestFloats","small_pos_zero_exp","src","result","small_pos_non_zero_exp","pos_exp_neg_result","no_exp","large_number_small_exp","test","desc","params","u","combine","fn","data","value"],"sources":["../../../../src/webgpu/shader/execution/float_parse.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution Tests for float parsing cases\n`;import { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { keysOf } from '../../../common/util/data_tables.js';\nimport { iterRange } from '../../../common/util/util.js';\nimport { GPUTest } from '../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/**\n * Run a shader and check that the buffer output matches expectations.\n *\n * @param t The test object\n * @param wgsl The shader source\n * @param expected The array of expected values after running the shader\n */\nfunction runShaderTest(t, wgsl, expected) {\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({ code: wgsl }),\n      entryPoint: 'main'\n    }\n  });\n\n  // Allocate a buffer and fill it with 0xdeadbeef words.\n  const outputBuffer = t.makeBufferWithContents(\n    new Float32Array([...iterRange(expected.length, (_i) => 0xdeadbeef)]),\n    GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n  );\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [{ binding: 0, resource: { buffer: outputBuffer } }]\n  });\n\n  // Run the shader.\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatchWorkgroups(1);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  // Check that only the non-padding bytes were modified.\n  t.expectGPUBufferValuesEqual(outputBuffer, expected);\n}\n\nconst kTestFloats = {\n  small_pos_zero_exp: {\n    src:\n    '0.' +\n    '00000000000000000000000000000000000000000000000000' + //  50\n    '00000000000000000000000000000000000000000000000000' + // 100\n    '00000000000000000000000000000000000000000000000000' + // 150\n    '00000000000000000000000000000000000000000000000000' + // 200\n    '00000000000000000000000000000000000000000000000000' + // 250\n    '00000000000000000000000000000000000000000000000000' + // 300\n    '00000000000000000000000000000000000000000000000000' + // 350\n    '1e+0',\n    result: 0.0\n  },\n  small_pos_non_zero_exp: {\n    src:\n    '0.' +\n    '00000000000000000000000000000000000000000000000000' + //  50\n    '00000000000000000000000000000000000000000000000000' + // 100\n    '00000000000000000000000000000000000000000000000000' + // 150\n    '00000000000000000000000000000000000000000000000000' + // 200\n    '00000000000000000000000000000000000000000000000000' + // 250\n    '00000000000000000000000000000000000000000000000000' + // 300\n    '00000000000000000000000000000000000000000000000000' + // 350\n    '1e+10',\n    result: 0.0\n  },\n  pos_exp_neg_result: {\n    src:\n    '0.' +\n    '00000000000000000000000000000000000000000000000000' + //  50\n    '00000000000000000000000000000000000000000000000000' + // 100\n    '00000000000000000000000000000000000000000000000000' + // 150\n    '00000000000000000000000000000000000000000000000000' + // 200\n    '00000000000000000000000000000000000000000000000000' + // 250\n    '00000000000000000000000000000000000000000000000000' + // 300\n    '00000000000000000000000000000000000000000000000000' + // 350\n    '1e+300',\n    result: 1e-51\n  },\n  no_exp: {\n    src:\n    '0.' +\n    '00000000000000000000000000000000000000000000000000' + //  50\n    '00000000000000000000000000000000000000000000000000' + // 100\n    '00000000000000000000000000000000000000000000000000' + // 150\n    '00000000000000000000000000000000000000000000000000' + // 200\n    '00000000000000000000000000000000000000000000000000' + // 250\n    '00000000000000000000000000000000000000000000000000' + // 300\n    '00000000000000000000000000000000000000000000000000' + // 350\n    '1',\n    result: 0.0\n  },\n  large_number_small_exp: {\n    src:\n    '1' +\n    '00000000000000000000000000000000000000000000000000' + //  50\n    '00000000000000000000000000000000000000000000000000' + // 100\n    '.0e-350',\n    result: 1e-251\n  }\n};\n\ng.test('valid').\ndesc(`Test that floats are parsed correctly`).\nparams((u) => u.combine('value', keysOf(kTestFloats))).\nfn((t) => {\n  const data = kTestFloats[t.params.value];\n  const wgsl = `\n      struct S {\n        val: f32,\n      }\n      @group(0) @binding(0) var<storage, read_write> buffer : S;\n\n      @compute @workgroup_size(1)\n      fn main() {\n        buffer = S(${data.src});\n      }\n    `;\n  runShaderTest(t, wgsl, new Float32Array([data.result]));\n});"],"mappings":"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","ignoreList":[]}