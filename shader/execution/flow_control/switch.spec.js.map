{"version":3,"file":"switch.spec.js","names":["description","makeTestGroup","GPUTest","runFlowControlTest","g","test","desc","params","u","combine","fn","t","f","expect_order","value","expect_not_reached"],"sources":["../../../../../src/webgpu/shader/execution/flow_control/switch.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nFlow control tests for switch statements.\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nimport { runFlowControlTest } from './harness.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('switch').\ndesc('Test that flow control executes the correct switch case block').\nparams((u) => u.combine('preventValueOptimizations', [true, false])).\nfn((t) => {\n  runFlowControlTest(\n    t,\n    (f) => `\n  ${f.expect_order(0)}\n  switch (${f.value(1)}) {\n    case 0: {\n      ${f.expect_not_reached()}\n      break;\n    }\n    case 1: {\n      ${f.expect_order(1)}\n      break;\n    }\n    case 2: {\n      ${f.expect_not_reached()}\n      break;\n    }\n    default: {\n      ${f.expect_not_reached()}\n      break;\n    }\n  }\n  ${f.expect_order(2)}\n`\n  );\n});\n\ng.test('switch_multiple_case').\ndesc(\n  'Test that flow control executes the correct switch case block with multiple cases per block'\n).\nparams((u) => u.combine('preventValueOptimizations', [true, false])).\nfn((t) => {\n  runFlowControlTest(\n    t,\n    (f) => `\n  ${f.expect_order(0)}\n  switch (${f.value(2)}) {\n    case 0, 1: {\n      ${f.expect_not_reached()}\n      break;\n    }\n    case 2, 3: {\n      ${f.expect_order(1)}\n      break;\n    }\n    default: {\n      ${f.expect_not_reached()}\n      break;\n    }\n  }\n  ${f.expect_order(2)}\n`\n  );\n});\n\ng.test('switch_multiple_case_default').\ndesc(\n  'Test that flow control executes the correct switch case block with multiple cases per block (combined with default)'\n).\nparams((u) => u.combine('preventValueOptimizations', [true, false])).\nfn((t) => {\n  runFlowControlTest(\n    t,\n    (f) => `\n  ${f.expect_order(0)}\n  switch (${f.value(2)}) {\n    case 0, 1: {\n      ${f.expect_not_reached()}\n      break;\n    }\n    case 2, 3, default: {\n      ${f.expect_order(1)}\n      break;\n    }\n  }\n  ${f.expect_order(2)}\n  switch (${f.value(1)}) {\n    case 0, 1: {\n      ${f.expect_order(3)}\n      break;\n    }\n    case 2, 3, default: {\n      ${f.expect_not_reached()}\n      break;\n    }\n  }\n  ${f.expect_order(4)}\n`\n  );\n});\n\ng.test('switch_default').\ndesc('Test that flow control executes the switch default block').\nparams((u) => u.combine('preventValueOptimizations', [true, false])).\nfn((t) => {\n  runFlowControlTest(\n    t,\n    (f) => `\n${f.expect_order(0)}\nswitch (${f.value(4)}) {\n  case 0: {\n    ${f.expect_not_reached()}\n    break;\n  }\n  case 1: {\n    ${f.expect_not_reached()}\n    break;\n  }\n  case 2: {\n    ${f.expect_not_reached()}\n    break;\n  }\n  default: {\n    ${f.expect_order(1)}\n    break;\n  }\n}\n${f.expect_order(2)}\n`\n  );\n});\n\ng.test('switch_default_only').\ndesc('Test that flow control executes the switch default block, which is the only case').\nparams((u) => u.combine('preventValueOptimizations', [true, false])).\nfn((t) => {\n  runFlowControlTest(\n    t,\n    (f) => `\n${f.expect_order(0)}\nswitch (${f.value(4)}) {\ndefault: {\n  ${f.expect_order(1)}\n  break;\n}\n}\n${f.expect_order(2)}\n`\n  );\n});\n\ng.test('switch_inside_loop_with_continue').\ndesc('Test that flow control executes correct for a switch calling continue inside a loop').\nparams((u) => u.combine('preventValueOptimizations', [true, false])).\nfn((t) => {\n  runFlowControlTest(\n    t,\n    (f) => `\n${f.expect_order(0)}\nvar i = ${f.value(0)};\nloop {\n  switch (i) {\n    case 1: {\n      ${f.expect_order(4)}\n      continue;\n    }\n    default: {\n      ${f.expect_order(1)}\n      break;\n    }\n  }\n  ${f.expect_order(2)}\n\n  continuing {\n    ${f.expect_order(3, 5)}\n    i++;\n    break if i >= 2;\n  }\n}\n${f.expect_order(6)}\n`\n  );\n});"],"mappings":"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","ignoreList":[]}