{"version":3,"file":"increment_decrement.spec.js","names":["description","makeTestGroup","GPUTest","kValue","g","runStatementTest","t","fmt","values","wgsl_main","extras","wgsl","global_decl","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","maxOutputValues","outputBuffer","createBufferTracked","size","usage","GPUBufferUsage","STORAGE","COPY_SRC","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expectGPUBufferValuesEqual","test","desc","fn","Int32Array","i32","negative","min","positive","max","Uint32Array","u32"],"sources":["../../../../../src/webgpu/shader/execution/statement/increment_decrement.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nIncrement and decrement statement tests.\n`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\n\nimport { GPUTest } from '../../../gpu_test.js';\nimport { kValue } from '../../../util/constants.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/**\n * Builds, runs then checks the output of a statement shader test.\n *\n * @param t The test object\n * @param builder The shader builder function that takes a\n * StatementTestBuilder as the single argument, and returns either a WGSL\n * string which is embedded into the WGSL entrypoint function, or a structure\n * with entrypoint-scoped WGSL code and extra module-scope WGSL code.\n */\nexport function runStatementTest(\nt,\nfmt,\nvalues,\nwgsl_main,\nextras = {})\n{\n  const wgsl = `\nstruct Outputs {\n  data  : array<${fmt}>,\n};\nvar<private> count: u32 = 0;\n\n@group(0) @binding(1) var<storage, read_write> outputs : Outputs;\n\nfn push_output(value : ${fmt}) {\n  outputs.data[count] = value;\n  count += 1;\n}\n\n${extras.global_decl ?? ''}\n\n@compute @workgroup_size(1)\nfn main() {\n  _ = &outputs;\n  ${wgsl_main}\n}\n`;\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({ code: wgsl }),\n      entryPoint: 'main'\n    }\n  });\n\n  const maxOutputValues = 1000;\n  const outputBuffer = t.createBufferTracked({\n    size: 4 * (1 + maxOutputValues),\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n  });\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [{ binding: 1, resource: { buffer: outputBuffer } }]\n  });\n\n  // Run the shader.\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatchWorkgroups(1);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  t.expectGPUBufferValuesEqual(outputBuffer, values);\n}\n\ng.test('scalar_i32_increment').\ndesc('Tests increment of scalar i32 values').\nfn((t) => {\n  runStatementTest(\n    t,\n    'i32',\n    new Int32Array([-9, 11, kValue.i32.negative.min + 1, kValue.i32.positive.max, 1]),\n    `\n    var a: i32 = -10;\n    var b: i32 = 10;\n    var c: i32 = ${kValue.i32.negative.min};\n    var d: i32 = ${kValue.i32.positive.max - 1};\n    var e: i32 = 0;\n\n    a++;\n    b++;\n    c++;\n    d++;\n    e++;\n\n    push_output(a);\n    push_output(b);\n    push_output(c);\n    push_output(d);\n    push_output(e);\n`\n  );\n});\n\ng.test('scalar_i32_increment_overflow').\ndesc('Tests increment of scalar i32 values which overflows').\nfn((t) => {\n  runStatementTest(\n    t,\n    'i32',\n    new Int32Array([kValue.i32.negative.min]),\n    `\n    var a: i32 = ${kValue.i32.positive.max};\n    a++;\n    push_output(a);\n`\n  );\n});\n\ng.test('scalar_u32_increment').\ndesc('Tests increment of scalar u32 values').\nfn((t) => {\n  runStatementTest(\n    t,\n    'u32',\n    new Uint32Array([1, 11, kValue.u32.max]),\n    `\n    var a: u32 = 0;\n    var b: u32 = 10;\n    var c: u32 = ${kValue.u32.max - 1};\n\n    a++;\n    b++;\n    c++;\n\n    push_output(a);\n    push_output(b);\n    push_output(c);\n`\n  );\n});\n\ng.test('scalar_u32_increment_overflow').\ndesc('Tests increment of scalar u32 values which overflows').\nfn((t) => {\n  runStatementTest(\n    t,\n    'u32',\n    new Uint32Array([0]),\n    `\n    var a: u32 = ${kValue.u32.max};\n    a++;\n    push_output(a);\n`\n  );\n});\n\ng.test('scalar_i32_decrement').\ndesc('Tests decrement of scalar i32 values').\nfn((t) => {\n  runStatementTest(\n    t,\n    'i32',\n    new Int32Array([-11, 9, kValue.i32.negative.min, kValue.i32.positive.max - 1, -1]),\n    `\n    var a: i32 = -10;\n    var b: i32 = 10;\n    var c: i32 = ${kValue.i32.negative.min + 1};\n    var d: i32 = ${kValue.i32.positive.max};\n    var e: i32 = 0;\n\n    a--;\n    b--;\n    c--;\n    d--;\n    e--;\n\n    push_output(a);\n    push_output(b);\n    push_output(c);\n    push_output(d);\n    push_output(e);\n`\n  );\n});\n\ng.test('scalar_i32_decrement_underflow').\ndesc('Tests decrement of scalar i32 values which underflow').\nfn((t) => {\n  runStatementTest(\n    t,\n    'i32',\n    new Int32Array([kValue.i32.positive.max]),\n    `\n    var a: i32 = ${kValue.i32.negative.min};\n    a--;\n    push_output(a);\n`\n  );\n});\n\ng.test('scalar_u32_decrement').\ndesc('Tests decrement of scalar u32 values').\nfn((t) => {\n  runStatementTest(\n    t,\n    'u32',\n    new Uint32Array([0, 9, kValue.u32.max - 1]),\n    `\n    var a: u32 = 1;\n    var b: u32 = 10;\n    var c: u32 = ${kValue.u32.max};\n\n    a--;\n    b--;\n    c--;\n\n    push_output(a);\n    push_output(b);\n    push_output(c);\n`\n  );\n});\n\ng.test('scalar_u32_decrement_underflow').\ndesc('Tests decrement of scalar u32 values which underflow').\nfn((t) => {\n  runStatementTest(\n    t,\n    'u32',\n    new Uint32Array([kValue.u32.max]),\n    `\n    var a: u32 = 0;\n    a--;\n    push_output(a);\n`\n  );\n});\n\ng.test('vec2_element_increment').\ndesc('Tests increment of ve2 values').\nfn((t) => {\n  runStatementTest(\n    t,\n    'i32',\n    new Int32Array([-9, 11]),\n    `\n    var a = vec2(-10, 10);\n\n    a.x++;\n    a.g++;\n\n    push_output(a.x);\n    push_output(a.y);\n`\n  );\n});\n\ng.test('vec3_element_increment').\ndesc('Tests increment of vec3 values').\nfn((t) => {\n  runStatementTest(\n    t,\n    'i32',\n    new Int32Array([-9, 11, kValue.i32.negative.min + 1]),\n    `\n    var a = vec3(-10, 10, ${kValue.i32.negative.min});\n\n    a.x++;\n    a.g++;\n    a.z++;\n\n    push_output(a.x);\n    push_output(a.y);\n    push_output(a.z);\n`\n  );\n});\n\ng.test('vec4_element_increment').\ndesc('Tests increment of vec4 values').\nfn((t) => {\n  runStatementTest(\n    t,\n    'i32',\n    new Int32Array([-9, 11, kValue.i32.negative.min + 1, kValue.i32.positive.max]),\n    `\n    var a: vec4<i32> = vec4(-10, 10, ${kValue.i32.negative.min}, ${kValue.i32.positive.max - 1});\n\n    a.x++;\n    a.g++;\n    a.z++;\n    a.a++;\n\n    push_output(a.x);\n    push_output(a.y);\n    push_output(a.z);\n    push_output(a.w);\n`\n  );\n});\n\ng.test('vec2_element_decrement').\ndesc('Tests decrement of vec2 values').\nfn((t) => {\n  runStatementTest(\n    t,\n    'i32',\n    new Int32Array([-11, 9]),\n    `\n    var a = vec2(-10, 10);\n\n    a.x--;\n    a.g--;\n\n    push_output(a.x);\n    push_output(a.y);\n`\n  );\n});\n\ng.test('vec3_element_decrement').\ndesc('Tests decrement of vec3 values').\nfn((t) => {\n  runStatementTest(\n    t,\n    'i32',\n    new Int32Array([-11, 9, kValue.i32.negative.min]),\n    `\n    var a = vec3(-10, 10, ${kValue.i32.negative.min + 1});\n\n    a.x--;\n    a.g--;\n    a.z--;\n\n    push_output(a.x);\n    push_output(a.y);\n    push_output(a.z);\n`\n  );\n});\n\ng.test('vec4_element_decrement').\ndesc('Tests decrement of vec4 values').\nfn((t) => {\n  runStatementTest(\n    t,\n    'i32',\n    new Int32Array([-11, 9, kValue.i32.negative.min, kValue.i32.positive.max - 1]),\n    `\n    var a: vec4<i32> = vec4(-10, 10, ${kValue.i32.negative.min + 1}, ${kValue.i32.positive.max});\n\n    a.x--;\n    a.g--;\n    a.z--;\n    a.a--;\n\n    push_output(a.x);\n    push_output(a.y);\n    push_output(a.z);\n    push_output(a.w);\n`\n  );\n});\n\ng.test('frexp_exp_increment').\ndesc('Tests increment can be used on a frexp field').\nfn((t) => {\n  runStatementTest(\n    t,\n    'i32',\n    new Int32Array([2]),\n    `\n    var a = frexp(1.23);\n    a.exp++;\n    push_output(a.exp);\n`\n  );\n});\n\ng.test('single_eval_increment').\ndesc('Tests the left-hand-side reference of an increment is computed only once.').\nfn((t) => {\n  runStatementTest(\n    t,\n    'i32',\n    new Int32Array([999, 0, 1, 2, 11, 21, 31]),\n    `\n    var a: array<i32,3> = array(10, 20, 30);\n\n    push_output(999);\n    a[bump()]++;\n    a[bump()]++;\n    a[bump()]++;\n    push_output(a[0]);\n    push_output(a[1]);\n    push_output(a[2]);\n`,\n    {\n      global_decl: `\n  var<private> index_counter: i32 = 0;\n  fn bump() -> i32 {\n    let result = index_counter;\n    push_output(result);\n    index_counter = index_counter + 1;\n    return result;\n  }\n  `\n    }\n  );\n});\n\ng.test('single_eval_decrement').\ndesc('Tests the left-hand-side reference of a decrement is computed only once.').\nfn((t) => {\n  runStatementTest(\n    t,\n    'i32',\n    new Int32Array([999, 0, 1, 2, 9, 19, 29]),\n    `\n    var a: array<i32,3> = array(10, 20, 30);\n\n    push_output(999);\n    a[bump()]--;\n    a[bump()]--;\n    a[bump()]--;\n    push_output(a[0]);\n    push_output(a[1]);\n    push_output(a[2]);\n`,\n    {\n      global_decl: `\n  var<private> index_counter: i32 = 0;\n  fn bump() -> i32 {\n    let result = index_counter;\n    push_output(result);\n    index_counter = index_counter + 1;\n    return result;\n  }\n  `\n    }\n  );\n});"],"mappings":"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","ignoreList":[]}