{"version":3,"file":"components.spec.js","names":["description","makeTestGroup","GPUTest","Type","VectorValue","f32","allInputSources","basicExpressionBuilder","run","g","indices","n","out","width","generate","swizzle","push","i","next","j","test","specURL","desc","params","u","combine","beginSubcases","expand","beforeAllSubcases","t","elementType","selectDeviceOrSkipTestCase","fn","vectorType","vec","elementValues","elements","create","result","length","type","value","map","components","join","ops","input","expected","inputSource"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/access/vector/components.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution Tests for vector component selection expressions\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { Type, VectorValue, f32 } from '../../../../../util/conversion.js';\nimport { allInputSources, basicExpressionBuilder, run } from '../../expression.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/** @returns the full permutation of component indices used to component select a vector of width 'n' */\nfunction indices(n) {\n  const out = [];\n  for (let width = 1; width < n; width++) {\n    let generate = (swizzle) => {\n      out.push(swizzle);\n    };\n    for (let i = 0; i < width; i++) {\n      const next = generate;\n      generate = (swizzle) => {\n        for (let j = 0; j < width; j++) {\n          next([...swizzle, j]);\n        }\n      };\n    }\n    generate([]);\n  }\n  return out;\n}\n\ng.test('concrete_scalar').\nspecURL('https://www.w3.org/TR/WGSL/#vector-access-expr').\ndesc(`Test vector component selection of concrete vectors`).\nparams((u) =>\nu.\ncombine('inputSource', allInputSources).\ncombine('elementType', ['i32', 'u32', 'f32', 'f16', 'bool']).\ncombine('width', [2, 3, 4]).\ncombine('components', ['rgba', 'xyzw']).\nbeginSubcases().\nexpand('indices', (u) => indices(u.width))\n).\nbeforeAllSubcases((t) => {\n  if (t.params.elementType === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn(async (t) => {\n  const elementType = Type[t.params.elementType];\n  const vectorType = Type.vec(t.params.width, elementType);\n  const elementValues =\n  t.params.elementType === 'bool' ? (i) => i & 1 : (i) => (i + 1) * 10;\n  const elements = [];\n  for (let i = 0; i < t.params.width; i++) {\n    elements.push(elementType.create(elementValues(i)));\n  }\n  const result = (() => {\n    if (t.params.indices.length === 1) {\n      return { type: elementType, value: elementType.create(elementValues(0)) };\n    } else {\n      const vec = Type.vec(t.params.indices.length, elementType);\n      return { type: vec, value: vec.create(t.params.indices.map((i) => elementValues(i))) };\n    }\n  })();\n\n  const components = t.params.indices.map((i) => t.params.components[i]).join('');\n  await run(\n    t,\n    basicExpressionBuilder((ops) => `${ops[0]}.${components}`),\n    [vectorType],\n    result.type,\n    t.params,\n    [{ input: [new VectorValue(elements)], expected: result.value }]\n  );\n});\n\ng.test('abstract_scalar').\nspecURL('https://www.w3.org/TR/WGSL/#vector-access-expr').\ndesc(`Test vector component selection of abstract numeric vectors`).\nparams((u) =>\nu.\ncombine('elementType', ['abstract-int', 'abstract-float']).\ncombine('width', [2, 3, 4]).\ncombine('components', ['rgba', 'xyzw']).\nbeginSubcases().\nexpand('indices', (u) => indices(u.width))\n).\nfn(async (t) => {\n  const elementType = Type[t.params.elementType];\n  const vectorType = Type.vec(t.params.width, elementType);\n  const elementValues = (i) => (i + 1) * 0x100000000;\n  const elements = [];\n  for (let i = 0; i < t.params.width; i++) {\n    elements.push(elementType.create(elementValues(i)));\n  }\n  const result = (() => {\n    if (t.params.indices.length === 1) {\n      return { type: Type.f32, value: f32(elementValues(0) / 0x100000000) };\n    } else {\n      const vec = Type.vec(t.params.indices.length, Type.f32);\n      return {\n        type: vec,\n        value: vec.create(t.params.indices.map((i) => elementValues(i) / 0x100000000))\n      };\n    }\n  })();\n\n  const components = t.params.indices.map((i) => t.params.components[i]).join('');\n  await run(\n    t,\n    basicExpressionBuilder((ops) => `${ops[0]}.${components} / 0x100000000`),\n    [vectorType],\n    result.type,\n    { inputSource: 'const' },\n    [{ input: [new VectorValue(elements)], expected: result.value }]\n  );\n});"],"mappings":"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","ignoreList":[]}