{"version":3,"file":"af_matrix_vector_multiplication.cache.js","names":["FP","sparseMatrixF64Range","sparseVectorF64Range","selectNCases","makeCaseCache","mat_vec_cases","flatMap","cols","map","rows","abstract","generateMatrixVectorToVectorCases","f32","multiplicationMatrixVectorInterval","reduce","a","b","vec_mat_cases","generateVectorMatrixToVectorCases","multiplicationVectorMatrixInterval","d"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/af_matrix_vector_multiplication.cache.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { FP } from '../../../../util/floating_point.js';import { sparseMatrixF64Range, sparseVectorF64Range } from '../../../../util/math.js';import { selectNCases } from '../case.js';\nimport { makeCaseCache } from '../case_cache.js';\n\n// Cases: matCxR_vecC\nconst mat_vec_cases = [2, 3, 4].\nflatMap((cols) =>\n[2, 3, 4].map((rows) => ({\n  [`mat${cols}x${rows}_vec${cols}`]: () => {\n    return selectNCases(\n      'binary/af_matrix_vector_multiplication_mat_vec',\n      50,\n      FP.abstract.generateMatrixVectorToVectorCases(\n        sparseMatrixF64Range(cols, rows),\n        sparseVectorF64Range(cols),\n        'finite',\n        // Matrix-vector multiplication has an inherited accuracy, so abstract is only expected to be as accurate as f32\n        FP.f32.multiplicationMatrixVectorInterval\n      )\n    );\n  }\n}))\n).\nreduce((a, b) => ({ ...a, ...b }), {});\n\n// Cases: vecR_matCxR\nconst vec_mat_cases = [2, 3, 4].\nflatMap((rows) =>\n[2, 3, 4].map((cols) => ({\n  [`vec${rows}_mat${cols}x${rows}`]: () => {\n    return selectNCases(\n      'binary/af_matrix_vector_multiplication_vec_mat',\n      50,\n      FP.abstract.generateVectorMatrixToVectorCases(\n        sparseVectorF64Range(rows),\n        sparseMatrixF64Range(cols, rows),\n        'finite',\n        // Vector-matrix multiplication has an inherited accuracy, so abstract is only expected to be as accurate as f32\n        FP.f32.multiplicationVectorMatrixInterval\n      )\n    );\n  }\n}))\n).\nreduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('binary/af_matrix_vector_multiplication', {\n  ...mat_vec_cases,\n  ...vec_mat_cases\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,SAASA,EAAE,QAAQ,oCAAoC,CAAC,SAASC,oBAAoB,EAAEC,oBAAoB,QAAQ,0BAA0B,CAAC,SAASC,YAAY,QAAQ,YAAY,CAC1L,SAASC,aAAa,QAAQ,kBAAkB;AAEhD;AACA,MAAMC,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC/BC,OAAO,CAAC,CAACC,IAAI;AACb,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAC,CAACC,IAAI,MAAM;EACvB,CAAC,MAAMF,IAAI,IAAIE,IAAI,OAAOF,IAAI,EAAE,GAAG,MAAM;IACvC,OAAOJ,YAAY;MACjB,gDAAgD;MAChD,EAAE;MACFH,EAAE,CAACU,QAAQ,CAACC,iCAAiC;QAC3CV,oBAAoB,CAACM,IAAI,EAAEE,IAAI,CAAC;QAChCP,oBAAoB,CAACK,IAAI,CAAC;QAC1B,QAAQ;QACR;QACAP,EAAE,CAACY,GAAG,CAACC;MACT;IACF,CAAC;EACH;AACF,CAAC,CAAC;AACF,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM,EAAE,GAAGD,CAAC,EAAE,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEtC;AACA,MAAMC,aAAa,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC/BX,OAAO,CAAC,CAACG,IAAI;AACb,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAACD,GAAG,CAAC,CAACD,IAAI,MAAM;EACvB,CAAC,MAAME,IAAI,OAAOF,IAAI,IAAIE,IAAI,EAAE,GAAG,MAAM;IACvC,OAAON,YAAY;MACjB,gDAAgD;MAChD,EAAE;MACFH,EAAE,CAACU,QAAQ,CAACQ,iCAAiC;QAC3ChB,oBAAoB,CAACO,IAAI,CAAC;QAC1BR,oBAAoB,CAACM,IAAI,EAAEE,IAAI,CAAC;QAChC,QAAQ;QACR;QACAT,EAAE,CAACY,GAAG,CAACO;MACT;IACF,CAAC;EACH;AACF,CAAC,CAAC;AACF,CAAC;AACDL,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM,EAAE,GAAGD,CAAC,EAAE,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEtC,OAAO,MAAMI,CAAC,GAAGhB,aAAa,CAAC,wCAAwC,EAAE;EACvE,GAAGC,aAAa;EAChB,GAAGY;AACL,CAAC,CAAC","ignoreList":[]}