{"version":3,"file":"af_comparison.cache.js","names":["anyOf","abstractFloat","bool","flushSubnormalNumberF64","vectorF64Range","makeCaseCache","makeCase","lhs","rhs","truthFunc","af_lhs","af_rhs","lhs_options","Set","rhs_options","expected","forEach","l","r","result","includes","push","input","d","equals","value","map","v","not_equals","less_than","less_equals","greater_than","greater_equals"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/af_comparison.cache.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { anyOf } from '../../../../util/compare.js';import { abstractFloat, bool } from '../../../../util/conversion.js';import { flushSubnormalNumberF64, vectorF64Range } from '../../../../util/math.js';\n\nimport { makeCaseCache } from '../case_cache.js';\n\n/**\n * @returns a test case for the provided left hand & right hand values and truth function.\n * Handles quantization and subnormals.\n */\nfunction makeCase(\nlhs,\nrhs,\ntruthFunc)\n{\n  // Subnormal float values may be flushed at any time.\n  // https://www.w3.org/TR/WGSL/#floating-point-evaluation\n  const af_lhs = abstractFloat(lhs);\n  const af_rhs = abstractFloat(rhs);\n  const lhs_options = new Set([af_lhs, abstractFloat(flushSubnormalNumberF64(lhs))]);\n  const rhs_options = new Set([af_rhs, abstractFloat(flushSubnormalNumberF64(rhs))]);\n  const expected = [];\n  lhs_options.forEach((l) => {\n    rhs_options.forEach((r) => {\n      const result = bool(truthFunc(l, r));\n      if (!expected.includes(result)) {\n        expected.push(result);\n      }\n    });\n  });\n\n  return { input: [af_lhs, af_rhs], expected: anyOf(...expected) };\n}\n\nexport const d = makeCaseCache('binary/af_logical', {\n  equals: () => {\n    const truthFunc = (lhs, rhs) => {\n      return lhs.value === rhs.value;\n    };\n\n    return vectorF64Range(2).map((v) => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  not_equals: () => {\n    const truthFunc = (lhs, rhs) => {\n      return lhs.value !== rhs.value;\n    };\n\n    return vectorF64Range(2).map((v) => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  less_than: () => {\n    const truthFunc = (lhs, rhs) => {\n      return lhs.value < rhs.value;\n    };\n\n    return vectorF64Range(2).map((v) => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  less_equals: () => {\n    const truthFunc = (lhs, rhs) => {\n      return lhs.value <= rhs.value;\n    };\n\n    return vectorF64Range(2).map((v) => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  greater_than: () => {\n    const truthFunc = (lhs, rhs) => {\n      return lhs.value > rhs.value;\n    };\n\n    return vectorF64Range(2).map((v) => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  },\n  greater_equals: () => {\n    const truthFunc = (lhs, rhs) => {\n      return lhs.value >= rhs.value;\n    };\n\n    return vectorF64Range(2).map((v) => {\n      return makeCase(v[0], v[1], truthFunc);\n    });\n  }\n});"],"mappings":"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","ignoreList":[]}