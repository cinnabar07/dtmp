{"version":3,"file":"bitwise_shift.spec.js","names":["description","makeTestGroup","assert","GPUTest","Type","abstractInt","u32","allInputSources","onlyConstInputSource","run","abstractIntBinary","binary","compoundBinary","g","isValidConstShiftLeft","e1","e2","bitwidth","type","size","signed","value","must_be_zero_msb","mask","BigInt","must_match_msb","isValidConstShiftRight","generateShiftLeftConcreteCases","isConst","cases","expected","push","input","create","generateShiftLeftAbstractCases","generateShiftRightConcreteCases","generateShiftRightAbstractCases","makeShiftLeftAbstractCases","test","specURL","desc","params","u","combine","undefined","fn","t","makeShiftLeftConcreteCases","isUnsigned","B","add_unsigned_overflow_cases","add_signed_overflow_cases","builder","bind","inputSource","makeShiftRightAbstractCases","makeShiftRightConcreteCases"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/bitwise_shift.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution Tests for the bitwise shift binary expression operations\n`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { assert } from '../../../../../common/util/util.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { Type, abstractInt, u32 } from '../../../../util/conversion.js';\n\nimport { allInputSources, onlyConstInputSource, run } from '../expression.js';\n\nimport { abstractIntBinary, binary, compoundBinary } from './binary.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// Returns true if e1 << e2 is valid for const evaluation\nfunction isValidConstShiftLeft(e1, e2) {\n  // Shift by 0 is always valid\n  if (e2 === 0) {\n    return true;\n  }\n\n  // Cannot shift by bitwidth or greater.\n  const bitwidth = e1.type.size * 8;\n  if (e2 >= bitwidth) {\n    return false;\n  }\n\n  if (!e1.type.signed) {\n    // AbstractInt should never enter this branch, so value should always be a number\n    assert(typeof e1.value === 'number');\n    // If T is an unsigned integer type, and any of the e2 most significant bits of e1 are 1, then invalid.\n    const must_be_zero_msb = e2;\n    const mask = ~0 << bitwidth - must_be_zero_msb;\n    if ((e1.value & mask) !== 0) {\n      return false;\n    }\n  } else {\n    // If T is a signed integer type, and the e2+1 most significant bits of e1 do\n    // not have the same bit value, then error.\n    // Working in bigint, because all i32 and AbstractInt values are representable in it.\n    const value = BigInt(e1.value);\n    const must_match_msb = BigInt(e2) + 1n;\n    const mask = ~0n << BigInt(bitwidth) - must_match_msb;\n    if ((value & mask) !== 0n && (value & mask) !== mask) {\n      return false;\n    }\n  }\n  return true;\n}\n\n// Returns true if e1 >> e2 is valid for const evaluation\nfunction isValidConstShiftRight(e1, e2) {\n  // Shift by 0 is always valid\n  if (e2 === 0) {\n    return true;\n  }\n\n  const bitwidth = e1.type.size * 8;\n  // Cannot shift by bitwidth or greater\n  if (e2 >= bitwidth) {\n    return false;\n  }\n  return true;\n}\n\n// Returns all cases of shifting e1 left by [0,63]. If `isConst` is true, cases that are\n// invalid for const eval are not returned.\nfunction generateShiftLeftConcreteCases(e1, isConst) {\n  assert(typeof e1.value === 'number');\n\n  const bitwidth = e1.type.size * 8;\n  const cases = [];\n  for (let e2 = 0; e2 < 64; ++e2) {\n    if (isConst && !isValidConstShiftLeft(e1, e2)) {\n      continue;\n    }\n    const expected = e1.value << e2 % bitwidth;\n    cases.push({ input: [e1, u32(e2)], expected: e1.type.create(expected) });\n  }\n  return cases;\n}\n\n// Returns all cases of shifting e1 left by [0,63]\nfunction generateShiftLeftAbstractCases(e1) {\n  assert(typeof e1.value === 'bigint');\n\n  const cases = [];\n  for (let e2 = 0; e2 < 64; ++e2) {\n    if (!isValidConstShiftLeft(e1, e2)) {\n      continue;\n    }\n    const expected = e1.value << BigInt(e2);\n    cases.push({ input: [e1, u32(e2)], expected: abstractInt(expected) });\n  }\n  return cases;\n}\n\n// Returns all cases of shifting e1 right by [0,63]. If `is_const` is true, cases that are\n// invalid for const eval are not returned.\nfunction generateShiftRightConcreteCases(e1, isConst) {\n  assert(typeof e1.value === 'number');\n  const cases = [];\n  for (let e2 = 0; e2 < 64; ++e2) {\n    if (isConst && !isValidConstShiftRight(e1, e2)) {\n      continue;\n    }\n\n    let expected = 0;\n    if (!e1.type.signed) {\n      // zero-fill right shift\n      expected = e1.value >>> e2;\n    } else {\n      // arithmetic right shift\n      expected = e1.value >> e2;\n    }\n    cases.push({ input: [e1, u32(e2)], expected: e1.type.create(expected) });\n  }\n  return cases;\n}\n\n// Returns all cases of shifting e1 right by [0,63], plus a selection of those from [65, 1025]\nfunction generateShiftRightAbstractCases(e1) {\n  assert(typeof e1.value === 'bigint');\n  const cases = [];\n  // Shifting within 64 bits\n  for (let e2 = 0; e2 < 64; ++e2) {\n    const expected = e1.value >> BigInt(e2);\n    cases.push({ input: [e1, u32(e2)], expected: abstractInt(expected) });\n  }\n  // Always filled values\n  for (let e2 = 64; e2 < 1025; e2 *= 2) {\n    const expected = e1.value < 0n ? -1n : 0n;\n    cases.push({ input: [e1, u32(e2)], expected: abstractInt(expected) });\n  }\n  return cases;\n}\n\nfunction makeShiftLeftAbstractCases() {\n  const cases = [\n  {\n    input: /*  */[\n    abstractInt(0b0000000000000000000000000000000000000000000000000000000000000001n),\n    u32(1)],\n\n    expected:\n    /**/abstractInt(0b0000000000000000000000000000000000000000000000000000000000000010n)\n  },\n  {\n    input: /*  */[\n    abstractInt(0b0000000000000000000000000000000000000000000000000000000000000011n),\n    u32(1)],\n\n    expected:\n    /**/abstractInt(0b0000000000000000000000000000000000000000000000000000000000000110n)\n  },\n  // 0 should always return 0\n  { input: [abstractInt(0n), u32(0)], expected: abstractInt(0n) },\n  { input: [abstractInt(0n), u32(1)], expected: abstractInt(0n) },\n  { input: [abstractInt(0n), u32(16)], expected: abstractInt(0n) },\n  { input: [abstractInt(0n), u32(32)], expected: abstractInt(0n) },\n  { input: [abstractInt(0n), u32(64)], expected: abstractInt(0n) },\n  { input: [abstractInt(0n), u32(65)], expected: abstractInt(0n) },\n  { input: [abstractInt(0n), u32(128)], expected: abstractInt(0n) },\n  { input: [abstractInt(0n), u32(256)], expected: abstractInt(0n) }];\n\n\n  cases.push(\n    ...generateShiftLeftAbstractCases(\n      abstractInt(0b0000000000000000000000000000000000000000000000000000000000000000n)\n    )\n  );\n  cases.push(\n    ...generateShiftLeftAbstractCases(\n      abstractInt(0b0000000000000000000000000000000000000000000000000000000000000001n)\n    )\n  );\n  cases.push(\n    ...generateShiftLeftAbstractCases(\n      abstractInt(0b0000000000000000000000000000000000000000000000000000000000000010n)\n    )\n  );\n  cases.push(\n    ...generateShiftLeftAbstractCases(\n      abstractInt(0b0000000000000000000000000000000000000000000000000000000000000011n)\n    )\n  );\n  cases.push(\n    ...generateShiftLeftAbstractCases(\n      abstractInt(0b1000000000000000000000000000000000000000000000000000000000000000n)\n    )\n  );\n  cases.push(\n    ...generateShiftLeftAbstractCases(\n      abstractInt(0b0100000000000000000000000000000000000000000000000000000000000000n)\n    )\n  );\n  cases.push(\n    ...generateShiftLeftAbstractCases(\n      abstractInt(0b1100000000000000000000000000000000000000000000000000000000000000n)\n    )\n  );\n  cases.push(\n    ...generateShiftLeftAbstractCases(\n      abstractInt(0b0001000000100000100001000101010100010000001000001000010001010101n)\n    )\n  );\n  cases.push(\n    ...generateShiftLeftAbstractCases(\n      abstractInt(0b1110111111011111011110111010101011101111110111110111101110101010n)\n    )\n  );\n  return cases;\n}\n\ng.test('shift_left_abstract').\nspecURL('https://www.w3.org/TR/WGSL/#bit-expr').\ndesc(\n  `\ne1 << e2\n\nShift left (shifted value is abstract)\n`\n).\nparams((u) =>\nu.\ncombine('inputSource', onlyConstInputSource).\ncombine('vectorize', [undefined, 2, 3, 4])\n).\nfn(async (t) => {\n  const cases = makeShiftLeftAbstractCases();\n  await run(\n    t,\n    abstractIntBinary('<<'),\n    [Type.abstractInt, Type.u32],\n    Type.abstractInt,\n    t.params,\n    cases\n  );\n});\n\nfunction makeShiftLeftConcreteCases(\nisConst,\nisUnsigned,\nB)\n{\n  const cases = [\n  {\n    input: /*  */[B(0b00000000000000000000000000000001), u32(1)],\n    expected: /**/B(0b00000000000000000000000000000010)\n  },\n  {\n    input: /*  */[B(0b00000000000000000000000000000011), u32(1)],\n    expected: /**/B(0b00000000000000000000000000000110)\n  }];\n\n\n  const add_unsigned_overflow_cases = !isConst || isUnsigned;\n  const add_signed_overflow_cases = !isConst || !isUnsigned;\n\n  if (add_unsigned_overflow_cases) {\n    // Cases that are fine for unsigned values, but would overflow (sign change) signed\n    // values when const evaluated.\n    cases.push(\n      ...[\n      {\n        input: [/*  */B(0b01000000000000000000000000000000), u32(1)],\n        expected: /**/B(0b10000000000000000000000000000000)\n      },\n      {\n        input: [/*  */B(0b01111111111111111111111111111111), u32(1)],\n        expected: /**/B(0b11111111111111111111111111111110)\n      },\n      {\n        input: [/*  */B(0b00000000000000000000000000000001), u32(31)],\n        expected: /**/B(0b10000000000000000000000000000000)\n      }]\n\n    );\n  }\n  if (add_signed_overflow_cases) {\n    // Cases that are fine for signed values (no sign change), but would overflow\n    // unsigned values when const evaluated.\n    cases.push(\n      ...[\n      {\n        input: [/*  */B(0b11000000000000000000000000000000), u32(1)],\n        expected: /**/B(0b10000000000000000000000000000000)\n      },\n      {\n        input: [/*  */B(0b11111111111111111111111111111111), u32(1)],\n        expected: /**/B(0b11111111111111111111111111111110)\n      },\n      {\n        input: [/*  */B(0b11111111111111111111111111111111), u32(31)],\n        expected: /**/B(0b10000000000000000000000000000000)\n      }]\n\n    );\n  }\n\n  // Generate cases that shift input value by [0,63] (invalid const eval cases are not returned).\n  cases.push(...generateShiftLeftConcreteCases(B(0b00000000000000000000000000000000), isConst));\n  cases.push(...generateShiftLeftConcreteCases(B(0b00000000000000000000000000000001), isConst));\n  cases.push(...generateShiftLeftConcreteCases(B(0b00000000000000000000000000000010), isConst));\n  cases.push(...generateShiftLeftConcreteCases(B(0b00000000000000000000000000000011), isConst));\n  cases.push(...generateShiftLeftConcreteCases(B(0b10000000000000000000000000000000), isConst));\n  cases.push(...generateShiftLeftConcreteCases(B(0b01000000000000000000000000000000), isConst));\n  cases.push(...generateShiftLeftConcreteCases(B(0b11000000000000000000000000000000), isConst));\n  cases.push(...generateShiftLeftConcreteCases(B(0b00010000001000001000010001010101), isConst));\n  cases.push(...generateShiftLeftConcreteCases(B(0b11101111110111110111101110101010), isConst));\n  return cases;\n}\n\ng.test('shift_left_concrete').\nspecURL('https://www.w3.org/TR/WGSL/#bit-expr').\ndesc(\n  `\ne1 << e2\n\nShift left (shifted value is concrete)\n`\n).\nparams((u) =>\nu.\ncombine('type', ['i32', 'u32']).\ncombine('inputSource', allInputSources).\ncombine('vectorize', [undefined, 2, 3, 4])\n).\nfn(async (t) => {\n  const type = Type[t.params.type];\n  const builder = type.create.bind(type);\n\n  const cases = makeShiftLeftConcreteCases(\n    t.params.inputSource === 'const',\n    !type.signed,\n    builder\n  );\n  await run(t, binary('<<'), [type, Type.u32], type, t.params, cases);\n});\n\ng.test('shift_left_concrete_compound').\nspecURL('https://www.w3.org/TR/WGSL/#bit-expr').\ndesc(\n  `\ne1 <<= e2\n\nShift left (shifted value is concrete)\n`\n).\nparams((u) =>\nu.\ncombine('type', ['i32', 'u32']).\ncombine('inputSource', allInputSources).\ncombine('vectorize', [undefined, 2, 3, 4])\n).\nfn(async (t) => {\n  const type = Type[t.params.type];\n  const builder = type.create.bind(type);\n\n  const cases = makeShiftLeftConcreteCases(\n    t.params.inputSource === 'const',\n    !type.signed,\n    builder\n  );\n  await run(t, compoundBinary('<<='), [type, Type.u32], type, t.params, cases);\n});\n\nfunction makeShiftRightAbstractCases() {\n  const cases = [\n  {\n    input: /*  */[\n    abstractInt(0b0000000000000000000000000000000000000000000000000000000000000001n),\n    u32(1)],\n\n    expected:\n    /**/abstractInt(0b0000000000000000000000000000000000000000000000000000000000000000n)\n  },\n  {\n    input: /*  */[\n    abstractInt(0b0000000000000000000000000000000000000000000000000000000000000011n),\n    u32(1)],\n\n    expected:\n    /**/abstractInt(0b0000000000000000000000000000000000000000000000000000000000000001n)\n  },\n  {\n    input: /*  */[\n    abstractInt(0b0100000000000000000000000000000000000000000000000000000000000000n),\n    u32(1)],\n\n    expected:\n    /**/abstractInt(0b0010000000000000000000000000000000000000000000000000000000000000n)\n  },\n  {\n    input: /*  */[\n    abstractInt(0b0110000000000000000000000000000000000000000000000000000000000000n),\n    u32(1)],\n\n    expected:\n    /**/abstractInt(0b0011000000000000000000000000000000000000000000000000000000000000n)\n  },\n  // Sign extension if msb is 1\n  {\n    input: /*  */[\n    abstractInt(0b1000000000000000000000000000000000000000000000000000000000000000n),\n    u32(1)],\n\n    expected:\n    /**/abstractInt(0b1100000000000000000000000000000000000000000000000000000000000000n)\n  },\n  {\n    input: /*  */[\n    abstractInt(0b1100000000000000000000000000000000000000000000000000000000000000n),\n    u32(1)],\n\n    expected:\n    /**/abstractInt(0b1110000000000000000000000000000000000000000000000000000000000000n)\n  }];\n\n\n  cases.push(\n    ...generateShiftRightAbstractCases(\n      abstractInt(0b0000000000000000000000000000000000000000000000000000000000000000n)\n    )\n  );\n  cases.push(\n    ...generateShiftRightAbstractCases(\n      abstractInt(0b0000000000000000000000000000000000000000000000000000000000000001n)\n    )\n  );\n  cases.push(\n    ...generateShiftRightAbstractCases(\n      abstractInt(0b0000000000000000000000000000000000000000000000000000000000000010n)\n    )\n  );\n  cases.push(\n    ...generateShiftRightAbstractCases(\n      abstractInt(0b0000000000000000000000000000000000000000000000000000000000000011n)\n    )\n  );\n  cases.push(\n    ...generateShiftRightAbstractCases(\n      abstractInt(0b1000000000000000000000000000000000000000000000000000000000000000n)\n    )\n  );\n  cases.push(\n    ...generateShiftRightAbstractCases(\n      abstractInt(0b0100000000000000000000000000000000000000000000000000000000000000n)\n    )\n  );\n  cases.push(\n    ...generateShiftRightAbstractCases(\n      abstractInt(0b1100000000000000000000000000000000000000000000000000000000000000n)\n    )\n  );\n  cases.push(\n    ...generateShiftRightAbstractCases(\n      abstractInt(0b0001000000100000100001000101010100010000001000001000010001010101n)\n    )\n  );\n  cases.push(\n    ...generateShiftRightAbstractCases(\n      abstractInt(0b1110111111011111011110111010101011101111110111110111101110101010n)\n    )\n  );\n  return cases;\n}\n\ng.test('shift_right_abstract').\nspecURL('https://www.w3.org/TR/WGSL/#bit-expr').\ndesc(\n  `\n  e1 >> e2\n\n  Shift right (shifted value is abstract)\n  `\n).\nparams((u) =>\nu.\ncombine('inputSource', onlyConstInputSource).\ncombine('vectorize', [undefined, 2, 3, 4])\n).\nfn(async (t) => {\n  const cases = makeShiftRightAbstractCases();\n  await run(\n    t,\n    abstractIntBinary('>>'),\n    [Type.abstractInt, Type.u32],\n    Type.abstractInt,\n    t.params,\n    cases\n  );\n});\n\nfunction makeShiftRightConcreteCases(\nisConst,\nisUnsigned,\nB)\n{\n  const cases = [\n  {\n    input: /*  */[B(0b00000000000000000000000000000001), u32(1)],\n    expected: /**/B(0b00000000000000000000000000000000)\n  },\n  {\n    input: /*  */[B(0b00000000000000000000000000000011), u32(1)],\n    expected: /**/B(0b00000000000000000000000000000001)\n  },\n  {\n    input: /*  */[B(0b01000000000000000000000000000000), u32(1)],\n    expected: /**/B(0b00100000000000000000000000000000)\n  },\n  {\n    input: /*  */[B(0b01100000000000000000000000000000), u32(1)],\n    expected: /**/B(0b00110000000000000000000000000000)\n  }];\n\n  if (isUnsigned) {\n    // No sign extension\n    cases.push(\n      ...[\n      {\n        input: /*  */[B(0b10000000000000000000000000000000), u32(1)],\n        expected: /**/B(0b01000000000000000000000000000000)\n      },\n      {\n        input: /*  */[B(0b11000000000000000000000000000000), u32(1)],\n        expected: /**/B(0b01100000000000000000000000000000)\n      }]\n\n    );\n  } else {\n    cases.push(\n      // Sign extension if msb is 1\n      ...[\n      {\n        input: /*  */[B(0b10000000000000000000000000000000), u32(1)],\n        expected: /**/B(0b11000000000000000000000000000000)\n      },\n      {\n        input: /*  */[B(0b11000000000000000000000000000000), u32(1)],\n        expected: /**/B(0b11100000000000000000000000000000)\n      }]\n\n    );\n  }\n\n  // Generate cases that shift input value by [0,63] (invalid const eval cases are not returned).\n  cases.push(...generateShiftRightConcreteCases(B(0b00000000000000000000000000000000), isConst));\n  cases.push(...generateShiftRightConcreteCases(B(0b00000000000000000000000000000001), isConst));\n  cases.push(...generateShiftRightConcreteCases(B(0b00000000000000000000000000000010), isConst));\n  cases.push(...generateShiftRightConcreteCases(B(0b00000000000000000000000000000011), isConst));\n  cases.push(...generateShiftRightConcreteCases(B(0b10000000000000000000000000000000), isConst));\n  cases.push(...generateShiftRightConcreteCases(B(0b01000000000000000000000000000000), isConst));\n  cases.push(...generateShiftRightConcreteCases(B(0b11000000000000000000000000000000), isConst));\n  cases.push(...generateShiftRightConcreteCases(B(0b00010000001000001000010001010101), isConst));\n  cases.push(...generateShiftRightConcreteCases(B(0b11101111110111110111101110101010), isConst));\n  return cases;\n}\n\ng.test('shift_right_concrete').\nspecURL('https://www.w3.org/TR/WGSL/#bit-expr').\ndesc(\n  `\ne1 >> e2\n\nShift right (shifted value is concrete)\n`\n).\nparams((u) =>\nu.\ncombine('type', ['i32', 'u32']).\ncombine('inputSource', allInputSources).\ncombine('vectorize', [undefined, 2, 3, 4])\n).\nfn(async (t) => {\n  const type = Type[t.params.type];\n  const builder = type.create.bind(type);\n\n  const cases = makeShiftRightConcreteCases(\n    t.params.inputSource === 'const',\n    !type.signed,\n    builder\n  );\n  await run(t, binary('>>'), [type, Type.u32], type, t.params, cases);\n});\n\ng.test('shift_right_concrete_compound').\nspecURL('https://www.w3.org/TR/WGSL/#bit-expr').\ndesc(\n  `\ne1 >>= e2\n\nShift right (shifted value is concrete)\n`\n).\nparams((u) =>\nu.\ncombine('type', ['i32', 'u32']).\ncombine('inputSource', allInputSources).\ncombine('vectorize', [undefined, 2, 3, 4])\n).\nfn(async (t) => {\n  const type = Type[t.params.type];\n  const builder = type.create.bind(type);\n\n  const cases = makeShiftRightConcreteCases(\n    t.params.inputSource === 'const',\n    !type.signed,\n    builder\n  );\n  await run(t, compoundBinary('>>='), [type, Type.u32], type, t.params, cases);\n});"],"mappings":"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","ignoreList":[]}