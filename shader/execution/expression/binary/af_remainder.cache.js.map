{"version":3,"file":"af_remainder.cache.js","names":["FP","sparseScalarF64Range","sparseVectorF64Range","makeCaseCache","remainderVectorScalarInterval","v","s","abstract","toVector","map","e","f32","remainderInterval","remainderScalarVectorInterval","scalar_cases","scalar","generateScalarPairToIntervalCases","vector_scalar_cases","dim","generateVectorScalarToVectorCases","reduce","a","b","scalar_vector_cases","generateScalarVectorToVectorCases","d"],"sources":["../../../../../../src/webgpu/shader/execution/expression/binary/af_remainder.cache.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { FP } from '../../../../util/floating_point.js';import { sparseScalarF64Range, sparseVectorF64Range } from '../../../../util/math.js';import { makeCaseCache } from '../case_cache.js';\n\nconst remainderVectorScalarInterval = (v, s) => {\n  // remainder has an inherited accuracy, so abstract is only expected to be as accurate as f32\n  return FP.abstract.toVector(v.map((e) => FP.f32.remainderInterval(e, s)));\n};\n\nconst remainderScalarVectorInterval = (s, v) => {\n  // remainder has an inherited accuracy, so abstract is only expected to be as accurate as f32\n  return FP.abstract.toVector(v.map((e) => FP.f32.remainderInterval(s, e)));\n};\n\nconst scalar_cases = {\n  ['scalar']: () => {\n    return FP.abstract.generateScalarPairToIntervalCases(\n      sparseScalarF64Range(),\n      sparseScalarF64Range(),\n      'finite',\n      // remainder has an inherited accuracy, so abstract is only expected to be as accurate as f32\n      FP.f32.remainderInterval\n    );\n  }\n};\n\nconst vector_scalar_cases = [2, 3, 4].\nmap((dim) => ({\n  [`vec${dim}_scalar`]: () => {\n    return FP.abstract.generateVectorScalarToVectorCases(\n      sparseVectorF64Range(dim),\n      sparseScalarF64Range(),\n      'finite',\n      remainderVectorScalarInterval\n    );\n  }\n})).\nreduce((a, b) => ({ ...a, ...b }), {});\n\nconst scalar_vector_cases = [2, 3, 4].\nmap((dim) => ({\n  [`scalar_vec${dim}`]: () => {\n    return FP.abstract.generateScalarVectorToVectorCases(\n      sparseScalarF64Range(),\n      sparseVectorF64Range(dim),\n      'finite',\n      remainderScalarVectorInterval\n    );\n  }\n})).\nreduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('binary/af_remainder', {\n  ...scalar_cases,\n  ...vector_scalar_cases,\n  ...scalar_vector_cases\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,SAASA,EAAE,QAAQ,oCAAoC,CAAC,SAASC,oBAAoB,EAAEC,oBAAoB,QAAQ,0BAA0B,CAAC,SAASC,aAAa,QAAQ,kBAAkB,CAEjM,MAAMC,6BAA6B,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;EAC9C;EACA,OAAON,EAAE,CAACO,QAAQ,CAACC,QAAQ,CAACH,CAAC,CAACI,GAAG,CAAC,CAACC,CAAC,KAAKV,EAAE,CAACW,GAAG,CAACC,iBAAiB,CAACF,CAAC,EAAEJ,CAAC,CAAC,CAAC,CAAC;AAC3E,CAAC;;AAED,MAAMO,6BAA6B,GAAGA,CAACP,CAAC,EAAED,CAAC,KAAK;EAC9C;EACA,OAAOL,EAAE,CAACO,QAAQ,CAACC,QAAQ,CAACH,CAAC,CAACI,GAAG,CAAC,CAACC,CAAC,KAAKV,EAAE,CAACW,GAAG,CAACC,iBAAiB,CAACN,CAAC,EAAEI,CAAC,CAAC,CAAC,CAAC;AAC3E,CAAC;;AAED,MAAMI,YAAY,GAAG;EACnB,CAAC,QAAQ,GAAGC,CAAA,KAAM;IAChB,OAAOf,EAAE,CAACO,QAAQ,CAACS,iCAAiC;MAClDf,oBAAoB,CAAC,CAAC;MACtBA,oBAAoB,CAAC,CAAC;MACtB,QAAQ;MACR;MACAD,EAAE,CAACW,GAAG,CAACC;IACT,CAAC;EACH;AACF,CAAC;;AAED,MAAMK,mBAAmB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACrCR,GAAG,CAAC,CAACS,GAAG,MAAM;EACZ,CAAC,MAAMA,GAAG,SAAS,GAAG,MAAM;IAC1B,OAAOlB,EAAE,CAACO,QAAQ,CAACY,iCAAiC;MAClDjB,oBAAoB,CAACgB,GAAG,CAAC;MACzBjB,oBAAoB,CAAC,CAAC;MACtB,QAAQ;MACRG;IACF,CAAC;EACH;AACF,CAAC,CAAC,CAAC;AACHgB,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM,EAAE,GAAGD,CAAC,EAAE,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEtC,MAAMC,mBAAmB,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AACrCd,GAAG,CAAC,CAACS,GAAG,MAAM;EACZ,CAAC,aAAaA,GAAG,EAAE,GAAG,MAAM;IAC1B,OAAOlB,EAAE,CAACO,QAAQ,CAACiB,iCAAiC;MAClDvB,oBAAoB,CAAC,CAAC;MACtBC,oBAAoB,CAACgB,GAAG,CAAC;MACzB,QAAQ;MACRL;IACF,CAAC;EACH;AACF,CAAC,CAAC,CAAC;AACHO,MAAM,CAAC,CAACC,CAAC,EAAEC,CAAC,MAAM,EAAE,GAAGD,CAAC,EAAE,GAAGC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEtC,OAAO,MAAMG,CAAC,GAAGtB,aAAa,CAAC,qBAAqB,EAAE;EACpD,GAAGW,YAAY;EACf,GAAGG,mBAAmB;EACtB,GAAGM;AACL,CAAC,CAAC","ignoreList":[]}