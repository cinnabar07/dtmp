{"version":3,"file":"textureSampleBaseClampToEdge.spec.js","names":["description","makeTestGroup","checkCallResults","createTextureWithRandomDataAndGetTexels","createVideoFrameWithRandomDataAndGetTexels","doTextureCalls","generateTextureBuiltinInputs2D","kSamplePointMethods","kShortAddressModes","kShortAddressModeToAddressMode","kShortShaderStages","WGSLTextureSampleTest","g","createTextureAndDataForTest","t","descriptor","isExternal","texels","videoFrame","size","texture","device","importExternalTexture","source","test","specURL","desc","params","u","combine","beginSubcases","beforeAllSubcases","skipIf","textureType","VideoFrame","fn","stage","samplePoints","modeU","modeV","filt","minFilter","format","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","mipLevelCount","sampler","addressModeU","addressModeV","magFilter","mipmapFilter","calls","method","hashInputs","map","coords","builtin","coordType","viewDescriptor","results","res","expectOK","close"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSampleBaseClampToEdge.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution tests for textureSampleBaseClampToEdge\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\n\n\n\nimport {\n  checkCallResults,\n  createTextureWithRandomDataAndGetTexels,\n  createVideoFrameWithRandomDataAndGetTexels,\n  doTextureCalls,\n  generateTextureBuiltinInputs2D,\n  kSamplePointMethods,\n  kShortAddressModes,\n  kShortAddressModeToAddressMode,\n  kShortShaderStages,\n\n\n  WGSLTextureSampleTest } from\n'./texture_utils.js';\n\nexport const g = makeTestGroup(WGSLTextureSampleTest);\n\nasync function createTextureAndDataForTest(\nt,\ndescriptor,\nisExternal)\n\n\n\n\n{\n  if (isExternal) {\n    const { texels, videoFrame } = createVideoFrameWithRandomDataAndGetTexels(descriptor.size);\n    const texture = t.device.importExternalTexture({ source: videoFrame });\n    return { texels, texture, videoFrame };\n  } else {\n    return await createTextureWithRandomDataAndGetTexels(t, descriptor);\n  }\n}\n\ng.test('2d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplebaseclamptoedge').\ndesc(\n  `\nfn textureSampleBaseClampToEdge(t: texture_2d<f32>, s: sampler, coords: vec2<f32>) -> vec4<f32>\nfn textureSampleBaseClampToEdge(t: texture_external, s: sampler, coords: vec2<f32>) -> vec4<f32>\n\n\nParameters:\n * t  The texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n`\n).\nparams((u) =>\nu.\ncombine('stage', kShortShaderStages).\ncombine('textureType', ['texture_2d<f32>', 'texture_external']).\ncombine('filt', ['nearest', 'linear']).\ncombine('modeU', kShortAddressModes).\ncombine('modeV', kShortAddressModes).\nbeginSubcases().\ncombine('samplePoints', kSamplePointMethods)\n).\nbeforeAllSubcases((t) =>\nt.skipIf(\n  t.params.textureType === 'texture_external' && typeof VideoFrame === 'undefined',\n  'VideoFrames are not supported'\n)\n).\nfn(async (t) => {\n  const { textureType, stage, samplePoints, modeU, modeV, filt: minFilter } = t.params;\n\n  const descriptor = {\n    format: 'rgba8unorm',\n    size: [8, 8],\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    mipLevelCount: 3\n  };\n\n  const isExternal = textureType === 'texture_external';\n  const { texture, texels, videoFrame } = await createTextureAndDataForTest(\n    t,\n    descriptor,\n    isExternal\n  );\n  try {\n    const sampler = {\n      addressModeU: kShortAddressModeToAddressMode[modeU],\n      addressModeV: kShortAddressModeToAddressMode[modeV],\n      minFilter,\n      magFilter: minFilter,\n      mipmapFilter: minFilter\n    };\n\n    const calls = generateTextureBuiltinInputs2D(50, {\n      method: samplePoints,\n      sampler,\n      descriptor,\n      hashInputs: [samplePoints, modeU, modeV, minFilter]\n    }).map(({ coords }) => {\n      return {\n        builtin: 'textureSampleBaseClampToEdge',\n        coordType: 'f',\n        coords\n      };\n    });\n    const viewDescriptor = {};\n    const results = await doTextureCalls(\n      t,\n      texture,\n      viewDescriptor,\n      textureType,\n      sampler,\n      calls,\n      stage\n    );\n    const res = await checkCallResults(\n      t,\n      { texels, descriptor, viewDescriptor },\n      textureType,\n      sampler,\n      calls,\n      results,\n      stage\n    );\n    t.expectOK(res);\n  } finally {\n    videoFrame?.close();\n  }\n});"],"mappings":"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","ignoreList":[]}