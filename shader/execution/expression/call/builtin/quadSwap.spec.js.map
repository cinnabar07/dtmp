{"version":3,"file":"quadSwap.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","assert","unreachable","kConcreteNumericScalarsAndVectors","VectorType","kWGSizes","kDataSentinel","kPredicateCases","runComputeTest","SubgroupTest","kFramebufferSizes","runFragmentTest","generateTypedInputs","getUintsPerFramebuffer","g","kTypes","kOps","swapIndex","index","op","Math","trunc","checkDataTypes","metadata","output","input","type","requiresF16","i","swapIdx","expectIdx","floor","expectShift","expect","resIdx","resShift","res","Error","uints","width","j","undefined","test","desc","params","u","combine","beginSubcases","beforeAllSubcases","t","features","push","selectDeviceOrSkipTestCase","fn","wgSize","enables","wgsl","toString","inputData","uintsPerOutput","checkSwapCompute","filter","bound","length","subgroup_id","id","size","quad_id","quad_index","found","other_id","other_quad_id","other_quad_index","other_subgroup_id","wgThreads","Uint32Array","predicate","testcase","cond","checkFragment","data","format","height","uintsPerRow","uintsPerTexel","coordToIndex","row","col","offset","row_is_odd","col_is_odd","max_row","max_col","expect_row","expect_col","row_output","col_output","combineWithParams","fsShader","unimplemented"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/quadSwap.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution tests for quadSwapX, quadSwapY, and quadSwapDiagnoal.\n\nNote: There is a lack of portability for non-uniform execution so these tests\nrestrict themselves to uniform control flow.\nNote: There is no guaranteed mapping between subgroup_invocation_id and\nlocal_invocation_index. Tests should avoid assuming there is.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { assert, unreachable } from '../../../../../../common/util/util.js';\nimport {\n  kConcreteNumericScalarsAndVectors,\n\n  VectorType } from\n'../../../../../util/conversion.js';\n\nimport {\n  kWGSizes,\n  kDataSentinel,\n  kPredicateCases,\n  runComputeTest,\n  SubgroupTest,\n  kFramebufferSizes,\n  runFragmentTest,\n  generateTypedInputs,\n  getUintsPerFramebuffer } from\n'./subgroup_util.js';\n\nexport const g = makeTestGroup(SubgroupTest);\n\nconst kTypes = objectsToRecord(kConcreteNumericScalarsAndVectors);\n\n\n\nconst kOps = ['quadSwapX', 'quadSwapY', 'quadSwapDiagonal'];\n\n/**\n * Returns the swapped quad invocation id for the given op\n *\n * @param index The index in the range [0,3]\n * @param op The swap\n */\nfunction swapIndex(index, op) {\n  assert(index === Math.trunc(index));\n  assert(index >= 0 && index <= 3);\n  switch (op) {\n    case 'quadSwapX':\n      return index ^ 1;\n    case 'quadSwapY':\n      return index ^ 2;\n    case 'quadSwapDiagonal':\n      return index ^ 3;\n  }\n  unreachable(`Unhandled op ${op}`);\n}\n\n/**\n * Checks the results of data types test\n *\n * The outputs for a given index are expected to match the input values\n * for the given swap.\n * @param metadata An unused parameter\n * @param output The output data\n * @param input The input data\n * @param op The type of swap\n * @param type The data type\n */\nfunction checkDataTypes(\nmetadata, // unused\noutput,\ninput,\nop,\ntype)\n{\n  if (type.requiresF16() && !(type instanceof VectorType)) {\n    for (let i = 0; i < 4; i++) {\n      const swapIdx = swapIndex(i, op);\n\n      const expectIdx = Math.floor(swapIdx / 2);\n      const expectShift = swapIdx % 2 === 1;\n      let expect = input[expectIdx];\n      if (expectShift) {\n        expect >>= 16;\n      }\n      expect &= 0xffff;\n\n      const resIdx = Math.floor(i / 2);\n      const resShift = i % 2 === 1;\n      let res = output[resIdx];\n      if (resShift) {\n        res >>= 16;\n      }\n      res &= 0xffff;\n\n      if (res !== expect) {\n        return new Error(`${i}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n      }\n    }\n  } else {\n    let uints = 1;\n    if (type instanceof VectorType) {\n      uints = type.width === 3 ? 4 : type.width;\n      if (type.requiresF16()) {\n        uints = Math.floor(uints / 2);\n      }\n    }\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < uints; j++) {\n        const expect = input[swapIndex(i, op) * uints + j];\n        const res = output[i * uints + j];\n        if (res !== expect) {\n          return new Error(`${uints * i + j}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('data_types').\ndesc('Test allowed data types').\nparams((u) => u.combine('type', keysOf(kTypes)).beginSubcases().combine('op', kOps)).\nbeforeAllSubcases((t) => {\n  const features = ['subgroups'];\n  const type = kTypes[t.params.type];\n  if (type.requiresF16()) {\n    features.push('subgroups-f16');\n    features.push('shader-f16');\n  }\n  t.selectDeviceOrSkipTestCase(features);\n}).\nfn(async (t) => {\n  const wgSize = [4, 1, 1];\n  const type = kTypes[t.params.type];\n  let enables = `enable subgroups;\\n`;\n  if (type.requiresF16()) {\n    enables += `enable f16;\\nenable subgroups_f16;`;\n  }\n  const wgsl = `\n${enables}\n\n@group(0) @binding(0)\nvar<storage> input : array<${type.toString()}>;\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<${type.toString()}>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : array<u32>; // unused\n\n@compute @workgroup_size(${wgSize[0]}, ${wgSize[1]}, ${wgSize[2]})\nfn main(\n  @builtin(subgroup_invocation_id) id : u32,\n) {\n  // Force usage\n  _ = metadata[0];\n\n  output[id] = ${t.params.op}(input[id]);\n}`;\n\n  const inputData = generateTypedInputs(type);\n  let uintsPerOutput = 1;\n  if (type instanceof VectorType) {\n    uintsPerOutput = type.width === 3 ? 4 : type.width;\n    if (type.requiresF16()) {\n      uintsPerOutput = Math.floor(uintsPerOutput / 2);\n    }\n  }\n  await runComputeTest(\n    t,\n    wgsl,\n    wgSize,\n    uintsPerOutput,\n    inputData,\n    (metadata, output) => {\n      return checkDataTypes(metadata, output, inputData, t.params.op, type);\n    }\n  );\n});\n\n/**\n * Checks quad swaps in compute shaders\n *\n * Assumes that quads are linear within a subgroup.\n *\n * @param metadata An array of integers divided as follows:\n *                 * first half subgroup invocation ids\n *                 * second half subgroup sizes\n * @param output An array of integers divided as follows:\n *               * first half results of quad broadcast\n *               * second half generated unique subgroup ids\n * @param op The swap operation\n * @param filter A functor to filter active invocations\n */\nfunction checkSwapCompute(\nmetadata,\noutput,\nop,\nfilter)\n{\n  const bound = Math.floor(output.length / 2);\n  for (let i = 0; i < bound; i++) {\n    const subgroup_id = output[bound + i];\n    const id = metadata[i];\n    const size = metadata[bound + i];\n    if (!filter(id, size)) {\n      if (output[i] !== kDataSentinel) {\n        return new Error(`Unexpected write for invocation ${i}`);\n      }\n      continue;\n    }\n\n    const quad_id = Math.floor(id / 4);\n    const quad_index = id % 4;\n    let found = false;\n    for (let j = 0; j < bound; j++) {\n      const other_id = metadata[j];\n      const other_quad_id = Math.floor(other_id / 4);\n      const other_quad_index = other_id % 4;\n      const other_subgroup_id = output[bound + j];\n      if (\n      subgroup_id === other_subgroup_id &&\n      quad_id === other_quad_id &&\n      quad_index === swapIndex(other_quad_index, op))\n      {\n        found = true;\n        if (output[i] !== j) {\n          return new Error(`Invocation ${i}: incorrect result\n- expected: ${j}\n-      got: ${output[i]}`);\n        }\n        break;\n      }\n    }\n    if (!found) {\n      return new Error(`Invocation ${i}: failed to find swapped result`);\n    }\n  }\n\n  return undefined;\n}\n\ng.test('compute,all_active').\ndesc(\n  `Tests swaps with all active invocations\n\nQuad operations require a full quad so workgroup sizes are limited to multiples of 4.\n  `\n).\nparams((u) =>\nu.\ncombine('wgSize', kWGSizes).\nfilter((t) => {\n  const wgThreads = t.wgSize[0] * t.wgSize[1] * t.wgSize[2];\n  return wgThreads % 4 === 0;\n}).\nbeginSubcases().\ncombine('op', kOps)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n  const wgsl = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage> inputs : u32; // unused\n\nstruct Output {\n  results : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : Output;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  // Force usage\n  _ = inputs;\n\n  let b = ${t.params.op}(lid);\n  output.results[lid] = b;\n  output.subgroup_size[lid] = subgroupBroadcastFirst(lid + 1);\n  metadata.id[lid] = id;\n  metadata.subgroup_size[lid] = subgroupSize;\n}`;\n\n  const uintsPerOutput = 2;\n  await runComputeTest(\n    t,\n    wgsl,\n    [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n    uintsPerOutput,\n    new Uint32Array([0]), // unused\n    (metadata, output) => {\n      return checkSwapCompute(metadata, output, t.params.op, (id, size) => {\n        return true;\n      });\n    }\n  );\n});\n\ng.test('compute,split').\ndesc(\n  `Tests swaps with all predicated invocations\n\nQuad operations require a full quad so workgroup sizes are limited to multiples of 4.\nQuad operations require a fully active quad to operate correctly so several of the\npredication filters are skipped.\n  `\n).\nparams((u) =>\nu.\ncombine('predicate', keysOf(kPredicateCases)).\nfilter((t) => {\n  return t.predicate === 'lower_half' || t.predicate === 'upper_half';\n}).\ncombine('wgSize', kWGSizes).\nfilter((t) => {\n  const wgThreads = t.wgSize[0] * t.wgSize[1] * t.wgSize[2];\n  return wgThreads % 4 === 0;\n}).\nbeginSubcases().\ncombine('op', kOps)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n  const testcase = kPredicateCases[t.params.predicate];\n\n  const wgsl = `\nenable subgroups;\n\ndiagnostic(off, subgroup_uniformity);\ndiagnostic(off, subgroup_branching);\n\n@group(0) @binding(0)\nvar<storage> inputs : u32; // unused\n\nstruct Output {\n  results : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : Output;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  subgroup_size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  // Force usage\n  _ = inputs;\n\n  output.subgroup_size[lid] = subgroupBroadcastFirst(lid + 1);\n  metadata.id[lid] = id;\n  metadata.subgroup_size[lid] = subgroupSize;\n\n  if ${testcase.cond} {\n    let b = ${t.params.op}(lid);\n    output.results[lid] = b;\n  }\n}`;\n\n  const uintsPerOutput = 2;\n  await runComputeTest(\n    t,\n    wgsl,\n    [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n    uintsPerOutput,\n    new Uint32Array([0]), // unused\n    (metadata, output) => {\n      return checkSwapCompute(metadata, output, t.params.op, testcase.filter);\n    }\n  );\n});\n\n/**\n * Checks results of quad swaps in fragment shaders.\n *\n * @param data The framebuffer output\n *             * component 0 is the broadcast of the integer x position\n *             * component 1 is the broadcast of the integer y position\n * @param format The framebuffer format\n * @param width Framebuffer width\n * @param height Framebuffer height\n * @param broadcast The quad id being broadcast\n */\nfunction checkFragment(\ndata,\nformat,\nwidth,\nheight,\nop)\n{\n  if (width < 3 || height < 3) {\n    return new Error(\n      `Insufficient framebuffer size [${width}w x ${height}h]. Minimum is [3w x 3h].`\n    );\n  }\n\n  const { uintsPerRow, uintsPerTexel } = getUintsPerFramebuffer(format, width, height);\n\n  const coordToIndex = (row, col) => {\n    return uintsPerRow * row + col * uintsPerTexel;\n  };\n\n  // Iteration skips last row and column to avoid helper invocations because it is not\n  // guaranteed whether or not they participate in the subgroup operation.\n  for (let row = 0; row < height - 1; row++) {\n    for (let col = 0; col < width - 1; col++) {\n      const offset = coordToIndex(row, col);\n\n      const row_is_odd = row % 2 === 1;\n      const col_is_odd = col % 2 === 1;\n\n      // Skip checking quads that extend into potential helper invocations.\n      const max_row = row_is_odd ? row : row + 1;\n      const max_col = col_is_odd ? col : col + 1;\n      if (max_row === height - 1 || max_col === width - 1) {\n        continue;\n      }\n\n      let expect_row = row;\n      let expect_col = col;\n      switch (op) {\n        case 'quadSwapX':\n          expect_col = col_is_odd ? col - 1 : col + 1;\n          break;\n        case 'quadSwapY':\n          expect_row = row_is_odd ? row - 1 : row + 1;\n          break;\n        case 'quadSwapDiagonal':\n          expect_row = row_is_odd ? row - 1 : row + 1;\n          expect_col = col_is_odd ? col - 1 : col + 1;\n          break;\n      }\n\n      const row_output = data[offset + 1];\n      const col_output = data[offset];\n      if (expect_row !== row_output) {\n        return new Error(`Row ${row}, col ${col}: incorrect row results:\n- expected: ${expect_row}\n-      got: ${row_output}`);\n      }\n\n      if (expect_col !== col_output) {\n        return new Error(`Row ${row}, col ${col}: incorrect col results:\n- expected: ${expect_row}\n-      got: ${col_output}`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('fragment,all_active').\ndesc(`Tests quad swaps in fragment shaders`).\nparams((u) =>\nu.\ncombine('size', kFramebufferSizes).\nbeginSubcases().\ncombine('op', kOps).\ncombineWithParams([{ format: 'rgba32uint' }])\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const fsShader = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage, read_write> inputs : array<u32>; // unused\n\n@fragment\nfn main(\n  @builtin(position) pos : vec4f,\n) -> @location(0) vec4u {\n  // Force usage\n  _ = inputs[0];\n\n  let linear = u32(pos.x) + u32(pos.y) * ${t.params.size[0]};\n\n  // Filter out possible helper invocations.\n  let x_in_range = u32(pos.x) < (${t.params.size[0]} - 1);\n  let y_in_range = u32(pos.y) < (${t.params.size[1]} - 1);\n  let in_range = x_in_range && y_in_range;\n\n  var x_swap = select(1001, u32(pos.x), in_range);\n  var y_swap = select(1001, u32(pos.y), in_range);\n\n  x_swap = ${t.params.op}(x_swap);\n  y_swap = ${t.params.op}(y_swap);\n\n  return vec4u(x_swap, y_swap, 0, 0);\n}`;\n\n  await runFragmentTest(\n    t,\n    t.params.format,\n    fsShader,\n    t.params.size[0],\n    t.params.size[1],\n    new Uint32Array([0]), // unused,\n    (data) => {\n      return checkFragment(\n        data,\n        t.params.format,\n        t.params.size[0],\n        t.params.size[1],\n        t.params.op\n      );\n    }\n  );\n});\n\ng.test('fragment,split').unimplemented();"],"mappings":"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","ignoreList":[]}