{"version":3,"file":"subgroupAll.spec.js","names":["description","makeTestGroup","keysOf","iterRange","PRNG","kWGSizes","kPredicateCases","SubgroupTest","kDataSentinel","kFramebufferSizes","runComputeTest","runFragmentTest","getUintsPerFramebuffer","g","kNumCases","generateInputData","seed","num","prng","bound","Math","min","index","uniformInt","Uint32Array","x","bounded","checkAll","metadata","output","numInvs","input","filter","expected","Map","inv","size","id","subgroup_id","v","get","set","res","expected_v","Error","undefined","test","desc","params","u","combine","beginSubcases","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","wgThreads","wgSize","wgsl","inputData","case","uintsPerOutput","testcase","predicate","cond","checkFragmentAll","data","format","width","height","uintsPerRow","uintsPerTexel","row","col","offset","combineWithParams","numInputs","fsShader","unimplemented"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/subgroupAll.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution tests for subgroupAll.\n\nNote: There is a lack of portability for non-uniform execution so these tests\nrestrict themselves to uniform control flow.\nNote: There is no guaranteed mapping between subgroup_invocation_id and\nlocal_invocation_index. Tests should avoid assuming there is.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../../common/util/data_tables.js';\nimport { iterRange } from '../../../../../../common/util/util.js';\nimport { PRNG } from '../../../../../util/prng.js';\n\nimport {\n  kWGSizes,\n  kPredicateCases,\n  SubgroupTest,\n  kDataSentinel,\n  kFramebufferSizes,\n  runComputeTest,\n  runFragmentTest,\n  getUintsPerFramebuffer } from\n'./subgroup_util.js';\n\nexport const g = makeTestGroup(SubgroupTest);\n\nconst kNumCases = 15;\n\n/**\n * Generate input data for testing.\n *\n * Data is generated in the following categories:\n * Seed 0 generates all 0 data\n * Seed 1 generates all 1 data\n * Seeds 2-9 generates all 1s except for a zero randomly once per 32 elements\n * Seeds 10+ generate all random data\n * @param seed The seed for the PRNG\n * @param num The number of data items to generate\n */\nfunction generateInputData(seed, num) {\n  const prng = new PRNG(seed);\n\n  const bound = Math.min(num, 32);\n  const index = prng.uniformInt(bound);\n\n  return new Uint32Array([\n  ...iterRange(num, (x) => {\n    if (seed === 0) {\n      return 0;\n    } else if (seed === 1) {\n      return 1;\n    } else if (seed < 10) {\n      const bounded = x % bound;\n      return bounded === index ? 0 : 1;\n    }\n    return prng.uniformInt(2);\n  })]\n  );\n}\n\n/**\n * Checks the result of a subgroupAll operation\n *\n * Since subgroup size depends on the pipeline compile, we calculate the expected\n * results after execution. The shader generates a subgroup id and records it for\n * each invocation. The check first calculates the expected result for each subgroup\n * and then compares to the actual result for each invocation. The filter functor\n * ensures only the correct invocations contribute to the calculation.\n * @param metadata An array of uints:\n *                 * first half containing subgroup sizes (from builtin value)\n *                 * second half subgroup invocation id\n * @param output An array of uints containing:\n *               * first half is the outputs of subgroupAll\n *               * second half is a generated subgroup id\n * @param numInvs Number of invocations executed\n * @param input The input data (equal size to output)\n * @param filter A functor to filter active invocations\n */\nfunction checkAll(\nmetadata, // unused\noutput,\nnumInvs,\ninput,\nfilter)\n{\n  // First, generate expected results.\n  const expected = new Map();\n  for (let inv = 0; inv < numInvs; inv++) {\n    const size = metadata[inv];\n    const id = metadata[inv + numInvs];\n    if (!filter(id, size)) {\n      continue;\n    }\n    const subgroup_id = output[numInvs + inv];\n    let v = expected.get(subgroup_id) ?? 1;\n    v &= input[inv];\n    expected.set(subgroup_id, v);\n  }\n\n  // Second, check against actual results.\n  for (let inv = 0; inv < numInvs; inv++) {\n    const size = metadata[inv];\n    const id = metadata[inv + numInvs];\n    const res = output[inv];\n    if (filter(id, size)) {\n      const subgroup_id = output[numInvs + inv];\n      const expected_v = expected.get(subgroup_id) ?? 0;\n      if (expected_v !== res) {\n        return new Error(`Invocation ${inv}:\n- expected: ${expected_v}\n-      got: ${res}`);\n      }\n    } else {\n      if (res !== kDataSentinel) {\n        return new Error(`Invocation ${inv} unexpected write:\n- subgroup invocation id: ${id}\n-          subgroup size: ${size}`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('compute,all_active').\ndesc(`Test compute subgroupAll`).\nparams((u) =>\nu.\ncombine('wgSize', kWGSizes).\nbeginSubcases().\ncombine('case', [...iterRange(kNumCases, (x) => x)])\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n  const wgsl = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage> inputs : array<u32>;\n\n@group(0) @binding(1)\nvar<storage, read_write> outputs : array<u32>;\n\nstruct Metadata {\n  subgroup_size: array<u32, ${wgThreads}>,\n  subgroup_invocation_id: array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  metadata.subgroup_size[lid] = subgroupSize;\n\n  metadata.subgroup_invocation_id[lid] = id;\n\n  // Record a representative subgroup id.\n  outputs[lid + ${wgThreads}] = subgroupBroadcastFirst(lid);\n\n  let res = select(0u, 1u, subgroupAll(bool(inputs[lid])));\n  outputs[lid] = res;\n}`;\n\n  const inputData = generateInputData(t.params.case, wgThreads);\n\n  const uintsPerOutput = 2;\n  await runComputeTest(\n    t,\n    wgsl,\n    [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n    uintsPerOutput,\n    inputData,\n    (metadata, output) => {\n      return checkAll(metadata, output, wgThreads, inputData, (id, size) => {\n        return true;\n      });\n    }\n  );\n});\n\ng.test('compute,split').\ndesc('Test that only active invocation participate').\nparams((u) =>\nu.\ncombine('predicate', keysOf(kPredicateCases)).\nbeginSubcases().\ncombine('wgSize', kWGSizes).\ncombine('case', [...iterRange(kNumCases, (x) => x)])\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const testcase = kPredicateCases[t.params.predicate];\n  const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n  const wgsl = `\nenable subgroups;\n\ndiagnostic(off, subgroup_uniformity);\ndiagnostic(off, subgroup_branching);\n\n@group(0) @binding(0)\nvar<storage> inputs : array<u32>;\n\n@group(0) @binding(1)\nvar<storage, read_write> outputs : array<u32>;\n\nstruct Metadata {\n  subgroup_size : array<u32, ${wgThreads}>,\n  subgroup_invocation_id : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  metadata.subgroup_size[lid] = subgroupSize;\n\n  // Record subgroup invocation id for this invocation.\n  metadata.subgroup_invocation_id[lid] = id;\n\n  // Record a generated subgroup id.\n  outputs[${wgThreads} + lid] = subgroupBroadcastFirst(lid);\n\n  if ${testcase.cond} {\n    outputs[lid] = select(0u, 1u, subgroupAll(bool(inputs[lid])));\n  } else {\n    return;\n  }\n}`;\n\n  const inputData = generateInputData(t.params.case, wgThreads);\n\n  const uintsPerOutput = 2;\n  await runComputeTest(\n    t,\n    wgsl,\n    [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n    uintsPerOutput,\n    inputData,\n    (metadata, output) => {\n      return checkAll(metadata, output, wgThreads, inputData, testcase.filter);\n    }\n  );\n});\n\n/**\n * Checks subgroupAll results from a fragment shader.\n *\n * @param data Framebuffer output\n *             * component 0 is result\n *             * component 1 is generated subgroup id\n * @param input An array of input data\n * @param format The framebuffer format\n * @param width Framebuffer width\n * @param height Framebuffer height\n */\nfunction checkFragmentAll(\ndata,\ninput,\nformat,\nwidth,\nheight)\n{\n  const { uintsPerRow, uintsPerTexel } = getUintsPerFramebuffer(format, width, height);\n\n  // Iteration skips last row and column to avoid helper invocations because it is not\n  // guaranteed whether or not they participate in the subgroup operation.\n  const expected = new Map();\n  for (let row = 0; row < height - 1; row++) {\n    for (let col = 0; col < width - 1; col++) {\n      const offset = uintsPerRow * row + col * uintsPerTexel;\n      const subgroup_id = data[offset + 1];\n\n      if (subgroup_id === 0) {\n        return new Error(`Internal error: helper invocation at (${col}, ${row})`);\n      }\n\n      let v = expected.get(subgroup_id) ?? 1;\n      // First index of input is an atomic counter.\n      v &= input[row * width + col];\n      expected.set(subgroup_id, v);\n    }\n  }\n\n  for (let row = 0; row < height - 1; row++) {\n    for (let col = 0; col < width - 1; col++) {\n      const offset = uintsPerRow * row + col * uintsPerTexel;\n      const res = data[offset];\n      const subgroup_id = data[offset + 1];\n\n      if (subgroup_id === 0) {\n        // Inactive in the fragment.\n        continue;\n      }\n\n      const expected_v = expected.get(subgroup_id) ?? 0;\n      if (expected_v !== res) {\n        return new Error(`Row ${row}, col ${col}: incorrect results:\n- expected: ${expected_v}\n-      got: ${res}`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('fragment,all_active').\ndesc('Tests subgroupAll in fragment shaders').\nparams((u) =>\nu.\ncombine('size', kFramebufferSizes).\nbeginSubcases().\ncombine('case', [...iterRange(kNumCases, (x) => x)]).\ncombineWithParams([{ format: 'rg32uint' }])\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const numInputs = t.params.size[0] * t.params.size[1];\n  const inputData = generateInputData(t.params.case, numInputs);\n\n  const fsShader = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage, read_write> inputs : array<u32>;\n\n@fragment\nfn main(\n  @builtin(position) pos : vec4f,\n) -> @location(0) vec2u {\n  // Generate a subgroup id based on linearized position, but avoid 0.\n  let linear = u32(pos.x) + u32(pos.y) * ${t.params.size[0]};\n  var subgroup_id = linear + 1;\n  subgroup_id = subgroupBroadcastFirst(subgroup_id);\n\n  // Filter out possible helper invocations.\n  let x_in_range = u32(pos.x) < (${t.params.size[0]} - 1);\n  let y_in_range = u32(pos.y) < (${t.params.size[1]} - 1);\n  let in_range = x_in_range && y_in_range;\n  let input = select(1u, inputs[linear], in_range);\n\n  let res = select(0u, 1u, subgroupAll(bool(input)));\n  return vec2u(res, subgroup_id);\n}`;\n\n  await runFragmentTest(\n    t,\n    t.params.format,\n    fsShader,\n    t.params.size[0],\n    t.params.size[1],\n    inputData,\n    (data) => {\n      return checkFragmentAll(\n        data,\n        inputData,\n        t.params.format,\n        t.params.size[0],\n        t.params.size[1]\n      );\n    }\n  );\n});\n\n// Using subgroup operations in control with fragment shaders\n// quickly leads to unportable behavior.\ng.test('fragment,split').unimplemented();"],"mappings":"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","ignoreList":[]}