{"version":3,"file":"unpack4xI8.spec.js","names":["description","makeTestGroup","GPUTest","u32","toVector","i32","Type","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","fn","t","cfg","unpack4xI8","e","result","i","intValue","testInputs","makeCase","input","expected","cases","flatMap","v","vec4i"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/unpack4xI8.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution tests for the 'unpack4xI8' builtin function\n\n@const fn unpack4xI8(e: u32) -> vec4<i32>\ne is interpreted as a vector with four 8-bit signed integer components. Unpack e into a vec4<i32>\nwith sign extension.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { u32, toVector, i32, Type } from '../../../../../util/conversion.js';\n\nimport { allInputSources, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('basic').\nspecURL('https://www.w3.org/TR/WGSL/#unpack4xI8-builtin').\ndesc(\n  `\n@const fn unpack4xI8(e: u32) -> vec4<i32>\n  `\n).\nparams((u) => u.combine('inputSource', allInputSources)).\nfn(async (t) => {\n  const cfg = t.params;\n\n  const unpack4xI8 = (e) => {\n    const result = [0, 0, 0, 0];\n    for (let i = 0; i < 4; ++i) {\n      let intValue = e >> 8 * i & 0xff;\n      if (intValue > 127) {\n        intValue -= 256;\n      }\n      result[i] = intValue;\n    }\n    return result;\n  };\n\n  const testInputs = [\n  0, 0x01020304, 0xfcfdfeff, 0x040302ff, 0x0403fe01, 0x04fd0201, 0xfc030201, 0xfcfdfe01,\n  0xfcfd02ff, 0xfc03feff, 0x04fdfeff, 0x0403feff, 0x04fd02ff, 0xfc0302ff, 0x04fdfe01,\n  0xfc03fe01, 0xfcfd0201, 0x80817f7e];\n\n\n  const makeCase = (e) => {\n    return { input: [u32(e)], expected: toVector(unpack4xI8(e), i32) };\n  };\n  const cases = testInputs.flatMap((v) => {\n    return [makeCase(v)];\n  });\n\n  await run(t, builtin('unpack4xI8'), [Type.u32], Type.vec4i, cfg, cases);\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,SAASC,aAAa,QAAQ,kDAAkD,CAClF,SAASC,OAAO,QAAQ,4BAA4B,CACpD,SAASC,GAAG,EAAEC,QAAQ,EAAEC,GAAG,EAAEC,IAAI,QAAQ,mCAAmC;;AAE5E,SAASC,eAAe,EAAEC,GAAG,QAAQ,qBAAqB;;AAE1D,SAASC,OAAO,QAAQ,cAAc;;AAEtC,OAAO,MAAMC,CAAC,GAAGT,aAAa,CAACC,OAAO,CAAC;;AAEvCQ,CAAC,CAACC,IAAI,CAAC,OAAO,CAAC;AACfC,OAAO,CAAC,gDAAgD,CAAC;AACzDC,IAAI;EACF;AACF;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAET,eAAe,CAAC,CAAC;AACxDU,EAAE,CAAC,OAAOC,CAAC,KAAK;EACd,MAAMC,GAAG,GAAGD,CAAC,CAACJ,MAAM;;EAEpB,MAAMM,UAAU,GAAGA,CAACC,CAAC,KAAK;IACxB,MAAMC,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IAC3B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,EAAE;MAC1B,IAAIC,QAAQ,GAAGH,CAAC,IAAI,CAAC,GAAGE,CAAC,GAAG,IAAI;MAChC,IAAIC,QAAQ,GAAG,GAAG,EAAE;QAClBA,QAAQ,IAAI,GAAG;MACjB;MACAF,MAAM,CAACC,CAAC,CAAC,GAAGC,QAAQ;IACtB;IACA,OAAOF,MAAM;EACf,CAAC;;EAED,MAAMG,UAAU,GAAG;EACnB,CAAC,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;EACrF,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU,EAAE,UAAU;EAClF,UAAU,EAAE,UAAU,EAAE,UAAU,CAAC;;;EAGnC,MAAMC,QAAQ,GAAGA,CAACL,CAAC,KAAK;IACtB,OAAO,EAAEM,KAAK,EAAE,CAACxB,GAAG,CAACkB,CAAC,CAAC,CAAC,EAAEO,QAAQ,EAAExB,QAAQ,CAACgB,UAAU,CAACC,CAAC,CAAC,EAAEhB,GAAG,CAAC,CAAC,CAAC;EACpE,CAAC;EACD,MAAMwB,KAAK,GAAGJ,UAAU,CAACK,OAAO,CAAC,CAACC,CAAC,KAAK;IACtC,OAAO,CAACL,QAAQ,CAACK,CAAC,CAAC,CAAC;EACtB,CAAC,CAAC;;EAEF,MAAMvB,GAAG,CAACU,CAAC,EAAET,OAAO,CAAC,YAAY,CAAC,EAAE,CAACH,IAAI,CAACH,GAAG,CAAC,EAAEG,IAAI,CAAC0B,KAAK,EAAEb,GAAG,EAAEU,KAAK,CAAC;AACzE,CAAC,CAAC","ignoreList":[]}