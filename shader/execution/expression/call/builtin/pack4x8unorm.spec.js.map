{"version":3,"file":"pack4x8unorm.spec.js","names":["description","makeTestGroup","GPUTest","kValue","f32","pack4x8unorm","u32","vec4","Type","quantizeToF32","vectorF32Range","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","fn","t","makeCase","vals","vals_f32","Array","idx","input","expected","normalizeF32","n","positive","max","negative","min","cases","flatMap","v","map","vec4f"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/pack4x8unorm.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nConverts four normalized floating point values to 8-bit unsigned integers, and then combines them into one u32 value.\nComponent e[i] of the input is converted to an 8-bit unsigned integer value\n⌊ 0.5 + 255 × min(1, max(0, e[i])) ⌋ which is then placed in\nbits 8 × i through 8 × i + 7 of the result.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { f32, pack4x8unorm, u32, vec4, Type } from '../../../../../util/conversion.js';\nimport { quantizeToF32, vectorF32Range } from '../../../../../util/math.js';\n\nimport { allInputSources, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('pack').\nspecURL('https://www.w3.org/TR/WGSL/#pack-builtin-functions').\ndesc(\n  `\n@const fn pack4x8unorm(e: vec4<f32>) -> u32\n`\n).\nparams((u) => u.combine('inputSource', allInputSources)).\nfn(async (t) => {\n  const makeCase = (vals) => {\n    const vals_f32 = new Array(4);\n\n\n\n\n\n    for (const idx in vals) {\n      vals[idx] = quantizeToF32(vals[idx]);\n      vals_f32[idx] = f32(vals[idx]);\n    }\n\n    return { input: [vec4(...vals_f32)], expected: u32(pack4x8unorm(...vals)) };\n  };\n\n  // Returns a value normalized to [0, 1].\n  const normalizeF32 = (n) => {\n    return n > 0 ? n / kValue.f32.positive.max : n / kValue.f32.negative.min;\n  };\n\n  const cases = vectorF32Range(4).flatMap((v) => {\n    return [\n    makeCase(v),\n    makeCase(v.map(normalizeF32))];\n\n  });\n\n  await run(t, builtin('pack4x8unorm'), [Type.vec4f], Type.u32, t.params, cases);\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG;AAC9B;AACA;AACA;AACA;AACA,CAAC,CAAC,SAASC,aAAa,QAAQ,kDAAkD,CAClF,SAASC,OAAO,QAAQ,4BAA4B,CACpD,SAASC,MAAM,QAAQ,kCAAkC;AACzD,SAASC,GAAG,EAAEC,YAAY,EAAEC,GAAG,EAAEC,IAAI,EAAEC,IAAI,QAAQ,mCAAmC;AACtF,SAASC,aAAa,EAAEC,cAAc,QAAQ,6BAA6B;;AAE3E,SAASC,eAAe,EAAEC,GAAG,QAAQ,qBAAqB;;AAE1D,SAASC,OAAO,QAAQ,cAAc;;AAEtC,OAAO,MAAMC,CAAC,GAAGb,aAAa,CAACC,OAAO,CAAC;;AAEvCY,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;AACdC,OAAO,CAAC,oDAAoD,CAAC;AAC7DC,IAAI;EACF;AACF;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAET,eAAe,CAAC,CAAC;AACxDU,EAAE,CAAC,OAAOC,CAAC,KAAK;EACd,MAAMC,QAAQ,GAAGA,CAACC,IAAI,KAAK;IACzB,MAAMC,QAAQ,GAAG,IAAIC,KAAK,CAAC,CAAC,CAAC;;;;;;IAM7B,KAAK,MAAMC,GAAG,IAAIH,IAAI,EAAE;MACtBA,IAAI,CAACG,GAAG,CAAC,GAAGlB,aAAa,CAACe,IAAI,CAACG,GAAG,CAAC,CAAC;MACpCF,QAAQ,CAACE,GAAG,CAAC,GAAGvB,GAAG,CAACoB,IAAI,CAACG,GAAG,CAAC,CAAC;IAChC;;IAEA,OAAO,EAAEC,KAAK,EAAE,CAACrB,IAAI,CAAC,GAAGkB,QAAQ,CAAC,CAAC,EAAEI,QAAQ,EAAEvB,GAAG,CAACD,YAAY,CAAC,GAAGmB,IAAI,CAAC,CAAC,CAAC,CAAC;EAC7E,CAAC;;EAED;EACA,MAAMM,YAAY,GAAGA,CAACC,CAAC,KAAK;IAC1B,OAAOA,CAAC,GAAG,CAAC,GAAGA,CAAC,GAAG5B,MAAM,CAACC,GAAG,CAAC4B,QAAQ,CAACC,GAAG,GAAGF,CAAC,GAAG5B,MAAM,CAACC,GAAG,CAAC8B,QAAQ,CAACC,GAAG;EAC1E,CAAC;;EAED,MAAMC,KAAK,GAAG1B,cAAc,CAAC,CAAC,CAAC,CAAC2B,OAAO,CAAC,CAACC,CAAC,KAAK;IAC7C,OAAO;IACPf,QAAQ,CAACe,CAAC,CAAC;IACXf,QAAQ,CAACe,CAAC,CAACC,GAAG,CAACT,YAAY,CAAC,CAAC,CAAC;;EAEhC,CAAC,CAAC;;EAEF,MAAMlB,GAAG,CAACU,CAAC,EAAET,OAAO,CAAC,cAAc,CAAC,EAAE,CAACL,IAAI,CAACgC,KAAK,CAAC,EAAEhC,IAAI,CAACF,GAAG,EAAEgB,CAAC,CAACJ,MAAM,EAAEkB,KAAK,CAAC;AAChF,CAAC,CAAC","ignoreList":[]}