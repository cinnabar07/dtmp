{"version":3,"file":"subgroupBroadcast.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","iterRange","kConcreteNumericScalarsAndVectors","VectorType","kWGSizes","runComputeTest","kDataSentinel","generateTypedInputs","kPredicateCases","runFragmentTest","getUintsPerFramebuffer","SubgroupTest","kFramebufferSizes","g","kDataTypes","checkDataTypes","metadata","output","input","id","type","requiresF16","i","expectIdx","Math","floor","expectShift","expect","resIdx","resShift","res","Error","uints","width","j","undefined","test","desc","params","u","combine","beginSubcases","beforeAllSubcases","t","features","push","selectDeviceOrSkipTestCase","fn","wgSize","enables","broadcast","wgsl","toString","inputData","uintsPerOutput","wgThreads","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","device","limits","skipIf","first","inputId","values","inputBuffer","makeBufferWithContents","Uint32Array","GPUBufferUsage","COPY_SRC","STORAGE","trackForCleanup","outputBuffer","x","COPY_DST","pipeline","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","bg","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","Array","fill","expectGPUBufferValuesEqual","checkCompute","numInvs","filter","broadcastedId","size","mapping","Map","sizes","seen","get","set","key","value","Number","predicate","testcase","subgroupMinSize","subgroupMaxSize","adapterInfo","cond","checkFragment","data","format","height","uintsPerRow","uintsPerTexel","coordToIndex","row","col","inBounds","offset","bound","s","linear","ok","Boolean","combineWithParams","innerTexels","fsShader","texels"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/subgroupBroadcast.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution tests for subgroupBroadcast and subgroupBroadcastFirst\n\nNote: There is a lack of portability for non-uniform execution so these tests\nrestrict themselves to uniform control flow.\nNote: There is no guaranteed mapping between subgroup_invocation_id and\nlocal_invocation_index. Tests should avoid assuming there is.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { iterRange } from '../../../../../../common/util/util.js';\nimport {\n  kConcreteNumericScalarsAndVectors,\n\n  VectorType } from\n'../../../../../util/conversion.js';\n\nimport {\n  kWGSizes,\n  runComputeTest,\n  kDataSentinel,\n  generateTypedInputs,\n  kPredicateCases,\n  runFragmentTest,\n  getUintsPerFramebuffer,\n  SubgroupTest,\n  kFramebufferSizes } from\n'./subgroup_util.js';\n\nexport const g = makeTestGroup(SubgroupTest);\n\nconst kDataTypes = objectsToRecord(kConcreteNumericScalarsAndVectors);\n\n/**\n * Checks the results of the data types test\n *\n * The outputs for a given index are expected to match the input values\n * for the given broadcast.\n * @param metadata An unused parameter\n * @param output The output data\n * @param id The broadcast id\n * @param type The data type\n */\nfunction checkDataTypes(\nmetadata,\noutput,\ninput,\nid,\ntype)\n{\n  if (type.requiresF16() && !(type instanceof VectorType)) {\n    for (let i = 0; i < 4; i++) {\n      const expectIdx = Math.floor(id / 2);\n      const expectShift = id % 2 === 1;\n      let expect = input[expectIdx];\n      if (expectShift) {\n        expect >>= 16;\n      }\n      expect &= 0xffff;\n\n      const resIdx = Math.floor(i / 2);\n      const resShift = i % 2 === 1;\n      let res = output[resIdx];\n      if (resShift) {\n        res >>= 16;\n      }\n      res &= 0xffff;\n\n      if (res !== expect) {\n        return new Error(`${i}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n      }\n    }\n  } else {\n    let uints = 1;\n    if (type instanceof VectorType) {\n      uints = type.width === 3 ? 4 : type.width;\n      if (type.requiresF16()) {\n        uints = Math.floor(uints / 2);\n      }\n    }\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < uints; j++) {\n        const expect = input[id * uints + j];\n        const res = output[i * uints + j];\n        if (res !== expect) {\n          return new Error(`${uints * i + j}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('data_types').\ndesc('Tests broadcast of data types').\nparams((u) =>\nu.\ncombine('type', keysOf(kDataTypes)).\nbeginSubcases().\ncombine('id', [0, 1, 2, 3])\n).\nbeforeAllSubcases((t) => {\n  const features = ['subgroups'];\n  const type = kDataTypes[t.params.type];\n  if (type.requiresF16()) {\n    features.push('shader-f16');\n    features.push('subgroups-f16');\n  }\n  t.selectDeviceOrSkipTestCase(features);\n}).\nfn(async (t) => {\n  const wgSize = [4, 1, 1];\n  const type = kDataTypes[t.params.type];\n  let enables = 'enable subgroups;\\n';\n  if (type.requiresF16()) {\n    enables += 'enable f16;\\nenable subgroups_f16;\\n';\n  }\n\n  const broadcast =\n  t.params.id === 0 ?\n  `subgroupBroadcastFirst(input[id])` :\n  `subgroupBroadcast(input[id], ${t.params.id})`;\n\n  const wgsl = `\n${enables}\n\n@group(0) @binding(0)\nvar<storage, read_write> input : array<${type.toString()}>;\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<${type.toString()}>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : array<u32>; // unused\n\n@compute @workgroup_size(${wgSize[0]}, ${wgSize[1]}, ${wgSize[2]})\nfn main(\n  @builtin(subgroup_invocation_id) id : u32,\n) {\n  // Force usage.\n  _ = metadata[0];\n\n  output[id] = ${broadcast};\n}`;\n\n  const inputData = generateTypedInputs(type);\n  let uintsPerOutput = 1;\n  if (type instanceof VectorType) {\n    uintsPerOutput = type.width === 3 ? 4 : type.width;\n    if (type.requiresF16()) {\n      uintsPerOutput = Math.floor(uintsPerOutput / 2);\n    }\n  }\n  await runComputeTest(\n    t,\n    wgsl,\n    wgSize,\n    uintsPerOutput,\n    inputData,\n    (metadata, output) => {\n      return checkDataTypes(metadata, output, inputData, t.params.id, type);\n    }\n  );\n});\n\ng.test('workgroup_uniform_load').\ndesc('Tests a workgroup uniform load equivalent').\nparams((u) =>\nu.\ncombine('wgSize', kWGSizes).\nbeginSubcases().\ncombine('inputId', [1, 2, 3]).\ncombine('first', [false, true])\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn((t) => {\n  // Compatibility mode has lower workgroup limits.\n  const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n  const {\n    maxComputeInvocationsPerWorkgroup,\n    maxComputeWorkgroupSizeX,\n    maxComputeWorkgroupSizeY,\n    maxComputeWorkgroupSizeZ\n  } = t.device.limits;\n  t.skipIf(\n    maxComputeInvocationsPerWorkgroup < wgThreads ||\n    maxComputeWorkgroupSizeX < t.params.wgSize[0] ||\n    maxComputeWorkgroupSizeY < t.params.wgSize[1] ||\n    maxComputeWorkgroupSizeZ < t.params.wgSize[2],\n    'Workgroup size too large'\n  );\n\n  const broadcast = t.params.first ? `subgroupBroadcastFirst(v)` : `subgroupBroadcast(v, 0)`;\n\n  const wgsl = `\nenable subgroups;\n\ndiagnostic(off, subgroup_branching);\n\nvar<workgroup> wgmem : u32;\n\n@group(0) @binding(0)\nvar<storage, read> inputs : array<u32>;\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<u32>;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(@builtin(subgroup_invocation_id) id : u32,\n        @builtin(local_invocation_index) lid : u32) {\n  if (lid == ${t.params.inputId}) {\n    wgmem = inputs[lid];\n  }\n  workgroupBarrier();\n  var v = 0u;\n  if (id == 0) {\n    v = wgmem;\n  }\n  v = ${broadcast};\n  output[lid] = v;\n}`;\n\n  const values = [1, 13, 33, 125];\n  const inputBuffer = t.makeBufferWithContents(\n    new Uint32Array(values),\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.STORAGE\n  );\n  t.trackForCleanup(inputBuffer);\n\n  const outputBuffer = t.makeBufferWithContents(\n    new Uint32Array([...iterRange(wgThreads, (x) => 0)]),\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n  );\n  t.trackForCleanup(outputBuffer);\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: wgsl\n      }),\n      entryPoint: 'main'\n    }\n  });\n  const bg = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n    {\n      binding: 0,\n      resource: {\n        buffer: inputBuffer\n      }\n    },\n    {\n      binding: 1,\n      resource: {\n        buffer: outputBuffer\n      }\n    }]\n\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatchWorkgroups(1, 1, 1);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  const expect = Array(wgThreads);\n  expect.fill(values[t.params.inputId]);\n  t.expectGPUBufferValuesEqual(outputBuffer, new Uint32Array(expect));\n});\n\n/**\n * Checks the results of broadcast in compute shaders.\n *\n * @param metadata An array of uint32s\n *                 * first half is subgroup_invocation_id\n *                 * second half is subgroup_size\n * @param output An array uint32s containing the broadcast results\n * @param numInvs The number of invocations\n * @param broadcast The broadcast invocation (or 'first' to indicate the lowest active)\n * @param filter A functor indicating whether the invocation participates in the broadcast\n */\nfunction checkCompute(\nmetadata,\noutput,\nnumInvs,\nbroadcast,\nfilter)\n{\n  let broadcastedId = broadcast;\n  if (broadcast === 'first') {\n    // Subgroup size is uniform in compute shaders so any will do.\n    const size = metadata[numInvs];\n    for (let i = 0; i < size; i++) {\n      if (filter(i, size)) {\n        broadcastedId = i;\n        break;\n      }\n    }\n  }\n\n  const mapping = new Map();\n  const sizes = new Map();\n  for (let i = 0; i < numInvs; i++) {\n    const id = metadata[i];\n    const size = metadata[i + numInvs];\n\n    const res = output[i];\n\n    if (filter(id, size)) {\n      let seen = mapping.get(res) ?? 0;\n      seen++;\n      mapping.set(res, seen);\n\n      if (broadcastedId === id) {\n        sizes.set(res, size);\n        if (res !== i) {\n          return new Error(`Invocation ${i}: incorrect result:\n- expected: ${i}\n-      got: ${res}`);\n        }\n      }\n    } else {\n      if (res !== kDataSentinel) {\n        return new Error(`Invocation ${i}: unexpected write (${res})`);\n      }\n    }\n  }\n\n  for (const [key, value] of mapping) {\n    const id = Number(key);\n    const seen = Number(value);\n    const size = sizes.get(id) ?? 0;\n    if (size < seen) {\n      return new Error(`Unexpected number of invocations for subgroup ${id}\n- expected: ${size}\n-      got: ${seen}`);\n    }\n  }\n\n  return undefined;\n}\n\ng.test('compute,all_active').\ndesc('Test broadcasts in compute shaders with all active invocations').\nparams((u) =>\nu.\ncombine('wgSize', kWGSizes).\nbeginSubcases()\n// Only values < 4 are used because it is a dynamic error to broadcast an inactive invocation.\n.combine('id', [0, 1, 2, 3])\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n  const broadcast =\n  t.params.id === 0 ?\n  `subgroupBroadcastFirst(input[lid])` :\n  `subgroupBroadcast(input[lid], ${t.params.id})`;\n\n  const wgsl = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage> input : array<u32>;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<u32>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata: Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  metadata.id[lid] = id;\n  metadata.size[lid] = subgroupSize;\n\n  output[lid] = ${broadcast};\n}`;\n\n  const inputData = new Uint32Array([...iterRange(wgThreads, (x) => x)]);\n  const uintsPerOutput = 1;\n  await runComputeTest(\n    t,\n    wgsl,\n    [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n    uintsPerOutput,\n    inputData,\n    (metadata, output) => {\n      return checkCompute(\n        metadata,\n        output,\n        wgThreads,\n        t.params.id,\n        (id, size) => {\n          return true;\n        }\n      );\n    }\n  );\n});\n\ng.test('compute,split').\ndesc(`Test broadcasts with only some active invocations`).\nparams((u) =>\nu.\ncombine('predicate', keysOf(kPredicateCases)).\nfilter((t) => {\n  // This case would be UB\n  return t.predicate !== 'upper_half';\n}).\nbeginSubcases().\ncombine('id', [0, 1, 2, 3]).\ncombine('wgSize', kWGSizes)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const testcase = kPredicateCases[t.params.predicate];\n  const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n\n\n\n\n  const { subgroupMinSize, subgroupMaxSize } = t.device.adapterInfo;\n  for (let size = subgroupMinSize; size <= subgroupMaxSize; size *= 2) {\n    t.skipIf(!testcase.filter(t.params.id, size), 'Skipping potential undefined behavior');\n  }\n\n  const broadcast =\n  t.params.id === 0 ?\n  `subgroupBroadcastFirst(input[lid])` :\n  `subgroupBroadcast(input[lid], ${t.params.id})`;\n\n  const wgsl = `\nenable subgroups;\ndiagnostic(off, subgroup_uniformity);\n\n@group(0) @binding(0)\nvar<storage> input : array<u32>;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<u32>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata: Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  metadata.id[lid] = id;\n  metadata.size[lid] = subgroupSize;\n\n  if ${testcase.cond} {\n    output[lid] = ${broadcast};\n  } else {\n    return;\n  }\n}`;\n\n  const inputData = new Uint32Array([...iterRange(wgThreads, (x) => x)]);\n  const uintsPerOutput = 1;\n  await runComputeTest(\n    t,\n    wgsl,\n    [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n    uintsPerOutput,\n    inputData,\n    (metadata, output) => {\n      return checkCompute(metadata, output, wgThreads, t.params.id, testcase.filter);\n    }\n  );\n});\n\ng.test('broadcastFirst,split').\ndesc(`Test broadcastFirst with only some active invocations`).\nparams((u) =>\nu.combine('predicate', keysOf(kPredicateCases)).beginSubcases().combine('wgSize', kWGSizes)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const testcase = kPredicateCases[t.params.predicate];\n  const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n  const wgsl = `\nenable subgroups;\ndiagnostic(off, subgroup_uniformity);\n\n@group(0) @binding(0)\nvar<storage> input : array<u32>;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  size : array<u32, ${wgThreads}>,\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<u32>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata: Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  metadata.id[lid] = id;\n  metadata.size[lid] = subgroupSize;\n\n  if ${testcase.cond} {\n    output[lid] = subgroupBroadcastFirst(input[lid]);\n  } else {\n    return;\n  }\n}`;\n\n  const inputData = new Uint32Array([...iterRange(wgThreads, (x) => x)]);\n  const uintsPerOutput = 1;\n  await runComputeTest(\n    t,\n    wgsl,\n    [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n    uintsPerOutput,\n    inputData,\n    (metadata, output) => {\n      return checkCompute(metadata, output, wgThreads, 'first', testcase.filter);\n    }\n  );\n});\n\n/**\n * Check broadcasts in fragment shaders\n *\n * Only checks subgroups where no invocation is in the last row\n * or column to avoid helper invocations.\n * @param data The framebuffer output\n *             * component 0 is the broadcast result\n *             * component 1 is the subgroup_invocation_id\n *             * component 2 is the subgroup_size\n * @param format The framebuffer format\n * @param width The framebuffer width\n * @param height The framebuffer height\n * @param broadcast The id being broadcast\n */\nfunction checkFragment(\ndata,\nformat,\nwidth,\nheight,\nbroadcast)\n{\n  const { uintsPerRow, uintsPerTexel } = getUintsPerFramebuffer(format, width, height);\n\n  const coordToIndex = (row, col) => {\n    return uintsPerRow * row + col * uintsPerTexel;\n  };\n\n  const inBounds = new Map();\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const offset = coordToIndex(row, col);\n\n      const res = data[offset];\n\n      let bound = inBounds.get(res) ?? true;\n      bound = bound && row < height - 1 && col < height - 1;\n      inBounds.set(res, bound);\n    }\n  }\n\n  const seen = new Map();\n  const sizes = new Map();\n  for (let row = 0; row < height; row++) {\n    for (let col = 0; col < width; col++) {\n      const offset = coordToIndex(row, col);\n\n      const res = data[offset];\n      const bound = inBounds.get(res) ?? true;\n      if (!bound) {\n        continue;\n      }\n\n      const id = data[offset + 1];\n      const size = data[offset + 2];\n\n      let s = seen.get(res) ?? 0;\n      s++;\n      seen.set(res, s);\n\n      if (id === broadcast) {\n        const linear = row * width + col;\n        if (res !== linear) {\n          return new Error(`Row ${row}, col ${col}: incorrect broadcast\n- expected: ${linear}\n-      got: ${res}`);\n        }\n\n        sizes.set(res, size);\n      }\n    }\n  }\n\n  for (const [key, value] of inBounds) {\n    const id = Number(key);\n    const ok = Boolean(value);\n    if (ok) {\n      const size = sizes.get(id) ?? 0;\n      const seen = sizes.get(id) ?? 0;\n      if (size < seen) {\n        return new Error(`Unexpected number of invocations for subgroup ${id}\n- expected: ${size}\n-      got: ${seen}`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('fragment').\ndesc('Test broadcast in fragment shaders').\nparams((u) =>\nu.\ncombine('size', kFramebufferSizes).\nbeginSubcases().\ncombine('id', [0, 1, 2, 3]).\ncombineWithParams([{ format: 'rgba32uint' }])\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const innerTexels = (t.params.size[0] - 1) * (t.params.size[1] - 1);\n\n\n\n  const { subgroupMaxSize } = t.device.adapterInfo;\n  t.skipIf(innerTexels < subgroupMaxSize, 'Too few texels to be reliable');\n\n  const broadcast =\n  t.params.id === 0 ?\n  `subgroupBroadcastFirst(input[linear])` :\n  `subgroupBroadcast(input[linear], ${t.params.id})`;\n\n  const fsShader = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage> input : array<u32>;\n\n@fragment\nfn main(\n  @builtin(position) pos : vec4f,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) size : u32,\n) -> @location(0) vec4u {\n  let linear = u32(pos.x) + u32(pos.y) * ${t.params.size[0]};\n\n  return vec4u(${broadcast}, id, size, linear);\n}`;\n\n  const texels = t.params.size[0] * t.params.size[1];\n  const inputData = new Uint32Array([...iterRange(texels, (x) => x)]);\n  await runFragmentTest(\n    t,\n    t.params.format,\n    fsShader,\n    t.params.size[0],\n    t.params.size[1],\n    inputData,\n    (data) => {\n      return checkFragment(\n        data,\n        t.params.format,\n        t.params.size[0],\n        t.params.size[1],\n        t.params.id\n      );\n    }\n  );\n});"],"mappings":"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","ignoreList":[]}