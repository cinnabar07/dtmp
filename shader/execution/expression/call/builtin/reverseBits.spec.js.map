{"version":3,"file":"reverseBits.spec.js","names":["description","makeTestGroup","GPUTest","u32Bits","i32Bits","Type","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","undefined","fn","t","cfg","u32","input","expected","i32"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/reverseBits.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution tests for the 'reversBits' builtin function\n\nS is i32, u32\nT is S or vecN<S>\n@const fn reverseBits(e: T ) -> T\nReverses the bits in e: The bit at position k of the result equals the bit at position 31-k of e.\nComponent-wise when T is a vector.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { u32Bits, i32Bits, Type } from '../../../../../util/conversion.js';\nimport { allInputSources, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('u32').\nspecURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions').\ndesc(`u32 tests`).\nparams((u) =>\nu.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4])\n).\nfn(async (t) => {\n  const cfg = t.params;\n\n  await run(t, builtin('reverseBits'), [Type.u32], Type.u32, cfg, [\n  // Zero\n  { input: u32Bits(0b00000000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000000) },\n\n  // One\n  { input: u32Bits(0b00000000000000000000000000000001), expected: u32Bits(0b10000000000000000000000000000000) },\n\n  // 0's after leading 1\n  { input: u32Bits(0b00000000000000000000000000000010), expected: u32Bits(0b01000000000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000000000100), expected: u32Bits(0b00100000000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000000001000), expected: u32Bits(0b00010000000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000000010000), expected: u32Bits(0b00001000000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000000100000), expected: u32Bits(0b00000100000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000001000000), expected: u32Bits(0b00000010000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000010000000), expected: u32Bits(0b00000001000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000100000000), expected: u32Bits(0b00000000100000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000001000000000), expected: u32Bits(0b00000000010000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000010000000000), expected: u32Bits(0b00000000001000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000100000000000), expected: u32Bits(0b00000000000100000000000000000000) },\n  { input: u32Bits(0b00000000000000000001000000000000), expected: u32Bits(0b00000000000010000000000000000000) },\n  { input: u32Bits(0b00000000000000000010000000000000), expected: u32Bits(0b00000000000001000000000000000000) },\n  { input: u32Bits(0b00000000000000000100000000000000), expected: u32Bits(0b00000000000000100000000000000000) },\n  { input: u32Bits(0b00000000000000001000000000000000), expected: u32Bits(0b00000000000000010000000000000000) },\n  { input: u32Bits(0b00000000000000010000000000000000), expected: u32Bits(0b00000000000000001000000000000000) },\n  { input: u32Bits(0b00000000000000100000000000000000), expected: u32Bits(0b00000000000000000100000000000000) },\n  { input: u32Bits(0b00000000000001000000000000000000), expected: u32Bits(0b00000000000000000010000000000000) },\n  { input: u32Bits(0b00000000000010000000000000000000), expected: u32Bits(0b00000000000000000001000000000000) },\n  { input: u32Bits(0b00000000000100000000000000000000), expected: u32Bits(0b00000000000000000000100000000000) },\n  { input: u32Bits(0b00000000001000000000000000000000), expected: u32Bits(0b00000000000000000000010000000000) },\n  { input: u32Bits(0b00000000010000000000000000000000), expected: u32Bits(0b00000000000000000000001000000000) },\n  { input: u32Bits(0b00000000100000000000000000000000), expected: u32Bits(0b00000000000000000000000100000000) },\n  { input: u32Bits(0b00000001000000000000000000000000), expected: u32Bits(0b00000000000000000000000010000000) },\n  { input: u32Bits(0b00000010000000000000000000000000), expected: u32Bits(0b00000000000000000000000001000000) },\n  { input: u32Bits(0b00000100000000000000000000000000), expected: u32Bits(0b00000000000000000000000000100000) },\n  { input: u32Bits(0b00001000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000010000) },\n  { input: u32Bits(0b00010000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000001000) },\n  { input: u32Bits(0b00100000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000100) },\n  { input: u32Bits(0b01000000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000010) },\n  { input: u32Bits(0b10000000000000000000000000000000), expected: u32Bits(0b00000000000000000000000000000001) },\n\n  // 1's after leading 1\n  { input: u32Bits(0b00000000000000000000000000000011), expected: u32Bits(0b11000000000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000000000111), expected: u32Bits(0b11100000000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000000001111), expected: u32Bits(0b11110000000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000000011111), expected: u32Bits(0b11111000000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000000111111), expected: u32Bits(0b11111100000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000001111111), expected: u32Bits(0b11111110000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000011111111), expected: u32Bits(0b11111111000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000111111111), expected: u32Bits(0b11111111100000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000001111111111), expected: u32Bits(0b11111111110000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000011111111111), expected: u32Bits(0b11111111111000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000111111111111), expected: u32Bits(0b11111111111100000000000000000000) },\n  { input: u32Bits(0b00000000000000000001111111111111), expected: u32Bits(0b11111111111110000000000000000000) },\n  { input: u32Bits(0b00000000000000000011111111111111), expected: u32Bits(0b11111111111111000000000000000000) },\n  { input: u32Bits(0b00000000000000000111111111111111), expected: u32Bits(0b11111111111111100000000000000000) },\n  { input: u32Bits(0b00000000000000001111111111111111), expected: u32Bits(0b11111111111111110000000000000000) },\n  { input: u32Bits(0b00000000000000011111111111111111), expected: u32Bits(0b11111111111111111000000000000000) },\n  { input: u32Bits(0b00000000000000111111111111111111), expected: u32Bits(0b11111111111111111100000000000000) },\n  { input: u32Bits(0b00000000000001111111111111111111), expected: u32Bits(0b11111111111111111110000000000000) },\n  { input: u32Bits(0b00000000000011111111111111111111), expected: u32Bits(0b11111111111111111111000000000000) },\n  { input: u32Bits(0b00000000000111111111111111111111), expected: u32Bits(0b11111111111111111111100000000000) },\n  { input: u32Bits(0b00000000001111111111111111111111), expected: u32Bits(0b11111111111111111111110000000000) },\n  { input: u32Bits(0b00000000011111111111111111111111), expected: u32Bits(0b11111111111111111111111000000000) },\n  { input: u32Bits(0b00000000111111111111111111111111), expected: u32Bits(0b11111111111111111111111100000000) },\n  { input: u32Bits(0b00000001111111111111111111111111), expected: u32Bits(0b11111111111111111111111110000000) },\n  { input: u32Bits(0b00000011111111111111111111111111), expected: u32Bits(0b11111111111111111111111111000000) },\n  { input: u32Bits(0b00000111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111100000) },\n  { input: u32Bits(0b00001111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111110000) },\n  { input: u32Bits(0b00011111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111000) },\n  { input: u32Bits(0b00111111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111100) },\n  { input: u32Bits(0b01111111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111110) },\n  { input: u32Bits(0b11111111111111111111111111111111), expected: u32Bits(0b11111111111111111111111111111111) },\n\n  // random after leading 1\n  { input: u32Bits(0b00000000000000000000000000000110), expected: u32Bits(0b01100000000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000000001101), expected: u32Bits(0b10110000000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000000011101), expected: u32Bits(0b10111000000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000000111001), expected: u32Bits(0b10011100000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000001101111), expected: u32Bits(0b11110110000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000011111111), expected: u32Bits(0b11111111000000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000000111101111), expected: u32Bits(0b11110111100000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000001111111111), expected: u32Bits(0b11111111110000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000011111110001), expected: u32Bits(0b10001111111000000000000000000000) },\n  { input: u32Bits(0b00000000000000000000111011011101), expected: u32Bits(0b10111011011100000000000000000000) },\n  { input: u32Bits(0b00000000000000000001101101111111), expected: u32Bits(0b11111110110110000000000000000000) },\n  { input: u32Bits(0b00000000000000000011111111011111), expected: u32Bits(0b11111011111111000000000000000000) },\n  { input: u32Bits(0b00000000000000000101111001110101), expected: u32Bits(0b10101110011110100000000000000000) },\n  { input: u32Bits(0b00000000000000001101111011110111), expected: u32Bits(0b11101111011110110000000000000000) },\n  { input: u32Bits(0b00000000000000011111111111110011), expected: u32Bits(0b11001111111111111000000000000000) },\n  { input: u32Bits(0b00000000000000111111111110111111), expected: u32Bits(0b11111101111111111100000000000000) },\n  { input: u32Bits(0b00000000000001111111011111111111), expected: u32Bits(0b11111111111011111110000000000000) },\n  { input: u32Bits(0b00000000000011111111111111111111), expected: u32Bits(0b11111111111111111111000000000000) },\n  { input: u32Bits(0b00000000000111110101011110111111), expected: u32Bits(0b11111101111010101111100000000000) },\n  { input: u32Bits(0b00000000001111101111111111110111), expected: u32Bits(0b11101111111111110111110000000000) },\n  { input: u32Bits(0b00000000011111111111010000101111), expected: u32Bits(0b11110100001011111111111000000000) },\n  { input: u32Bits(0b00000000111111111111001111111011), expected: u32Bits(0b11011111110011111111111100000000) },\n  { input: u32Bits(0b00000001111111011111101111111111), expected: u32Bits(0b11111111110111111011111110000000) },\n  { input: u32Bits(0b00000011101011111011110111111011), expected: u32Bits(0b11011111101111011111010111000000) },\n  { input: u32Bits(0b00000111111110111111111111111111), expected: u32Bits(0b11111111111111111101111111100000) },\n  { input: u32Bits(0b00001111000000011011011110111111), expected: u32Bits(0b11111101111011011000000011110000) },\n  { input: u32Bits(0b00011110101111011111111111111111), expected: u32Bits(0b11111111111111111011110101111000) },\n  { input: u32Bits(0b00110110111111100111111110111101), expected: u32Bits(0b10111101111111100111111101101100) },\n  { input: u32Bits(0b01010111111101111111011111011111), expected: u32Bits(0b11111011111011111110111111101010) },\n  { input: u32Bits(0b11100010011110101101101110101111), expected: u32Bits(0b11110101110110110101111001000111) }]\n  );\n});\n\ng.test('i32').\nspecURL('https://www.w3.org/TR/2021/WD-WGSL-20210929/#integer-builtin-functions').\ndesc(`i32 tests`).\nparams((u) =>\nu.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4])\n).\nfn(async (t) => {\n  const cfg = t.params;\n\n  await run(t, builtin('reverseBits'), [Type.i32], Type.i32, cfg, [\n  // Zero\n  { input: i32Bits(0b00000000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000000) },\n\n  // One\n  { input: i32Bits(0b00000000000000000000000000000001), expected: i32Bits(0b10000000000000000000000000000000) },\n\n  // 0's after leading 1\n  { input: i32Bits(0b00000000000000000000000000000010), expected: i32Bits(0b01000000000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000000000100), expected: i32Bits(0b00100000000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000000001000), expected: i32Bits(0b00010000000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000000010000), expected: i32Bits(0b00001000000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000000100000), expected: i32Bits(0b00000100000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000001000000), expected: i32Bits(0b00000010000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000010000000), expected: i32Bits(0b00000001000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000100000000), expected: i32Bits(0b00000000100000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000001000000000), expected: i32Bits(0b00000000010000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000010000000000), expected: i32Bits(0b00000000001000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000100000000000), expected: i32Bits(0b00000000000100000000000000000000) },\n  { input: i32Bits(0b00000000000000000001000000000000), expected: i32Bits(0b00000000000010000000000000000000) },\n  { input: i32Bits(0b00000000000000000010000000000000), expected: i32Bits(0b00000000000001000000000000000000) },\n  { input: i32Bits(0b00000000000000000100000000000000), expected: i32Bits(0b00000000000000100000000000000000) },\n  { input: i32Bits(0b00000000000000001000000000000000), expected: i32Bits(0b00000000000000010000000000000000) },\n  { input: i32Bits(0b00000000000000010000000000000000), expected: i32Bits(0b00000000000000001000000000000000) },\n  { input: i32Bits(0b00000000000000100000000000000000), expected: i32Bits(0b00000000000000000100000000000000) },\n  { input: i32Bits(0b00000000000001000000000000000000), expected: i32Bits(0b00000000000000000010000000000000) },\n  { input: i32Bits(0b00000000000010000000000000000000), expected: i32Bits(0b00000000000000000001000000000000) },\n  { input: i32Bits(0b00000000000100000000000000000000), expected: i32Bits(0b00000000000000000000100000000000) },\n  { input: i32Bits(0b00000000001000000000000000000000), expected: i32Bits(0b00000000000000000000010000000000) },\n  { input: i32Bits(0b00000000010000000000000000000000), expected: i32Bits(0b00000000000000000000001000000000) },\n  { input: i32Bits(0b00000000100000000000000000000000), expected: i32Bits(0b00000000000000000000000100000000) },\n  { input: i32Bits(0b00000001000000000000000000000000), expected: i32Bits(0b00000000000000000000000010000000) },\n  { input: i32Bits(0b00000010000000000000000000000000), expected: i32Bits(0b00000000000000000000000001000000) },\n  { input: i32Bits(0b00000100000000000000000000000000), expected: i32Bits(0b00000000000000000000000000100000) },\n  { input: i32Bits(0b00001000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000010000) },\n  { input: i32Bits(0b00010000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000001000) },\n  { input: i32Bits(0b00100000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000100) },\n  { input: i32Bits(0b01000000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000010) },\n  { input: i32Bits(0b10000000000000000000000000000000), expected: i32Bits(0b00000000000000000000000000000001) },\n\n  // 1's after leading 1\n  { input: i32Bits(0b00000000000000000000000000000011), expected: i32Bits(0b11000000000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000000000111), expected: i32Bits(0b11100000000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000000001111), expected: i32Bits(0b11110000000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000000011111), expected: i32Bits(0b11111000000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000000111111), expected: i32Bits(0b11111100000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000001111111), expected: i32Bits(0b11111110000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000011111111), expected: i32Bits(0b11111111000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000111111111), expected: i32Bits(0b11111111100000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000001111111111), expected: i32Bits(0b11111111110000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000011111111111), expected: i32Bits(0b11111111111000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000111111111111), expected: i32Bits(0b11111111111100000000000000000000) },\n  { input: i32Bits(0b00000000000000000001111111111111), expected: i32Bits(0b11111111111110000000000000000000) },\n  { input: i32Bits(0b00000000000000000011111111111111), expected: i32Bits(0b11111111111111000000000000000000) },\n  { input: i32Bits(0b00000000000000000111111111111111), expected: i32Bits(0b11111111111111100000000000000000) },\n  { input: i32Bits(0b00000000000000001111111111111111), expected: i32Bits(0b11111111111111110000000000000000) },\n  { input: i32Bits(0b00000000000000011111111111111111), expected: i32Bits(0b11111111111111111000000000000000) },\n  { input: i32Bits(0b00000000000000111111111111111111), expected: i32Bits(0b11111111111111111100000000000000) },\n  { input: i32Bits(0b00000000000001111111111111111111), expected: i32Bits(0b11111111111111111110000000000000) },\n  { input: i32Bits(0b00000000000011111111111111111111), expected: i32Bits(0b11111111111111111111000000000000) },\n  { input: i32Bits(0b00000000000111111111111111111111), expected: i32Bits(0b11111111111111111111100000000000) },\n  { input: i32Bits(0b00000000001111111111111111111111), expected: i32Bits(0b11111111111111111111110000000000) },\n  { input: i32Bits(0b00000000011111111111111111111111), expected: i32Bits(0b11111111111111111111111000000000) },\n  { input: i32Bits(0b00000000111111111111111111111111), expected: i32Bits(0b11111111111111111111111100000000) },\n  { input: i32Bits(0b00000001111111111111111111111111), expected: i32Bits(0b11111111111111111111111110000000) },\n  { input: i32Bits(0b00000011111111111111111111111111), expected: i32Bits(0b11111111111111111111111111000000) },\n  { input: i32Bits(0b00000111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111100000) },\n  { input: i32Bits(0b00001111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111110000) },\n  { input: i32Bits(0b00011111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111000) },\n  { input: i32Bits(0b00111111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111100) },\n  { input: i32Bits(0b01111111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111110) },\n  { input: i32Bits(0b11111111111111111111111111111111), expected: i32Bits(0b11111111111111111111111111111111) },\n\n  // random after leading 1\n  { input: i32Bits(0b00000000000000000000000000000110), expected: i32Bits(0b01100000000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000000001101), expected: i32Bits(0b10110000000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000000011101), expected: i32Bits(0b10111000000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000000111001), expected: i32Bits(0b10011100000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000001101111), expected: i32Bits(0b11110110000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000011111111), expected: i32Bits(0b11111111000000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000000111101111), expected: i32Bits(0b11110111100000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000001111111111), expected: i32Bits(0b11111111110000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000011111110001), expected: i32Bits(0b10001111111000000000000000000000) },\n  { input: i32Bits(0b00000000000000000000111011011101), expected: i32Bits(0b10111011011100000000000000000000) },\n  { input: i32Bits(0b00000000000000000001101101111111), expected: i32Bits(0b11111110110110000000000000000000) },\n  { input: i32Bits(0b00000000000000000011111111011111), expected: i32Bits(0b11111011111111000000000000000000) },\n  { input: i32Bits(0b00000000000000000101111001110101), expected: i32Bits(0b10101110011110100000000000000000) },\n  { input: i32Bits(0b00000000000000001101111011110111), expected: i32Bits(0b11101111011110110000000000000000) },\n  { input: i32Bits(0b00000000000000011111111111110011), expected: i32Bits(0b11001111111111111000000000000000) },\n  { input: i32Bits(0b00000000000000111111111110111111), expected: i32Bits(0b11111101111111111100000000000000) },\n  { input: i32Bits(0b00000000000001111111011111111111), expected: i32Bits(0b11111111111011111110000000000000) },\n  { input: i32Bits(0b00000000000011111111111111111111), expected: i32Bits(0b11111111111111111111000000000000) },\n  { input: i32Bits(0b00000000000111110101011110111111), expected: i32Bits(0b11111101111010101111100000000000) },\n  { input: i32Bits(0b00000000001111101111111111110111), expected: i32Bits(0b11101111111111110111110000000000) },\n  { input: i32Bits(0b00000000011111111111010000101111), expected: i32Bits(0b11110100001011111111111000000000) },\n  { input: i32Bits(0b00000000111111111111001111111011), expected: i32Bits(0b11011111110011111111111100000000) },\n  { input: i32Bits(0b00000001111111011111101111111111), expected: i32Bits(0b11111111110111111011111110000000) },\n  { input: i32Bits(0b00000011101011111011110111111011), expected: i32Bits(0b11011111101111011111010111000000) },\n  { input: i32Bits(0b00000111111110111111111111111111), expected: i32Bits(0b11111111111111111101111111100000) },\n  { input: i32Bits(0b00001111000000011011011110111111), expected: i32Bits(0b11111101111011011000000011110000) },\n  { input: i32Bits(0b00011110101111011111111111111111), expected: i32Bits(0b11111111111111111011110101111000) },\n  { input: i32Bits(0b00110110111111100111111110111101), expected: i32Bits(0b10111101111111100111111101101100) },\n  { input: i32Bits(0b01010111111101111111011111011111), expected: i32Bits(0b11111011111011111110111111101010) },\n  { input: i32Bits(0b11100010011110101101101110101111), expected: i32Bits(0b11110101110110110101111001000111) }]\n  );\n});"],"mappings":"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","ignoreList":[]}