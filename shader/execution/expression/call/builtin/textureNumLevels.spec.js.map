{"version":3,"file":"textureNumLevels.spec.js","names":["description","makeTestGroup","getTextureDimensionFromView","kShaderStages","kSampleTypeInfo","WGSLTextureQueryTest","getLevelSettingsAndExpected","viewType","mipLevelCount","baseMipLevel","expected","kTextureTypeToViewDimension","texture_1d","texture_2d","texture_2d_array","texture_3d","texture_cube","texture_cube_array","texture_depth_2d","texture_depth_2d_array","texture_depth_cube","texture_depth_cube_array","g","test","specURL","desc","params","u","combine","beginSubcases","filter","t","texture_type","view_type","beforeAllSubcases","skipIfTextureViewDimensionNotSupported","fn","stage","sampled_type","format","viewDimension","dimension","isCube","includes","width","height","depthOrArrayLayers","mipCount","texture","createTextureTracked","isCompatibility","textureBindingViewDimension","usage","GPUTextureUsage","TEXTURE_BINDING","size","code","viewDescription","executeAndExpectResult"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureNumLevels.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution tests for the 'textureNumLevels' builtin function\n\nReturns the number of mip levels of a texture.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { getTextureDimensionFromView } from '../../../../../util/texture/base.js';\nimport { kShaderStages } from '../../../../validation/decl/util.js';\n\nimport { kSampleTypeInfo, WGSLTextureQueryTest } from './texture_utils.js';\n\nfunction getLevelSettingsAndExpected(viewType, mipLevelCount) {\n  return viewType === 'partial' ?\n  {\n    baseMipLevel: 1,\n    mipLevelCount: 2,\n    expected: [2]\n  } :\n  {\n    baseMipLevel: 0,\n    mipLevelCount,\n    expected: [mipLevelCount]\n  };\n}\n\nconst kTextureTypeToViewDimension = {\n  texture_1d: '1d',\n  texture_2d: '2d',\n  texture_2d_array: '2d-array',\n  texture_3d: '3d',\n  texture_cube: 'cube',\n  texture_cube_array: 'cube-array',\n  texture_depth_2d: '2d',\n  texture_depth_2d_array: '2d-array',\n  texture_depth_cube: 'cube',\n  texture_depth_cube_array: 'cube-array'\n};\n\nexport const g = makeTestGroup(WGSLTextureQueryTest);\n\ng.test('sampled').\nspecURL('https://www.w3.org/TR/WGSL/#texturenumlevels').\ndesc(\n  `\nT, a sampled type.\n\nfn textureNumLevels(t: texture_1d<T>) -> u32\nfn textureNumLevels(t: texture_2d<T>) -> u32\nfn textureNumLevels(t: texture_2d_array<T>) -> u32\nfn textureNumLevels(t: texture_3d<T>) -> u32\nfn textureNumLevels(t: texture_cube<T>) -> u32\nfn textureNumLevels(t: texture_cube_array<T>) -> u32\n\nParameters\n * t The sampled array texture.\n`\n).\nparams((u) =>\nu.\ncombine('texture_type', [\n'texture_1d',\n'texture_2d',\n'texture_2d_array',\n'texture_3d',\n'texture_cube',\n'texture_cube_array']\n).\nbeginSubcases().\ncombine('stage', kShaderStages).\ncombine('sampled_type', ['f32', 'i32', 'u32']).\ncombine('view_type', ['full', 'partial'])\n// 1d textures can't have mipLevelCount > 0\n.filter((t) => t.texture_type !== 'texture_1d' || t.view_type !== 'partial')\n).\nbeforeAllSubcases((t) => {\n  t.skipIfTextureViewDimensionNotSupported(kTextureTypeToViewDimension[t.params.texture_type]);\n}).\nfn((t) => {\n  const { stage, texture_type, sampled_type, view_type } = t.params;\n  const { format } = kSampleTypeInfo[sampled_type];\n\n  const viewDimension = kTextureTypeToViewDimension[texture_type];\n  const dimension = getTextureDimensionFromView(viewDimension);\n  const isCube = texture_type.includes('cube');\n  const width = 64;\n  const height = dimension === '1d' ? 1 : width;\n  const depthOrArrayLayers = isCube ? 6 : 1;\n  const mipCount = dimension === '1d' ? 1 : 4;\n  const texture = t.createTextureTracked({\n    format,\n    dimension,\n    ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n    usage: GPUTextureUsage.TEXTURE_BINDING,\n    size: {\n      width,\n      height,\n      depthOrArrayLayers\n    },\n    mipLevelCount: mipCount\n  });\n\n  const code = `\n@group(0) @binding(0) var t: ${texture_type}<${sampled_type}>;\n@group(0) @binding(1) var<storage, read_write> result: u32;\nfn getValue() -> u32 {\n  return textureNumLevels(t);\n}\n    `;\n\n  const { baseMipLevel, mipLevelCount, expected } = getLevelSettingsAndExpected(\n    view_type,\n    mipCount\n  );\n  const viewDescription = {\n    dimension: viewDimension,\n    baseMipLevel,\n    mipLevelCount\n  };\n\n  t.executeAndExpectResult(stage, code, texture, viewDescription, expected);\n});\n\ng.test('depth').\nspecURL('https://www.w3.org/TR/WGSL/#texturenumlevels').\ndesc(\n  `\nfn textureNumLevels(t: texture_depth_2d) -> u32\nfn textureNumLevels(t: texture_depth_2d_array) -> u32\nfn textureNumLevels(t: texture_depth_cube) -> u32\nfn textureNumLevels(t: texture_depth_cube_array) -> u32\n\nParameters\n * t The depth array texture.\n`\n).\nparams((u) =>\nu.\ncombine('texture_type', [\n'texture_depth_2d',\n'texture_depth_2d_array',\n'texture_depth_cube',\n'texture_depth_cube_array']\n).\ncombine('view_type', ['full', 'partial']).\nbeginSubcases().\ncombine('stage', kShaderStages)\n).\nbeforeAllSubcases((t) => {\n  t.skipIfTextureViewDimensionNotSupported(kTextureTypeToViewDimension[t.params.texture_type]);\n}).\nfn((t) => {\n  const { stage, texture_type, view_type } = t.params;\n\n  const viewDimension = kTextureTypeToViewDimension[texture_type];\n  const dimension = getTextureDimensionFromView(viewDimension);\n  const isCube = texture_type.includes('cube');\n  const width = 64;\n  const height = dimension === '1d' ? 1 : width;\n  const depthOrArrayLayers = isCube ? 6 : 1;\n  const mipCount = dimension === '1d' ? 1 : 4;\n  const texture = t.createTextureTracked({\n    format: 'depth32float',\n    dimension,\n    ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n    usage: GPUTextureUsage.TEXTURE_BINDING,\n    size: {\n      width,\n      height,\n      depthOrArrayLayers\n    },\n    mipLevelCount: mipCount\n  });\n\n  const code = `\n@group(0) @binding(0) var t: ${texture_type};\n@group(0) @binding(1) var<storage, read_write> result: u32;\nfn getValue() -> u32 {\n  return textureNumLevels(t);\n}\n    `;\n\n  const { baseMipLevel, mipLevelCount, expected } = getLevelSettingsAndExpected(\n    view_type,\n    mipCount\n  );\n  const viewDescription = {\n    dimension: viewDimension,\n    baseMipLevel,\n    mipLevelCount\n  };\n\n  t.executeAndExpectResult(stage, code, texture, viewDescription, expected);\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG;AAC9B;AACA;AACA;AACA,CAAC,CAAC,SAASC,aAAa,QAAQ,kDAAkD,CAClF,SAASC,2BAA2B,QAAQ,qCAAqC,CACjF,SAASC,aAAa,QAAQ,qCAAqC;;AAEnE,SAASC,eAAe,EAAEC,oBAAoB,QAAQ,oBAAoB;;AAE1E,SAASC,2BAA2BA,CAACC,QAAQ,EAAEC,aAAa,EAAE;EAC5D,OAAOD,QAAQ,KAAK,SAAS;EAC7B;IACEE,YAAY,EAAE,CAAC;IACfD,aAAa,EAAE,CAAC;IAChBE,QAAQ,EAAE,CAAC,CAAC;EACd,CAAC;EACD;IACED,YAAY,EAAE,CAAC;IACfD,aAAa;IACbE,QAAQ,EAAE,CAACF,aAAa;EAC1B,CAAC;AACH;;AAEA,MAAMG,2BAA2B,GAAG;EAClCC,UAAU,EAAE,IAAI;EAChBC,UAAU,EAAE,IAAI;EAChBC,gBAAgB,EAAE,UAAU;EAC5BC,UAAU,EAAE,IAAI;EAChBC,YAAY,EAAE,MAAM;EACpBC,kBAAkB,EAAE,YAAY;EAChCC,gBAAgB,EAAE,IAAI;EACtBC,sBAAsB,EAAE,UAAU;EAClCC,kBAAkB,EAAE,MAAM;EAC1BC,wBAAwB,EAAE;AAC5B,CAAC;;AAED,OAAO,MAAMC,CAAC,GAAGrB,aAAa,CAACI,oBAAoB,CAAC;;AAEpDiB,CAAC,CAACC,IAAI,CAAC,SAAS,CAAC;AACjBC,OAAO,CAAC,8CAA8C,CAAC;AACvDC,IAAI;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,OAAO,CAAC,cAAc,EAAE;AACxB,YAAY;AACZ,YAAY;AACZ,kBAAkB;AAClB,YAAY;AACZ,cAAc;AACd,oBAAoB;AACpB,CAAC;AACDC,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,OAAO,EAAEzB,aAAa,CAAC;AAC/ByB,OAAO,CAAC,cAAc,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;AAC9CA,OAAO,CAAC,WAAW,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC;AACxC;AAAA,CACCE,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,YAAY,KAAK,YAAY,IAAID,CAAC,CAACE,SAAS,KAAK,SAAS;AAC3E,CAAC;AACDC,iBAAiB,CAAC,CAACH,CAAC,KAAK;EACvBA,CAAC,CAACI,sCAAsC,CAACxB,2BAA2B,CAACoB,CAAC,CAACL,MAAM,CAACM,YAAY,CAAC,CAAC;AAC9F,CAAC,CAAC;AACFI,EAAE,CAAC,CAACL,CAAC,KAAK;EACR,MAAM,EAAEM,KAAK,EAAEL,YAAY,EAAEM,YAAY,EAAEL,SAAS,CAAC,CAAC,GAAGF,CAAC,CAACL,MAAM;EACjE,MAAM,EAAEa,MAAM,CAAC,CAAC,GAAGnC,eAAe,CAACkC,YAAY,CAAC;;EAEhD,MAAME,aAAa,GAAG7B,2BAA2B,CAACqB,YAAY,CAAC;EAC/D,MAAMS,SAAS,GAAGvC,2BAA2B,CAACsC,aAAa,CAAC;EAC5D,MAAME,MAAM,GAAGV,YAAY,CAACW,QAAQ,CAAC,MAAM,CAAC;EAC5C,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,MAAM,GAAGJ,SAAS,KAAK,IAAI,GAAG,CAAC,GAAGG,KAAK;EAC7C,MAAME,kBAAkB,GAAGJ,MAAM,GAAG,CAAC,GAAG,CAAC;EACzC,MAAMK,QAAQ,GAAGN,SAAS,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC;EAC3C,MAAMO,OAAO,GAAGjB,CAAC,CAACkB,oBAAoB,CAAC;IACrCV,MAAM;IACNE,SAAS;IACT,IAAIV,CAAC,CAACmB,eAAe,IAAI,EAAEC,2BAA2B,EAAEX,aAAa,CAAC,CAAC,CAAC;IACxEY,KAAK,EAAEC,eAAe,CAACC,eAAe;IACtCC,IAAI,EAAE;MACJX,KAAK;MACLC,MAAM;MACNC;IACF,CAAC;IACDtC,aAAa,EAAEuC;EACjB,CAAC,CAAC;;EAEF,MAAMS,IAAI,GAAG;AACf,+BAA+BxB,YAAY,IAAIM,YAAY;AAC3D;AACA;AACA;AACA;AACA,KAAK;;EAEH,MAAM,EAAE7B,YAAY,EAAED,aAAa,EAAEE,QAAQ,CAAC,CAAC,GAAGJ,2BAA2B;IAC3E2B,SAAS;IACTc;EACF,CAAC;EACD,MAAMU,eAAe,GAAG;IACtBhB,SAAS,EAAED,aAAa;IACxB/B,YAAY;IACZD;EACF,CAAC;;EAEDuB,CAAC,CAAC2B,sBAAsB,CAACrB,KAAK,EAAEmB,IAAI,EAAER,OAAO,EAAES,eAAe,EAAE/C,QAAQ,CAAC;AAC3E,CAAC,CAAC;;AAEFY,CAAC,CAACC,IAAI,CAAC,OAAO,CAAC;AACfC,OAAO,CAAC,8CAA8C,CAAC;AACvDC,IAAI;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,OAAO,CAAC,cAAc,EAAE;AACxB,kBAAkB;AAClB,wBAAwB;AACxB,oBAAoB;AACpB,0BAA0B;AAC1B,CAAC;AACDA,OAAO,CAAC,WAAW,EAAE,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;AACzCC,aAAa,CAAC,CAAC;AACfD,OAAO,CAAC,OAAO,EAAEzB,aAAa;AAC9B,CAAC;AACD+B,iBAAiB,CAAC,CAACH,CAAC,KAAK;EACvBA,CAAC,CAACI,sCAAsC,CAACxB,2BAA2B,CAACoB,CAAC,CAACL,MAAM,CAACM,YAAY,CAAC,CAAC;AAC9F,CAAC,CAAC;AACFI,EAAE,CAAC,CAACL,CAAC,KAAK;EACR,MAAM,EAAEM,KAAK,EAAEL,YAAY,EAAEC,SAAS,CAAC,CAAC,GAAGF,CAAC,CAACL,MAAM;;EAEnD,MAAMc,aAAa,GAAG7B,2BAA2B,CAACqB,YAAY,CAAC;EAC/D,MAAMS,SAAS,GAAGvC,2BAA2B,CAACsC,aAAa,CAAC;EAC5D,MAAME,MAAM,GAAGV,YAAY,CAACW,QAAQ,CAAC,MAAM,CAAC;EAC5C,MAAMC,KAAK,GAAG,EAAE;EAChB,MAAMC,MAAM,GAAGJ,SAAS,KAAK,IAAI,GAAG,CAAC,GAAGG,KAAK;EAC7C,MAAME,kBAAkB,GAAGJ,MAAM,GAAG,CAAC,GAAG,CAAC;EACzC,MAAMK,QAAQ,GAAGN,SAAS,KAAK,IAAI,GAAG,CAAC,GAAG,CAAC;EAC3C,MAAMO,OAAO,GAAGjB,CAAC,CAACkB,oBAAoB,CAAC;IACrCV,MAAM,EAAE,cAAc;IACtBE,SAAS;IACT,IAAIV,CAAC,CAACmB,eAAe,IAAI,EAAEC,2BAA2B,EAAEX,aAAa,CAAC,CAAC,CAAC;IACxEY,KAAK,EAAEC,eAAe,CAACC,eAAe;IACtCC,IAAI,EAAE;MACJX,KAAK;MACLC,MAAM;MACNC;IACF,CAAC;IACDtC,aAAa,EAAEuC;EACjB,CAAC,CAAC;;EAEF,MAAMS,IAAI,GAAG;AACf,+BAA+BxB,YAAY;AAC3C;AACA;AACA;AACA;AACA,KAAK;;EAEH,MAAM,EAAEvB,YAAY,EAAED,aAAa,EAAEE,QAAQ,CAAC,CAAC,GAAGJ,2BAA2B;IAC3E2B,SAAS;IACTc;EACF,CAAC;EACD,MAAMU,eAAe,GAAG;IACtBhB,SAAS,EAAED,aAAa;IACxB/B,YAAY;IACZD;EACF,CAAC;;EAEDuB,CAAC,CAAC2B,sBAAsB,CAACrB,KAAK,EAAEmB,IAAI,EAAER,OAAO,EAAES,eAAe,EAAE/C,QAAQ,CAAC;AAC3E,CAAC,CAAC","ignoreList":[]}