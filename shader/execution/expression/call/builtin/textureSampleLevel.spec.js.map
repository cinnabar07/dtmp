{"version":3,"file":"textureSampleLevel.spec.js","names":["description","makeTestGroup","isDepthTextureFormat","isFilterableAsTextureF32","kAllTextureFormats","kDepthStencilFormats","appendComponentTypeForFormatToTextureType","checkCallResults","chooseTextureSize","createTextureWithRandomDataAndGetTexels","doTextureCalls","generateSamplePointsCube","generateTextureBuiltinInputs2D","generateTextureBuiltinInputs3D","getDepthOrArrayLayersForViewDimension","getTextureTypeForTextureViewDimension","isPotentiallyFilterableAndFillable","isSupportedViewFormatCombo","kCubeSamplePointMethods","kSamplePointMethods","kShortAddressModes","kShortAddressModeToAddressMode","kShortShaderStages","skipIfNeedsFilteringAndIsUnfilterable","skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable","WGSLTextureSampleTest","g","test","specURL","desc","params","u","combine","filter","t","format","filt","beginSubcases","beforeAllSubcases","fn","stage","samplePoints","modeU","modeV","minFilter","offset","width","height","minSize","minBlocks","descriptor","size","mipLevelCount","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","texels","texture","sampler","addressModeU","addressModeV","magFilter","mipmapFilter","calls","method","mipLevel","num","type","hashInputs","map","coords","builtin","coordType","levelType","textureType","viewDescriptor","results","res","expectOK","A","depthOrArrayLayers","arrayIndex","arrayIndexType","dim","viewDimension","mode","dimension","isCompatibility","textureBindingViewDimension","addressModeW","skipIfTextureViewDimensionNotSupported","skipIfDepthTextureCanNotBeUsedWithNonComparisonSampler","L","combineWithParams","undefined"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSampleLevel.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nSamples a texture.\n\n- TODO: Test un-encodable formats.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport {\n  isDepthTextureFormat,\n  isFilterableAsTextureF32,\n  kAllTextureFormats,\n  kDepthStencilFormats } from\n'../../../../../format_info.js';\n\nimport {\n  appendComponentTypeForFormatToTextureType,\n  checkCallResults,\n  chooseTextureSize,\n  createTextureWithRandomDataAndGetTexels,\n  doTextureCalls,\n  generateSamplePointsCube,\n  generateTextureBuiltinInputs2D,\n  generateTextureBuiltinInputs3D,\n  getDepthOrArrayLayersForViewDimension,\n  getTextureTypeForTextureViewDimension,\n  isPotentiallyFilterableAndFillable,\n  isSupportedViewFormatCombo,\n  kCubeSamplePointMethods,\n  kSamplePointMethods,\n  kShortAddressModes,\n  kShortAddressModeToAddressMode,\n  kShortShaderStages,\n\n  skipIfNeedsFilteringAndIsUnfilterable,\n  skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable,\n\n\n\n  WGSLTextureSampleTest } from\n'./texture_utils.js';\n\nexport const g = makeTestGroup(WGSLTextureSampleTest);\n\ng.test('sampled_2d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplelevel').\ndesc(\n  `\nfn textureSampleLevel(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, level: f32) -> vec4<f32>\nfn textureSampleLevel(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, level: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled or depth texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * level\n    * The mip level, with level 0 containing a full size version of the texture.\n    * For the functions where level is a f32, fractional values may interpolate between\n      two levels if the format is filterable according to the Texture Format Capabilities.\n    * When not specified, mip level 0 is sampled.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n).\nparams((u) =>\nu.\ncombine('stage', kShortShaderStages).\ncombine('format', kAllTextureFormats).\nfilter((t) => isPotentiallyFilterableAndFillable(t.format)).\ncombine('filt', ['nearest', 'linear']).\nfilter((t) => t.filt === 'nearest' || isFilterableAsTextureF32(t.format)).\ncombine('modeU', kShortAddressModes).\ncombine('modeV', kShortAddressModes).\ncombine('offset', [false, true]).\nbeginSubcases().\ncombine('samplePoints', kSamplePointMethods)\n).\nbeforeAllSubcases((t) =>\nskipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n).\nfn(async (t) => {\n  const { format, stage, samplePoints, modeU, modeV, filt: minFilter, offset } = t.params;\n  skipIfNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n\n  // We want at least 4 blocks or something wide enough for 3 mip levels.\n  const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n  const descriptor = {\n    format,\n    size: { width, height },\n    mipLevelCount: 3,\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING\n  };\n  const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n  const sampler = {\n    addressModeU: kShortAddressModeToAddressMode[modeU],\n    addressModeV: kShortAddressModeToAddressMode[modeV],\n    minFilter,\n    magFilter: minFilter,\n    mipmapFilter: minFilter\n  };\n\n  const calls = generateTextureBuiltinInputs2D(50, {\n    method: samplePoints,\n    sampler,\n    descriptor,\n    mipLevel: { num: texture.mipLevelCount, type: 'f32' },\n    offset,\n    hashInputs: [stage, format, samplePoints, modeU, modeV, minFilter, offset]\n  }).map(({ coords, mipLevel, offset }) => {\n    return {\n      builtin: 'textureSampleLevel',\n      coordType: 'f',\n      coords,\n      mipLevel,\n      levelType: 'f',\n      offset\n    };\n  });\n  const textureType = appendComponentTypeForFormatToTextureType('texture_2d', format);\n  const viewDescriptor = {};\n  const results = await doTextureCalls(\n    t,\n    texture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    stage\n  );\n  const res = await checkCallResults(\n    t,\n    { texels, descriptor, viewDescriptor },\n    textureType,\n    sampler,\n    calls,\n    results,\n    stage,\n    texture\n  );\n  t.expectOK(res);\n});\n\ng.test('sampled_array_2d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplelevel').\ndesc(\n  `\nC is i32 or u32\n\nfn textureSampleLevel(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: A, level: f32) -> vec4<f32>\nfn textureSampleLevel(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: A, level: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t  The sampled or depth texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * level\n    * The mip level, with level 0 containing a full size version of the texture.\n    * For the functions where level is a f32, fractional values may interpolate between\n      two levels if the format is filterable according to the Texture Format Capabilities.\n    * When not specified, mip level 0 is sampled.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n).\nparams((u) =>\nu.\ncombine('stage', kShortShaderStages).\ncombine('format', kAllTextureFormats).\nfilter((t) => isPotentiallyFilterableAndFillable(t.format)).\ncombine('filt', ['nearest', 'linear']).\nfilter((t) => t.filt === 'nearest' || isFilterableAsTextureF32(t.format)).\ncombine('modeU', kShortAddressModes).\ncombine('modeV', kShortAddressModes).\ncombine('offset', [false, true]).\nbeginSubcases().\ncombine('samplePoints', kSamplePointMethods).\ncombine('A', ['i32', 'u32'])\n).\nbeforeAllSubcases((t) =>\nskipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n).\nfn(async (t) => {\n  const { format, stage, samplePoints, A, modeU, modeV, filt: minFilter, offset } = t.params;\n  skipIfNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n\n  // We want at least 4 blocks or something wide enough for 3 mip levels.\n  const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n  const depthOrArrayLayers = 4;\n\n  const descriptor = {\n    format,\n    size: { width, height, depthOrArrayLayers },\n    mipLevelCount: 3,\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING\n  };\n  const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n  const sampler = {\n    addressModeU: kShortAddressModeToAddressMode[modeU],\n    addressModeV: kShortAddressModeToAddressMode[modeV],\n    minFilter,\n    magFilter: minFilter,\n    mipmapFilter: minFilter\n  };\n\n  const calls = generateTextureBuiltinInputs2D(50, {\n    method: samplePoints,\n    sampler,\n    descriptor,\n    mipLevel: { num: texture.mipLevelCount, type: 'f32' },\n    arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n    offset,\n    hashInputs: [stage, format, samplePoints, A, modeU, modeV, minFilter, offset]\n  }).map(({ coords, mipLevel, arrayIndex, offset }) => {\n    return {\n      builtin: 'textureSampleLevel',\n      coordType: 'f',\n      coords,\n      mipLevel,\n      levelType: 'f',\n      arrayIndex,\n      arrayIndexType: A === 'i32' ? 'i' : 'u',\n      offset\n    };\n  });\n  const textureType = appendComponentTypeForFormatToTextureType('texture_2d_array', format);\n  const viewDescriptor = {};\n  const results = await doTextureCalls(\n    t,\n    texture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    stage\n  );\n  const res = await checkCallResults(\n    t,\n    { texels, descriptor, viewDescriptor },\n    textureType,\n    sampler,\n    calls,\n    results,\n    stage,\n    texture\n  );\n  t.expectOK(res);\n});\n\ng.test('sampled_3d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplelevel').\ndesc(\n  `\nfn textureSampleLevel(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, level: f32) -> vec4<f32>\nfn textureSampleLevel(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, level: f32, offset: vec3<i32>) -> vec4<f32>\nfn textureSampleLevel(t: texture_cube<f32>, s: sampler, coords: vec3<f32>, level: f32) -> vec4<f32>\n\nParameters:\n * t  The sampled or depth texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * level\n    * The mip level, with level 0 containing a full size version of the texture.\n    * For the functions where level is a f32, fractional values may interpolate between\n      two levels if the format is filterable according to the Texture Format Capabilities.\n    * When not specified, mip level 0 is sampled.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n).\nparams((u) =>\nu.\ncombine('stage', kShortShaderStages).\ncombine('format', kAllTextureFormats).\nfilter((t) => isPotentiallyFilterableAndFillable(t.format)).\ncombine('dim', ['3d', 'cube']).\nfilter((t) => isSupportedViewFormatCombo(t.format, t.dim)).\ncombine('filt', ['nearest', 'linear']).\nfilter((t) => t.filt === 'nearest' || isFilterableAsTextureF32(t.format)).\ncombine('mode', kShortAddressModes).\ncombine('offset', [false, true]).\nfilter((t) => t.dim !== 'cube' || t.offset !== true).\nbeginSubcases().\ncombine('samplePoints', kCubeSamplePointMethods).\nfilter((t) => t.samplePoints !== 'cube-edges' || t.dim !== '3d')\n).\nbeforeAllSubcases((t) =>\nskipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n).\nfn(async (t) => {\n  const {\n    format,\n    dim: viewDimension,\n    stage,\n    samplePoints,\n    mode,\n    filt: minFilter,\n    offset\n  } = t.params;\n  skipIfNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n\n  const [width, height] = chooseTextureSize({ minSize: 32, minBlocks: 2, format, viewDimension });\n  const depthOrArrayLayers = getDepthOrArrayLayersForViewDimension(viewDimension);\n\n  const descriptor = {\n    format,\n    dimension: viewDimension === '3d' ? '3d' : '2d',\n    ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n    size: { width, height, depthOrArrayLayers },\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    mipLevelCount: 3\n  };\n  const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n  const sampler = {\n    addressModeU: kShortAddressModeToAddressMode[mode],\n    addressModeV: kShortAddressModeToAddressMode[mode],\n    addressModeW: kShortAddressModeToAddressMode[mode],\n    minFilter,\n    magFilter: minFilter,\n    mipmapFilter: minFilter\n  };\n\n  const hashInputs = [stage, format, viewDimension, samplePoints, mode, minFilter, offset];\n  const calls = (\n  viewDimension === '3d' ?\n  generateTextureBuiltinInputs3D(50, {\n    method: samplePoints,\n    sampler,\n    descriptor,\n    mipLevel: { num: texture.mipLevelCount, type: 'f32' },\n    offset,\n    hashInputs\n  }) :\n  generateSamplePointsCube(50, {\n    method: samplePoints,\n    sampler,\n    descriptor,\n    mipLevel: { num: texture.mipLevelCount, type: 'f32' },\n    hashInputs\n  })).\n  map(({ coords, mipLevel, offset }) => {\n    return {\n      builtin: 'textureSampleLevel',\n      coordType: 'f',\n      coords,\n      mipLevel,\n      levelType: 'f',\n      offset\n    };\n  });\n  const viewDescriptor = {\n    dimension: viewDimension\n  };\n  const textureType = getTextureTypeForTextureViewDimension(viewDimension);\n  const results = await doTextureCalls(\n    t,\n    texture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    stage\n  );\n  const res = await checkCallResults(\n    t,\n    { texels, descriptor, viewDescriptor },\n    textureType,\n    sampler,\n    calls,\n    results,\n    stage,\n    texture\n  );\n  t.expectOK(res);\n});\n\ng.test('sampled_array_3d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplelevel').\ndesc(\n  `\nA is i32 or u32\n\nfn textureSampleLevel(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: A, level: f32) -> vec4<f32>\n\nParameters:\n * t  The sampled or depth texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * array_index The 0-based texture array index to sample.\n * level\n    * The mip level, with level 0 containing a full size version of the texture.\n    * For the functions where level is a f32, fractional values may interpolate between\n      two levels if the format is filterable according to the Texture Format Capabilities.\n    * When not specified, mip level 0 is sampled.\n\n- TODO: set mipLevelCount to 3 for cubemaps. See MAINTENANCE_TODO below\n\n  The issue is sampling a corner of a cubemap is undefined. We try to quantize coordinates\n  so we never get a corner but when sampling smaller mip levels that's more difficult.\n\n  * Solution 1: Fix the quantization\n  * Solution 2: special case checking cube corners. Expect some value between the color of the 3 corner texels.\n`\n).\nparams((u) =>\nu.\ncombine('stage', kShortShaderStages).\ncombine('format', kAllTextureFormats).\nfilter((t) => isPotentiallyFilterableAndFillable(t.format)).\ncombine('filt', ['nearest', 'linear']).\nfilter((t) => t.filt === 'nearest' || isFilterableAsTextureF32(t.format)).\ncombine('mode', kShortAddressModes).\nbeginSubcases().\ncombine('samplePoints', kCubeSamplePointMethods).\ncombine('A', ['i32', 'u32'])\n).\nbeforeAllSubcases((t) => {\n  skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format);\n  t.skipIfTextureViewDimensionNotSupported('cube-array');\n}).\nfn(async (t) => {\n  const { format, stage, samplePoints, A, mode, filt: minFilter } = t.params;\n  skipIfNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n\n  const viewDimension = 'cube-array';\n  const size = chooseTextureSize({\n    minSize: 32,\n    minBlocks: 4,\n    format,\n    viewDimension\n  });\n  const descriptor = {\n    format,\n    size,\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    mipLevelCount: 3\n  };\n  const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n  const sampler = {\n    addressModeU: kShortAddressModeToAddressMode[mode],\n    addressModeV: kShortAddressModeToAddressMode[mode],\n    addressModeW: kShortAddressModeToAddressMode[mode],\n    minFilter,\n    magFilter: minFilter,\n    mipmapFilter: minFilter\n  };\n\n  const calls = generateSamplePointsCube(50, {\n    method: samplePoints,\n    sampler,\n    descriptor,\n    mipLevel: { num: texture.mipLevelCount, type: 'f32' },\n    arrayIndex: { num: texture.depthOrArrayLayers / 6, type: A },\n    hashInputs: [stage, format, viewDimension, A, samplePoints, mode, minFilter]\n  }).map(({ coords, mipLevel, arrayIndex }) => {\n    return {\n      builtin: 'textureSampleLevel',\n      coordType: 'f',\n      coords,\n      mipLevel,\n      levelType: 'f',\n      arrayIndex,\n      arrayIndexType: A === 'i32' ? 'i' : 'u'\n    };\n  });\n  const viewDescriptor = {\n    dimension: viewDimension\n  };\n  const textureType = getTextureTypeForTextureViewDimension(viewDimension);\n  const results = await doTextureCalls(\n    t,\n    texture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    stage\n  );\n  const res = await checkCallResults(\n    t,\n    { texels, descriptor, viewDescriptor },\n    textureType,\n    sampler,\n    calls,\n    results,\n    stage,\n    texture\n  );\n  t.expectOK(res);\n});\n\ng.test('depth_2d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplelevel').\ndesc(\n  `\nL is i32 or u32\n\nfn textureSampleLevel(t: texture_depth_2d, s: sampler, coords: vec2<f32>, level: L) -> f32\nfn textureSampleLevel(t: texture_depth_2d, s: sampler, coords: vec2<f32>, level: L, offset: vec2<i32>) -> f32\n\nParameters:\n * t  The sampled or depth texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * level\n    * The mip level, with level 0 containing a full size version of the texture.\n    * For the functions where level is a f32, fractional values may interpolate between\n      two levels if the format is filterable according to the Texture Format Capabilities.\n    * When not specified, mip level 0 is sampled.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n).\nparams((u) =>\nu.\ncombine('stage', kShortShaderStages).\ncombine('format', kDepthStencilFormats)\n// filter out stencil only formats\n.filter((t) => isDepthTextureFormat(t.format)).\ncombine('mode', kShortAddressModes).\ncombine('offset', [false, true]).\nbeginSubcases().\ncombine('samplePoints', kSamplePointMethods).\ncombine('L', ['i32', 'u32'])\n).\nbeforeAllSubcases((t) => {\n  t.skipIfDepthTextureCanNotBeUsedWithNonComparisonSampler();\n  skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format);\n}).\nfn(async (t) => {\n  const { format, stage, samplePoints, mode, L, offset } = t.params;\n\n  // We want at least 4 blocks or something wide enough for 3 mip levels.\n  const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n  const descriptor = {\n    format,\n    size: { width, height },\n    mipLevelCount: 3,\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING\n  };\n  const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n  const sampler = {\n    addressModeU: kShortAddressModeToAddressMode[mode],\n    addressModeV: kShortAddressModeToAddressMode[mode]\n  };\n\n  const calls = generateTextureBuiltinInputs2D(50, {\n    method: samplePoints,\n    sampler,\n    descriptor,\n    mipLevel: { num: texture.mipLevelCount, type: L },\n    offset,\n    hashInputs: [stage, format, samplePoints, mode, L, offset]\n  }).map(({ coords, mipLevel, offset }) => {\n    return {\n      builtin: 'textureSampleLevel',\n      coordType: 'f',\n      coords,\n      mipLevel,\n      levelType: L === 'i32' ? 'i' : 'u',\n      offset\n    };\n  });\n  const textureType = appendComponentTypeForFormatToTextureType('texture_depth_2d', format);\n  const viewDescriptor = {};\n  const results = await doTextureCalls(\n    t,\n    texture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    stage\n  );\n  const res = await checkCallResults(\n    t,\n    { texels, descriptor, viewDescriptor },\n    textureType,\n    sampler,\n    calls,\n    results,\n    stage,\n    texture\n  );\n  t.expectOK(res);\n});\n\ng.test('depth_array_2d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplelevel').\ndesc(\n  `\nA is i32 or u32\nL is i32 or u32\n\nfn textureSampleLevel(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: A, level: L) -> f32\nfn textureSampleLevel(t: texture_depth_2d_array, s: sampler, coords: vec2<f32>, array_index: A, level: L, offset: vec2<i32>) -> f32\n\nParameters:\n * t  The sampled or depth texture to sample.\n * s  The sampler type.\n * array_index The 0-based texture array index to sample.\n * coords The texture coordinates used for sampling.\n * level\n    * The mip level, with level 0 containing a full size version of the texture.\n    * For the functions where level is a f32, fractional values may interpolate between\n      two levels if the format is filterable according to the Texture Format Capabilities.\n    * When not specified, mip level 0 is sampled.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n).\nparams((u) =>\nu.\ncombine('stage', kShortShaderStages).\ncombine('format', kDepthStencilFormats)\n// filter out stencil only formats\n.filter((t) => isDepthTextureFormat(t.format)).\ncombine('mode', kShortAddressModes).\ncombine('offset', [false, true]).\nbeginSubcases().\ncombine('samplePoints', kSamplePointMethods).\ncombine('A', ['i32', 'u32']).\ncombine('L', ['i32', 'u32'])\n).\nbeforeAllSubcases((t) => {\n  t.skipIfDepthTextureCanNotBeUsedWithNonComparisonSampler();\n  skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format);\n}).\nfn(async (t) => {\n  const { format, stage, samplePoints, mode, A, L, offset } = t.params;\n\n  // We want at least 4 blocks or something wide enough for 3 mip levels.\n  const [width, height] = chooseTextureSize({ minSize: 8, minBlocks: 4, format });\n  const descriptor = {\n    format,\n    size: { width, height },\n    mipLevelCount: 3,\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    ...(t.isCompatibility && { textureBindingViewDimension: '2d-array' })\n  };\n  const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n  const sampler = {\n    addressModeU: kShortAddressModeToAddressMode[mode],\n    addressModeV: kShortAddressModeToAddressMode[mode]\n  };\n\n  const calls = generateTextureBuiltinInputs2D(50, {\n    method: samplePoints,\n    sampler,\n    descriptor,\n    arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n    mipLevel: { num: texture.mipLevelCount, type: L },\n    offset,\n    hashInputs: [stage, format, samplePoints, mode, L, A, offset]\n  }).map(({ coords, mipLevel, arrayIndex, offset }) => {\n    return {\n      builtin: 'textureSampleLevel',\n      coordType: 'f',\n      coords,\n      mipLevel,\n      levelType: L === 'i32' ? 'i' : 'u',\n      arrayIndex,\n      arrayIndexType: A === 'i32' ? 'i' : 'u',\n      offset\n    };\n  });\n  const textureType = appendComponentTypeForFormatToTextureType('texture_depth_2d_array', format);\n  const viewDescriptor = { dimension: '2d-array' };\n  const results = await doTextureCalls(\n    t,\n    texture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    stage\n  );\n  const res = await checkCallResults(\n    t,\n    { texels, descriptor, viewDescriptor },\n    textureType,\n    sampler,\n    calls,\n    results,\n    stage,\n    texture\n  );\n  t.expectOK(res);\n});\n\ng.test('depth_3d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplelevel').\ndesc(\n  `\nL is i32 or u32\nA is i32 or u32\n\nfn textureSampleLevel(t: texture_depth_cube, s: sampler, coords: vec3<f32>, level: L) -> f32\nfn textureSampleLevel(t: texture_depth_cube_array, s: sampler, coords: vec3<f32>, array_index: A, level: L) -> f32\n\nParameters:\n * t  The sampled or depth texture to sample.\n * s  The sampler type.\n * coords The texture coordinates used for sampling.\n * level\n    * The mip level, with level 0 containing a full size version of the texture.\n    * For the functions where level is a f32, fractional values may interpolate between\n      two levels if the format is filterable according to the Texture Format Capabilities.\n    * When not specified, mip level 0 is sampled.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n).\nparams((u) =>\nu.\ncombine('stage', kShortShaderStages).\ncombine('format', kDepthStencilFormats)\n// filter out stencil only formats\n.filter((t) => isDepthTextureFormat(t.format)).\ncombineWithParams([\n{ viewDimension: 'cube' },\n{ viewDimension: 'cube-array', A: 'i32' },\n{ viewDimension: 'cube-array', A: 'u32' }]\n).\ncombine('mode', kShortAddressModes).\nbeginSubcases().\ncombine('samplePoints', kCubeSamplePointMethods).\ncombine('L', ['i32', 'u32'])\n).\nbeforeAllSubcases((t) => {\n  t.skipIfDepthTextureCanNotBeUsedWithNonComparisonSampler();\n  skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format);\n  t.skipIfTextureViewDimensionNotSupported(t.params.viewDimension);\n}).\nfn(async (t) => {\n  const { format, stage, viewDimension, samplePoints, A, L, mode } = t.params;\n\n  const size = chooseTextureSize({\n    minSize: 32,\n    minBlocks: 4,\n    format,\n    viewDimension\n  });\n  const descriptor = {\n    format,\n    size,\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    mipLevelCount: 3,\n    ...(t.isCompatibility && { textureBindingViewDimension: viewDimension })\n  };\n  const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n  const sampler = {\n    addressModeU: kShortAddressModeToAddressMode[mode],\n    addressModeV: kShortAddressModeToAddressMode[mode],\n    addressModeW: kShortAddressModeToAddressMode[mode]\n  };\n\n  const calls = generateSamplePointsCube(50, {\n    method: samplePoints,\n    sampler,\n    descriptor,\n    mipLevel: { num: texture.mipLevelCount - 1, type: L },\n    arrayIndex: A ? { num: texture.depthOrArrayLayers / 6, type: A } : undefined,\n    hashInputs: [stage, format, viewDimension, samplePoints, mode]\n  }).map(({ coords, mipLevel, arrayIndex }) => {\n    return {\n      builtin: 'textureSampleLevel',\n      coordType: 'f',\n      coords,\n      mipLevel,\n      levelType: L === 'i32' ? 'i' : 'u',\n      arrayIndex,\n      arrayIndexType: A ? A === 'i32' ? 'i' : 'u' : undefined\n    };\n  });\n  const viewDescriptor = {\n    dimension: viewDimension\n  };\n  const textureType =\n  viewDimension === 'cube' ? 'texture_depth_cube' : 'texture_depth_cube_array';\n  const results = await doTextureCalls(\n    t,\n    texture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    stage\n  );\n\n  const res = await checkCallResults(\n    t,\n    { texels, descriptor, viewDescriptor },\n    textureType,\n    sampler,\n    calls,\n    results,\n    stage,\n    texture\n  );\n  t.expectOK(res);\n});"],"mappings":"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","ignoreList":[]}