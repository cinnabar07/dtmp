{"version":3,"file":"frexp.cache.js","names":["skipUndefined","i32","toVector","abstractInt","FP","frexp","makeCaseCache","makeCaseFract","v","trait","fp","toInput","toOutput","Array","n","scalarBuilder","map","quantize","some","e","isSubnormal","input","expected","undefined","fs","fract","makeCaseExp","BigInt","exp","vec_cases","flatMap","dim","portion","vectorRange","reduce","a","b","scalar_cases","scalarRange","d"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/frexp.cache.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { skipUndefined } from '../../../../../util/compare.js';import {\n\n  i32,\n  toVector,\n  abstractInt } from\n'../../../../../util/conversion.js';\nimport { FP } from '../../../../../util/floating_point.js';\nimport { frexp } from '../../../../../util/math.js';\n\nimport { makeCaseCache } from '../../case_cache.js';\n\n/* @returns a fract Case for a given scalar or vector input */\nfunction makeCaseFract(v, trait) {\n  const fp = FP[trait];\n  let toInput;\n  let toOutput;\n  if (v instanceof Array) {\n    // Input is vector\n    toInput = (n) => toVector(n, fp.scalarBuilder);\n    toOutput = (n) => toVector(n, fp.scalarBuilder);\n  } else {\n    // Input is scalar, also wrap it in an array.\n    v = [v];\n    toInput = (n) => fp.scalarBuilder(n[0]);\n    toOutput = (n) => fp.scalarBuilder(n[0]);\n  }\n\n  v = v.map(fp.quantize);\n  if (v.some((e) => e !== 0 && fp.isSubnormal(e))) {\n    return { input: toInput(v), expected: skipUndefined(undefined) };\n  }\n\n  const fs = v.map((e) => {\n    return frexp(e, trait !== 'abstract' ? trait : 'f64').fract;\n  });\n\n  return { input: toInput(v), expected: toOutput(fs) };\n}\n\n/* @returns an exp Case for a given scalar or vector input */\nfunction makeCaseExp(v, trait) {\n  const fp = FP[trait];\n  let toInput;\n  let toOutput;\n  if (v instanceof Array) {\n    // Input is vector\n    toInput = (n) => toVector(n, fp.scalarBuilder);\n    toOutput = (n) =>\n    toVector(n, trait !== 'abstract' ? i32 : (n) => abstractInt(BigInt(n)));\n  } else {\n    // Input is scalar, also wrap it in an array.\n    v = [v];\n    toInput = (n) => fp.scalarBuilder(n[0]);\n    toOutput = (n) =>\n    trait !== 'abstract' ? i32(n[0]) : abstractInt(BigInt(n[0]));\n  }\n\n  v = v.map(fp.quantize);\n  if (v.some((e) => e !== 0 && fp.isSubnormal(e))) {\n    return { input: toInput(v), expected: skipUndefined(undefined) };\n  }\n\n  const fs = v.map((e) => {\n    return frexp(e, trait !== 'abstract' ? trait : 'f64').exp;\n  });\n\n  return { input: toInput(v), expected: toOutput(fs) };\n}\n\n// Cases: [f32|f16]_vecN_[exp|whole]\nconst vec_cases = ['f32', 'f16', 'abstract'].\nflatMap((trait) =>\n[2, 3, 4].flatMap((dim) =>\n['exp', 'fract'].map((portion) => ({\n  [`${trait}_vec${dim}_${portion}`]: () => {\n    return FP[trait].\n    vectorRange(dim).\n    map((v) => portion === 'exp' ? makeCaseExp(v, trait) : makeCaseFract(v, trait));\n  }\n}))\n)\n).\nreduce((a, b) => ({ ...a, ...b }), {});\n\n// Cases: [f32|f16]_[exp|whole]\nconst scalar_cases = ['f32', 'f16', 'abstract'].\nflatMap((trait) =>\n['exp', 'fract'].map((portion) => ({\n  [`${trait}_${portion}`]: () => {\n    return FP[trait].\n    scalarRange().\n    map((v) => portion === 'exp' ? makeCaseExp(v, trait) : makeCaseFract(v, trait));\n  }\n}))\n).\nreduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('frexp', {\n  ...scalar_cases,\n  ...vec_cases\n});"],"mappings":"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","ignoreList":[]}