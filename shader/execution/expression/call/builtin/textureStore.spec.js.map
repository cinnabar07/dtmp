{"version":3,"file":"textureStore.spec.js","names":["description","makeTestGroup","unreachable","iterRange","range","kTextureFormatInfo","GPUTest","TextureTestMixin","kFloat32Format","kFloat16Format","numberToFloatBits","pack4x8unorm","pack4x8snorm","align","clamp","getTextureDimensionFromView","virtualMipSize","TexelFormats","kDims","kViewDimensions","g","inputArray","format","test","desc","params","u","combineWithParams","_shaderType","combine","unless","t","access","color","readWriteStorage","beforeAllSubcases","selectDeviceOrSkipTestCase","skipIfTextureFormatNotUsableAsStorageTexture","fn","stage","viewDimension","values","suffix","endsWith","swizzleWGSL","layerWGSL","wgsl","map","v","join","replace","length","textureSize","dimension","texture","createTextureTracked","size","mipLevelCount","usage","GPUTextureUsage","STORAGE_BINDING","COPY_SRC","module","device","createShaderModule","code","pipeline","createComputePipeline","layout","compute","createRenderPipeline","vertex","fragment","targets","bg","createBindGroup","getBindGroupLayout","entries","binding","resource","createView","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","renderTarget","slice","RENDER_ATTACHMENT","beginRenderPass","colorAttachments","view","loadOp","storeOp","draw","queue","submit","finish","bytesPerTexel","buffer","copyWholeTextureToNewBufferSimple","u32sPerTexel","bytesPerRow","texelsPerRow","texelsPerSlice","getValue","i","clampedPack4x8unorm","c","min","max","clampedPack4x8snorm","expected","Uint32Array","texelId","z","y","x","id","unit","vals","expectGPUBufferValuesEqual","r","b","a","numTexels","width","height","depthOrArrayLayers","entryPoint","kWidth","getTextureSize","dim","array","texelsPerArray","textureType","indexToCoord","type","outOfBoundsValue","getMipTexels","mip","texels","filter","mipCount","texel_format","num_texels","view_texels","texture_size","mip_size","oob_value","coords","wgx_size","num_wgs_x","baseArrayLayer","arrayLayerCount","baseMipLevel","m","expectedOutput","kArrayLevels","arrayLevels","baseLevel","isCompatibility","skipIf","view_dim","base_texels","view_size","baseOffset"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureStore.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nWrites a single texel to a texture.\n\nThe channel format T depends on the storage texel format F.\nSee the texel format table for the mapping of texel format to channel format.\n\nNote: An out-of-bounds access occurs if:\n * any element of coords is outside the range [0, textureDimensions(t)) for the corresponding element, or\n * array_index is outside the range of [0, textureNumLayers(t))\n\nIf an out-of-bounds access occurs, the built-in function should not be executed.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { unreachable, iterRange, range } from '../../../../../../common/util/util.js';\nimport { kTextureFormatInfo } from '../../../../../format_info.js';\nimport { GPUTest, TextureTestMixin } from '../../../../../gpu_test.js';\nimport {\n  kFloat32Format,\n  kFloat16Format,\n  numberToFloatBits,\n  pack4x8unorm,\n  pack4x8snorm } from\n'../../../../../util/conversion.js';\nimport { align, clamp } from '../../../../../util/math.js';\nimport { getTextureDimensionFromView, virtualMipSize } from '../../../../../util/texture/base.js';\nimport { TexelFormats } from '../../../../types.js';\n\nconst kDims = ['1d', '2d', '3d'];\nconst kViewDimensions = ['1d', '2d', '2d-array', '3d'];\n\nexport const g = makeTestGroup(TextureTestMixin(GPUTest));\n\n// We require a few values that are out of range for a given type\n// so we can check clamping behavior.\nfunction inputArray(format) {\n  switch (format) {\n    case 'rgba8snorm':\n      return [-1.1, 1.0, -0.6, -0.3, 0, 0.3, 0.6, 1.0, 1.1];\n    case 'rgba8unorm':\n    case 'bgra8unorm':\n      return [-0.1, 0, 0.2, 0.4, 0.6, 0.8, 1.0, 1.1];\n    case 'rgba8uint':\n      return [0, 8, 16, 24, 32, 64, 100, 128, 200, 255, 256, 512];\n    case 'rgba16uint':\n      return [0, 8, 16, 24, 32, 64, 100, 128, 200, 255, 0xffff, 0x1ffff];\n    case 'rgba32uint':\n    case 'r32uint':\n    case 'rg32uint':\n      return [0, 8, 16, 24, 32, 64, 100, 128, 200, 255, 256, 512, 0xffffffff];\n    case 'rgba8sint':\n      return [-128, -100, -64, -32, -16, -8, 0, 8, 16, 32, 64, 100, 127];\n    case 'rgba16sint':\n      return [-32768, -32769, -100, -64, -32, -16, -8, 0, 8, 16, 32, 64, 100, 127, 0x7fff, 0x8000];\n    case 'r32sint':\n    case 'rg32sint':\n    case 'rgba32sint':\n      return [-0x8000000, -32769, -100, -64, -32, -16, -8, 0, 8, 16, 32, 64, 100, 127, 0x7ffffff];\n    case 'rgba16float':\n    case 'rgba32float':\n    case 'r32float':\n    case 'rg32float':\n      // Stick with simple values to avoid rounding issues.\n      return [-100, -50, -32, -16, -8, -1, 0, 1, 8, 16, 32, 50, 100];\n    default:\n      unreachable(`unhandled format ${format}`);\n      break;\n  }\n  return [];\n}\n\ng.test('texel_formats').\ndesc(\n  `\n    Test storage of texel formats\n\n    - test values make it through.\n    - test out of range values get clamped.\n    - test 1d, 2d, 2d-array, 3d.\n    - test all storage formats.\n  `\n).\nparams((u) =>\nu.\ncombineWithParams([...TexelFormats, { format: 'bgra8unorm', _shaderType: 'f32' }]).\ncombine('viewDimension', kViewDimensions)\n// Note: We can't use writable storage textures in a vertex stage.\n.combine('stage', ['compute', 'fragment']).\ncombine('access', ['write', 'read_write']).\nunless(\n  (t) =>\n  t.access === 'read_write' &&\n  !kTextureFormatInfo[t.format].color?.readWriteStorage\n)\n).\nbeforeAllSubcases((t) => {\n  if (t.params.format === 'bgra8unorm') {\n    t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n  } else {\n    t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format);\n  }\n}).\nfn((t) => {\n  const { format, stage, access, viewDimension, _shaderType } = t.params;\n  const values = inputArray(format);\n\n  const suffix = format.endsWith('sint') ? 'i' : format.endsWith('uint') ? 'u' : 'f';\n  const swizzleWGSL = viewDimension === '1d' ? 'x' : viewDimension === '3d' ? 'xyz' : 'xy';\n  const layerWGSL = viewDimension === '2d-array' ? ', gid.z' : '';\n  const wgsl = `\nconst range = array(${values.map((v) => `${v}${suffix}`).join(',')});\n\n@group(0) @binding(0)\nvar tex : texture_storage_${viewDimension.replace('-', '_')}<${format}, ${access}>;\n\nfn setValue(gid: vec3u) {\n  let ndx = gid.x + gid.y + gid.z;\n  let vecVal = vec4(\n    range[(ndx + 0) % ${values.length}],\n    range[(ndx + 1) % ${values.length}],\n    range[(ndx + 2) % ${values.length}],\n    range[(ndx + 3) % ${values.length}],\n  );\n  var val = vec4<${_shaderType}>(vecVal);\n  let coord = gid.${swizzleWGSL};\n  textureStore(tex, coord${layerWGSL}, val);\n}\n\n@compute @workgroup_size(${values.length})\nfn cs(@builtin(global_invocation_id) gid : vec3u) {\n  setValue(gid);\n}\n\nstruct VOut {\n  @builtin(position) pos: vec4f,\n  @location(0) @interpolate(flat, either) z: u32,\n}\n@vertex fn vs(\n  @builtin(vertex_index) vNdx: u32,\n  @builtin(instance_index) iNdx: u32,\n) -> VOut {\n  let pos = array(vec2f(-1, 3), vec2f(3, -1), vec2f(-1, -1));\n  return VOut(vec4f(pos[vNdx], 0, 1), iNdx);\n}\n\n@fragment fn fs(v: VOut) -> @location(0) vec4f {\n  setValue(vec3u(u32(v.pos.x), u32(v.pos.y), v.z));\n  return vec4f(0);\n}\n`;\n\n  const textureSize = [\n  values.length,\n  viewDimension === '1d' ? 1 : values.length,\n  viewDimension === '2d-array' || viewDimension === '3d' ? values.length : 1];\n\n  const dimension = getTextureDimensionFromView(viewDimension);\n  const texture = t.createTextureTracked({\n    format: format,\n    size: textureSize,\n    mipLevelCount: 1,\n    dimension,\n    usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC\n  });\n\n  const module = t.device.createShaderModule({\n    code: wgsl\n  });\n\n  const pipeline =\n  stage === 'compute' ?\n  t.device.createComputePipeline({\n    layout: 'auto',\n    compute: { module }\n  }) :\n  t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: { module },\n    fragment: { module, targets: [{ format: 'rgba8unorm' }] }\n  });\n\n  const bg = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n    {\n      binding: 0,\n      resource: texture.createView({\n        format: format,\n        dimension: viewDimension\n      })\n    }]\n\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  switch (stage) {\n    case 'compute':{\n        const pass = encoder.beginComputePass();\n        pass.setPipeline(pipeline);\n        pass.setBindGroup(0, bg);\n        pass.dispatchWorkgroups(...textureSize);\n        pass.end();\n        break;\n      }\n    case 'fragment':{\n        const renderTarget = t.createTextureTracked({\n          size: textureSize.slice(0, 2),\n          format: 'rgba8unorm',\n          usage: GPUTextureUsage.RENDER_ATTACHMENT\n        });\n        const pass = encoder.beginRenderPass({\n          colorAttachments: [\n          {\n            view: renderTarget.createView(),\n            loadOp: 'clear',\n            storeOp: 'store'\n          }]\n\n        });\n        pass.setPipeline(pipeline);\n        pass.setBindGroup(0, bg);\n        pass.draw(3, textureSize[2]);\n        pass.end();\n        break;\n      }\n  }\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  let bytesPerTexel = 4;\n  switch (format) {\n    case 'rgba16uint':\n    case 'rgba16sint':\n    case 'rgba16float':\n    case 'rg32uint':\n    case 'rg32sint':\n    case 'rg32float':\n      bytesPerTexel = 8;\n      break;\n    case 'rgba32uint':\n    case 'rgba32sint':\n    case 'rgba32float':\n      bytesPerTexel = 16;\n      break;\n    default:\n      break;\n  }\n\n  const buffer = t.copyWholeTextureToNewBufferSimple(texture, 0);\n  const u32sPerTexel = bytesPerTexel / 4;\n  const bytesPerRow = align(textureSize[0] * bytesPerTexel, 256);\n  const texelsPerRow = bytesPerRow / bytesPerTexel;\n  const texelsPerSlice = texelsPerRow * textureSize[1];\n  const getValue = (i) => values[i % values.length];\n  const clampedPack4x8unorm = (...v) => {\n    const c = v.map((v) => clamp(v, { min: 0, max: 1 }));\n    return pack4x8unorm(c[0], c[1], c[2], c[3]);\n  };\n  const clampedPack4x8snorm = (...v) => {\n    const c = v.map((v) => clamp(v, { min: -1, max: 1 }));\n    return pack4x8snorm(c[0], c[1], c[2], c[3]);\n  };\n  const expected = new Uint32Array([\n  // iterate over each u32\n  ...iterRange(buffer.size / 4, (i) => {\n    const texelId = i / u32sPerTexel | 0;\n    const z = texelId / texelsPerSlice | 0;\n    const y = (texelId / texelsPerRow | 0) % textureSize[1];\n    const x = texelId % texelsPerRow;\n    // buffer is padded to 256 per row so when x is out of range just return 0\n    if (x >= textureSize[0]) {\n      return 0;\n    }\n    const id = x + y + z;\n    const unit = i % u32sPerTexel;\n    switch (format) {\n      case 'rgba8unorm':{\n          const vals = range(4, (i) => getValue(id + i));\n          return clampedPack4x8unorm(vals[0], vals[1], vals[2], vals[3]);\n        }\n      case 'bgra8unorm':{\n          const vals = range(4, (i) => getValue(id + i));\n          return clampedPack4x8unorm(vals[2], vals[1], vals[0], vals[3]);\n        }\n      case 'rgba8snorm':{\n          const vals = range(4, (i) => getValue(id + i));\n          return clampedPack4x8snorm(vals[0], vals[1], vals[2], vals[3]);\n        }\n      case 'r32uint':\n        return clamp(getValue(id), { min: 0, max: 0xffffffff });\n      case 'r32sint':\n        return clamp(getValue(id), { min: -0x80000000, max: 0x7fffffff });\n      case 'rg32uint':\n      case 'rgba32uint':\n        return clamp(getValue(id + unit), { min: 0, max: 0xffffffff });\n      case 'rg32sint':\n      case 'rgba32sint':\n        return clamp(getValue(id + unit), { min: -0x80000000, max: 0x7fffffff });\n      case 'rgba8uint':{\n          const vals = range(4, (i) => clamp(getValue(id + i), { min: 0, max: 255 }));\n          return (\n            (vals[3] & 0xff) << 24 |\n            (vals[2] & 0xff) << 16 |\n            (vals[1] & 0xff) << 8 |\n            vals[0] & 0xff);\n\n        }\n      case 'rgba8sint':{\n          const vals = range(4, (i) => clamp(getValue(id + i), { min: -0x80, max: 0x7f }));\n          return (\n            (vals[3] & 0xff) << 24 |\n            (vals[2] & 0xff) << 16 |\n            (vals[1] & 0xff) << 8 |\n            vals[0] & 0xff);\n\n        }\n      case 'rgba16uint':{\n          const vals = range(2, (i) => clamp(getValue(id + unit * 2 + i), { min: 0, max: 0xffff }));\n          return (vals[1] & 0xffff) << 16 | vals[0] & 0xffff;\n        }\n      case 'rgba16sint':{\n          const vals = range(2, (i) =>\n          clamp(getValue(id + unit * 2 + i), { min: -0x8000, max: 0x7fff })\n          );\n          return (vals[1] & 0xffff) << 16 | vals[0] & 0xffff;\n        }\n      case 'r32float':\n      case 'rg32float':\n      case 'rgba32float':{\n          return numberToFloatBits(getValue(id + unit), kFloat32Format);\n        }\n      case 'rgba16float':{\n          const vals = range(2, (i) =>\n          numberToFloatBits(getValue(id + unit * 2 + i), kFloat16Format)\n          );\n          return (vals[1] & 0xffff) << 16 | vals[0] & 0xffff;\n        }\n      default:\n        unreachable(`unhandled format ${format}`);\n        break;\n    }\n  })]\n  );\n  t.expectGPUBufferValuesEqual(buffer, expected);\n});\n\ng.test('bgra8unorm_swizzle').\ndesc('Test bgra8unorm swizzling').\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('bgra8unorm-storage');\n}).\nfn((t) => {\n  const values = [\n  { r: -1.1, g: 0.6, b: 0.4, a: 1 },\n  { r: 1.1, g: 0.6, b: 0.4, a: 1 },\n  { r: 0.4, g: -1.1, b: 0.6, a: 1 },\n  { r: 0.4, g: 1.1, b: 0.6, a: 1 },\n  { r: 0.6, g: 0.4, b: -1.1, a: 1 },\n  { r: 0.6, g: 0.4, b: 1.1, a: 1 },\n  { r: 0.2, g: 0.4, b: 0.6, a: 1 },\n  { r: -0.2, g: -0.4, b: -0.6, a: 1 }];\n\n  let wgsl = `\n@group(0) @binding(0) var tex : texture_storage_1d<bgra8unorm, write>;\n\nconst values = array(`;\n  for (const v of values) {\n    wgsl += `vec4(${v.r},${v.g},${v.b},${v.a}),\\n`;\n  }\n  wgsl += `);\n\n@compute @workgroup_size(${values.length})\nfn main(@builtin(global_invocation_id) gid : vec3u) {\n  let value = values[gid.x];\n  textureStore(tex, gid.x, value);\n}`;\n\n  const numTexels = values.length;\n  const textureSize = { width: numTexels, height: 1, depthOrArrayLayers: 1 };\n  const texture = t.createTextureTracked({\n    format: 'bgra8unorm',\n    dimension: '1d',\n    size: textureSize,\n    mipLevelCount: 1,\n    usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC\n  });\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: wgsl\n      }),\n      entryPoint: 'main'\n    }\n  });\n  const bg = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n    {\n      binding: 0,\n      resource: texture.createView({\n        format: 'bgra8unorm',\n        dimension: '1d'\n      })\n    }]\n\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatchWorkgroups(1, 1, 1);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  const buffer = t.copyWholeTextureToNewBufferSimple(texture, 0);\n  const expected = new Uint32Array([\n  ...iterRange(numTexels, (x) => {\n    const { r, g, b, a } = values[x];\n    return pack4x8unorm(b, g, r, a);\n  })]\n  );\n  t.expectGPUBufferValuesEqual(buffer, expected);\n});\n\n// Texture width for dimensions >1D.\n// Sized such that mip level 2 will be at least 256 bytes/row.\nconst kWidth = 256;\n\n// Returns the texture geometry based on a given number of texels.\nfunction getTextureSize(numTexels, dim, array) {\n  const size = { width: 1, height: 1, depthOrArrayLayers: 1 };\n  switch (dim) {\n    case '1d':\n      size.width = numTexels;\n      break;\n    case '2d':{\n        const texelsPerArray = numTexels / array;\n        size.width = kWidth;\n        size.height = texelsPerArray / kWidth;\n        size.depthOrArrayLayers = array;\n        break;\n      }\n    case '3d':\n      size.width = kWidth;\n      size.height = numTexels / (2 * kWidth);\n      size.depthOrArrayLayers = 2;\n      break;\n  }\n  return size;\n}\n\n// WGSL declaration type for the texture.\nfunction textureType(dim) {\n  return `texture_storage_${dim}<r32uint, write>`;\n}\n\n// Defines a function to convert linear global id into a texture coordinate.\nfunction indexToCoord(dim, type) {\n  switch (dim) {\n    case '1d':\n      return `\nfn indexToCoord(id : u32) -> ${type} {\n  return ${type}(id);\n}`;\n      break;\n    case '2d':\n      return `\nfn indexToCoord(id : u32) -> vec2<${type}> {\n  return vec2<${type}>(${type}(id % width), ${type}(id / width));\n}`;\n      break;\n    case '3d':\n      return `\nfn indexToCoord(id : u32) -> vec3<${type}> {\n  const half = numTexels / depth;\n  let half_id = id % half;\n  return vec3<${type}>(${type}(half_id % width), ${type}(half_id / width), ${type}(id / half));\n}`;\n      break;\n  }\n  return ``;\n}\n\n// Mutates 'coords' to produce an out-of-bounds value.\n// 1D workgroups are launched so 'gid.x' is the linear id.\n//\n// This code is only executed for odd global ids (gid.x % 2 == 1).\n// All the values are chosen such they will further divide the odd invocations.\nfunction outOfBoundsValue(dim, type) {\n  switch (dim) {\n    case '1d':{\n        if (type === 'i32') {\n          return `if gid.x % 3 == 0 {\n          coords = -coords;\n        } else {\n          coords = coords + numTexels;\n        }`;\n        } else {\n          return `coords = coords + numTexels;`;\n        }\n        break;\n      }\n    case '2d':{\n        if (type === 'i32') {\n          return `if gid.x % 3 == 0 {\n          coords.x = -coords.x;\n        } else {\n          coords.y = coords.y + height;\n        }`;\n        } else {\n          return `if gid.x % 3 == 1 {\n          coords.x = coords.x + width;\n        } else {\n          coords.y = coords.y + height;\n        }`;\n        }\n        break;\n      }\n    case '3d':{\n        if (type === 'i32') {\n          return `if gid.x % 3 == 0 {\n          coords.x = -coords.x;\n        } else if gid.x % 5 == 0 {\n          coords.y = coords.y + height;\n        } else {\n          coords.z = coords.z + depth;\n        }`;\n        } else {\n          return `if gid.x % 3 == 1 {\n          coords.x = coords.x + width;\n        } else if gid.x % 5 == 1 {\n          coords.y = coords.y + height;\n        } else {\n          coords.z = 2 * depth;\n        }`;\n        }\n        break;\n      }\n  }\n  return ``;\n}\n\n// Returns the number of texels for a given mip level.\n//\n// 1D textures cannot have multiple mip levels so always return the input number of texels.\nfunction getMipTexels(numTexels, dim, mip) {\n  let texels = numTexels;\n  if (mip === 0) {\n    return texels;\n  }\n  if (dim === '2d') {\n    texels /= 1 << mip;\n    texels /= 1 << mip;\n  } else if (dim === '3d') {\n    texels /= 1 << mip;\n    texels /= 1 << mip;\n    texels /= 1 << mip;\n  }\n  return texels;\n}\n\ng.test('out_of_bounds').\ndesc('Test that textureStore on out-of-bounds coordinates have no effect').\nparams((u) =>\nu.\ncombine('dim', kDims).\ncombine('coords', ['i32', 'u32']).\ncombine('mipCount', [1, 2, 3]).\ncombine('mip', [0, 1, 2]).\nfilter((t) => {\n  if (t.dim === '1d') {\n    return t.mipCount === 1 && t.mip === 0;\n  }\n  if (t.dim === '3d') {\n    return t.mipCount <= 2 && t.mip < t.mipCount;\n  }\n  return t.mip < t.mipCount;\n})\n).\nfn((t) => {\n  const texel_format = 'r32uint';\n  // Chosen such that the even at higher mip counts,\n  // the texture is laid out without padding.\n  // This simplifies the checking code below.\n  //\n  // Mip level | 1d   | 2d       | 3d\n  // -----------------------------------------\n  // 0         | 4096 | 256 x 16 | 256 x 8 x 2\n  // 1         | -    | 128 x 8  | 128 x 4 x 1\n  // 2         | -    | 64  x 4  | -\n  const num_texels = 4096;\n  const view_texels = getMipTexels(num_texels, t.params.dim, t.params.mip);\n\n  const texture_size = getTextureSize(num_texels, t.params.dim, 1);\n  const mip_size = virtualMipSize(t.params.dim, texture_size, t.params.mip);\n  const texture = t.createTextureTracked({\n    format: texel_format,\n    dimension: t.params.dim,\n    size: texture_size,\n    mipLevelCount: t.params.mipCount,\n    usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC\n  });\n\n  const oob_value = outOfBoundsValue(t.params.dim, t.params.coords);\n  const wgx_size = 32;\n  const num_wgs_x = view_texels / wgx_size;\n\n  const wgsl = `\n@group(0) @binding(0) var tex : ${textureType(t.params.dim)};\n\nconst numTexels = ${view_texels};\nconst width = ${mip_size[0]};\nconst height = ${mip_size[1]};\nconst depth = ${mip_size[2]};\n\n${indexToCoord(t.params.dim, t.params.coords)}\n\n@compute @workgroup_size(${wgx_size})\nfn main(@builtin(global_invocation_id) gid : vec3u) {\n  var coords = indexToCoord(gid.x);\n  if gid.x % 2 == 1 {\n    ${oob_value}\n  }\n  textureStore(tex, coords, vec4u(gid.x));\n}`;\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: wgsl\n      }),\n      entryPoint: 'main'\n    }\n  });\n  const bg = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n    {\n      binding: 0,\n      resource: texture.createView({\n        format: texel_format,\n        dimension: t.params.dim,\n        baseArrayLayer: 0,\n        arrayLayerCount: 1,\n        baseMipLevel: t.params.mip,\n        mipLevelCount: 1\n      })\n    }]\n\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatchWorkgroups(num_wgs_x, 1, 1);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  for (let m = 0; m < t.params.mipCount; m++) {\n    const buffer = t.copyWholeTextureToNewBufferSimple(texture, m);\n    if (m === t.params.mip) {\n      const expectedOutput = new Uint32Array([\n      ...iterRange(view_texels, (x) => {\n        if (x >= view_texels) {\n          return 0;\n        }\n        if (x % 2 === 1) {\n          return 0;\n        }\n        return x;\n      })]\n      );\n      t.expectGPUBufferValuesEqual(buffer, expectedOutput);\n    } else {\n      const expectedOutput = new Uint32Array([\n      ...iterRange(getMipTexels(num_texels, t.params.dim, m), (x) => 0)]\n      );\n      t.expectGPUBufferValuesEqual(buffer, expectedOutput);\n    }\n  }\n});\n\nconst kArrayLevels = 4;\n\ng.test('out_of_bounds_array').\ndesc('Test that out-of-bounds array coordinates to textureStore have no effect').\nparams((u) =>\nu.\ncombine('baseLevel', [0, 1, 2, 3]).\ncombine('arrayLevels', [1, 2, 3, 4]).\ncombine('type', ['i32', 'u32']).\nfilter((t) => {\n  if (t.arrayLevels <= t.baseLevel) {\n    return false;\n  }\n  if (kArrayLevels < t.baseLevel + t.arrayLevels) {\n    return false;\n  }\n  return true;\n})\n).\nbeforeAllSubcases((t) => {\n  if (t.isCompatibility) {\n    t.skipIf(\n      t.params.baseLevel !== 0,\n      'view base array layer must equal 0 in compatibility mode'\n    );\n    t.skipIf(\n      t.params.arrayLevels !== kArrayLevels,\n      'view array layers must equal texture array layers in compatibility mode'\n    );\n  }\n}).\nfn((t) => {\n  const dim = '2d';\n  const view_dim = '2d-array';\n  const texel_format = 'r32uint';\n  const width = 64;\n  const height = 64;\n  const base_texels = width * height;\n  const num_texels = base_texels * kArrayLevels;\n  const view_texels = base_texels * t.params.arrayLevels;\n  const texture_size = { width, height, depthOrArrayLayers: kArrayLevels };\n  const view_size = { width, height, depthOrArrayLayers: t.params.arrayLevels };\n\n  const texture = t.createTextureTracked({\n    format: texel_format,\n    dimension: dim,\n    size: texture_size,\n    mipLevelCount: 1,\n    usage: GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.COPY_SRC\n  });\n\n  const wgx_size = 32;\n  const num_wgs_x = num_texels / wgx_size;\n\n  let oob_value = `layer = layer + layers;`;\n  if (t.params.type === 'i32') {\n    oob_value = `if gid.x % 3 == 0 {\n        layer = -(layer + layers);\n      } else {\n        layer = layer + layers;\n      }`;\n  }\n\n  const wgsl = `\n@group(0) @binding(0) var tex : texture_storage_2d_array<r32uint, write>;\n\nconst numTexels = ${view_texels};\nconst width = ${view_size.width};\nconst height = ${view_size.height ?? 1};\nconst layers = ${view_size.depthOrArrayLayers ?? 1};\nconst layerTexels = numTexels / layers;\n\n@compute @workgroup_size(${wgx_size})\nfn main(@builtin(global_invocation_id) gid : vec3u) {\n  let layer_id = gid.x % layerTexels;\n  var x = ${t.params.type}(layer_id % width);\n  var y = ${t.params.type}(layer_id / width);\n  var layer = ${t.params.type}(gid.x / layerTexels);\n  if gid.x % 2 == 1 {\n    ${oob_value}\n  }\n  textureStore(tex, vec2(x, y), layer, vec4u(gid.x));\n}`;\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: wgsl\n      }),\n      entryPoint: 'main'\n    }\n  });\n  const bg = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n    {\n      binding: 0,\n      resource: texture.createView({\n        format: texel_format,\n        dimension: view_dim,\n        baseArrayLayer: t.params.baseLevel,\n        arrayLayerCount: t.params.arrayLevels,\n        baseMipLevel: 0,\n        mipLevelCount: 1\n      })\n    }]\n\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatchWorkgroups(num_wgs_x, 1, 1);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  const buffer = t.copyWholeTextureToNewBufferSimple(texture, 0);\n  const expectedOutput = new Uint32Array([\n  ...iterRange(num_texels, (x) => {\n    const baseOffset = base_texels * t.params.baseLevel;\n    if (x < baseOffset) {\n      return 0;\n    }\n    if (base_texels * (t.params.baseLevel + t.params.arrayLevels) <= x) {\n      return 0;\n    }\n    if (x % 2 === 1) {\n      return 0;\n    }\n    return x - baseOffset;\n  })]\n  );\n  t.expectGPUBufferValuesEqual(buffer, expectedOutput);\n});"],"mappings":"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","ignoreList":[]}