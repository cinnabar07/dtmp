{"version":3,"file":"atomicLoad.spec.js","names":["description","makeTestGroup","keysOf","GPUTest","dispatchSizes","workgroupSizes","typedArrayCtor","kMapId","g","test","specURL","desc","params","u","combine","fn","t","numInvocations","workgroupSize","dispatchSize","bufferNumElements","scalarType","mapId","wgsl","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","arrayType","inputBuffer","createBufferTracked","size","BYTES_PER_ELEMENT","usage","GPUBufferUsage","STORAGE","COPY_SRC","mappedAtCreation","data","getMappedRange","forEach","_","i","f","unmap","outputBuffer","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","expected","expectGPUBufferValuesEqual","wgNumElements","extra"],"sources":["../../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atomics/atomicLoad.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nReturns the atomically loaded the value pointed to by atomic_ptr. It does not modify the object.\n`;import { makeTestGroup } from '../../../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../../../common/util/data_tables.js';\nimport { GPUTest } from '../../../../../../gpu_test.js';\n\nimport { dispatchSizes, workgroupSizes, typedArrayCtor, kMapId } from './harness.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('load_storage').\nspecURL('https://www.w3.org/TR/WGSL/#atomic-load').\ndesc(\n  `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicLoad(atomic_ptr: ptr<AS, atomic<T>, read_write>) -> T\n\n`\n).\nparams((u) =>\nu.\ncombine('workgroupSize', workgroupSizes).\ncombine('dispatchSize', dispatchSizes).\ncombine('mapId', keysOf(kMapId)).\ncombine('scalarType', ['u32', 'i32'])\n).\nfn((t) => {\n  const numInvocations = t.params.workgroupSize * t.params.dispatchSize;\n  const bufferNumElements = numInvocations;\n  const scalarType = t.params.scalarType;\n  const mapId = kMapId[t.params.mapId];\n\n  const wgsl = `\n      @group(0) @binding(0)\n      var<storage, read_write> input : array<atomic<${scalarType}>>;\n\n      @group(0) @binding(1)\n      var<storage, read_write> output : array<${scalarType}>;\n\n      @compute @workgroup_size(${t.params.workgroupSize})\n      fn main(\n          @builtin(global_invocation_id) global_invocation_id : vec3<u32>,\n          ) {\n        let id = ${scalarType}(global_invocation_id[0]);\n        output[id] = atomicLoad(&input[id]);\n      }\n    `;\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({ code: wgsl }),\n      entryPoint: 'main'\n    }\n  });\n\n  const arrayType = typedArrayCtor(scalarType);\n\n  // Create input buffer with values [map_id(0)..map_id(n)]\n  const inputBuffer = t.createBufferTracked({\n    size: bufferNumElements * arrayType.BYTES_PER_ELEMENT,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC,\n    mappedAtCreation: true\n  });\n  const data = new arrayType(inputBuffer.getMappedRange());\n  data.forEach((_, i) => data[i] = mapId.f(i, numInvocations));\n  inputBuffer.unmap();\n\n  const outputBuffer = t.createBufferTracked({\n    size: bufferNumElements * arrayType.BYTES_PER_ELEMENT,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n  });\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n    { binding: 0, resource: { buffer: inputBuffer } },\n    { binding: 1, resource: { buffer: outputBuffer } }]\n\n  });\n\n  // Run the shader.\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatchWorkgroups(t.params.dispatchSize);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  // Both input and output buffer should be the same now\n  const expected = new (typedArrayCtor(t.params.scalarType))(bufferNumElements);\n  expected.forEach((_, i) => expected[i] = mapId.f(i, numInvocations));\n  t.expectGPUBufferValuesEqual(inputBuffer, expected);\n  t.expectGPUBufferValuesEqual(outputBuffer, expected);\n});\n\ng.test('load_workgroup').\nspecURL('https://www.w3.org/TR/WGSL/#atomic-load').\ndesc(\n  `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicLoad(atomic_ptr: ptr<AS, atomic<T>, read_write>) -> T\n\n`\n).\nparams((u) =>\nu.\ncombine('workgroupSize', workgroupSizes).\ncombine('dispatchSize', dispatchSizes).\ncombine('mapId', keysOf(kMapId)).\ncombine('scalarType', ['u32', 'i32'])\n).\nfn((t) => {\n  const numInvocations = t.params.workgroupSize;\n  const wgNumElements = numInvocations;\n  const scalarType = t.params.scalarType;\n  const dispatchSize = t.params.dispatchSize;\n  const mapId = kMapId[t.params.mapId];\n  const extra = mapId.wgsl(numInvocations, t.params.scalarType); // Defines map_id()\n\n  const wgsl =\n  `\n      var<workgroup> wg: array<atomic<${scalarType}>, ${wgNumElements}>;\n\n      // Result of each workgroup is written to output[workgroup_id.x]\n      @group(0) @binding(0)\n      var<storage, read_write> output: array<${scalarType}, ${wgNumElements * dispatchSize}>;\n\n      @compute @workgroup_size(${t.params.workgroupSize})\n      fn main(\n          @builtin(local_invocation_index) local_invocation_index: u32,\n          @builtin(workgroup_id) workgroup_id : vec3<u32>\n          ) {\n        let id = ${scalarType}(local_invocation_index);\n        let global_id = ${scalarType}(workgroup_id.x * ${wgNumElements} + local_invocation_index);\n\n        // Initialize wg[id] with this invocations global id (mapped)\n        atomicStore(&wg[id], map_id(global_id));\n        workgroupBarrier();\n\n        // Test atomic loading of value at wg[id] and store result in output[global_id]\n        output[global_id] = atomicLoad(&wg[id]);\n      }\n      ` + extra;\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({ code: wgsl }),\n      entryPoint: 'main'\n    }\n  });\n\n  const arrayType = typedArrayCtor(scalarType);\n\n  const outputBuffer = t.createBufferTracked({\n    size: wgNumElements * dispatchSize * arrayType.BYTES_PER_ELEMENT,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n  });\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [{ binding: 0, resource: { buffer: outputBuffer } }]\n  });\n\n  // Run the shader.\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatchWorkgroups(dispatchSize);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  // Expected values should be map_id(0..n)\n  const expected = new (typedArrayCtor(t.params.scalarType))(\n    wgNumElements * t.params.dispatchSize\n  );\n  expected.forEach((_, i) => expected[i] = mapId.f(i, numInvocations));\n\n  t.expectGPUBufferValuesEqual(outputBuffer, expected);\n});"],"mappings":"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","ignoreList":[]}