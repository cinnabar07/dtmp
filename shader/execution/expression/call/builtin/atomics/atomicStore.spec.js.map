{"version":3,"file":"atomicStore.spec.js","names":["description","makeTestGroup","keysOf","GPUTest","dispatchSizes","workgroupSizes","runStorageVariableTest","runWorkgroupVariableTest","typedArrayCtor","kMapId","g","test","specURL","desc","params","u","combine","fn","t","numInvocations","workgroupSize","dispatchSize","bufferNumElements","mapId","extra","wgsl","scalarType","initValue","op","expected","forEach","_","i","f","wgNumElements","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","arrayType","outputBuffer","createBufferTracked","size","BYTES_PER_ELEMENT","usage","GPUBufferUsage","STORAGE","COPY_SRC","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","outputBufferResult","readGPUBufferRangeTyped","type","typedLength","data","expected_one_of","includes","fail","d"],"sources":["../../../../../../../../src/webgpu/shader/execution/expression/call/builtin/atomics/atomicStore.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nAtomically stores the value v in the atomic object pointed to by atomic_ptr.\n`;import { makeTestGroup } from '../../../../../../../common/framework/test_group.js';\nimport { keysOf } from '../../../../../../../common/util/data_tables.js';\nimport { GPUTest } from '../../../../../../gpu_test.js';\n\nimport {\n  dispatchSizes,\n  workgroupSizes,\n  runStorageVariableTest,\n  runWorkgroupVariableTest,\n  typedArrayCtor,\n  kMapId } from\n'./harness.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('store_storage_basic').\nspecURL('https://www.w3.org/TR/WGSL/#atomic-store').\ndesc(\n  `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicStore(atomic_ptr: ptr<AS, atomic<T>, read_write>, v: T)\n`\n).\nparams((u) =>\nu.\ncombine('workgroupSize', workgroupSizes).\ncombine('dispatchSize', dispatchSizes).\ncombine('mapId', keysOf(kMapId)).\ncombine('scalarType', ['u32', 'i32'])\n).\nfn((t) => {\n  const numInvocations = t.params.workgroupSize * t.params.dispatchSize;\n  const bufferNumElements = numInvocations;\n  const mapId = kMapId[t.params.mapId];\n  const extra = mapId.wgsl(numInvocations, t.params.scalarType); // Defines map_id()\n\n  const initValue = 0;\n  const op = `atomicStore(&output[id], map_id(id))`;\n  const expected = new (typedArrayCtor(t.params.scalarType))(bufferNumElements);\n  expected.forEach((_, i) => expected[i] = mapId.f(i, numInvocations));\n\n  runStorageVariableTest({\n    t,\n    workgroupSize: t.params.workgroupSize,\n    dispatchSize: t.params.dispatchSize,\n    bufferNumElements,\n    initValue,\n    op,\n    expected,\n    extra\n  });\n});\n\ng.test('store_workgroup_basic').\nspecURL('https://www.w3.org/TR/WGSL/#atomic-store').\ndesc(\n  `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicStore(atomic_ptr: ptr<AS, atomic<T>, read_write>, v: T)\n`\n).\nparams((u) =>\nu.\ncombine('workgroupSize', workgroupSizes).\ncombine('dispatchSize', dispatchSizes).\ncombine('mapId', keysOf(kMapId)).\ncombine('scalarType', ['u32', 'i32'])\n).\nfn((t) => {\n  const numInvocations = t.params.workgroupSize;\n  const wgNumElements = numInvocations;\n  const mapId = kMapId[t.params.mapId];\n  const extra = mapId.wgsl(numInvocations, t.params.scalarType); // Defines map_id()\n\n  const initValue = 0;\n  const op = `atomicStore(&wg[id], map_id(global_id))`;\n  const expected = new (typedArrayCtor(t.params.scalarType))(\n    wgNumElements * t.params.dispatchSize\n  );\n  expected.forEach((_, i) => expected[i] = mapId.f(i, numInvocations));\n\n  runWorkgroupVariableTest({\n    t,\n    workgroupSize: t.params.workgroupSize,\n    dispatchSize: t.params.dispatchSize,\n    wgNumElements,\n    initValue,\n    op,\n    expected,\n    extra\n  });\n});\n\ng.test('store_storage_advanced').\nspecURL('https://www.w3.org/TR/WGSL/#atomic-store').\ndesc(\n  `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicStore(atomic_ptr: ptr<AS, atomic<T>, read_write>, v: T)\n\nTests that multiple invocations of atomicStore to the same location returns\none of the values written.\n`\n).\nparams((u) =>\nu.\ncombine('workgroupSize', workgroupSizes).\ncombine('dispatchSize', dispatchSizes).\ncombine('mapId', keysOf(kMapId)).\ncombine('scalarType', ['u32', 'i32'])\n).\nfn(async (t) => {\n  const numInvocations = t.params.workgroupSize * t.params.dispatchSize;\n  const scalarType = t.params.scalarType;\n  const mapId = kMapId[t.params.mapId];\n  const extra = mapId.wgsl(numInvocations, t.params.scalarType); // Defines map_id()\n\n  const wgsl =\n  `\n      @group(0) @binding(0)\n      var<storage, read_write> output : array<atomic<${scalarType}>>;\n\n      @compute @workgroup_size(${t.params.workgroupSize})\n      fn main(\n          @builtin(global_invocation_id) global_invocation_id : vec3<u32>,\n          ) {\n        let id = ${scalarType}(global_invocation_id[0]);\n\n        // All invocations store to the same location\n        atomicStore(&output[0], map_id(id));\n      }\n    ` + extra;\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({ code: wgsl }),\n      entryPoint: 'main'\n    }\n  });\n\n  const arrayType = typedArrayCtor(scalarType);\n\n  // Output buffer has only 1 element\n  const outputBuffer = t.createBufferTracked({\n    size: 1 * arrayType.BYTES_PER_ELEMENT,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n  });\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [{ binding: 0, resource: { buffer: outputBuffer } }]\n  });\n\n  // Run the shader.\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatchWorkgroups(t.params.dispatchSize);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  // Read back the buffer\n  const outputBufferResult = (\n  await t.readGPUBufferRangeTyped(outputBuffer, {\n    type: arrayType,\n    typedLength: outputBuffer.size / arrayType.BYTES_PER_ELEMENT\n  })).\n  data;\n\n  // All invocations wrote to the output[0], so validate that it contains one\n  // of the possible computed values.\n  const expected_one_of = new arrayType(numInvocations);\n  expected_one_of.forEach((_, i) => expected_one_of[i] = mapId.f(i, numInvocations));\n\n  if (!expected_one_of.includes(outputBufferResult[0])) {\n    t.fail(\n      `Unexpected value in output[0]: '${outputBufferResult[0]}, expected value to be one of: ${expected_one_of}`\n    );\n  }\n});\n\ng.test('store_workgroup_advanced').\nspecURL('https://www.w3.org/TR/WGSL/#atomic-store').\ndesc(\n  `\nAS is storage or workgroup\nT is i32 or u32\n\nfn atomicStore(atomic_ptr: ptr<AS, atomic<T>, read_write>, v: T)\n\nTests that multiple invocations of atomicStore to the same location returns\none of the values written.\n`\n).\nparams((u) =>\nu.\ncombine('workgroupSize', workgroupSizes).\ncombine('dispatchSize', dispatchSizes).\ncombine('mapId', keysOf(kMapId)).\ncombine('scalarType', ['u32', 'i32'])\n).\nfn(async (t) => {\n  const numInvocations = t.params.workgroupSize;\n  const scalarType = t.params.scalarType;\n  const dispatchSize = t.params.dispatchSize;\n  const mapId = kMapId[t.params.mapId];\n  const extra = mapId.wgsl(numInvocations, t.params.scalarType); // Defines map_id()\n\n  const wgsl =\n  `\n      var<workgroup> wg: atomic<${scalarType}>;\n\n      // Result of each workgroup is written to output[workgroup_id.x]\n      @group(0) @binding(0)\n      var<storage, read_write> output: array<${scalarType}, ${dispatchSize}>;\n\n      @compute @workgroup_size(${t.params.workgroupSize})\n      fn main(\n          @builtin(local_invocation_index) local_invocation_index: u32,\n          @builtin(workgroup_id) workgroup_id : vec3<u32>\n          ) {\n        let id = ${scalarType}(local_invocation_index);\n\n        // All invocations of a given dispatch store to the same location.\n        // In the end, the final value should be randomly equal to one of the ids.\n        atomicStore(&wg, map_id(id));\n\n        // Once all invocations have completed, the first one copies the result\n        // to output for this dispatch (workgroup_id.x)\n        workgroupBarrier();\n        if (local_invocation_index == 0u) {\n          output[workgroup_id.x] = atomicLoad(&wg);\n        }\n      }\n      ` + extra;\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({ code: wgsl }),\n      entryPoint: 'main'\n    }\n  });\n\n  const arrayType = typedArrayCtor(scalarType);\n\n  const outputBuffer = t.createBufferTracked({\n    size: dispatchSize * arrayType.BYTES_PER_ELEMENT,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n  });\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [{ binding: 0, resource: { buffer: outputBuffer } }]\n  });\n\n  // Run the shader.\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  pass.dispatchWorkgroups(dispatchSize);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  // Read back the buffer\n  const outputBufferResult = (\n  await t.readGPUBufferRangeTyped(outputBuffer, {\n    type: arrayType,\n    typedLength: outputBuffer.size / arrayType.BYTES_PER_ELEMENT\n  })).\n  data;\n\n  // Each dispatch wrote to a single atomic workgroup var that was copied\n  // to outputBuffer[dispatch]. Validate that each value in the output buffer\n  // is one of the possible computed values.\n  const expected_one_of = new arrayType(numInvocations);\n  expected_one_of.forEach((_, i) => expected_one_of[i] = mapId.f(i, numInvocations));\n\n  for (let d = 0; d < dispatchSize; d++) {\n    if (!expected_one_of.includes(outputBufferResult[d])) {\n      t.fail(\n        `Unexpected value in output[d] for dispatch d '${d}': '${outputBufferResult[d]}', expected value to be one of: ${expected_one_of}`\n      );\n    }\n  }\n});"],"mappings":"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","ignoreList":[]}