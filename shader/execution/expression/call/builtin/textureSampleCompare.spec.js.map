{"version":3,"file":"textureSampleCompare.spec.js","names":["description","makeTestGroup","kCompareFunctions","isDepthTextureFormat","kDepthStencilFormats","checkCallResults","chooseTextureSize","createTextureWithRandomDataAndGetTexels","doTextureCalls","generateSamplePointsCube","generateTextureBuiltinInputs2D","kCubeSamplePointMethods","kSamplePointMethods","kShortAddressModes","kShortAddressModeToAddressMode","makeRandomDepthComparisonTexelGenerator","WGSLTextureSampleTest","g","test","specURL","desc","params","u","combine","filter","t","format","beginSubcases","beforeAllSubcases","selectDeviceForTextureFormatOrSkipTestCase","fn","samplePoints","modeU","modeV","filt","minFilter","compare","offset","size","minSize","minBlocks","descriptor","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","mipLevelCount","texels","texture","generator","sampler","addressModeU","addressModeV","magFilter","mipmapFilter","calls","method","textureBuiltin","derivatives","depthRef","hashInputs","map","coords","derivativeMult","arrayIndex","builtin","coordType","textureType","viewDescriptor","results","res","expectOK","mode","viewDimension","isCompatibility","textureBindingViewDimension","addressModeW","dimension","skipIfTextureFormatNotSupported","A","num","depthOrArrayLayers","type","arrayIndexType","skipIfTextureViewDimensionNotSupported"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSampleCompare.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nSamples a depth texture and compares the sampled depth values against a reference value.\n\n- TODO: test cube maps with more than 1 mip level.\n- TODO: test un-encodable formats.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { kCompareFunctions } from '../../../../../capability_info.js';\nimport { isDepthTextureFormat, kDepthStencilFormats } from '../../../../../format_info.js';\n\nimport {\n  checkCallResults,\n  chooseTextureSize,\n  createTextureWithRandomDataAndGetTexels,\n  doTextureCalls,\n  generateSamplePointsCube,\n  generateTextureBuiltinInputs2D,\n  kCubeSamplePointMethods,\n  kSamplePointMethods,\n  kShortAddressModes,\n  kShortAddressModeToAddressMode,\n  makeRandomDepthComparisonTexelGenerator,\n\n\n\n  WGSLTextureSampleTest } from\n'./texture_utils.js';\n\nexport const g = makeTestGroup(WGSLTextureSampleTest);\n\ng.test('2d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplecompare').\ndesc(\n  `\nfn textureSampleCompare(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32) -> f32\nfn textureSampleCompare(t: texture_depth_2d, s: sampler_comparison, coords: vec2<f32>, depth_ref: f32, offset: vec2<i32>) -> f32\n\nParameters:\n * t  The depth texture to sample.\n * s  The sampler_comparison type.\n * coords The texture coordinates used for sampling.\n * depth_ref The reference value to compare the sampled depth value against.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n).\nparams((u) =>\nu.\ncombine('format', kDepthStencilFormats)\n// filter out stencil only formats\n.filter((t) => isDepthTextureFormat(t.format)).\ncombine('filt', ['nearest', 'linear']).\ncombine('modeU', kShortAddressModes).\ncombine('modeV', kShortAddressModes).\ncombine('offset', [false, true]).\nbeginSubcases().\ncombine('samplePoints', kSamplePointMethods).\ncombine('compare', kCompareFunctions)\n).\nbeforeAllSubcases((t) => t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format)).\nfn(async (t) => {\n  const { format, samplePoints, modeU, modeV, filt: minFilter, compare, offset } = t.params;\n\n  const size = chooseTextureSize({ minSize: 16, minBlocks: 4, format });\n\n  const descriptor = {\n    format,\n    size,\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    mipLevelCount: 3\n  };\n  const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor, {\n    generator: makeRandomDepthComparisonTexelGenerator(descriptor, compare)\n  });\n  const sampler = {\n    addressModeU: kShortAddressModeToAddressMode[modeU],\n    addressModeV: kShortAddressModeToAddressMode[modeV],\n    compare,\n    minFilter,\n    magFilter: minFilter,\n    mipmapFilter: minFilter\n  };\n\n  const calls = generateTextureBuiltinInputs2D(50, {\n    method: samplePoints,\n    textureBuiltin: 'textureSampleCompare',\n    sampler,\n    descriptor,\n    derivatives: true,\n    depthRef: true,\n    offset,\n    hashInputs: [format, samplePoints, modeU, modeV, minFilter, offset]\n  }).map(({ coords, derivativeMult, arrayIndex, depthRef, offset }) => {\n    return {\n      builtin: 'textureSampleCompare',\n      coordType: 'f',\n      coords,\n      derivativeMult,\n      depthRef,\n      offset\n    };\n  });\n  const textureType = 'texture_depth_2d';\n  const viewDescriptor = {};\n  const results = await doTextureCalls(\n    t,\n    texture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    'f'\n  );\n  const res = await checkCallResults(\n    t,\n    { texels, descriptor, viewDescriptor },\n    textureType,\n    sampler,\n    calls,\n    results,\n    'f',\n    texture\n  );\n  t.expectOK(res);\n});\n\ng.test('3d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplecompare').\ndesc(\n  `\nfn textureSampleCompare(t: texture_depth_cube, s: sampler_comparison, coords: vec3<f32>, depth_ref: f32) -> f32\n\nParameters:\n * t  The depth texture to sample.\n * s  The sampler_comparison type.\n * coords The texture coordinates used for sampling.\n * depth_ref The reference value to compare the sampled depth value against.\n`\n).\nparams((u) =>\nu.\ncombine('format', kDepthStencilFormats)\n// filter out stencil only formats\n.filter((t) => isDepthTextureFormat(t.format)).\ncombine('filt', ['nearest', 'linear']).\ncombine('mode', kShortAddressModes).\nbeginSubcases().\ncombine('samplePoints', kCubeSamplePointMethods).\ncombine('compare', kCompareFunctions)\n).\nbeforeAllSubcases((t) => t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format)).\nfn(async (t) => {\n  const { format, samplePoints, mode, filt: minFilter, compare } = t.params;\n\n  const viewDimension = 'cube';\n  const size = chooseTextureSize({ minSize: 16, minBlocks: 2, format, viewDimension });\n\n  const descriptor = {\n    format,\n    ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n    size,\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    // MAINTENANCE_TODO: change to 3 once derivatives with cube maps are supported\n    mipLevelCount: 1\n  };\n  const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor, {\n    generator: makeRandomDepthComparisonTexelGenerator(descriptor, compare)\n  });\n  const sampler = {\n    addressModeU: kShortAddressModeToAddressMode[mode],\n    addressModeV: kShortAddressModeToAddressMode[mode],\n    addressModeW: kShortAddressModeToAddressMode[mode],\n    compare,\n    minFilter,\n    magFilter: minFilter,\n    mipmapFilter: minFilter\n  };\n\n  const calls = generateSamplePointsCube(50, {\n    method: samplePoints,\n    sampler,\n    descriptor,\n    derivatives: true,\n    depthRef: true,\n    textureBuiltin: 'textureSampleCompare',\n    hashInputs: [format, samplePoints, mode, minFilter, compare]\n  }).map(({ coords, derivativeMult, depthRef }) => {\n    return {\n      builtin: 'textureSampleCompare',\n      coordType: 'f',\n      coords,\n      derivativeMult,\n      depthRef\n    };\n  });\n  const viewDescriptor = {\n    dimension: viewDimension\n  };\n  const textureType = 'texture_depth_cube';\n  const results = await doTextureCalls(\n    t,\n    texture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    'f'\n  );\n  const res = await checkCallResults(\n    t,\n    { texels, descriptor, viewDescriptor },\n    textureType,\n    sampler,\n    calls,\n    results,\n    'f',\n    texture\n  );\n  t.expectOK(res);\n});\n\ng.test('arrayed_2d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplecompare').\ndesc(\n  `\nA is i32 or u32\n\nfn textureSampleCompare(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: A, depth_ref: f32) -> f32\nfn textureSampleCompare(t: texture_depth_2d_array, s: sampler_comparison, coords: vec2<f32>, array_index: A, depth_ref: f32, offset: vec2<i32>) -> f32\n\nParameters:\n * t  The depth texture to sample.\n * s  The sampler_comparison type.\n * coords The texture coordinates used for sampling.\n * array_index: The 0-based texture array index to sample.\n * depth_ref The reference value to compare the sampled depth value against.\n * offset\n    * The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n    * This offset is applied before applying any texture wrapping modes.\n    * The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    * Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n).\nparams((u) =>\nu.\ncombine('format', kDepthStencilFormats)\n// filter out stencil only formats\n.filter((t) => isDepthTextureFormat(t.format)).\ncombine('filt', ['nearest', 'linear']).\ncombine('modeU', kShortAddressModes).\ncombine('modeV', kShortAddressModes).\ncombine('offset', [false, true]).\nbeginSubcases().\ncombine('samplePoints', kSamplePointMethods).\ncombine('A', ['i32', 'u32']).\ncombine('compare', kCompareFunctions)\n).\nbeforeAllSubcases((t) => {\n  t.skipIfTextureFormatNotSupported(t.params.format);\n  t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n}).\nfn(async (t) => {\n  const { format, samplePoints, A, modeU, modeV, filt: minFilter, compare, offset } = t.params;\n\n  const viewDimension = '2d-array';\n  const size = chooseTextureSize({ minSize: 16, minBlocks: 4, format, viewDimension });\n\n  const descriptor = {\n    format,\n    size,\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    mipLevelCount: 3\n  };\n  const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor, {\n    generator: makeRandomDepthComparisonTexelGenerator(descriptor, compare)\n  });\n  const sampler = {\n    addressModeU: kShortAddressModeToAddressMode[modeU],\n    addressModeV: kShortAddressModeToAddressMode[modeV],\n    compare,\n    minFilter,\n    magFilter: minFilter,\n    mipmapFilter: minFilter\n  };\n\n  const calls = generateTextureBuiltinInputs2D(50, {\n    method: samplePoints,\n    textureBuiltin: 'textureSampleCompare',\n    sampler,\n    descriptor,\n    derivatives: true,\n    arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n    depthRef: true,\n    offset,\n    hashInputs: [format, samplePoints, A, modeU, modeV, minFilter, offset]\n  }).map(({ coords, derivativeMult, arrayIndex, depthRef, offset }) => {\n    return {\n      builtin: 'textureSampleCompare',\n      coordType: 'f',\n      coords,\n      derivativeMult,\n      arrayIndex,\n      arrayIndexType: A === 'i32' ? 'i' : 'u',\n      depthRef,\n      offset\n    };\n  });\n  const textureType = 'texture_depth_2d_array';\n  const viewDescriptor = {};\n  const results = await doTextureCalls(\n    t,\n    texture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    'f'\n  );\n  const res = await checkCallResults(\n    t,\n    { texels, descriptor, viewDescriptor },\n    textureType,\n    sampler,\n    calls,\n    results,\n    'f',\n    texture\n  );\n  t.expectOK(res);\n});\n\ng.test('arrayed_3d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplecompare').\ndesc(\n  `\nA is i32 or u32\n\nfn textureSampleCompare(t: texture_depth_cube_array, s: sampler_comparison, coords: vec3<f32>, array_index: A, depth_ref: f32) -> f32\n\nParameters:\n * t  The depth texture to sample.\n * s  The sampler_comparison type.\n * coords The texture coordinates used for sampling.\n * array_index: The 0-based texture array index to sample.\n * depth_ref The reference value to compare the sampled depth value against.\n`\n).\nparams((u) =>\nu.\ncombine('format', kDepthStencilFormats)\n// filter out stencil only formats\n.filter((t) => isDepthTextureFormat(t.format)).\ncombine('filt', ['nearest', 'linear']).\ncombine('mode', kShortAddressModes).\nbeginSubcases().\ncombine('samplePoints', kCubeSamplePointMethods).\ncombine('A', ['i32', 'u32']).\ncombine('compare', kCompareFunctions)\n).\nbeforeAllSubcases((t) => {\n  t.skipIfTextureViewDimensionNotSupported('cube-array');\n  t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n}).\nfn(async (t) => {\n  const { format, A, samplePoints, mode, filt: minFilter, compare } = t.params;\n\n  const viewDimension = 'cube-array';\n  const size = chooseTextureSize({ minSize: 8, minBlocks: 2, format, viewDimension });\n\n  const descriptor = {\n    format,\n    ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n    size,\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    // MAINTENANCE_TODO: change to 3 once derivatives with cube maps are supported\n    mipLevelCount: 1\n  };\n  const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor, {\n    generator: makeRandomDepthComparisonTexelGenerator(descriptor, compare)\n  });\n  const sampler = {\n    addressModeU: kShortAddressModeToAddressMode[mode],\n    addressModeV: kShortAddressModeToAddressMode[mode],\n    addressModeW: kShortAddressModeToAddressMode[mode],\n    compare,\n    minFilter,\n    magFilter: minFilter,\n    mipmapFilter: minFilter\n  };\n\n  const calls = generateSamplePointsCube(50, {\n    method: samplePoints,\n    sampler,\n    descriptor,\n    derivatives: true,\n    textureBuiltin: 'textureSampleCompare',\n    arrayIndex: { num: texture.depthOrArrayLayers / 6, type: A },\n    depthRef: true,\n    hashInputs: [format, samplePoints, mode, minFilter]\n  }).map(({ coords, derivativeMult, depthRef, arrayIndex }) => {\n    return {\n      builtin: 'textureSampleCompare',\n      arrayIndex,\n      arrayIndexType: A === 'i32' ? 'i' : 'u',\n      coordType: 'f',\n      coords,\n      derivativeMult,\n      depthRef\n    };\n  });\n  const viewDescriptor = {\n    dimension: viewDimension\n  };\n  const textureType = 'texture_depth_cube_array';\n  const results = await doTextureCalls(\n    t,\n    texture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    'f'\n  );\n  const res = await checkCallResults(\n    t,\n    { texels, descriptor, viewDescriptor },\n    textureType,\n    sampler,\n    calls,\n    results,\n    'f',\n    texture\n  );\n  t.expectOK(res);\n});"],"mappings":"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","ignoreList":[]}