{"version":3,"file":"subgroup_util.js","names":["assert","iterRange","unreachable","Float16Array","kTextureFormatInfo","GPUTest","TextureTestMixin","kBit","Type","VectorType","scalarTypeOf","sparseScalarF16Range","sparseScalarF32Range","align","PRNG","SubgroupTest","kNumCases","kStride","kWGSizes","kPredicateCases","every_even","cond","filter","id","size","every_odd","lower_half","Math","floor","upper_half","first_two","checkAccuracy","metadata","output","indices","values","identity","intervalGen","subgroupIdIdx1","subgroupIdIdx2","i","length","subgroupId","v1","v2","interval","contains","Error","toString","undefined","runAccuracyTest","t","seed","wgSize","operation","type","prng","wgThreads","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","device","limits","skipIf","indexLimit","idx1","uniformInt","idx2","range","numVals","val1","val2","extraEnables","wgsl","inputData","x","Float32Array","inputBuffer","makeBufferWithContents","GPUBufferUsage","COPY_SRC","COPY_DST","STORAGE","trackForCleanup","outputBuffer","numMetadata","metadataBuffer","Uint32Array","pipeline","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","bg","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatchWorkgroups","end","queue","submit","finish","metadataReadback","readGPUBufferRangeTyped","srcByteOffset","typedLength","method","data","outputReadback","expectOK","kDataSentinel","runComputeTest","outputUintsPerElement","checkFunction","outputUints","kFramebufferSizes","getUintsPerFramebuffer","format","width","height","blockWidth","blockHeight","bytesPerBlock","blocksPerRow","bytesPerRow","uintsPerRow","uintsPerTexel","runFragmentTest","fsShader","checker","vsShader","createRenderPipeline","vertex","fragment","targets","primitive","topology","blocksPerColumn","byteLength","uintLength","framebuffer","createTextureTracked","usage","GPUTextureUsage","RENDER_ATTACHMENT","TEXTURE_BINDING","beginRenderPass","colorAttachments","view","createView","loadOp","storeOp","draw","copyBuffer","copyWholeTextureToNewBufferSimple","readback","generateScalarValues","scalarTy","u32","min","max","i32","positive","negative","f32","zero","nearest_max","nearest_min","f16","generateTypedInputs","scalarValues","elements","requiresF16","bound","j","push"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/subgroup_util.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { assert, iterRange, unreachable } from '../../../../../../common/util/util.js';import { Float16Array } from '../../../../../../external/petamoriken/float16/float16.js';import { kTextureFormatInfo } from '../../../../../format_info.js';\nimport { GPUTest, TextureTestMixin } from '../../../../../gpu_test.js';\nimport { kBit } from '../../../../../util/constants.js';\nimport { Type, VectorType, scalarTypeOf } from '../../../../../util/conversion.js';\n\nimport { sparseScalarF16Range, sparseScalarF32Range, align } from '../../../../../util/math.js';\nimport { PRNG } from '../../../../../util/prng.js';\n\nexport class SubgroupTest extends TextureTestMixin(GPUTest) {}\n\nexport const kNumCases = 1000;\nexport const kStride = 128;\n\nexport const kWGSizes = [\n[4, 1, 1],\n[8, 1, 1],\n[16, 1, 1],\n[32, 1, 1],\n[64, 1, 1],\n[128, 1, 1],\n[256, 1, 1],\n[1, 4, 1],\n[1, 8, 1],\n[1, 16, 1],\n[1, 32, 1],\n[1, 64, 1],\n[1, 128, 1],\n[1, 256, 1],\n[1, 1, 4],\n[1, 1, 8],\n[1, 1, 16],\n[1, 1, 32],\n[1, 1, 64],\n[3, 3, 3],\n[4, 4, 4],\n[16, 16, 1],\n[16, 1, 16],\n[1, 16, 16],\n[15, 3, 3],\n[3, 15, 3],\n[3, 3, 15]];\n\n\nexport const kPredicateCases = {\n  every_even: {\n    cond: `id % 2 == 0`,\n    filter: (id, size) => {\n      return id % 2 === 0;\n    }\n  },\n  every_odd: {\n    cond: `id % 2 == 1`,\n    filter: (id, size) => {\n      return id % 2 === 1;\n    }\n  },\n  lower_half: {\n    cond: `id < subgroupSize / 2`,\n    filter: (id, size) => {\n      return id < Math.floor(size / 2);\n    }\n  },\n  upper_half: {\n    cond: `id >= subgroupSize / 2`,\n    filter: (id, size) => {\n      return id >= Math.floor(size / 2);\n    }\n  },\n  first_two: {\n    cond: `id == 0 || id == 1`,\n    filter: (id) => {\n      return id === 0 || id === 1;\n    }\n  }\n};\n\n/**\n * Check the accuracy of the reduction operation.\n *\n * @param metadata An array containing subgroup ids for each invocation\n * @param output An array containing the results of the reduction for each invocation\n * @param indices An array of two values containing the indices of the interesting values in the input\n * @param values An array of two values containing the interesting values in the input\n * @param identity The identity for the operation\n * @param intervalGen A functor to generate an appropriate FPInterval for a binary operation\n */\nfunction checkAccuracy(\nmetadata,\noutput,\nindices,\nvalues,\nidentity,\nintervalGen)\n{\n  const subgroupIdIdx1 = metadata[indices[0]];\n  const subgroupIdIdx2 = metadata[indices[1]];\n  for (let i = 0; i < output.length; i++) {\n    const subgroupId = metadata[i];\n\n    const v1 = subgroupId === subgroupIdIdx1 ? values[0] : identity;\n    const v2 = subgroupId === subgroupIdIdx2 ? values[1] : identity;\n    const interval = intervalGen(v1, v2);\n    if (!interval.contains(output[i])) {\n      return new Error(`Invocation ${i}, subgroup id ${subgroupId}: incorrect result\n- interval: ${interval.toString()}\n- output: ${output[i]}`);\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Run a floating-point accuracy subgroup test.\n *\n * @param t The base test\n * @param seed A seed for the PRNG\n * @param wgSize An array for the workgroup size\n * @param operation The subgroup operation\n * @param type The type (f16 or f32)\n * @param identity The identity for the operation\n * @param intervalGen A functor to generate an appropriate FPInterval for a binary operation\n */\nexport async function runAccuracyTest(\nt,\nseed,\nwgSize,\noperation,\ntype,\nidentity,\nintervalGen)\n{\n  assert(seed < kNumCases);\n  const prng = new PRNG(seed);\n\n  // Compatibility mode has lower workgroup limits.\n  const wgThreads = wgSize[0] * wgSize[1] * wgSize[2];\n  const {\n    maxComputeInvocationsPerWorkgroup,\n    maxComputeWorkgroupSizeX,\n    maxComputeWorkgroupSizeY,\n    maxComputeWorkgroupSizeZ\n  } = t.device.limits;\n  t.skipIf(\n    maxComputeInvocationsPerWorkgroup < wgThreads ||\n    maxComputeWorkgroupSizeX < wgSize[0] ||\n    maxComputeWorkgroupSizeY < wgSize[1] ||\n    maxComputeWorkgroupSizeZ < wgSize[2],\n    'Workgroup size too large'\n  );\n\n  // Bias half the cases to lower indices since most subgroup sizes are <= 64.\n  let indexLimit = kStride;\n  if (seed < kNumCases / 4) {\n    indexLimit = 16;\n  } else if (seed < kNumCases / 2) {\n    indexLimit = 64;\n  }\n\n  // Ensure two distinct indices are picked.\n  const idx1 = prng.uniformInt(indexLimit);\n  let idx2 = prng.uniformInt(indexLimit - 1);\n  if (idx1 === idx2) {\n    idx2++;\n  }\n  assert(idx2 < indexLimit);\n\n  // Select two random values.\n  const range = type === 'f16' ? sparseScalarF16Range() : sparseScalarF32Range();\n  const numVals = range.length;\n  const val1 = range[prng.uniformInt(numVals)];\n  const val2 = range[prng.uniformInt(numVals)];\n\n  const extraEnables = type === 'f16' ? `enable f16;\\nenable subgroups_f16;` : ``;\n  const wgsl = `\nenable subgroups;\n${extraEnables}\n\n@group(0) @binding(0)\nvar<storage> inputs : array<${type}>;\n\n@group(0) @binding(1)\nvar<storage, read_write> outputs : array<${type}>;\n\nstruct Metadata {\n  subgroup_id : array<u32, ${kStride}>,\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${wgSize[0]}, ${wgSize[1]}, ${wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n) {\n  metadata.subgroup_id[lid] = subgroupBroadcast(lid, 0);\n  outputs[lid] = ${operation}(inputs[lid]);\n}`;\n\n  const inputData =\n  type === 'f16' ?\n  new Float16Array([\n  ...iterRange(kStride, (x) => {\n    if (x === idx1) return val1;\n    if (x === idx2) return val2;\n    return identity;\n  })]\n  ) :\n  new Float32Array([\n  ...iterRange(kStride, (x) => {\n    if (x === idx1) return val1;\n    if (x === idx2) return val2;\n    return identity;\n  })]\n  );\n\n  const inputBuffer = t.makeBufferWithContents(\n    inputData,\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n  );\n  t.trackForCleanup(inputBuffer);\n\n  const outputBuffer = t.makeBufferWithContents(\n    new Float32Array([...iterRange(kStride, (x) => 0)]),\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n  );\n  t.trackForCleanup(outputBuffer);\n\n  const numMetadata = kStride;\n  const metadataBuffer = t.makeBufferWithContents(\n    new Uint32Array([...iterRange(numMetadata, (x) => 0)]),\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n  );\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: wgsl\n      }),\n      entryPoint: 'main'\n    }\n  });\n  const bg = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n    {\n      binding: 0,\n      resource: {\n        buffer: inputBuffer\n      }\n    },\n    {\n      binding: 1,\n      resource: {\n        buffer: outputBuffer\n      }\n    },\n    {\n      binding: 2,\n      resource: {\n        buffer: metadataBuffer\n      }\n    }]\n\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatchWorkgroups(1, 1, 1);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  const metadataReadback = await t.readGPUBufferRangeTyped(metadataBuffer, {\n    srcByteOffset: 0,\n    type: Uint32Array,\n    typedLength: numMetadata,\n    method: 'copy'\n  });\n  const metadata = metadataReadback.data;\n\n  let output;\n  if (type === 'f16') {\n    const outputReadback = await t.readGPUBufferRangeTyped(outputBuffer, {\n      srcByteOffset: 0,\n      type: Float16Array,\n      typedLength: kStride,\n      method: 'copy'\n    });\n    output = outputReadback.data;\n  } else {\n    const outputReadback = await t.readGPUBufferRangeTyped(outputBuffer, {\n      srcByteOffset: 0,\n      type: Float32Array,\n      typedLength: kStride,\n      method: 'copy'\n    });\n    output = outputReadback.data;\n  }\n\n  t.expectOK(checkAccuracy(metadata, output, [idx1, idx2], [val1, val2], identity, intervalGen));\n}\n\n// Repeat the bit pattern evey 16 bits for use with 16-bit types.\nexport const kDataSentinel = 999 | 999 << 16;\n\n/**\n * Runs compute shader subgroup test\n *\n * The test makes the following assumptions:\n * * group(0) binding(0) is a storage buffer for input data\n * * group(0) binding(1) is an output storage buffer for outputUintsPerElement * wgSize uints\n * * group(0) binding(2) is an output storage buffer for 2 * wgSize uints\n *\n * @param t The base test\n * @param wgsl The shader code\n * @param outputUintsPerElement number of uints output per invocation\n * @param inputData the input data\n * @param checkFunction a functor that takes the output storage buffer data to check result validity\n */\nexport async function runComputeTest(\nt,\nwgsl,\nwgSize,\noutputUintsPerElement,\ninputData,\ncheckFunction)\n{\n  // Compatibility mode has lower workgroup limits.\n  const wgThreads = wgSize[0] * wgSize[1] * wgSize[2];\n  const {\n    maxComputeInvocationsPerWorkgroup,\n    maxComputeWorkgroupSizeX,\n    maxComputeWorkgroupSizeY,\n    maxComputeWorkgroupSizeZ\n  } = t.device.limits;\n  t.skipIf(\n    maxComputeInvocationsPerWorkgroup < wgThreads ||\n    maxComputeWorkgroupSizeX < wgSize[0] ||\n    maxComputeWorkgroupSizeY < wgSize[1] ||\n    maxComputeWorkgroupSizeZ < wgSize[2],\n    'Workgroup size too large'\n  );\n\n  const inputBuffer = t.makeBufferWithContents(\n    inputData,\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n  );\n  t.trackForCleanup(inputBuffer);\n\n  const outputUints = outputUintsPerElement * wgThreads;\n  const outputBuffer = t.makeBufferWithContents(\n    new Uint32Array([...iterRange(outputUints, (x) => kDataSentinel)]),\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n  );\n  t.trackForCleanup(outputBuffer);\n\n  const numMetadata = 2 * wgThreads;\n  const metadataBuffer = t.makeBufferWithContents(\n    new Uint32Array([...iterRange(numMetadata, (x) => kDataSentinel)]),\n    GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST | GPUBufferUsage.STORAGE\n  );\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: wgsl\n      })\n    }\n  });\n  const bg = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n    {\n      binding: 0,\n      resource: {\n        buffer: inputBuffer\n      }\n    },\n    {\n      binding: 1,\n      resource: {\n        buffer: outputBuffer\n      }\n    },\n    {\n      binding: 2,\n      resource: {\n        buffer: metadataBuffer\n      }\n    }]\n\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatchWorkgroups(1, 1, 1);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  const metadataReadback = await t.readGPUBufferRangeTyped(metadataBuffer, {\n    srcByteOffset: 0,\n    type: Uint32Array,\n    typedLength: numMetadata,\n    method: 'copy'\n  });\n  const metadata = metadataReadback.data;\n\n  const outputReadback = await t.readGPUBufferRangeTyped(outputBuffer, {\n    srcByteOffset: 0,\n    type: Uint32Array,\n    typedLength: outputUints,\n    method: 'copy'\n  });\n  const output = outputReadback.data;\n\n  t.expectOK(checkFunction(metadata, output));\n}\n\n// Minimum size is [3, 3].\nexport const kFramebufferSizes = [\n[15, 15],\n[16, 16],\n[17, 17],\n[19, 13],\n[13, 10],\n[111, 3],\n[3, 111],\n[35, 3],\n[3, 35],\n[53, 13],\n[13, 53],\n[3, 3]];\n\n\n/**\n * Returns the number of uints per row and per texel in the framebuffer\n *\n * @param format The format\n * @param width The width\n * @param height The height\n */\nexport function getUintsPerFramebuffer(format, width, height) {\n  const { blockWidth, blockHeight, bytesPerBlock } = kTextureFormatInfo[format];\n  assert(bytesPerBlock !== undefined);\n\n  const blocksPerRow = width / blockWidth;\n  // 256 minimum arises from image copy requirements.\n  const bytesPerRow = align(blocksPerRow * (bytesPerBlock ?? 1), 256);\n  const uintsPerRow = bytesPerRow / 4;\n  const uintsPerTexel = (bytesPerBlock ?? 1) / blockWidth / blockHeight / 4;\n\n  return { uintsPerRow, uintsPerTexel };\n}\n\n/**\n * Runs a subgroup builtin test for fragment shaders\n *\n * This test draws a full screen triangle.\n * Tests should avoid checking the last row or column to avoid helper\n * invocations. Underlying APIs do not consistently guarantee whether\n * helper invocations participate in subgroup operations.\n * @param t The base test\n * @param format The framebuffer format\n * @param fsShader The fragment shader with the following interface:\n *                 Location 0 output is framebuffer with format\n *                 Group 0 binding 0 is input data\n * @param width The framebuffer width\n * @param height The framebuffer height\n * @param inputData The input data\n * @param checker A functor to check the framebuffer values\n */\nexport async function runFragmentTest(\nt,\nformat,\nfsShader,\nwidth,\nheight,\ninputData,\nchecker)\n{\n  const vsShader = `\n@vertex\nfn vsMain(@builtin(vertex_index) index : u32) -> @builtin(position) vec4f {\n  const vertices = array(\n    vec2(-2, 4), vec2(-2, -4), vec2(2, 0),\n  );\n  return vec4f(vec2f(vertices[index]), 0, 1);\n}`;\n\n  assert(width >= 3, 'Minimum width is 3');\n  assert(height >= 3, 'Minimum height is 3');\n  const pipeline = t.device.createRenderPipeline({\n    layout: 'auto',\n    vertex: {\n      module: t.device.createShaderModule({ code: vsShader })\n    },\n    fragment: {\n      module: t.device.createShaderModule({ code: fsShader }),\n      targets: [{ format }]\n    },\n    primitive: {\n      topology: 'triangle-list'\n    }\n  });\n\n  const { blockWidth, blockHeight, bytesPerBlock } = kTextureFormatInfo[format];\n  assert(bytesPerBlock !== undefined);\n\n  const blocksPerRow = width / blockWidth;\n  const blocksPerColumn = height / blockHeight;\n  // 256 minimum arises from image copy requirements.\n  const bytesPerRow = align(blocksPerRow * (bytesPerBlock ?? 1), 256);\n  const byteLength = bytesPerRow * blocksPerColumn;\n  const uintLength = byteLength / 4;\n\n  const buffer = t.makeBufferWithContents(\n    inputData,\n    GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST\n  );\n\n  const bg = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n    {\n      binding: 0,\n      resource: {\n        buffer\n      }\n    }]\n\n  });\n\n  const framebuffer = t.createTextureTracked({\n    size: [width, height],\n    usage:\n    GPUTextureUsage.COPY_SRC |\n    GPUTextureUsage.COPY_DST |\n    GPUTextureUsage.RENDER_ATTACHMENT |\n    GPUTextureUsage.TEXTURE_BINDING,\n    format\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: framebuffer.createView(),\n      loadOp: 'clear',\n      storeOp: 'store'\n    }]\n\n  });\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.draw(3);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  const copyBuffer = t.copyWholeTextureToNewBufferSimple(framebuffer, 0);\n  const readback = await t.readGPUBufferRangeTyped(copyBuffer, {\n    srcByteOffset: 0,\n    type: Uint32Array,\n    typedLength: uintLength,\n    method: 'copy'\n  });\n  const data = readback.data;\n\n  t.expectOK(checker(data));\n}\n\n/**\n * Generates scalar values for type\n *\n * Generates 4 32-bit values whose bit patterns represent\n * interesting values of the data type.\n * @param type The data type\n */\nfunction generateScalarValues(type) {\n  const scalarTy = scalarTypeOf(type);\n  switch (scalarTy) {\n    case Type.u32:\n      return [kBit.u32.min, kBit.u32.max, 1111, 2222];\n    case Type.i32:\n      return [\n      kBit.i32.positive.min,\n      kBit.i32.positive.max,\n      kBit.i32.negative.min,\n      0xffffffff // -1\n      ];\n    case Type.f32:\n      return [\n      kBit.f32.positive.zero,\n      kBit.f32.positive.nearest_max,\n      kBit.f32.negative.nearest_min,\n      0xbf800000 // -1\n      ];\n    case Type.f16:\n      return [\n      kBit.f16.positive.zero,\n      kBit.f16.positive.nearest_max,\n      kBit.f16.negative.nearest_min,\n      0xbc00 // -1\n      ];\n    default:\n      unreachable(`Unsupported type: ${type.toString()}`);\n  }\n  return [0, 0, 0, 0];\n}\n\n/**\n * Generates input bit patterns for the input type\n *\n * Generates 4 values of type in a Uint32Array.\n * 16-bit types are appropriately packed.\n * @param type The data type\n */\nexport function generateTypedInputs(type) {\n  const scalarValues = generateScalarValues(type);\n  let elements = 1;\n  if (type instanceof VectorType) {\n    elements = type.width;\n  }\n  if (type.requiresF16()) {\n    switch (elements) {\n      case 1:\n        return new Uint32Array([\n        scalarValues[0] | scalarValues[1] << 16,\n        scalarValues[2] | scalarValues[3] << 16]\n        );\n      case 2:\n        return new Uint32Array([\n        scalarValues[0] | scalarValues[0] << 16,\n        scalarValues[1] | scalarValues[1] << 16,\n        scalarValues[2] | scalarValues[2] << 16,\n        scalarValues[3] | scalarValues[3] << 16]\n        );\n      case 3:\n        return new Uint32Array([\n        scalarValues[0] | scalarValues[0] << 16,\n        scalarValues[0] | kDataSentinel << 16,\n        scalarValues[1] | scalarValues[1] << 16,\n        scalarValues[1] | kDataSentinel << 16,\n        scalarValues[2] | scalarValues[2] << 16,\n        scalarValues[2] | kDataSentinel << 16,\n        scalarValues[3] | scalarValues[3] << 16,\n        scalarValues[3] | kDataSentinel << 16]\n        );\n      case 4:\n        return new Uint32Array([\n        scalarValues[0] | scalarValues[0] << 16,\n        scalarValues[0] | scalarValues[0] << 16,\n        scalarValues[1] | scalarValues[1] << 16,\n        scalarValues[1] | scalarValues[1] << 16,\n        scalarValues[2] | scalarValues[2] << 16,\n        scalarValues[2] | scalarValues[2] << 16,\n        scalarValues[3] | scalarValues[3] << 16,\n        scalarValues[3] | scalarValues[3] << 16]\n        );\n      default:\n        unreachable(`Unsupported type: ${type.toString()}`);\n    }\n    return new Uint32Array([0]);\n  } else {\n    const bound = elements === 3 ? 4 : elements;\n    const values = [];\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < bound; j++) {\n        if (j < elements) {\n          values.push(scalarValues[i]);\n        } else {\n          values.push(kDataSentinel);\n        }\n      }\n    }\n    return new Uint32Array(values);\n  }\n}"],"mappings":"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","ignoreList":[]}