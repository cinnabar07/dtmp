{"version":3,"file":"dot4U8Packed.spec.js","names":["description","makeTestGroup","GPUTest","Type","u32","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","fn","t","cfg","dot4U8Packed","e1","e2","result","i","e1_i","e2_i","testInputs","makeCase","x","y","input","expected","cases","flatMap","v"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/dot4U8Packed.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution tests for the 'dot4U8Packed' builtin function\n\n@const fn dot4U8Packed(e1: u32 ,e2: u32) -> u32\ne1 and e2 are interpreted as vectors with four 8-bit unsigned integer components. Return the\nunsigned integer dot product of these two vectors.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { Type, u32 } from '../../../../../util/conversion.js';\n\nimport { allInputSources, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('basic').\nspecURL('https://www.w3.org/TR/WGSL/#dot4U8Packed-builtin').\ndesc(\n  `\n@const fn dot4U8Packed(e1: u32, e2: u32) -> u32\n  `\n).\nparams((u) => u.combine('inputSource', allInputSources)).\nfn(async (t) => {\n  const cfg = t.params;\n\n  const dot4U8Packed = (e1, e2) => {\n    let result = 0;\n    for (let i = 0; i < 4; ++i) {\n      const e1_i = e1 >> i * 8 & 0xff;\n      const e2_i = e2 >> i * 8 & 0xff;\n      result += e1_i * e2_i;\n    }\n    return result;\n  };\n\n  const testInputs = [\n  // dot({0, 0, 0, 0}, {0, 0, 0, 0})\n  [0, 0],\n  // dot({255u, 255u, 255u, 255u}, {255u, 255u, 255u, 255u})\n  [0xffffffff, 0xffffffff],\n  // dot({1u, 2u, 3u, 4u}, {5u, 6u, 7u, 8u})\n  [0x01020304, 0x05060708],\n  // dot({120u, 90u, 60u, 30u}, {50u, 100u, 150u, 200u})\n  [0x785a3c1e, 0x326496c8]];\n\n\n  const makeCase = (x, y) => {\n    return { input: [u32(x), u32(y)], expected: u32(dot4U8Packed(x, y)) };\n  };\n  const cases = testInputs.flatMap((v) => {\n    return [makeCase(...v)];\n  });\n\n  await run(t, builtin('dot4U8Packed'), [Type.u32, Type.u32], Type.u32, cfg, cases);\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,SAASC,aAAa,QAAQ,kDAAkD,CAClF,SAASC,OAAO,QAAQ,4BAA4B,CACpD,SAASC,IAAI,EAAEC,GAAG,QAAQ,mCAAmC;;AAE7D,SAASC,eAAe,EAAEC,GAAG,QAAQ,qBAAqB;;AAE1D,SAASC,OAAO,QAAQ,cAAc;;AAEtC,OAAO,MAAMC,CAAC,GAAGP,aAAa,CAACC,OAAO,CAAC;;AAEvCM,CAAC,CAACC,IAAI,CAAC,OAAO,CAAC;AACfC,OAAO,CAAC,kDAAkD,CAAC;AAC3DC,IAAI;EACF;AACF;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAET,eAAe,CAAC,CAAC;AACxDU,EAAE,CAAC,OAAOC,CAAC,KAAK;EACd,MAAMC,GAAG,GAAGD,CAAC,CAACJ,MAAM;;EAEpB,MAAMM,YAAY,GAAGA,CAACC,EAAE,EAAEC,EAAE,KAAK;IAC/B,IAAIC,MAAM,GAAG,CAAC;IACd,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAE,EAAEA,CAAC,EAAE;MAC1B,MAAMC,IAAI,GAAGJ,EAAE,IAAIG,CAAC,GAAG,CAAC,GAAG,IAAI;MAC/B,MAAME,IAAI,GAAGJ,EAAE,IAAIE,CAAC,GAAG,CAAC,GAAG,IAAI;MAC/BD,MAAM,IAAIE,IAAI,GAAGC,IAAI;IACvB;IACA,OAAOH,MAAM;EACf,CAAC;;EAED,MAAMI,UAAU,GAAG;EACnB;EACA,CAAC,CAAC,EAAE,CAAC,CAAC;EACN;EACA,CAAC,UAAU,EAAE,UAAU,CAAC;EACxB;EACA,CAAC,UAAU,EAAE,UAAU,CAAC;EACxB;EACA,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;;;EAGzB,MAAMC,QAAQ,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;IACzB,OAAO,EAAEC,KAAK,EAAE,CAACzB,GAAG,CAACuB,CAAC,CAAC,EAAEvB,GAAG,CAACwB,CAAC,CAAC,CAAC,EAAEE,QAAQ,EAAE1B,GAAG,CAACc,YAAY,CAACS,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,CAAC;EACvE,CAAC;EACD,MAAMG,KAAK,GAAGN,UAAU,CAACO,OAAO,CAAC,CAACC,CAAC,KAAK;IACtC,OAAO,CAACP,QAAQ,CAAC,GAAGO,CAAC,CAAC,CAAC;EACzB,CAAC,CAAC;;EAEF,MAAM3B,GAAG,CAACU,CAAC,EAAET,OAAO,CAAC,cAAc,CAAC,EAAE,CAACJ,IAAI,CAACC,GAAG,EAAED,IAAI,CAACC,GAAG,CAAC,EAAED,IAAI,CAACC,GAAG,EAAEa,GAAG,EAAEc,KAAK,CAAC;AACnF,CAAC,CAAC","ignoreList":[]}