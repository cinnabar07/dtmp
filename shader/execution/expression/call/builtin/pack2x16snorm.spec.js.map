{"version":3,"file":"pack2x16snorm.spec.js","names":["description","makeTestGroup","GPUTest","kValue","f32","pack2x16snorm","u32","vec2","Type","quantizeToF32","vectorF32Range","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","fn","t","makeCase","x","y","input","expected","normalizeF32","n","positive","max","cases","flatMap","v","map","vec2f"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/pack2x16snorm.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nConverts two normalized floating point values to 16-bit signed integers, and then combines them into one u32 value.\nComponent e[i] of the input is converted to a 16-bit twos complement integer value\n⌊ 0.5 + 32767 × min(1, max(-1, e[i])) ⌋ which is then placed in\nbits 16 × i through 16 × i + 15 of the result.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { kValue } from '../../../../../util/constants.js';\nimport { f32, pack2x16snorm, u32, vec2, Type } from '../../../../../util/conversion.js';\nimport { quantizeToF32, vectorF32Range } from '../../../../../util/math.js';\n\nimport { allInputSources, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('pack').\nspecURL('https://www.w3.org/TR/WGSL/#pack-builtin-functions').\ndesc(\n  `\n@const fn pack2x16snorm(e: vec2<f32>) -> u32\n`\n).\nparams((u) => u.combine('inputSource', allInputSources)).\nfn(async (t) => {\n  const makeCase = (x, y) => {\n    x = quantizeToF32(x);\n    y = quantizeToF32(y);\n    return { input: [vec2(f32(x), f32(y))], expected: u32(pack2x16snorm(x, y)) };\n  };\n\n  // Returns a value normalized to [-1, 1].\n  const normalizeF32 = (n) => {\n    return n / kValue.f32.positive.max;\n  };\n\n  const cases = vectorF32Range(2).flatMap((v) => {\n    return [\n    makeCase(...v),\n    makeCase(...v.map(normalizeF32))];\n\n  });\n\n  await run(t, builtin('pack2x16snorm'), [Type.vec2f], Type.u32, t.params, cases);\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG;AAC9B;AACA;AACA;AACA;AACA,CAAC,CAAC,SAASC,aAAa,QAAQ,kDAAkD,CAClF,SAASC,OAAO,QAAQ,4BAA4B,CACpD,SAASC,MAAM,QAAQ,kCAAkC;AACzD,SAASC,GAAG,EAAEC,aAAa,EAAEC,GAAG,EAAEC,IAAI,EAAEC,IAAI,QAAQ,mCAAmC;AACvF,SAASC,aAAa,EAAEC,cAAc,QAAQ,6BAA6B;;AAE3E,SAASC,eAAe,EAAEC,GAAG,QAAQ,qBAAqB;;AAE1D,SAASC,OAAO,QAAQ,cAAc;;AAEtC,OAAO,MAAMC,CAAC,GAAGb,aAAa,CAACC,OAAO,CAAC;;AAEvCY,CAAC,CAACC,IAAI,CAAC,MAAM,CAAC;AACdC,OAAO,CAAC,oDAAoD,CAAC;AAC7DC,IAAI;EACF;AACF;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAET,eAAe,CAAC,CAAC;AACxDU,EAAE,CAAC,OAAOC,CAAC,KAAK;EACd,MAAMC,QAAQ,GAAGA,CAACC,CAAC,EAAEC,CAAC,KAAK;IACzBD,CAAC,GAAGf,aAAa,CAACe,CAAC,CAAC;IACpBC,CAAC,GAAGhB,aAAa,CAACgB,CAAC,CAAC;IACpB,OAAO,EAAEC,KAAK,EAAE,CAACnB,IAAI,CAACH,GAAG,CAACoB,CAAC,CAAC,EAAEpB,GAAG,CAACqB,CAAC,CAAC,CAAC,CAAC,EAAEE,QAAQ,EAAErB,GAAG,CAACD,aAAa,CAACmB,CAAC,EAAEC,CAAC,CAAC,CAAC,CAAC,CAAC;EAC9E,CAAC;;EAED;EACA,MAAMG,YAAY,GAAGA,CAACC,CAAC,KAAK;IAC1B,OAAOA,CAAC,GAAG1B,MAAM,CAACC,GAAG,CAAC0B,QAAQ,CAACC,GAAG;EACpC,CAAC;;EAED,MAAMC,KAAK,GAAGtB,cAAc,CAAC,CAAC,CAAC,CAACuB,OAAO,CAAC,CAACC,CAAC,KAAK;IAC7C,OAAO;IACPX,QAAQ,CAAC,GAAGW,CAAC,CAAC;IACdX,QAAQ,CAAC,GAAGW,CAAC,CAACC,GAAG,CAACP,YAAY,CAAC,CAAC,CAAC;;EAEnC,CAAC,CAAC;;EAEF,MAAMhB,GAAG,CAACU,CAAC,EAAET,OAAO,CAAC,eAAe,CAAC,EAAE,CAACL,IAAI,CAAC4B,KAAK,CAAC,EAAE5B,IAAI,CAACF,GAAG,EAAEgB,CAAC,CAACJ,MAAM,EAAEc,KAAK,CAAC;AACjF,CAAC,CAAC","ignoreList":[]}