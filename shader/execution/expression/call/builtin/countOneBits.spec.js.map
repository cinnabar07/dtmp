{"version":3,"file":"countOneBits.spec.js","names":["description","makeTestGroup","GPUTest","Type","u32Bits","u32","i32Bits","i32","allInputSources","run","builtin","g","test","specURL","desc","params","u","combine","undefined","fn","t","cfg","input","expected"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/countOneBits.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution tests for the 'countOneBits' builtin function\n\nS is i32 or u32\nT is S or vecN<S>\n@const fn countOneBits(e: T ) -> T\nThe number of 1 bits in the representation of e.\nAlso known as \"population count\".\nComponent-wise when T is a vector.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../../gpu_test.js';\nimport { Type, u32Bits, u32, i32Bits, i32 } from '../../../../../util/conversion.js';\nimport { allInputSources, run } from '../../expression.js';\n\nimport { builtin } from './builtin.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('u32').\nspecURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions').\ndesc(`u32 tests`).\nparams((u) =>\nu.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4])\n).\nfn(async (t) => {\n  const cfg = t.params;\n  await run(t, builtin('countOneBits'), [Type.u32], Type.u32, cfg, [\n  // Zero\n  { input: u32Bits(0b00000000000000000000000000000000), expected: u32(0) },\n\n  // One\n  { input: u32Bits(0b00000000000000000000000000000001), expected: u32(1) },\n\n  // 0's after leading 1\n  { input: u32Bits(0b00000000000000000000000000000010), expected: u32(1) },\n  { input: u32Bits(0b00000000000000000000000000000100), expected: u32(1) },\n  { input: u32Bits(0b00000000000000000000000000001000), expected: u32(1) },\n  { input: u32Bits(0b00000000000000000000000000010000), expected: u32(1) },\n  { input: u32Bits(0b00000000000000000000000000100000), expected: u32(1) },\n  { input: u32Bits(0b00000000000000000000000001000000), expected: u32(1) },\n  { input: u32Bits(0b00000000000000000000000010000000), expected: u32(1) },\n  { input: u32Bits(0b00000000000000000000000100000000), expected: u32(1) },\n  { input: u32Bits(0b00000000000000000000001000000000), expected: u32(1) },\n  { input: u32Bits(0b00000000000000000000010000000000), expected: u32(1) },\n  { input: u32Bits(0b00000000000000000000100000000000), expected: u32(1) },\n  { input: u32Bits(0b00000000000000000001000000000000), expected: u32(1) },\n  { input: u32Bits(0b00000000000000000010000000000000), expected: u32(1) },\n  { input: u32Bits(0b00000000000000000100000000000000), expected: u32(1) },\n  { input: u32Bits(0b00000000000000001000000000000000), expected: u32(1) },\n  { input: u32Bits(0b00000000000000010000000000000000), expected: u32(1) },\n  { input: u32Bits(0b00000000000000100000000000000000), expected: u32(1) },\n  { input: u32Bits(0b00000000000001000000000000000000), expected: u32(1) },\n  { input: u32Bits(0b00000000000010000000000000000000), expected: u32(1) },\n  { input: u32Bits(0b00000000000100000000000000000000), expected: u32(1) },\n  { input: u32Bits(0b00000000001000000000000000000000), expected: u32(1) },\n  { input: u32Bits(0b00000000010000000000000000000000), expected: u32(1) },\n  { input: u32Bits(0b00000000100000000000000000000000), expected: u32(1) },\n  { input: u32Bits(0b00000001000000000000000000000000), expected: u32(1) },\n  { input: u32Bits(0b00000010000000000000000000000000), expected: u32(1) },\n  { input: u32Bits(0b00000100000000000000000000000000), expected: u32(1) },\n  { input: u32Bits(0b00001000000000000000000000000000), expected: u32(1) },\n  { input: u32Bits(0b00010000000000000000000000000000), expected: u32(1) },\n  { input: u32Bits(0b00100000000000000000000000000000), expected: u32(1) },\n  { input: u32Bits(0b01000000000000000000000000000000), expected: u32(1) },\n  { input: u32Bits(0b10000000000000000000000000000000), expected: u32(1) },\n\n  // 1's after leading 1\n  { input: u32Bits(0b00000000000000000000000000000011), expected: u32(2) },\n  { input: u32Bits(0b00000000000000000000000000000111), expected: u32(3) },\n  { input: u32Bits(0b00000000000000000000000000001111), expected: u32(4) },\n  { input: u32Bits(0b00000000000000000000000000011111), expected: u32(5) },\n  { input: u32Bits(0b00000000000000000000000000111111), expected: u32(6) },\n  { input: u32Bits(0b00000000000000000000000001111111), expected: u32(7) },\n  { input: u32Bits(0b00000000000000000000000011111111), expected: u32(8) },\n  { input: u32Bits(0b00000000000000000000000111111111), expected: u32(9) },\n  { input: u32Bits(0b00000000000000000000001111111111), expected: u32(10) },\n  { input: u32Bits(0b00000000000000000000011111111111), expected: u32(11) },\n  { input: u32Bits(0b00000000000000000000111111111111), expected: u32(12) },\n  { input: u32Bits(0b00000000000000000001111111111111), expected: u32(13) },\n  { input: u32Bits(0b00000000000000000011111111111111), expected: u32(14) },\n  { input: u32Bits(0b00000000000000000111111111111111), expected: u32(15) },\n  { input: u32Bits(0b00000000000000001111111111111111), expected: u32(16) },\n  { input: u32Bits(0b00000000000000011111111111111111), expected: u32(17) },\n  { input: u32Bits(0b00000000000000111111111111111111), expected: u32(18) },\n  { input: u32Bits(0b00000000000001111111111111111111), expected: u32(19) },\n  { input: u32Bits(0b00000000000011111111111111111111), expected: u32(20) },\n  { input: u32Bits(0b00000000000111111111111111111111), expected: u32(21) },\n  { input: u32Bits(0b00000000001111111111111111111111), expected: u32(22) },\n  { input: u32Bits(0b00000000011111111111111111111111), expected: u32(23) },\n  { input: u32Bits(0b00000000111111111111111111111111), expected: u32(24) },\n  { input: u32Bits(0b00000001111111111111111111111111), expected: u32(25) },\n  { input: u32Bits(0b00000011111111111111111111111111), expected: u32(26) },\n  { input: u32Bits(0b00000111111111111111111111111111), expected: u32(27) },\n  { input: u32Bits(0b00001111111111111111111111111111), expected: u32(28) },\n  { input: u32Bits(0b00011111111111111111111111111111), expected: u32(29) },\n  { input: u32Bits(0b00111111111111111111111111111111), expected: u32(30) },\n  { input: u32Bits(0b01111111111111111111111111111111), expected: u32(31) },\n  { input: u32Bits(0b11111111111111111111111111111111), expected: u32(32) },\n\n  // random after leading 1\n  { input: u32Bits(0b00000000000000000000000000000110), expected: u32(2) },\n  { input: u32Bits(0b00000000000000000000000000001101), expected: u32(3) },\n  { input: u32Bits(0b00000000000000000000000000011101), expected: u32(4) },\n  { input: u32Bits(0b00000000000000000000000000111001), expected: u32(4) },\n  { input: u32Bits(0b00000000000000000000000001101111), expected: u32(6) },\n  { input: u32Bits(0b00000000000000000000000011111111), expected: u32(8) },\n  { input: u32Bits(0b00000000000000000000000111101111), expected: u32(8) },\n  { input: u32Bits(0b00000000000000000000001111111111), expected: u32(10) },\n  { input: u32Bits(0b00000000000000000000011111110001), expected: u32(8) },\n  { input: u32Bits(0b00000000000000000000111011011101), expected: u32(9) },\n  { input: u32Bits(0b00000000000000000001101101111111), expected: u32(11) },\n  { input: u32Bits(0b00000000000000000011111111011111), expected: u32(13) },\n  { input: u32Bits(0b00000000000000000101111001110101), expected: u32(10) },\n  { input: u32Bits(0b00000000000000001101111011110111), expected: u32(13) },\n  { input: u32Bits(0b00000000000000011111111111110011), expected: u32(15) },\n  { input: u32Bits(0b00000000000000111111111110111111), expected: u32(17) },\n  { input: u32Bits(0b00000000000001111111011111111111), expected: u32(18) },\n  { input: u32Bits(0b00000000000011111111111111111111), expected: u32(20) },\n  { input: u32Bits(0b00000000000111110101011110111111), expected: u32(17) },\n  { input: u32Bits(0b00000000001111101111111111110111), expected: u32(20) },\n  { input: u32Bits(0b00000000011111111111010000101111), expected: u32(17) },\n  { input: u32Bits(0b00000000111111111111001111111011), expected: u32(21) },\n  { input: u32Bits(0b00000001111111011111101111111111), expected: u32(23) },\n  { input: u32Bits(0b00000011101011111011110111111011), expected: u32(21) },\n  { input: u32Bits(0b00000111111110111111111111111111), expected: u32(26) },\n  { input: u32Bits(0b00001111000000011011011110111111), expected: u32(18) },\n  { input: u32Bits(0b00011110101111011111111111111111), expected: u32(26) },\n  { input: u32Bits(0b00110110111111100111111110111101), expected: u32(24) },\n  { input: u32Bits(0b01010111111101111111011111011111), expected: u32(26) },\n  { input: u32Bits(0b11100010011110101101101110101111), expected: u32(21) }]\n  );\n});\n\ng.test('i32').\nspecURL('https://www.w3.org/TR/WGSL/#integer-builtin-functions').\ndesc(`i32 tests`).\nparams((u) =>\nu.combine('inputSource', allInputSources).combine('vectorize', [undefined, 2, 3, 4])\n).\nfn(async (t) => {\n  const cfg = t.params;\n  await run(t, builtin('countOneBits'), [Type.i32], Type.i32, cfg, [\n  // Zero\n  { input: i32Bits(0b00000000000000000000000000000000), expected: i32(0) },\n\n  // One\n  { input: i32Bits(0b00000000000000000000000000000001), expected: i32(1) },\n\n  // 0's after leading 1\n  { input: i32Bits(0b00000000000000000000000000000010), expected: i32(1) },\n  { input: i32Bits(0b00000000000000000000000000000100), expected: i32(1) },\n  { input: i32Bits(0b00000000000000000000000000001000), expected: i32(1) },\n  { input: i32Bits(0b00000000000000000000000000010000), expected: i32(1) },\n  { input: i32Bits(0b00000000000000000000000000100000), expected: i32(1) },\n  { input: i32Bits(0b00000000000000000000000001000000), expected: i32(1) },\n  { input: i32Bits(0b00000000000000000000000010000000), expected: i32(1) },\n  { input: i32Bits(0b00000000000000000000000100000000), expected: i32(1) },\n  { input: i32Bits(0b00000000000000000000001000000000), expected: i32(1) },\n  { input: i32Bits(0b00000000000000000000010000000000), expected: i32(1) },\n  { input: i32Bits(0b00000000000000000000100000000000), expected: i32(1) },\n  { input: i32Bits(0b00000000000000000001000000000000), expected: i32(1) },\n  { input: i32Bits(0b00000000000000000010000000000000), expected: i32(1) },\n  { input: i32Bits(0b00000000000000000100000000000000), expected: i32(1) },\n  { input: i32Bits(0b00000000000000001000000000000000), expected: i32(1) },\n  { input: i32Bits(0b00000000000000010000000000000000), expected: i32(1) },\n  { input: i32Bits(0b00000000000000100000000000000000), expected: i32(1) },\n  { input: i32Bits(0b00000000000001000000000000000000), expected: i32(1) },\n  { input: i32Bits(0b00000000000010000000000000000000), expected: i32(1) },\n  { input: i32Bits(0b00000000000100000000000000000000), expected: i32(1) },\n  { input: i32Bits(0b00000000001000000000000000000000), expected: i32(1) },\n  { input: i32Bits(0b00000000010000000000000000000000), expected: i32(1) },\n  { input: i32Bits(0b00000000100000000000000000000000), expected: i32(1) },\n  { input: i32Bits(0b00000001000000000000000000000000), expected: i32(1) },\n  { input: i32Bits(0b00000010000000000000000000000000), expected: i32(1) },\n  { input: i32Bits(0b00000100000000000000000000000000), expected: i32(1) },\n  { input: i32Bits(0b00001000000000000000000000000000), expected: i32(1) },\n  { input: i32Bits(0b00010000000000000000000000000000), expected: i32(1) },\n  { input: i32Bits(0b00100000000000000000000000000000), expected: i32(1) },\n  { input: i32Bits(0b01000000000000000000000000000000), expected: i32(1) },\n  { input: i32Bits(0b10000000000000000000000000000000), expected: i32(1) },\n\n  // 1's after leading 1\n  { input: i32Bits(0b00000000000000000000000000000011), expected: i32(2) },\n  { input: i32Bits(0b00000000000000000000000000000111), expected: i32(3) },\n  { input: i32Bits(0b00000000000000000000000000001111), expected: i32(4) },\n  { input: i32Bits(0b00000000000000000000000000011111), expected: i32(5) },\n  { input: i32Bits(0b00000000000000000000000000111111), expected: i32(6) },\n  { input: i32Bits(0b00000000000000000000000001111111), expected: i32(7) },\n  { input: i32Bits(0b00000000000000000000000011111111), expected: i32(8) },\n  { input: i32Bits(0b00000000000000000000000111111111), expected: i32(9) },\n  { input: i32Bits(0b00000000000000000000001111111111), expected: i32(10) },\n  { input: i32Bits(0b00000000000000000000011111111111), expected: i32(11) },\n  { input: i32Bits(0b00000000000000000000111111111111), expected: i32(12) },\n  { input: i32Bits(0b00000000000000000001111111111111), expected: i32(13) },\n  { input: i32Bits(0b00000000000000000011111111111111), expected: i32(14) },\n  { input: i32Bits(0b00000000000000000111111111111111), expected: i32(15) },\n  { input: i32Bits(0b00000000000000001111111111111111), expected: i32(16) },\n  { input: i32Bits(0b00000000000000011111111111111111), expected: i32(17) },\n  { input: i32Bits(0b00000000000000111111111111111111), expected: i32(18) },\n  { input: i32Bits(0b00000000000001111111111111111111), expected: i32(19) },\n  { input: i32Bits(0b00000000000011111111111111111111), expected: i32(20) },\n  { input: i32Bits(0b00000000000111111111111111111111), expected: i32(21) },\n  { input: i32Bits(0b00000000001111111111111111111111), expected: i32(22) },\n  { input: i32Bits(0b00000000011111111111111111111111), expected: i32(23) },\n  { input: i32Bits(0b00000000111111111111111111111111), expected: i32(24) },\n  { input: i32Bits(0b00000001111111111111111111111111), expected: i32(25) },\n  { input: i32Bits(0b00000011111111111111111111111111), expected: i32(26) },\n  { input: i32Bits(0b00000111111111111111111111111111), expected: i32(27) },\n  { input: i32Bits(0b00001111111111111111111111111111), expected: i32(28) },\n  { input: i32Bits(0b00011111111111111111111111111111), expected: i32(29) },\n  { input: i32Bits(0b00111111111111111111111111111111), expected: i32(30) },\n  { input: i32Bits(0b01111111111111111111111111111111), expected: i32(31) },\n  { input: i32Bits(0b11111111111111111111111111111111), expected: i32(32) },\n\n  // random after leading 1\n  { input: i32Bits(0b00000000000000000000000000000110), expected: i32(2) },\n  { input: i32Bits(0b00000000000000000000000000001101), expected: i32(3) },\n  { input: i32Bits(0b00000000000000000000000000011101), expected: i32(4) },\n  { input: i32Bits(0b00000000000000000000000000111001), expected: i32(4) },\n  { input: i32Bits(0b00000000000000000000000001101111), expected: i32(6) },\n  { input: i32Bits(0b00000000000000000000000011111111), expected: i32(8) },\n  { input: i32Bits(0b00000000000000000000000111101111), expected: i32(8) },\n  { input: i32Bits(0b00000000000000000000001111111111), expected: i32(10) },\n  { input: i32Bits(0b00000000000000000000011111110001), expected: i32(8) },\n  { input: i32Bits(0b00000000000000000000111011011101), expected: i32(9) },\n  { input: i32Bits(0b00000000000000000001101101111111), expected: i32(11) },\n  { input: i32Bits(0b00000000000000000011111111011111), expected: i32(13) },\n  { input: i32Bits(0b00000000000000000101111001110101), expected: i32(10) },\n  { input: i32Bits(0b00000000000000001101111011110111), expected: i32(13) },\n  { input: i32Bits(0b00000000000000011111111111110011), expected: i32(15) },\n  { input: i32Bits(0b00000000000000111111111110111111), expected: i32(17) },\n  { input: i32Bits(0b00000000000001111111011111111111), expected: i32(18) },\n  { input: i32Bits(0b00000000000011111111111111111111), expected: i32(20) },\n  { input: i32Bits(0b00000000000111110101011110111111), expected: i32(17) },\n  { input: i32Bits(0b00000000001111101111111111110111), expected: i32(20) },\n  { input: i32Bits(0b00000000011111111111010000101111), expected: i32(17) },\n  { input: i32Bits(0b00000000111111111111001111111011), expected: i32(21) },\n  { input: i32Bits(0b00000001111111011111101111111111), expected: i32(23) },\n  { input: i32Bits(0b00000011101011111011110111111011), expected: i32(21) },\n  { input: i32Bits(0b00000111111110111111111111111111), expected: i32(26) },\n  { input: i32Bits(0b00001111000000011011011110111111), expected: i32(18) },\n  { input: i32Bits(0b00011110101111011111111111111111), expected: i32(26) },\n  { input: i32Bits(0b00110110111111100111111110111101), expected: i32(24) },\n  { input: i32Bits(0b01010111111101111111011111011111), expected: i32(26) },\n  { input: i32Bits(0b11100010011110101101101110101111), expected: i32(21) }]\n  );\n});"],"mappings":"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","ignoreList":[]}