{"version":3,"file":"textureNumSamples.spec.js","names":["description","makeTestGroup","kShaderStages","kSampleTypeInfo","WGSLTextureQueryTest","g","test","specURL","desc","params","u","beginSubcases","combine","fn","t","stage","sampled_type","format","sampleCount","texture","createTextureTracked","usage","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","size","code","expected","executeAndExpectResult"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureNumSamples.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution tests for the 'textureNumSamples' builtin function\n\nReturns the number samples per texel in a multisampled texture.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { kShaderStages } from '../../../../validation/decl/util.js';\n\nimport { kSampleTypeInfo, WGSLTextureQueryTest } from './texture_utils.js';\n\nexport const g = makeTestGroup(WGSLTextureQueryTest);\n\ng.test('sampled').\nspecURL('https://www.w3.org/TR/WGSL/#texturenumsamples').\ndesc(\n  `\nT, a sampled type.\n\nfn textureNumSamples(t: texture_multisampled_2d<T>) -> u32\n\nParameters\n * t The multisampled texture.\n`\n).\nparams((u) =>\nu.\nbeginSubcases().\ncombine('stage', kShaderStages).\ncombine('sampled_type', ['f32', 'i32', 'u32'])\n).\nfn((t) => {\n  const { stage, sampled_type } = t.params;\n  const { format } = kSampleTypeInfo[sampled_type];\n\n  const sampleCount = 4;\n  const texture = t.createTextureTracked({\n    format,\n    usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,\n    size: [1, 1, 1],\n    sampleCount\n  });\n\n  const code = `\n@group(0) @binding(0) var t: texture_multisampled_2d<${sampled_type}>;\n@group(0) @binding(1) var<storage, read_write> result: u32;\nfn getValue() -> u32 {\n  return textureNumSamples(t);\n}\n    `;\n\n  const expected = [sampleCount];\n  t.executeAndExpectResult(stage, code, texture, {}, expected);\n});\n\ng.test('depth').\nspecURL('https://www.w3.org/TR/WGSL/#texturenumsamples').\ndesc(\n  `\nfn textureNumSamples(t: texture_depth_multisampled_2d) -> u32\n\nParameters\n * t The multisampled texture.\n`\n).\nparams((u) => u.beginSubcases().combine('stage', kShaderStages)).\nfn((t) => {\n  const { stage } = t.params;\n  const sampleCount = 4;\n  const texture = t.createTextureTracked({\n    format: 'depth32float',\n    usage: GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.RENDER_ATTACHMENT,\n    size: [1, 1, 1],\n    sampleCount\n  });\n\n  const code = `\n@group(0) @binding(0) var t: texture_depth_multisampled_2d;\n@group(0) @binding(1) var<storage, read_write> result: u32;\nfn getValue() -> u32 {\n  return textureNumSamples(t);\n}\n    `;\n\n  const expected = [sampleCount];\n  t.executeAndExpectResult(stage, code, texture, {}, expected);\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG;AAC9B;AACA;AACA;AACA,CAAC,CAAC,SAASC,aAAa,QAAQ,kDAAkD,CAClF,SAASC,aAAa,QAAQ,qCAAqC;AAEnE,SAASC,eAAe,EAAEC,oBAAoB,QAAQ,oBAAoB;;AAE1E,OAAO,MAAMC,CAAC,GAAGJ,aAAa,CAACG,oBAAoB,CAAC;;AAEpDC,CAAC,CAACC,IAAI,CAAC,SAAS,CAAC;AACjBC,OAAO,CAAC,+CAA+C,CAAC;AACxDC,IAAI;EACF;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,aAAa,CAAC,CAAC;AACfC,OAAO,CAAC,OAAO,EAAEV,aAAa,CAAC;AAC/BU,OAAO,CAAC,cAAc,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;AAC7C,CAAC;AACDC,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAM,EAAEC,KAAK,EAAEC,YAAY,CAAC,CAAC,GAAGF,CAAC,CAACL,MAAM;EACxC,MAAM,EAAEQ,MAAM,CAAC,CAAC,GAAGd,eAAe,CAACa,YAAY,CAAC;;EAEhD,MAAME,WAAW,GAAG,CAAC;EACrB,MAAMC,OAAO,GAAGL,CAAC,CAACM,oBAAoB,CAAC;IACrCH,MAAM;IACNI,KAAK,EAAEC,eAAe,CAACC,eAAe,GAAGD,eAAe,CAACE,iBAAiB;IAC1EC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACfP;EACF,CAAC,CAAC;;EAEF,MAAMQ,IAAI,GAAG;AACf,uDAAuDV,YAAY;AACnE;AACA;AACA;AACA;AACA,KAAK;;EAEH,MAAMW,QAAQ,GAAG,CAACT,WAAW,CAAC;EAC9BJ,CAAC,CAACc,sBAAsB,CAACb,KAAK,EAAEW,IAAI,EAAEP,OAAO,EAAE,CAAC,CAAC,EAAEQ,QAAQ,CAAC;AAC9D,CAAC,CAAC;;AAEFtB,CAAC,CAACC,IAAI,CAAC,OAAO,CAAC;AACfC,OAAO,CAAC,+CAA+C,CAAC;AACxDC,IAAI;EACF;AACF;AACA;AACA;AACA;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,aAAa,CAAC,CAAC,CAACC,OAAO,CAAC,OAAO,EAAEV,aAAa,CAAC,CAAC;AAChEW,EAAE,CAAC,CAACC,CAAC,KAAK;EACR,MAAM,EAAEC,KAAK,CAAC,CAAC,GAAGD,CAAC,CAACL,MAAM;EAC1B,MAAMS,WAAW,GAAG,CAAC;EACrB,MAAMC,OAAO,GAAGL,CAAC,CAACM,oBAAoB,CAAC;IACrCH,MAAM,EAAE,cAAc;IACtBI,KAAK,EAAEC,eAAe,CAACC,eAAe,GAAGD,eAAe,CAACE,iBAAiB;IAC1EC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;IACfP;EACF,CAAC,CAAC;;EAEF,MAAMQ,IAAI,GAAG;AACf;AACA;AACA;AACA;AACA;AACA,KAAK;;EAEH,MAAMC,QAAQ,GAAG,CAACT,WAAW,CAAC;EAC9BJ,CAAC,CAACc,sBAAsB,CAACb,KAAK,EAAEW,IAAI,EAAEP,OAAO,EAAE,CAAC,CAAC,EAAEQ,QAAQ,CAAC;AAC9D,CAAC,CAAC","ignoreList":[]}