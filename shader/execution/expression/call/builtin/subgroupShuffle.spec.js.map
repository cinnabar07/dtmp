{"version":3,"file":"subgroupShuffle.spec.js","names":["description","makeTestGroup","keysOf","objectsToRecord","assert","iterRange","kConcreteNumericScalarsAndVectors","VectorType","PRNG","kWGSizes","kPredicateCases","SubgroupTest","runComputeTest","runFragmentTest","kFramebufferSizes","generateTypedInputs","getUintsPerFramebuffer","g","kUpDownOps","kOps","kNumCases","kTypes","kSize","kShuffleCases","no_shuffle","id","expected","input","broadcast","rotate_1_up","idx","rotate_2_down","reversed","clamped","Math","max","min","checkShuffleId","metadata","output","i","expect","res","Error","undefined","test","desc","params","u","combine","beforeAllSubcases","t","selectDeviceOrSkipTestCase","fn","testcase","case","wgsl","inputData","Uint32Array","x","uintsPerOutput","kUpDownCases","delta","op","diagnostic","dynamic_1","override_2","checkShuffleUpDownDelta","kMaskCases","mask","value","expr_3","checkShuffleMask","trunc","generateInputs","seed","numInputs","prng","bound","floor","uniformInt","getShuffledId","checkCompute","numInvs","filter","mapping","Map","empty","subgroup_id","v","get","Array","from","set","subgroupMapping","size","inputValue","index","beginSubcases","wgThreads","wgSize","selectValue","inputArray","numUintsPerOutput","predicate","cond","checkDataTypes","type","requiresF16","expectIdx","expectShift","resIdx","resShift","uints","width","j","features","push","enables","toString","checkFragment","data","format","height","shuffleId","uintsPerRow","uintsPerTexel","coordToIndex","row","col","offset","shuffleLinear","shuffleRow","shuffleCol","combineWithParams","fsShader"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/subgroupShuffle.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution tests for subgroupShuffle, subgroupShuffleUp, subgroupShuffleDown, and subgroupShuffleXor.\n\nNote: There is a lack of portability for non-uniform execution so these tests\nrestrict themselves to uniform control flow.\nNote: There is no guaranteed mapping between subgroup_invocation_id and\nlocal_invocation_index. Tests should avoid assuming there is.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { keysOf, objectsToRecord } from '../../../../../../common/util/data_tables.js';\nimport { assert, iterRange } from '../../../../../../common/util/util.js';\nimport {\n  kConcreteNumericScalarsAndVectors,\n\n  VectorType } from\n'../../../../../util/conversion.js';\nimport { PRNG } from '../../../../../util/prng.js';\n\nimport {\n  kWGSizes,\n  kPredicateCases,\n  SubgroupTest,\n  runComputeTest,\n  runFragmentTest,\n  kFramebufferSizes,\n  generateTypedInputs,\n  getUintsPerFramebuffer } from\n'./subgroup_util.js';\n\nexport const g = makeTestGroup(SubgroupTest);\n\n\n\n\n\n\n\nconst kUpDownOps = ['subgroupShuffleUp', 'subgroupShuffleDown'];\n\nconst kOps = ['subgroupShuffle', 'subgroupShuffleXor', ...kUpDownOps];\n\nconst kNumCases = 16;\n\nconst kTypes = objectsToRecord(kConcreteNumericScalarsAndVectors);\n\n// This size is selected to guarantee a single subgroup.\nconst kSize = 4;\nconst kShuffleCases = {\n  no_shuffle: {\n    id: `id`,\n    expected: (input, id) => {\n      return input[id];\n    }\n  },\n  broadcast: {\n    id: `input[2]`,\n    expected: (input, id) => {\n      return input[2];\n    }\n  },\n  rotate_1_up: {\n    id: `select(id - 1, ${kSize} - 1, id == 0)`,\n    expected: (input, id) => {\n      const idx = id === 0 ? kSize - 1 : id - 1;\n      return input[idx];\n    }\n  },\n  rotate_2_down: {\n    id: `(id + 2) % ${kSize}`,\n    expected: (input, id) => {\n      const idx = (id + 2) % kSize;\n      return input[idx];\n    }\n  },\n  reversed: {\n    id: `${kSize} - id - 1`,\n    expected: (input, id) => {\n      return input[kSize - id - 1];\n    }\n  },\n  clamped: {\n    id: `clamp(id + 2, 1, 3)`,\n    expected: (input, id) => {\n      const idx = Math.max(Math.min(id + 2, 3), 1);\n      return input[idx];\n    }\n  }\n};\n\nfunction checkShuffleId(\nmetadata, // unused\noutput,\ninput,\nexpected)\n{\n  for (let i = 0; i < kSize; i++) {\n    const expect = expected(input, i);\n    const res = output[i];\n    if (res !== expect) {\n      return new Error(`Invocation ${i}: incorrect results\n- expected: ${expect}\n-      got: ${res}`);\n    }\n  }\n\n  return undefined;\n}\n\ng.test('shuffle,id').\ndesc(`Tests various ways to shuffle invocations`).\nparams((u) => u.combine('case', keysOf(kShuffleCases))).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const testcase = kShuffleCases[t.params.case];\n\n  const wgsl = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage> input : array<u32>;\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<u32>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : array<u32>; // unused\n\n@compute @workgroup_size(${kSize})\nfn main(\n  @builtin(subgroup_invocation_id) id : u32,\n) {\n  // Force usage\n  _ = metadata[0];\n\n  output[id] = subgroupShuffle(input[id], ${testcase.id});\n}`;\n\n  const inputData = new Uint32Array([...iterRange(kSize, (x) => x)]);\n  const uintsPerOutput = 1;\n  await runComputeTest(\n    t,\n    wgsl,\n    [kSize, 1, 1],\n    uintsPerOutput,\n    inputData,\n    (metadata, output) => {\n      return checkShuffleId(metadata, output, inputData, testcase.expected);\n    }\n  );\n});\n\n\n\n\n\n\n\n// Delta must be dynamically uniform\nconst kUpDownCases = {\n  no_shuffle: {\n    delta: `0`,\n    expected: (input, id, op) => {\n      return input[id];\n    },\n    diagnostic: `error`\n  },\n  dynamic_1: {\n    delta: `input[1]`,\n    expected: (input, id, op) => {\n      let idx = id;\n      if (op === 'subgroupShuffleUp') {\n        idx = id - 1;\n        if (idx < 0) {\n          return undefined;\n        }\n        return input[idx];\n      } else {\n        idx = id + 1;\n        if (idx > 3) {\n          return undefined;\n        }\n      }\n      return input[idx];\n    },\n    diagnostic: `off`\n  },\n  override_2: {\n    delta: `override_idx`,\n    expected: (input, id, op) => {\n      let idx = id;\n      if (op === 'subgroupShuffleUp') {\n        idx = id - 2;\n        if (idx < 0) {\n          return undefined;\n        }\n        return input[idx];\n      } else {\n        idx = id + 2;\n        if (idx > 3) {\n          return undefined;\n        }\n      }\n      return input[idx];\n    },\n    diagnostic: `error`\n  }\n};\n\nfunction checkShuffleUpDownDelta(\nmetadata, // unused\noutput,\ninput,\nop,\nexpected)\n{\n  assert(op === 'subgroupShuffleUp' || op === 'subgroupShuffleDown');\n\n  for (let i = 0; i < kSize; i++) {\n    const expect = expected(input, i, op);\n    const res = output[i];\n    if (expect && expect !== res) {\n      return new Error(`Invocation ${i}: incorrect results\n- expected: ${expect}\n-      got: ${res}`);\n    }\n  }\n\n  return undefined;\n}\n\ng.test('shuffleUpDown,delta').\ndesc(`Test ShuffleUp and ShuffleDown deltas`).\nparams((u) => u.combine('op', kUpDownOps).combine('case', keysOf(kUpDownCases))).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const testcase = kUpDownCases[t.params.case];\n\n  const wgsl = `\nenable subgroups;\ndiagnostic(${testcase.diagnostic}, subgroup_uniformity);\n\noverride override_idx = 2u;\n\n@group(0) @binding(0)\nvar<storage> input : array<u32>;\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<u32>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : array<u32>; // unused\n\n@compute @workgroup_size(${kSize})\nfn main(\n  @builtin(subgroup_invocation_id) id : u32,\n) {\n  // Force usage\n  _ = metadata[0];\n\n  output[id] = ${t.params.op}(input[id], ${testcase.delta});\n}`;\n\n  const inputData = new Uint32Array([...iterRange(kSize, (x) => x)]);\n  const uintsPerOutput = 1;\n  await runComputeTest(\n    t,\n    wgsl,\n    [kSize, 1, 1],\n    uintsPerOutput,\n    inputData,\n    (metadata, output) => {\n      return checkShuffleUpDownDelta(metadata, output, inputData, t.params.op, testcase.expected);\n    }\n  );\n});\n\nconst kMaskCases = {\n  no_shuffle: {\n    mask: `0`,\n    value: 0,\n    diagnostic: `error`\n  },\n  dynamic_1: {\n    mask: `input[1]`,\n    value: 1,\n    diagnostic: `off`\n  },\n  override_2: {\n    mask: `override_idx`,\n    value: 2,\n    diagnostic: `error`\n  },\n  expr_3: {\n    mask: `input[1] + input[2]`,\n    value: 3,\n    diagnostic: `off`\n  }\n};\n\nfunction checkShuffleMask(\nmetadata, // unused\noutput,\ninput,\nmask)\n{\n  assert(mask === Math.trunc(mask));\n  assert(0 <= mask && mask <= 3);\n\n  for (let i = 0; i < kSize; i++) {\n    const expect = input[i ^ mask];\n    const res = output[i];\n    if (res !== expect) {\n      return new Error(`Invocation ${i}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n    }\n  }\n\n  return undefined;\n}\n\ng.test('shuffleXor,mask').\ndesc(`Test ShuffleXor masks`).\nparams((u) => u.combine('case', keysOf(kMaskCases))).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const testcase = kMaskCases[t.params.case];\n\n  const wgsl = `\nenable subgroups;\ndiagnostic(${testcase.diagnostic}, subgroup_uniformity);\n\noverride override_idx = 2u;\n\n@group(0) @binding(0)\nvar<storage> input : array<u32>;\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<u32>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : array<u32>; // unused\n\n@compute @workgroup_size(${kSize})\nfn main(\n  @builtin(subgroup_invocation_id) id : u32,\n) {\n  // Force usage\n  _ = metadata[0];\n\n  output[id] = subgroupShuffleXor(input[id], ${testcase.mask});\n}`;\n\n  const inputData = new Uint32Array([...iterRange(kSize, (x) => x)]);\n  const uintsPerOutput = 1;\n  await runComputeTest(\n    t,\n    wgsl,\n    [kSize, 1, 1],\n    uintsPerOutput,\n    inputData,\n    (metadata, output) => {\n      return checkShuffleMask(metadata, output, inputData, testcase.value);\n    }\n  );\n});\n\n/**\n * Generate randomized inputs for testing shuffles\n *\n * 1/4 of the cases will be bounded to values in the range [0, 8)\n * 1/4 of the cases will be bounded to values in the range [0, 16)\n * 1/4 of the cases will be bounded to values in the range [0, 32)\n * 1/4 of the cases will be bounded to values in the range [0, 128)\n * @param seed The seed for the PRNG\n * @param numInputs The number of inputs to generate\n */\nfunction generateInputs(seed, numInputs) {\n  const prng = new PRNG(seed);\n\n  let bound = 128;\n  if (seed < Math.floor(kNumCases / 4)) {\n    bound = 8;\n  } else if (seed < Math.floor(kNumCases / 2)) {\n    bound = 16;\n  } else if (seed < 3 * Math.floor(kNumCases / 4)) {\n    bound = 32;\n  }\n  return new Uint32Array([\n  ...iterRange(numInputs, (x) => {\n    return prng.uniformInt(bound);\n  })]\n  );\n}\n\n/**\n * Returns the subgroup invocation id of requested shuffle\n *\n * @param id The invocation's subgroup_invocation_id\n * @param value The shuffle value\n * @param size The subgroup size\n * @param op The shuffle operation\n */\nfunction getShuffledId(id, value, op) {\n  switch (op) {\n    case 'subgroupShuffle':\n      return value;\n    case 'subgroupShuffleUp':\n      return id - value;\n    case 'subgroupShuffleDown':\n      return id + value;\n    case 'subgroupShuffleXor':\n      return id ^ value;\n  }\n  assert(false);\n  return 0;\n}\n\n/**\n * Checks results of compute passes\n *\n * @param metadata An array of uint32 values\n *                 * first half is subgroup_invocation_id\n *                 * second half is unique generated subgroup id\n * @param output An array of uint32 values\n *               * first half is shuffle results\n *               * second half is subgroup_size\n * @param input An array of uint32 input values\n * @param op The shuffle\n * @param numInvs The number of invocations\n * @param filter A predicate to filter invocations\n */\nfunction checkCompute(\nmetadata,\noutput,\ninput,\nop,\nnumInvs,\nfilter)\n{\n  const mapping = new Map();\n  const empty = [...iterRange(128, (x) => -1)];\n  for (let i = 0; i < numInvs; i++) {\n    const id = metadata[i];\n    const subgroup_id = metadata[i + numInvs];\n    const v = mapping.get(subgroup_id) ?? Array.from(empty);\n    v[id] = i;\n    mapping.set(subgroup_id, v);\n  }\n\n  for (let i = 0; i < numInvs; i++) {\n    const id = metadata[i];\n    const subgroup_id = metadata[i + numInvs];\n\n    const subgroupMapping = mapping.get(subgroup_id) ?? empty;\n\n    const res = output[i];\n    const size = output[i + numInvs];\n\n    if (!filter(id, size)) {\n      continue;\n    }\n\n    let inputValue = input[i];\n    if (op !== 'subgroupShuffle') {\n      inputValue = input[subgroupMapping[0]];\n    }\n\n    const index = getShuffledId(id, inputValue, op);\n    if (index < 0 || index >= 128 || subgroupMapping[index] === -1) {\n      continue;\n    }\n\n    if (!filter(index, size)) {\n      continue;\n    }\n\n    if (res !== subgroupMapping[index]) {\n      return new Error(`Invocation ${i}: unexpected result\n- expected: ${subgroupMapping[index]}\n-      got: ${res}`);\n    }\n  }\n\n  return undefined;\n}\n\ng.test('compute,all_active').\ndesc(`Test randomized inputs across many workgroup sizes`).\nparams((u) =>\nu.\ncombine('wgSize', kWGSizes).\ncombine('op', kOps).\nbeginSubcases().\ncombine('case', [...iterRange(kNumCases, (x) => x)])\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n  let selectValue = `input[lid]`;\n  if (t.params.op !== 'subgroupShuffle') {\n    // delta and mask operands must be subgroup uniform\n    selectValue = `subgroupBroadcastFirst(input[lid])`;\n  }\n\n  const wgsl = `\nenable subgroups;\ndiagnostic(off, subgroup_uniformity);\n\n@group(0) @binding(0)\nvar<storage> input : array<u32>;\n\nstruct Output {\n  res : array<u32, ${wgThreads}>,\n  size : array<u32, ${wgThreads}>\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : Output;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  subgroup_id : array<u32, ${wgThreads}>\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  metadata.id[lid] = id;\n  metadata.subgroup_id[lid] = subgroupBroadcastFirst(lid + 1); // avoid 0\n\n  output.size[lid] = subgroupSize;\n  output.res[lid] = ${t.params.op}(lid, ${selectValue});\n}`;\n\n  const inputArray = generateInputs(t.params.case, wgThreads);\n  const numUintsPerOutput = 2;\n  await runComputeTest(\n    t,\n    wgsl,\n    [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n    numUintsPerOutput,\n    inputArray,\n    (metadata, output) => {\n      return checkCompute(\n        metadata,\n        output,\n        inputArray,\n        t.params.op,\n        wgThreads,\n        (id, size) => {\n          return true;\n        }\n      );\n    }\n  );\n});\n\ng.test('compute,split').\ndesc(`Test randomized inputs across many workgroup sizes`).\nparams((u) =>\nu.\ncombine('predicate', keysOf(kPredicateCases)).\ncombine('op', kOps).\nbeginSubcases().\ncombine('wgSize', kWGSizes)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const testcase = kPredicateCases[t.params.predicate];\n  const wgThreads = t.params.wgSize[0] * t.params.wgSize[1] * t.params.wgSize[2];\n\n  let value = `input[id]`;\n  if (t.params.op !== 'subgroupShuffle') {\n    value = `subgroupBroadcastFirst(input[id])`;\n  }\n\n  const wgsl = `\nenable subgroups;\ndiagnostic(off, subgroup_uniformity);\n\n@group(0) @binding(0)\nvar<storage> input : array<u32>;\n\nstruct Output {\n  res : array<u32, ${wgThreads}>,\n  size : array<u32, ${wgThreads}>\n}\n\n@group(0) @binding(1)\nvar<storage, read_write> output : Output;\n\nstruct Metadata {\n  id : array<u32, ${wgThreads}>,\n  subgroup_id : array<u32, ${wgThreads}>\n}\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : Metadata;\n\n@compute @workgroup_size(${t.params.wgSize[0]}, ${t.params.wgSize[1]}, ${t.params.wgSize[2]})\nfn main(\n  @builtin(local_invocation_index) lid : u32,\n  @builtin(subgroup_invocation_id) id : u32,\n  @builtin(subgroup_size) subgroupSize : u32,\n) {\n  _ = input[0];\n  metadata.id[lid] = id;\n  metadata.subgroup_id[lid] = subgroupBroadcastFirst(lid + 1); // avoid 0\n\n  output.size[lid] = subgroupSize;\n  let value = ${value};\n  if ${testcase.cond} {\n    output.res[lid] = ${t.params.op}(lid, value);\n  } else {\n    return;\n  }\n}`;\n\n  const inputArray = new Uint32Array([...iterRange(128, (x) => x)]);\n  const numUintsPerOutput = 2;\n  await runComputeTest(\n    t,\n    wgsl,\n    [t.params.wgSize[0], t.params.wgSize[1], t.params.wgSize[2]],\n    numUintsPerOutput,\n    inputArray,\n    (metadata, output) => {\n      return checkCompute(metadata, output, inputArray, t.params.op, wgThreads, testcase.filter);\n    }\n  );\n});\n\n/**\n * Checks the results of the data types test\n *\n * The outputs for a given index are expected to match the input values\n * for the given shuffle (op and id).\n * @param metadata An unused parameter\n * @param output The output data\n * @param op The shuffle\n * @param id The shuffle id/mask/delta parameter\n * @param type The data type\n */\nfunction checkDataTypes(\nmetadata, // unused\noutput,\ninput,\nop,\nid,\ntype)\n{\n  if (type.requiresF16() && !(type instanceof VectorType)) {\n    for (let i = 0; i < 4; i++) {\n      const index = getShuffledId(i, id, op);\n      if (index < 0 || index >= 4) {\n        continue;\n      }\n\n      const expectIdx = Math.floor(index / 2);\n      const expectShift = index % 2 === 1;\n      let expect = input[expectIdx];\n      if (expectShift) {\n        expect >>= 16;\n      }\n      expect &= 0xffff;\n\n      const resIdx = Math.floor(i / 2);\n      const resShift = i % 2 === 1;\n      let res = output[resIdx];\n      if (resShift) {\n        res >>= 16;\n      }\n      res &= 0xffff;\n\n      if (res !== expect) {\n        return new Error(`${i}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n      }\n    }\n  } else {\n    let uints = 1;\n    if (type instanceof VectorType) {\n      uints = type.width === 3 ? 4 : type.width;\n      if (type.requiresF16()) {\n        uints = Math.floor(uints / 2);\n      }\n    }\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < uints; j++) {\n        const index = getShuffledId(i, id, op);\n        if (index < 0 || index >= 4) {\n          continue;\n        }\n\n        const expect = input[index * uints + j];\n        const res = output[i * uints + j];\n        if (res !== expect) {\n          return new Error(`${uints * i + j}: incorrect result\n- expected: ${expect}\n-      got: ${res}`);\n        }\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('data_types').\nparams((u) =>\nu.\ncombine('op', kOps).\ncombine('type', keysOf(kTypes)).\nbeginSubcases().\ncombine('id', [0, 1, 2, 3])\n).\nbeforeAllSubcases((t) => {\n  const features = ['subgroups'];\n  const type = kTypes[t.params.type];\n  if (type.requiresF16()) {\n    features.push('subgroups-f16');\n    features.push('shader-f16');\n  }\n  t.selectDeviceOrSkipTestCase(features);\n}).\nfn(async (t) => {\n  const wgSize = [4, 1, 1];\n  const type = kTypes[t.params.type];\n  let enables = `enable subgroups;\\n`;\n  if (type.requiresF16()) {\n    enables += `enable f16;\\nenable subgroups_f16;`;\n  }\n  const wgsl = `\n${enables}\n\n@group(0) @binding(0)\nvar<storage> input : array<${type.toString()}>;\n\n@group(0) @binding(1)\nvar<storage, read_write> output : array<${type.toString()}>;\n\n@group(0) @binding(2)\nvar<storage, read_write> metadata : array<u32>; // unused\n\n@compute @workgroup_size(${wgSize[0]}, ${wgSize[1]}, ${wgSize[2]})\nfn main(\n  @builtin(subgroup_invocation_id) id : u32,\n) {\n  // Force usage\n  _ = metadata[0];\n\n  output[id] = ${t.params.op}(input[id], ${t.params.id});\n}`;\n\n  const inputData = generateTypedInputs(type);\n  let uintsPerOutput = 1;\n  if (type instanceof VectorType) {\n    uintsPerOutput = type.width === 3 ? 4 : type.width;\n    if (type.requiresF16()) {\n      uintsPerOutput = Math.floor(uintsPerOutput / 2);\n    }\n  }\n  await runComputeTest(\n    t,\n    wgsl,\n    wgSize,\n    uintsPerOutput,\n    inputData,\n    (metadata, output) => {\n      return checkDataTypes(metadata, output, inputData, t.params.op, t.params.id, type);\n    }\n  );\n});\n\n/**\n * Check subgroup shuffles in fragment shaders\n *\n * @param data The framebuffer output\n *             * component 0 is the result\n *             * component 1 is the subgroup_invocation_id\n *             * component 2 is a unique generated subgroup_id\n * @param format The framebuffer format\n * @param width Framebuffer width\n * @param height Framebuffer height\n * @param shuffleId The value of the shuffle parameter (e.g. id/mask/delta)\n * @param op The shuffle operation\n */\nfunction checkFragment(\ndata,\nformat,\nwidth,\nheight,\nshuffleId,\nop)\n{\n  if (width < 3 || height < 3) {\n    return new Error(\n      `Insufficient framebuffer size [${width}w x ${height}h]. Minimum is [3w x 3h].`\n    );\n  }\n\n  const { uintsPerRow, uintsPerTexel } = getUintsPerFramebuffer(format, width, height);\n\n  const coordToIndex = (row, col) => {\n    return uintsPerRow * row + col * uintsPerTexel;\n  };\n\n  const mapping = new Map();\n  const empty = [...iterRange(128, (x) => -1)];\n\n  // Iteration skips last row and column to avoid helper invocations because it is not\n  // guaranteed whether or not they participate in the subgroup operation.\n  for (let row = 0; row < height - 1; row++) {\n    for (let col = 0; col < width - 1; col++) {\n      const offset = coordToIndex(row, col);\n\n      const id = data[offset + 1];\n      const subgroup_id = data[offset + 2];\n\n      const v = mapping.get(subgroup_id) ?? Array.from(empty);\n      v[id] = col + row * width;\n      mapping.set(subgroup_id, v);\n    }\n  }\n\n  for (let row = 0; row < height - 1; row++) {\n    for (let col = 0; col < width - 1; col++) {\n      const offset = coordToIndex(row, col);\n\n      const res = data[offset];\n      const id = data[offset + 1];\n      const subgroup_id = data[offset + 2];\n\n      const subgroupMapping = mapping.get(subgroup_id) ?? empty;\n\n      const index = getShuffledId(id, shuffleId, op);\n      if (index < 0 || index >= 128 || subgroupMapping[index] === -1) {\n        continue;\n      }\n\n      const shuffleLinear = subgroupMapping[index];\n      const shuffleRow = Math.floor(shuffleLinear / width);\n      const shuffleCol = shuffleLinear % width;\n      if (shuffleRow === height - 1 || shuffleCol === width - 1) {\n        continue;\n      }\n\n      if (res !== subgroupMapping[index]) {\n        return new Error(`Row ${row}, col ${col}: incorrect results:\n- expected: ${subgroupMapping[index]}\n-      got: ${res}`);\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('fragment').\ndesc(`Test shuffles in fragment shaders`).\nparams((u) =>\nu.\ncombine('size', kFramebufferSizes).\nbeginSubcases().\ncombine('op', kOps).\ncombine('id', [0, 1, 2, 3]).\ncombineWithParams([{ format: 'rgba32uint' }])\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const fsShader = `\nenable subgroups;\n\n@group(0) @binding(0)\nvar<storage, read_write> inputs : array<u32>; // unused\n\n@fragment\nfn main(\n  @builtin(position) pos : vec4f,\n  @builtin(subgroup_invocation_id) id : u32,\n) -> @location(0) vec4u {\n  // Force usage\n  _ = inputs[0];\n\n  let linear = u32(pos.x) + u32(pos.y) * ${t.params.size[0]};\n  let subgroup_id = subgroupBroadcastFirst(linear + 1);\n\n  // Filter out possible helper invocations.\n  let x_in_range = u32(pos.x) < (${t.params.size[0]} - 1);\n  let y_in_range = u32(pos.y) < (${t.params.size[1]} - 1);\n  let in_range = x_in_range && y_in_range;\n\n  return vec4u(${t.params.op}(linear, ${t.params.id}), id, subgroup_id, linear);\n}`;\n\n  await runFragmentTest(\n    t,\n    t.params.format,\n    fsShader,\n    t.params.size[0],\n    t.params.size[1],\n    new Uint32Array([0]), // unused,\n    (data) => {\n      return checkFragment(\n        data,\n        t.params.format,\n        t.params.size[0],\n        t.params.size[1],\n        t.params.id,\n        t.params.op\n      );\n    }\n  );\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,CAAC,SAASC,aAAa,QAAQ,kDAAkD,CAClF,SAASC,MAAM,EAAEC,eAAe,QAAQ,8CAA8C,CACtF,SAASC,MAAM,EAAEC,SAAS,QAAQ,uCAAuC;AACzE;EACEC,iCAAiC;;EAEjCC,UAAU;AACZ,mCAAmC;AACnC,SAASC,IAAI,QAAQ,6BAA6B;;AAElD;EACEC,QAAQ;EACRC,eAAe;EACfC,YAAY;EACZC,cAAc;EACdC,eAAe;EACfC,iBAAiB;EACjBC,mBAAmB;EACnBC,sBAAsB;AACxB,oBAAoB;;AAEpB,OAAO,MAAMC,CAAC,GAAGhB,aAAa,CAACU,YAAY,CAAC;;;;;;;;AAQ5C,MAAMO,UAAU,GAAG,CAAC,mBAAmB,EAAE,qBAAqB,CAAC;;AAE/D,MAAMC,IAAI,GAAG,CAAC,iBAAiB,EAAE,oBAAoB,EAAE,GAAGD,UAAU,CAAC;;AAErE,MAAME,SAAS,GAAG,EAAE;;AAEpB,MAAMC,MAAM,GAAGlB,eAAe,CAACG,iCAAiC,CAAC;;AAEjE;AACA,MAAMgB,KAAK,GAAG,CAAC;AACf,MAAMC,aAAa,GAAG;EACpBC,UAAU,EAAE;IACVC,EAAE,EAAE,IAAI;IACRC,QAAQ,EAAEA,CAACC,KAAK,EAAEF,EAAE,KAAK;MACvB,OAAOE,KAAK,CAACF,EAAE,CAAC;IAClB;EACF,CAAC;EACDG,SAAS,EAAE;IACTH,EAAE,EAAE,UAAU;IACdC,QAAQ,EAAEA,CAACC,KAAK,EAAEF,EAAE,KAAK;MACvB,OAAOE,KAAK,CAAC,CAAC,CAAC;IACjB;EACF,CAAC;EACDE,WAAW,EAAE;IACXJ,EAAE,EAAE,kBAAkBH,KAAK,gBAAgB;IAC3CI,QAAQ,EAAEA,CAACC,KAAK,EAAEF,EAAE,KAAK;MACvB,MAAMK,GAAG,GAAGL,EAAE,KAAK,CAAC,GAAGH,KAAK,GAAG,CAAC,GAAGG,EAAE,GAAG,CAAC;MACzC,OAAOE,KAAK,CAACG,GAAG,CAAC;IACnB;EACF,CAAC;EACDC,aAAa,EAAE;IACbN,EAAE,EAAE,cAAcH,KAAK,EAAE;IACzBI,QAAQ,EAAEA,CAACC,KAAK,EAAEF,EAAE,KAAK;MACvB,MAAMK,GAAG,GAAG,CAACL,EAAE,GAAG,CAAC,IAAIH,KAAK;MAC5B,OAAOK,KAAK,CAACG,GAAG,CAAC;IACnB;EACF,CAAC;EACDE,QAAQ,EAAE;IACRP,EAAE,EAAE,GAAGH,KAAK,WAAW;IACvBI,QAAQ,EAAEA,CAACC,KAAK,EAAEF,EAAE,KAAK;MACvB,OAAOE,KAAK,CAACL,KAAK,GAAGG,EAAE,GAAG,CAAC,CAAC;IAC9B;EACF,CAAC;EACDQ,OAAO,EAAE;IACPR,EAAE,EAAE,qBAAqB;IACzBC,QAAQ,EAAEA,CAACC,KAAK,EAAEF,EAAE,KAAK;MACvB,MAAMK,GAAG,GAAGI,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAACX,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC;MAC5C,OAAOE,KAAK,CAACG,GAAG,CAAC;IACnB;EACF;AACF,CAAC;;AAED,SAASO,cAAcA;AACvBC,QAAQ,EAAE;AACVC,MAAM;AACNZ,KAAK;AACLD,QAAQ;AACR;EACE,KAAK,IAAIc,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlB,KAAK,EAAEkB,CAAC,EAAE,EAAE;IAC9B,MAAMC,MAAM,GAAGf,QAAQ,CAACC,KAAK,EAAEa,CAAC,CAAC;IACjC,MAAME,GAAG,GAAGH,MAAM,CAACC,CAAC,CAAC;IACrB,IAAIE,GAAG,KAAKD,MAAM,EAAE;MAClB,OAAO,IAAIE,KAAK,CAAC,cAAcH,CAAC;AACtC,cAAcC,MAAM;AACpB,cAAcC,GAAG,EAAE,CAAC;IAChB;EACF;;EAEA,OAAOE,SAAS;AAClB;;AAEA3B,CAAC,CAAC4B,IAAI,CAAC,YAAY,CAAC;AACpBC,IAAI,CAAC,2CAA2C,CAAC;AACjDC,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,MAAM,EAAE/C,MAAM,CAACqB,aAAa,CAAC,CAAC,CAAC;AACvD2B,iBAAiB,CAAC,CAACC,CAAC,KAAK;EACvBA,CAAC,CAACC,0BAA0B,CAAC,WAAW,CAAC;AAC3C,CAAC,CAAC;AACFC,EAAE,CAAC,OAAOF,CAAC,KAAK;EACd,MAAMG,QAAQ,GAAG/B,aAAa,CAAC4B,CAAC,CAACJ,MAAM,CAACQ,IAAI,CAAC;;EAE7C,MAAMC,IAAI,GAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2BlC,KAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4CgC,QAAQ,CAAC7B,EAAE;AACvD,EAAE;;EAEA,MAAMgC,SAAS,GAAG,IAAIC,WAAW,CAAC,CAAC,GAAGrD,SAAS,CAACiB,KAAK,EAAE,CAACqC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC;EAClE,MAAMC,cAAc,GAAG,CAAC;EACxB,MAAMhD,cAAc;IAClBuC,CAAC;IACDK,IAAI;IACJ,CAAClC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;IACbsC,cAAc;IACdH,SAAS;IACT,CAACnB,QAAQ,EAAEC,MAAM,KAAK;MACpB,OAAOF,cAAc,CAACC,QAAQ,EAAEC,MAAM,EAAEkB,SAAS,EAAEH,QAAQ,CAAC5B,QAAQ,CAAC;IACvE;EACF,CAAC;AACH,CAAC,CAAC;;;;;;;;AAQF;AACA,MAAMmC,YAAY,GAAG;EACnBrC,UAAU,EAAE;IACVsC,KAAK,EAAE,GAAG;IACVpC,QAAQ,EAAEA,CAACC,KAAK,EAAEF,EAAE,EAAEsC,EAAE,KAAK;MAC3B,OAAOpC,KAAK,CAACF,EAAE,CAAC;IAClB,CAAC;IACDuC,UAAU,EAAE;EACd,CAAC;EACDC,SAAS,EAAE;IACTH,KAAK,EAAE,UAAU;IACjBpC,QAAQ,EAAEA,CAACC,KAAK,EAAEF,EAAE,EAAEsC,EAAE,KAAK;MAC3B,IAAIjC,GAAG,GAAGL,EAAE;MACZ,IAAIsC,EAAE,KAAK,mBAAmB,EAAE;QAC9BjC,GAAG,GAAGL,EAAE,GAAG,CAAC;QACZ,IAAIK,GAAG,GAAG,CAAC,EAAE;UACX,OAAOc,SAAS;QAClB;QACA,OAAOjB,KAAK,CAACG,GAAG,CAAC;MACnB,CAAC,MAAM;QACLA,GAAG,GAAGL,EAAE,GAAG,CAAC;QACZ,IAAIK,GAAG,GAAG,CAAC,EAAE;UACX,OAAOc,SAAS;QAClB;MACF;MACA,OAAOjB,KAAK,CAACG,GAAG,CAAC;IACnB,CAAC;IACDkC,UAAU,EAAE;EACd,CAAC;EACDE,UAAU,EAAE;IACVJ,KAAK,EAAE,cAAc;IACrBpC,QAAQ,EAAEA,CAACC,KAAK,EAAEF,EAAE,EAAEsC,EAAE,KAAK;MAC3B,IAAIjC,GAAG,GAAGL,EAAE;MACZ,IAAIsC,EAAE,KAAK,mBAAmB,EAAE;QAC9BjC,GAAG,GAAGL,EAAE,GAAG,CAAC;QACZ,IAAIK,GAAG,GAAG,CAAC,EAAE;UACX,OAAOc,SAAS;QAClB;QACA,OAAOjB,KAAK,CAACG,GAAG,CAAC;MACnB,CAAC,MAAM;QACLA,GAAG,GAAGL,EAAE,GAAG,CAAC;QACZ,IAAIK,GAAG,GAAG,CAAC,EAAE;UACX,OAAOc,SAAS;QAClB;MACF;MACA,OAAOjB,KAAK,CAACG,GAAG,CAAC;IACnB,CAAC;IACDkC,UAAU,EAAE;EACd;AACF,CAAC;;AAED,SAASG,uBAAuBA;AAChC7B,QAAQ,EAAE;AACVC,MAAM;AACNZ,KAAK;AACLoC,EAAE;AACFrC,QAAQ;AACR;EACEtB,MAAM,CAAC2D,EAAE,KAAK,mBAAmB,IAAIA,EAAE,KAAK,qBAAqB,CAAC;;EAElE,KAAK,IAAIvB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlB,KAAK,EAAEkB,CAAC,EAAE,EAAE;IAC9B,MAAMC,MAAM,GAAGf,QAAQ,CAACC,KAAK,EAAEa,CAAC,EAAEuB,EAAE,CAAC;IACrC,MAAMrB,GAAG,GAAGH,MAAM,CAACC,CAAC,CAAC;IACrB,IAAIC,MAAM,IAAIA,MAAM,KAAKC,GAAG,EAAE;MAC5B,OAAO,IAAIC,KAAK,CAAC,cAAcH,CAAC;AACtC,cAAcC,MAAM;AACpB,cAAcC,GAAG,EAAE,CAAC;IAChB;EACF;;EAEA,OAAOE,SAAS;AAClB;;AAEA3B,CAAC,CAAC4B,IAAI,CAAC,qBAAqB,CAAC;AAC7BC,IAAI,CAAC,uCAAuC,CAAC;AAC7CC,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,IAAI,EAAE/B,UAAU,CAAC,CAAC+B,OAAO,CAAC,MAAM,EAAE/C,MAAM,CAAC2D,YAAY,CAAC,CAAC,CAAC;AAChFX,iBAAiB,CAAC,CAACC,CAAC,KAAK;EACvBA,CAAC,CAACC,0BAA0B,CAAC,WAAW,CAAC;AAC3C,CAAC,CAAC;AACFC,EAAE,CAAC,OAAOF,CAAC,KAAK;EACd,MAAMG,QAAQ,GAAGO,YAAY,CAACV,CAAC,CAACJ,MAAM,CAACQ,IAAI,CAAC;;EAE5C,MAAMC,IAAI,GAAG;AACf;AACA,aAAaF,QAAQ,CAACU,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B1C,KAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB6B,CAAC,CAACJ,MAAM,CAACgB,EAAE,eAAeT,QAAQ,CAACQ,KAAK;AACzD,EAAE;;EAEA,MAAML,SAAS,GAAG,IAAIC,WAAW,CAAC,CAAC,GAAGrD,SAAS,CAACiB,KAAK,EAAE,CAACqC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC;EAClE,MAAMC,cAAc,GAAG,CAAC;EACxB,MAAMhD,cAAc;IAClBuC,CAAC;IACDK,IAAI;IACJ,CAAClC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;IACbsC,cAAc;IACdH,SAAS;IACT,CAACnB,QAAQ,EAAEC,MAAM,KAAK;MACpB,OAAO4B,uBAAuB,CAAC7B,QAAQ,EAAEC,MAAM,EAAEkB,SAAS,EAAEN,CAAC,CAACJ,MAAM,CAACgB,EAAE,EAAET,QAAQ,CAAC5B,QAAQ,CAAC;IAC7F;EACF,CAAC;AACH,CAAC,CAAC;;AAEF,MAAM0C,UAAU,GAAG;EACjB5C,UAAU,EAAE;IACV6C,IAAI,EAAE,GAAG;IACTC,KAAK,EAAE,CAAC;IACRN,UAAU,EAAE;EACd,CAAC;EACDC,SAAS,EAAE;IACTI,IAAI,EAAE,UAAU;IAChBC,KAAK,EAAE,CAAC;IACRN,UAAU,EAAE;EACd,CAAC;EACDE,UAAU,EAAE;IACVG,IAAI,EAAE,cAAc;IACpBC,KAAK,EAAE,CAAC;IACRN,UAAU,EAAE;EACd,CAAC;EACDO,MAAM,EAAE;IACNF,IAAI,EAAE,qBAAqB;IAC3BC,KAAK,EAAE,CAAC;IACRN,UAAU,EAAE;EACd;AACF,CAAC;;AAED,SAASQ,gBAAgBA;AACzBlC,QAAQ,EAAE;AACVC,MAAM;AACNZ,KAAK;AACL0C,IAAI;AACJ;EACEjE,MAAM,CAACiE,IAAI,KAAKnC,IAAI,CAACuC,KAAK,CAACJ,IAAI,CAAC,CAAC;EACjCjE,MAAM,CAAC,CAAC,IAAIiE,IAAI,IAAIA,IAAI,IAAI,CAAC,CAAC;;EAE9B,KAAK,IAAI7B,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGlB,KAAK,EAAEkB,CAAC,EAAE,EAAE;IAC9B,MAAMC,MAAM,GAAGd,KAAK,CAACa,CAAC,GAAG6B,IAAI,CAAC;IAC9B,MAAM3B,GAAG,GAAGH,MAAM,CAACC,CAAC,CAAC;IACrB,IAAIE,GAAG,KAAKD,MAAM,EAAE;MAClB,OAAO,IAAIE,KAAK,CAAC,cAAcH,CAAC;AACtC,cAAcC,MAAM;AACpB,cAAcC,GAAG,EAAE,CAAC;IAChB;EACF;;EAEA,OAAOE,SAAS;AAClB;;AAEA3B,CAAC,CAAC4B,IAAI,CAAC,iBAAiB,CAAC;AACzBC,IAAI,CAAC,uBAAuB,CAAC;AAC7BC,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,MAAM,EAAE/C,MAAM,CAACkE,UAAU,CAAC,CAAC,CAAC;AACpDlB,iBAAiB,CAAC,CAACC,CAAC,KAAK;EACvBA,CAAC,CAACC,0BAA0B,CAAC,WAAW,CAAC;AAC3C,CAAC,CAAC;AACFC,EAAE,CAAC,OAAOF,CAAC,KAAK;EACd,MAAMG,QAAQ,GAAGc,UAAU,CAACjB,CAAC,CAACJ,MAAM,CAACQ,IAAI,CAAC;;EAE1C,MAAMC,IAAI,GAAG;AACf;AACA,aAAaF,QAAQ,CAACU,UAAU;AAChC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B1C,KAAK;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,+CAA+CgC,QAAQ,CAACe,IAAI;AAC5D,EAAE;;EAEA,MAAMZ,SAAS,GAAG,IAAIC,WAAW,CAAC,CAAC,GAAGrD,SAAS,CAACiB,KAAK,EAAE,CAACqC,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC;EAClE,MAAMC,cAAc,GAAG,CAAC;EACxB,MAAMhD,cAAc;IAClBuC,CAAC;IACDK,IAAI;IACJ,CAAClC,KAAK,EAAE,CAAC,EAAE,CAAC,CAAC;IACbsC,cAAc;IACdH,SAAS;IACT,CAACnB,QAAQ,EAAEC,MAAM,KAAK;MACpB,OAAOiC,gBAAgB,CAAClC,QAAQ,EAAEC,MAAM,EAAEkB,SAAS,EAAEH,QAAQ,CAACgB,KAAK,CAAC;IACtE;EACF,CAAC;AACH,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASI,cAAcA,CAACC,IAAI,EAAEC,SAAS,EAAE;EACvC,MAAMC,IAAI,GAAG,IAAIrE,IAAI,CAACmE,IAAI,CAAC;;EAE3B,IAAIG,KAAK,GAAG,GAAG;EACf,IAAIH,IAAI,GAAGzC,IAAI,CAAC6C,KAAK,CAAC3D,SAAS,GAAG,CAAC,CAAC,EAAE;IACpC0D,KAAK,GAAG,CAAC;EACX,CAAC,MAAM,IAAIH,IAAI,GAAGzC,IAAI,CAAC6C,KAAK,CAAC3D,SAAS,GAAG,CAAC,CAAC,EAAE;IAC3C0D,KAAK,GAAG,EAAE;EACZ,CAAC,MAAM,IAAIH,IAAI,GAAG,CAAC,GAAGzC,IAAI,CAAC6C,KAAK,CAAC3D,SAAS,GAAG,CAAC,CAAC,EAAE;IAC/C0D,KAAK,GAAG,EAAE;EACZ;EACA,OAAO,IAAIpB,WAAW,CAAC;EACvB,GAAGrD,SAAS,CAACuE,SAAS,EAAE,CAACjB,CAAC,KAAK;IAC7B,OAAOkB,IAAI,CAACG,UAAU,CAACF,KAAK,CAAC;EAC/B,CAAC,CAAC;EACF,CAAC;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASG,aAAaA,CAACxD,EAAE,EAAE6C,KAAK,EAAEP,EAAE,EAAE;EACpC,QAAQA,EAAE;IACR,KAAK,iBAAiB;MACpB,OAAOO,KAAK;IACd,KAAK,mBAAmB;MACtB,OAAO7C,EAAE,GAAG6C,KAAK;IACnB,KAAK,qBAAqB;MACxB,OAAO7C,EAAE,GAAG6C,KAAK;IACnB,KAAK,oBAAoB;MACvB,OAAO7C,EAAE,GAAG6C,KAAK;EACrB;EACAlE,MAAM,CAAC,KAAK,CAAC;EACb,OAAO,CAAC;AACV;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS8E,YAAYA;AACrB5C,QAAQ;AACRC,MAAM;AACNZ,KAAK;AACLoC,EAAE;AACFoB,OAAO;AACPC,MAAM;AACN;EACE,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzB,MAAMC,KAAK,GAAG,CAAC,GAAGlF,SAAS,CAAC,GAAG,EAAE,CAACsD,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;EAC5C,KAAK,IAAInB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2C,OAAO,EAAE3C,CAAC,EAAE,EAAE;IAChC,MAAMf,EAAE,GAAGa,QAAQ,CAACE,CAAC,CAAC;IACtB,MAAMgD,WAAW,GAAGlD,QAAQ,CAACE,CAAC,GAAG2C,OAAO,CAAC;IACzC,MAAMM,CAAC,GAAGJ,OAAO,CAACK,GAAG,CAACF,WAAW,CAAC,IAAIG,KAAK,CAACC,IAAI,CAACL,KAAK,CAAC;IACvDE,CAAC,CAAChE,EAAE,CAAC,GAAGe,CAAC;IACT6C,OAAO,CAACQ,GAAG,CAACL,WAAW,EAAEC,CAAC,CAAC;EAC7B;;EAEA,KAAK,IAAIjD,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG2C,OAAO,EAAE3C,CAAC,EAAE,EAAE;IAChC,MAAMf,EAAE,GAAGa,QAAQ,CAACE,CAAC,CAAC;IACtB,MAAMgD,WAAW,GAAGlD,QAAQ,CAACE,CAAC,GAAG2C,OAAO,CAAC;;IAEzC,MAAMW,eAAe,GAAGT,OAAO,CAACK,GAAG,CAACF,WAAW,CAAC,IAAID,KAAK;;IAEzD,MAAM7C,GAAG,GAAGH,MAAM,CAACC,CAAC,CAAC;IACrB,MAAMuD,IAAI,GAAGxD,MAAM,CAACC,CAAC,GAAG2C,OAAO,CAAC;;IAEhC,IAAI,CAACC,MAAM,CAAC3D,EAAE,EAAEsE,IAAI,CAAC,EAAE;MACrB;IACF;;IAEA,IAAIC,UAAU,GAAGrE,KAAK,CAACa,CAAC,CAAC;IACzB,IAAIuB,EAAE,KAAK,iBAAiB,EAAE;MAC5BiC,UAAU,GAAGrE,KAAK,CAACmE,eAAe,CAAC,CAAC,CAAC,CAAC;IACxC;;IAEA,MAAMG,KAAK,GAAGhB,aAAa,CAACxD,EAAE,EAAEuE,UAAU,EAAEjC,EAAE,CAAC;IAC/C,IAAIkC,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,GAAG,IAAIH,eAAe,CAACG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;MAC9D;IACF;;IAEA,IAAI,CAACb,MAAM,CAACa,KAAK,EAAEF,IAAI,CAAC,EAAE;MACxB;IACF;;IAEA,IAAIrD,GAAG,KAAKoD,eAAe,CAACG,KAAK,CAAC,EAAE;MAClC,OAAO,IAAItD,KAAK,CAAC,cAAcH,CAAC;AACtC,cAAcsD,eAAe,CAACG,KAAK,CAAC;AACpC,cAAcvD,GAAG,EAAE,CAAC;IAChB;EACF;;EAEA,OAAOE,SAAS;AAClB;;AAEA3B,CAAC,CAAC4B,IAAI,CAAC,oBAAoB,CAAC;AAC5BC,IAAI,CAAC,oDAAoD,CAAC;AAC1DC,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,OAAO,CAAC,QAAQ,EAAExC,QAAQ,CAAC;AAC3BwC,OAAO,CAAC,IAAI,EAAE9B,IAAI,CAAC;AACnB+E,aAAa,CAAC,CAAC;AACfjD,OAAO,CAAC,MAAM,EAAE,CAAC,GAAG5C,SAAS,CAACe,SAAS,EAAE,CAACuC,CAAC,KAAKA,CAAC,CAAC,CAAC;AACnD,CAAC;AACDT,iBAAiB,CAAC,CAACC,CAAC,KAAK;EACvBA,CAAC,CAACC,0BAA0B,CAAC,WAAW,CAAC;AAC3C,CAAC,CAAC;AACFC,EAAE,CAAC,OAAOF,CAAC,KAAK;EACd,MAAMgD,SAAS,GAAGhD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC,GAAGjD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC,GAAGjD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC;;EAE9E,IAAIC,WAAW,GAAG,YAAY;EAC9B,IAAIlD,CAAC,CAACJ,MAAM,CAACgB,EAAE,KAAK,iBAAiB,EAAE;IACrC;IACAsC,WAAW,GAAG,oCAAoC;EACpD;;EAEA,MAAM7C,IAAI,GAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB2C,SAAS;AAC9B,sBAAsBA,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoBA,SAAS;AAC7B,6BAA6BA,SAAS;AACtC;AACA;AACA;AACA;AACA;AACA,2BAA2BhD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC,KAAKjD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC,KAAKjD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsBjD,CAAC,CAACJ,MAAM,CAACgB,EAAE,SAASsC,WAAW;AACrD,EAAE;;EAEA,MAAMC,UAAU,GAAG5B,cAAc,CAACvB,CAAC,CAACJ,MAAM,CAACQ,IAAI,EAAE4C,SAAS,CAAC;EAC3D,MAAMI,iBAAiB,GAAG,CAAC;EAC3B,MAAM3F,cAAc;IAClBuC,CAAC;IACDK,IAAI;IACJ,CAACL,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC,EAAEjD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC,EAAEjD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC,CAAC;IAC5DG,iBAAiB;IACjBD,UAAU;IACV,CAAChE,QAAQ,EAAEC,MAAM,KAAK;MACpB,OAAO2C,YAAY;QACjB5C,QAAQ;QACRC,MAAM;QACN+D,UAAU;QACVnD,CAAC,CAACJ,MAAM,CAACgB,EAAE;QACXoC,SAAS;QACT,CAAC1E,EAAE,EAAEsE,IAAI,KAAK;UACZ,OAAO,IAAI;QACb;MACF,CAAC;IACH;EACF,CAAC;AACH,CAAC,CAAC;;AAEF9E,CAAC,CAAC4B,IAAI,CAAC,eAAe,CAAC;AACvBC,IAAI,CAAC,oDAAoD,CAAC;AAC1DC,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,OAAO,CAAC,WAAW,EAAE/C,MAAM,CAACQ,eAAe,CAAC,CAAC;AAC7CuC,OAAO,CAAC,IAAI,EAAE9B,IAAI,CAAC;AACnB+E,aAAa,CAAC,CAAC;AACfjD,OAAO,CAAC,QAAQ,EAAExC,QAAQ;AAC1B,CAAC;AACDyC,iBAAiB,CAAC,CAACC,CAAC,KAAK;EACvBA,CAAC,CAACC,0BAA0B,CAAC,WAAW,CAAC;AAC3C,CAAC,CAAC;AACFC,EAAE,CAAC,OAAOF,CAAC,KAAK;EACd,MAAMG,QAAQ,GAAG5C,eAAe,CAACyC,CAAC,CAACJ,MAAM,CAACyD,SAAS,CAAC;EACpD,MAAML,SAAS,GAAGhD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC,GAAGjD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC,GAAGjD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC;;EAE9E,IAAI9B,KAAK,GAAG,WAAW;EACvB,IAAInB,CAAC,CAACJ,MAAM,CAACgB,EAAE,KAAK,iBAAiB,EAAE;IACrCO,KAAK,GAAG,mCAAmC;EAC7C;;EAEA,MAAMd,IAAI,GAAG;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qBAAqB2C,SAAS;AAC9B,sBAAsBA,SAAS;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoBA,SAAS;AAC7B,6BAA6BA,SAAS;AACtC;AACA;AACA;AACA;AACA;AACA,2BAA2BhD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC,KAAKjD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC,KAAKjD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB9B,KAAK;AACrB,OAAOhB,QAAQ,CAACmD,IAAI;AACpB,wBAAwBtD,CAAC,CAACJ,MAAM,CAACgB,EAAE;AACnC;AACA;AACA;AACA,EAAE;;EAEA,MAAMuC,UAAU,GAAG,IAAI5C,WAAW,CAAC,CAAC,GAAGrD,SAAS,CAAC,GAAG,EAAE,CAACsD,CAAC,KAAKA,CAAC,CAAC,CAAC,CAAC;EACjE,MAAM4C,iBAAiB,GAAG,CAAC;EAC3B,MAAM3F,cAAc;IAClBuC,CAAC;IACDK,IAAI;IACJ,CAACL,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC,EAAEjD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC,EAAEjD,CAAC,CAACJ,MAAM,CAACqD,MAAM,CAAC,CAAC,CAAC,CAAC;IAC5DG,iBAAiB;IACjBD,UAAU;IACV,CAAChE,QAAQ,EAAEC,MAAM,KAAK;MACpB,OAAO2C,YAAY,CAAC5C,QAAQ,EAAEC,MAAM,EAAE+D,UAAU,EAAEnD,CAAC,CAACJ,MAAM,CAACgB,EAAE,EAAEoC,SAAS,EAAE7C,QAAQ,CAAC8B,MAAM,CAAC;IAC5F;EACF,CAAC;AACH,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASsB,cAAcA;AACvBpE,QAAQ,EAAE;AACVC,MAAM;AACNZ,KAAK;AACLoC,EAAE;AACFtC,EAAE;AACFkF,IAAI;AACJ;EACE,IAAIA,IAAI,CAACC,WAAW,CAAC,CAAC,IAAI,EAAED,IAAI,YAAYpG,UAAU,CAAC,EAAE;IACvD,KAAK,IAAIiC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,MAAMyD,KAAK,GAAGhB,aAAa,CAACzC,CAAC,EAAEf,EAAE,EAAEsC,EAAE,CAAC;MACtC,IAAIkC,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,CAAC,EAAE;QAC3B;MACF;;MAEA,MAAMY,SAAS,GAAG3E,IAAI,CAAC6C,KAAK,CAACkB,KAAK,GAAG,CAAC,CAAC;MACvC,MAAMa,WAAW,GAAGb,KAAK,GAAG,CAAC,KAAK,CAAC;MACnC,IAAIxD,MAAM,GAAGd,KAAK,CAACkF,SAAS,CAAC;MAC7B,IAAIC,WAAW,EAAE;QACfrE,MAAM,KAAK,EAAE;MACf;MACAA,MAAM,IAAI,MAAM;;MAEhB,MAAMsE,MAAM,GAAG7E,IAAI,CAAC6C,KAAK,CAACvC,CAAC,GAAG,CAAC,CAAC;MAChC,MAAMwE,QAAQ,GAAGxE,CAAC,GAAG,CAAC,KAAK,CAAC;MAC5B,IAAIE,GAAG,GAAGH,MAAM,CAACwE,MAAM,CAAC;MACxB,IAAIC,QAAQ,EAAE;QACZtE,GAAG,KAAK,EAAE;MACZ;MACAA,GAAG,IAAI,MAAM;;MAEb,IAAIA,GAAG,KAAKD,MAAM,EAAE;QAClB,OAAO,IAAIE,KAAK,CAAC,GAAGH,CAAC;AAC7B,cAAcC,MAAM;AACpB,cAAcC,GAAG,EAAE,CAAC;MACd;IACF;EACF,CAAC,MAAM;IACL,IAAIuE,KAAK,GAAG,CAAC;IACb,IAAIN,IAAI,YAAYpG,UAAU,EAAE;MAC9B0G,KAAK,GAAGN,IAAI,CAACO,KAAK,KAAK,CAAC,GAAG,CAAC,GAAGP,IAAI,CAACO,KAAK;MACzC,IAAIP,IAAI,CAACC,WAAW,CAAC,CAAC,EAAE;QACtBK,KAAK,GAAG/E,IAAI,CAAC6C,KAAK,CAACkC,KAAK,GAAG,CAAC,CAAC;MAC/B;IACF;IACA,KAAK,IAAIzE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;MAC1B,KAAK,IAAI2E,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGF,KAAK,EAAEE,CAAC,EAAE,EAAE;QAC9B,MAAMlB,KAAK,GAAGhB,aAAa,CAACzC,CAAC,EAAEf,EAAE,EAAEsC,EAAE,CAAC;QACtC,IAAIkC,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,CAAC,EAAE;UAC3B;QACF;;QAEA,MAAMxD,MAAM,GAAGd,KAAK,CAACsE,KAAK,GAAGgB,KAAK,GAAGE,CAAC,CAAC;QACvC,MAAMzE,GAAG,GAAGH,MAAM,CAACC,CAAC,GAAGyE,KAAK,GAAGE,CAAC,CAAC;QACjC,IAAIzE,GAAG,KAAKD,MAAM,EAAE;UAClB,OAAO,IAAIE,KAAK,CAAC,GAAGsE,KAAK,GAAGzE,CAAC,GAAG2E,CAAC;AAC3C,cAAc1E,MAAM;AACpB,cAAcC,GAAG,EAAE,CAAC;QACZ;MACF;IACF;EACF;;EAEA,OAAOE,SAAS;AAClB;;AAEA3B,CAAC,CAAC4B,IAAI,CAAC,YAAY,CAAC;AACpBE,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,OAAO,CAAC,IAAI,EAAE9B,IAAI,CAAC;AACnB8B,OAAO,CAAC,MAAM,EAAE/C,MAAM,CAACmB,MAAM,CAAC,CAAC;AAC/B6E,aAAa,CAAC,CAAC;AACfjD,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;AAC1B,CAAC;AACDC,iBAAiB,CAAC,CAACC,CAAC,KAAK;EACvB,MAAMiE,QAAQ,GAAG,CAAC,WAAW,CAAC;EAC9B,MAAMT,IAAI,GAAGtF,MAAM,CAAC8B,CAAC,CAACJ,MAAM,CAAC4D,IAAI,CAAC;EAClC,IAAIA,IAAI,CAACC,WAAW,CAAC,CAAC,EAAE;IACtBQ,QAAQ,CAACC,IAAI,CAAC,eAAe,CAAC;IAC9BD,QAAQ,CAACC,IAAI,CAAC,YAAY,CAAC;EAC7B;EACAlE,CAAC,CAACC,0BAA0B,CAACgE,QAAQ,CAAC;AACxC,CAAC,CAAC;AACF/D,EAAE,CAAC,OAAOF,CAAC,KAAK;EACd,MAAMiD,MAAM,GAAG,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC;EACxB,MAAMO,IAAI,GAAGtF,MAAM,CAAC8B,CAAC,CAACJ,MAAM,CAAC4D,IAAI,CAAC;EAClC,IAAIW,OAAO,GAAG,qBAAqB;EACnC,IAAIX,IAAI,CAACC,WAAW,CAAC,CAAC,EAAE;IACtBU,OAAO,IAAI,oCAAoC;EACjD;EACA,MAAM9D,IAAI,GAAG;AACf,EAAE8D,OAAO;AACT;AACA;AACA,6BAA6BX,IAAI,CAACY,QAAQ,CAAC,CAAC;AAC5C;AACA;AACA,0CAA0CZ,IAAI,CAACY,QAAQ,CAAC,CAAC;AACzD;AACA;AACA;AACA;AACA,2BAA2BnB,MAAM,CAAC,CAAC,CAAC,KAAKA,MAAM,CAAC,CAAC,CAAC,KAAKA,MAAM,CAAC,CAAC,CAAC;AAChE;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiBjD,CAAC,CAACJ,MAAM,CAACgB,EAAE,eAAeZ,CAAC,CAACJ,MAAM,CAACtB,EAAE;AACtD,EAAE;;EAEA,MAAMgC,SAAS,GAAG1C,mBAAmB,CAAC4F,IAAI,CAAC;EAC3C,IAAI/C,cAAc,GAAG,CAAC;EACtB,IAAI+C,IAAI,YAAYpG,UAAU,EAAE;IAC9BqD,cAAc,GAAG+C,IAAI,CAACO,KAAK,KAAK,CAAC,GAAG,CAAC,GAAGP,IAAI,CAACO,KAAK;IAClD,IAAIP,IAAI,CAACC,WAAW,CAAC,CAAC,EAAE;MACtBhD,cAAc,GAAG1B,IAAI,CAAC6C,KAAK,CAACnB,cAAc,GAAG,CAAC,CAAC;IACjD;EACF;EACA,MAAMhD,cAAc;IAClBuC,CAAC;IACDK,IAAI;IACJ4C,MAAM;IACNxC,cAAc;IACdH,SAAS;IACT,CAACnB,QAAQ,EAAEC,MAAM,KAAK;MACpB,OAAOmE,cAAc,CAACpE,QAAQ,EAAEC,MAAM,EAAEkB,SAAS,EAAEN,CAAC,CAACJ,MAAM,CAACgB,EAAE,EAAEZ,CAAC,CAACJ,MAAM,CAACtB,EAAE,EAAEkF,IAAI,CAAC;IACpF;EACF,CAAC;AACH,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASa,aAAaA;AACtBC,IAAI;AACJC,MAAM;AACNR,KAAK;AACLS,MAAM;AACNC,SAAS;AACT7D,EAAE;AACF;EACE,IAAImD,KAAK,GAAG,CAAC,IAAIS,MAAM,GAAG,CAAC,EAAE;IAC3B,OAAO,IAAIhF,KAAK;MACd,kCAAkCuE,KAAK,OAAOS,MAAM;IACtD,CAAC;EACH;;EAEA,MAAM,EAAEE,WAAW,EAAEC,aAAa,CAAC,CAAC,GAAG9G,sBAAsB,CAAC0G,MAAM,EAAER,KAAK,EAAES,MAAM,CAAC;;EAEpF,MAAMI,YAAY,GAAGA,CAACC,GAAG,EAAEC,GAAG,KAAK;IACjC,OAAOJ,WAAW,GAAGG,GAAG,GAAGC,GAAG,GAAGH,aAAa;EAChD,CAAC;;EAED,MAAMzC,OAAO,GAAG,IAAIC,GAAG,CAAC,CAAC;EACzB,MAAMC,KAAK,GAAG,CAAC,GAAGlF,SAAS,CAAC,GAAG,EAAE,CAACsD,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;EAE5C;EACA;EACA,KAAK,IAAIqE,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGL,MAAM,GAAG,CAAC,EAAEK,GAAG,EAAE,EAAE;IACzC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGf,KAAK,GAAG,CAAC,EAAEe,GAAG,EAAE,EAAE;MACxC,MAAMC,MAAM,GAAGH,YAAY,CAACC,GAAG,EAAEC,GAAG,CAAC;;MAErC,MAAMxG,EAAE,GAAGgG,IAAI,CAACS,MAAM,GAAG,CAAC,CAAC;MAC3B,MAAM1C,WAAW,GAAGiC,IAAI,CAACS,MAAM,GAAG,CAAC,CAAC;;MAEpC,MAAMzC,CAAC,GAAGJ,OAAO,CAACK,GAAG,CAACF,WAAW,CAAC,IAAIG,KAAK,CAACC,IAAI,CAACL,KAAK,CAAC;MACvDE,CAAC,CAAChE,EAAE,CAAC,GAAGwG,GAAG,GAAGD,GAAG,GAAGd,KAAK;MACzB7B,OAAO,CAACQ,GAAG,CAACL,WAAW,EAAEC,CAAC,CAAC;IAC7B;EACF;;EAEA,KAAK,IAAIuC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGL,MAAM,GAAG,CAAC,EAAEK,GAAG,EAAE,EAAE;IACzC,KAAK,IAAIC,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGf,KAAK,GAAG,CAAC,EAAEe,GAAG,EAAE,EAAE;MACxC,MAAMC,MAAM,GAAGH,YAAY,CAACC,GAAG,EAAEC,GAAG,CAAC;;MAErC,MAAMvF,GAAG,GAAG+E,IAAI,CAACS,MAAM,CAAC;MACxB,MAAMzG,EAAE,GAAGgG,IAAI,CAACS,MAAM,GAAG,CAAC,CAAC;MAC3B,MAAM1C,WAAW,GAAGiC,IAAI,CAACS,MAAM,GAAG,CAAC,CAAC;;MAEpC,MAAMpC,eAAe,GAAGT,OAAO,CAACK,GAAG,CAACF,WAAW,CAAC,IAAID,KAAK;;MAEzD,MAAMU,KAAK,GAAGhB,aAAa,CAACxD,EAAE,EAAEmG,SAAS,EAAE7D,EAAE,CAAC;MAC9C,IAAIkC,KAAK,GAAG,CAAC,IAAIA,KAAK,IAAI,GAAG,IAAIH,eAAe,CAACG,KAAK,CAAC,KAAK,CAAC,CAAC,EAAE;QAC9D;MACF;;MAEA,MAAMkC,aAAa,GAAGrC,eAAe,CAACG,KAAK,CAAC;MAC5C,MAAMmC,UAAU,GAAGlG,IAAI,CAAC6C,KAAK,CAACoD,aAAa,GAAGjB,KAAK,CAAC;MACpD,MAAMmB,UAAU,GAAGF,aAAa,GAAGjB,KAAK;MACxC,IAAIkB,UAAU,KAAKT,MAAM,GAAG,CAAC,IAAIU,UAAU,KAAKnB,KAAK,GAAG,CAAC,EAAE;QACzD;MACF;;MAEA,IAAIxE,GAAG,KAAKoD,eAAe,CAACG,KAAK,CAAC,EAAE;QAClC,OAAO,IAAItD,KAAK,CAAC,OAAOqF,GAAG,SAASC,GAAG;AAC/C,cAAcnC,eAAe,CAACG,KAAK,CAAC;AACpC,cAAcvD,GAAG,EAAE,CAAC;MACd;IACF;EACF;;EAEA,OAAOE,SAAS;AAClB;;AAEA3B,CAAC,CAAC4B,IAAI,CAAC,UAAU,CAAC;AAClBC,IAAI,CAAC,mCAAmC,CAAC;AACzCC,MAAM,CAAC,CAACC,CAAC;AACTA,CAAC;AACDC,OAAO,CAAC,MAAM,EAAEnC,iBAAiB,CAAC;AAClCoF,aAAa,CAAC,CAAC;AACfjD,OAAO,CAAC,IAAI,EAAE9B,IAAI,CAAC;AACnB8B,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAC3BqF,iBAAiB,CAAC,CAAC,EAAEZ,MAAM,EAAE,YAAY,CAAC,CAAC,CAAC;AAC5C,CAAC;AACDxE,iBAAiB,CAAC,CAACC,CAAC,KAAK;EACvBA,CAAC,CAACC,0BAA0B,CAAC,WAAW,CAAC;AAC3C,CAAC,CAAC;AACFC,EAAE,CAAC,OAAOF,CAAC,KAAK;EACd,MAAMoF,QAAQ,GAAG;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2CAA2CpF,CAAC,CAACJ,MAAM,CAACgD,IAAI,CAAC,CAAC,CAAC;AAC3D;AACA;AACA;AACA,mCAAmC5C,CAAC,CAACJ,MAAM,CAACgD,IAAI,CAAC,CAAC,CAAC;AACnD,mCAAmC5C,CAAC,CAACJ,MAAM,CAACgD,IAAI,CAAC,CAAC,CAAC;AACnD;AACA;AACA,iBAAiB5C,CAAC,CAACJ,MAAM,CAACgB,EAAE,YAAYZ,CAAC,CAACJ,MAAM,CAACtB,EAAE;AACnD,EAAE;;EAEA,MAAMZ,eAAe;IACnBsC,CAAC;IACDA,CAAC,CAACJ,MAAM,CAAC2E,MAAM;IACfa,QAAQ;IACRpF,CAAC,CAACJ,MAAM,CAACgD,IAAI,CAAC,CAAC,CAAC;IAChB5C,CAAC,CAACJ,MAAM,CAACgD,IAAI,CAAC,CAAC,CAAC;IAChB,IAAIrC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;IACtB,CAAC+D,IAAI,KAAK;MACR,OAAOD,aAAa;QAClBC,IAAI;QACJtE,CAAC,CAACJ,MAAM,CAAC2E,MAAM;QACfvE,CAAC,CAACJ,MAAM,CAACgD,IAAI,CAAC,CAAC,CAAC;QAChB5C,CAAC,CAACJ,MAAM,CAACgD,IAAI,CAAC,CAAC,CAAC;QAChB5C,CAAC,CAACJ,MAAM,CAACtB,EAAE;QACX0B,CAAC,CAACJ,MAAM,CAACgB;MACX,CAAC;IACH;EACF,CAAC;AACH,CAAC,CAAC","ignoreList":[]}