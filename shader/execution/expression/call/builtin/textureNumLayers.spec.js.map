{"version":3,"file":"textureNumLayers.spec.js","names":["description","makeTestGroup","kTextureFormatInfo","TexelFormats","kShaderStages","kSampleTypeInfo","WGSLTextureQueryTest","kNumLayers","getLayerSettingsAndExpected","view_type","isCubeArray","divisor","baseArrayLayer","arrayLayerCount","expected","g","test","specURL","desc","params","u","combine","beginSubcases","beforeAllSubcases","t","skipIf","isCompatibility","texture_type","fn","stage","sampled_type","format","texture","createTextureTracked","usage","GPUTextureUsage","TEXTURE_BINDING","size","code","viewDescription","dimension","executeAndExpectResult","combineWithParams","filter","access_mode","color","readWriteStorage","unless","skipIfTextureFormatNotUsableAsStorageTexture","STORAGE_BINDING"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureNumLayers.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution tests for the 'textureNumLayers' builtin function\n\nReturns the number of layers (elements) of an array texture.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { kTextureFormatInfo } from '../../../../../format_info.js';\nimport { TexelFormats } from '../../../../types.js';\nimport { kShaderStages } from '../../../../validation/decl/util.js';\n\nimport { kSampleTypeInfo, WGSLTextureQueryTest } from './texture_utils.js';\n\nconst kNumLayers = 36;\n\nfunction getLayerSettingsAndExpected({\n  view_type,\n  isCubeArray\n\n\n\n}) {\n  const divisor = isCubeArray ? 6 : 1;\n  return view_type === 'partial' ?\n  {\n    baseArrayLayer: 11,\n    arrayLayerCount: 6,\n    expected: [6 / divisor]\n  } :\n  {\n    baseArrayLayer: 0,\n    arrayLayerCount: kNumLayers,\n    expected: [kNumLayers / divisor]\n  };\n}\n\nexport const g = makeTestGroup(WGSLTextureQueryTest);\n\ng.test('sampled').\nspecURL('https://www.w3.org/TR/WGSL/#texturenumlayers').\ndesc(\n  `\nT, a sampled type.\n\nfn textureNumLayers(t: texture_2d_array<T>) -> u32\nfn textureNumLayers(t: texture_cube_array<T>) -> u32\n\nParameters\n * t The sampled array texture.\n`\n).\nparams((u) =>\nu.\ncombine('texture_type', ['texture_2d_array', 'texture_cube_array']).\ncombine('view_type', ['full', 'partial']).\nbeginSubcases().\ncombine('sampled_type', ['f32', 'i32', 'u32']).\ncombine('stage', kShaderStages)\n).\nbeforeAllSubcases((t) => {\n  t.skipIf(\n    t.isCompatibility && t.params.view_type === 'partial',\n    'compatibility mode does not support partial layer views'\n  );\n  t.skipIf(\n    t.isCompatibility && t.params.texture_type === 'texture_cube_array',\n    'compatibility mode does not support cube arrays'\n  );\n}).\nfn((t) => {\n  const { stage, texture_type, sampled_type, view_type } = t.params;\n  const { format } = kSampleTypeInfo[sampled_type];\n\n  const texture = t.createTextureTracked({\n    format,\n    usage: GPUTextureUsage.TEXTURE_BINDING,\n    size: [1, 1, kNumLayers]\n  });\n\n  const code = `\n@group(0) @binding(0) var t: ${texture_type}<${sampled_type}>;\nfn getValue() -> u32 {\n  return textureNumLayers(t);\n}\n    `;\n\n  const { baseArrayLayer, arrayLayerCount, expected } = getLayerSettingsAndExpected({\n    view_type,\n    isCubeArray: texture_type === 'texture_cube_array'\n  });\n  const viewDescription = {\n    dimension: texture_type === 'texture_2d_array' ? '2d-array' : 'cube-array',\n    baseArrayLayer,\n    arrayLayerCount\n  };\n\n  t.executeAndExpectResult(stage, code, texture, viewDescription, expected);\n});\n\ng.test('arrayed').\nspecURL('https://www.w3.org/TR/WGSL/#texturenumlayers').\ndesc(\n  `\nfn textureNumLayers(t: texture_depth_2d_array) -> u32\nfn textureNumLayers(t: texture_depth_cube_array) -> u32\n\nParameters\n * t The depth array texture.\n`\n).\nparams((u) =>\nu.\ncombine('texture_type', ['texture_depth_2d_array', 'texture_depth_cube_array']).\ncombine('view_type', ['full', 'partial']).\nbeginSubcases().\ncombine('stage', kShaderStages)\n).\nbeforeAllSubcases((t) => {\n  t.skipIf(\n    t.isCompatibility && t.params.view_type === 'partial',\n    'compatibility mode does not support partial layer views'\n  );\n  t.skipIf(\n    t.isCompatibility && t.params.texture_type === 'texture_depth_cube_array',\n    'compatibility mode does not support cube arrays'\n  );\n}).\nfn((t) => {\n  const { stage, texture_type, view_type } = t.params;\n\n  const texture = t.createTextureTracked({\n    format: 'depth32float',\n    usage: GPUTextureUsage.TEXTURE_BINDING,\n    size: [1, 1, kNumLayers]\n  });\n\n  const code = `\n@group(0) @binding(0) var t: ${texture_type};\n@group(0) @binding(1) var<storage, read_write> result: u32;\nfn getValue() -> u32 {\n  return textureNumLayers(t);\n}\n    `;\n\n  const { baseArrayLayer, arrayLayerCount, expected } = getLayerSettingsAndExpected({\n    view_type,\n    isCubeArray: texture_type === 'texture_depth_cube_array'\n  });\n  const viewDescription = {\n    dimension: texture_type === 'texture_depth_2d_array' ? '2d-array' : 'cube-array',\n    baseArrayLayer,\n    arrayLayerCount\n  };\n\n  t.executeAndExpectResult(stage, code, texture, viewDescription, expected);\n});\n\ng.test('storage').\nspecURL('https://www.w3.org/TR/WGSL/#texturenumlayers').\ndesc(\n  `\nF: rgba8unorm\n   rgba8snorm\n   rgba8uint\n   rgba8sint\n   rgba16uint\n   rgba16sint\n   rgba16float\n   r32uint\n   r32sint\n   r32float\n   rg32uint\n   rg32sint\n   rg32float\n   rgba32uint\n   rgba32sint\n   rgba32float\nA: read, write, read_write\n\nfn textureNumLayers(t: texture_storage_2d_array<F,A>) -> u32\n\nParameters\n * t The sampled storage array texture.\n`\n).\nparams((u) =>\nu.\ncombineWithParams(TexelFormats).\ncombine('view_type', ['full', 'partial']).\nbeginSubcases().\ncombine('stage', kShaderStages).\ncombine('access_mode', ['read', 'write', 'read_write']).\nfilter(\n  (t) => t.access_mode !== 'read_write' || kTextureFormatInfo[t.format].color?.readWriteStorage\n)\n// Vertex stage can not use writable storage textures.\n.unless((t) => t.stage === 'vertex' && t.access_mode !== 'read')\n).\nbeforeAllSubcases((t) => {\n  t.skipIf(\n    t.isCompatibility && t.params.view_type === 'partial',\n    'compatibility mode does not support partial layer views'\n  );\n  t.skipIfTextureFormatNotUsableAsStorageTexture(t.params.format);\n}).\nfn((t) => {\n  const { stage, format, access_mode, view_type } = t.params;\n\n  const texture = t.createTextureTracked({\n    format,\n    usage: GPUTextureUsage.STORAGE_BINDING,\n    size: [1, 1, kNumLayers]\n  });\n\n  const code = `\n@group(0) @binding(0) var t: texture_storage_2d_array<${format}, ${access_mode}>;\n@group(0) @binding(1) var<storage, read_write> result: u32;\nfn getValue() -> u32 {\n  return textureNumLayers(t);\n}\n    `;\n\n  const { baseArrayLayer, arrayLayerCount, expected } = getLayerSettingsAndExpected({\n    view_type\n  });\n  const viewDescription = {\n    dimension: '2d-array',\n    baseArrayLayer,\n    arrayLayerCount\n  };\n\n  t.executeAndExpectResult(stage, code, texture, viewDescription, expected);\n});"],"mappings":"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","ignoreList":[]}