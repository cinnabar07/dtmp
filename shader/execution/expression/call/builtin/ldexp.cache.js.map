{"version":3,"file":"ldexp.cache.js","names":["assert","anyOf","abstractInt","i32","FP","biasedRange","quantizeToI32","sparseI32Range","makeCaseCache","makeCase","trait","e1","e2","FPTrait","quantize","expected","ldexpInterval","e2_scalar","BigInt","constants","bias","input","scalarBuilder","zeroInterval","cases","flatMap","map","nonConst","sparseScalarRange","isFinite","reduce","a","b","d"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/ldexp.cache.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { assert } from '../../../../../../common/util/util.js';import { anyOf } from '../../../../../util/compare.js';import { abstractInt, i32 } from '../../../../../util/conversion.js';\nimport { FP } from '../../../../../util/floating_point.js';\nimport { biasedRange, quantizeToI32, sparseI32Range } from '../../../../../util/math.js';\n\nimport { makeCaseCache } from '../../case_cache.js';\n\n// ldexpInterval's return interval doesn't cover the flush-to-zero cases when e2 + bias <= 0, thus\n// special examination is required.\n// See the comment block on ldexpInterval for more details\n// e2 is an integer (i32) while e1 is float.\nconst makeCase = (trait, e1, e2) => {\n  const FPTrait = FP[trait];\n  e1 = FPTrait.quantize(e1);\n  // e2 should be in i32 range for the convenience.\n  assert(-2147483648 <= e2 && e2 <= 2147483647, 'e2 should be in i32 range');\n  e2 = quantizeToI32(e2);\n\n  const expected = FPTrait.ldexpInterval(e1, e2);\n\n  const e2_scalar = trait === 'abstract' ? abstractInt(BigInt(e2)) : i32(e2);\n  // Result may be zero if e2 + bias <= 0\n  if (e2 + FPTrait.constants().bias <= 0) {\n    return {\n      input: [FPTrait.scalarBuilder(e1), e2_scalar],\n      expected: anyOf(expected, FPTrait.constants().zeroInterval)\n    };\n  }\n\n  return { input: [FPTrait.scalarBuilder(e1), e2_scalar], expected };\n};\n\n// Cases: [f32|f16|abstract]_[non_]const\nconst cases = ['f32', 'f16', 'abstract'].\nflatMap((trait) =>\n[true, false].map((nonConst) => ({\n  [`${trait}_${nonConst ? 'non_const' : 'const'}`]: () => {\n    if (nonConst) {\n      if (trait === 'abstract') {\n        return [];\n      }\n      return FP[trait].\n      sparseScalarRange().\n      flatMap((e1) => sparseI32Range().map((e2) => makeCase(trait, e1, e2)));\n    }\n    const bias = FP[trait].constants().bias;\n    // const\n    return FP[trait].\n    sparseScalarRange().\n    flatMap((e1) =>\n    biasedRange(-bias - 10, bias + 1, 10).flatMap((e2) =>\n    FP[trait].isFinite(e1 * 2 ** quantizeToI32(e2)) ? makeCase(trait, e1, e2) : []\n    )\n    );\n  }\n}))\n).\nreduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('ldexp', cases);"],"mappings":"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","ignoreList":[]}