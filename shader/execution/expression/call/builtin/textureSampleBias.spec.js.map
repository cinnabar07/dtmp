{"version":3,"file":"textureSampleBias.spec.js","names":["description","makeTestGroup","isFilterableAsTextureF32","kAllTextureFormats","TextureTestMixin","generateTextureBuiltinInputs2D","generateTextureBuiltinInputs3D","kSamplePointMethods","kShortAddressModes","kShortAddressModeToAddressMode","doTextureCalls","checkCallResults","createTextureWithRandomDataAndGetTexels","generateSamplePointsCube","kCubeSamplePointMethods","chooseTextureSize","isPotentiallyFilterableAndFillable","skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable","getTextureTypeForTextureViewDimension","WGSLTextureSampleTest","isSupportedViewFormatCombo","skipIfNeedsFilteringAndIsUnfilterable","g","kMinBlocksForTextureSampleBias","test","specURL","desc","params","u","combine","filter","t","format","filt","beginSubcases","beforeAllSubcases","fn","samplePoints","modeU","modeV","minFilter","offset","width","height","minSize","minBlocks","descriptor","size","usage","GPUTextureUsage","COPY_DST","TEXTURE_BINDING","mipLevelCount","texels","texture","sampler","addressModeU","addressModeV","magFilter","mipmapFilter","calls","method","bias","hashInputs","map","coords","derivativeMult","builtin","coordType","viewDescriptor","textureType","results","res","expectOK","dim","viewDimension","modeW","dimension","isCompatibility","textureBindingViewDimension","addressModeW","A","depthOrArrayLayers","arrayIndex","num","type","arrayIndexType","skipIfTextureViewDimensionNotSupported","mode"],"sources":["../../../../../../../src/webgpu/shader/execution/expression/call/builtin/textureSampleBias.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution tests for the 'textureSampleBias' builtin function\n\nSamples a texture with a bias to the mip level.\n\n- TODO: test cube maps with more than one mip level.\n- TODO: Test un-encodable formats.\n`;import { makeTestGroup } from '../../../../../../common/framework/test_group.js';\nimport { isFilterableAsTextureF32, kAllTextureFormats } from '../../../../../format_info.js';\nimport { TextureTestMixin } from '../../../../../gpu_test.js';\n\nimport {\n\n\n\n  generateTextureBuiltinInputs2D,\n  generateTextureBuiltinInputs3D,\n  kSamplePointMethods,\n  kShortAddressModes,\n  kShortAddressModeToAddressMode,\n  doTextureCalls,\n  checkCallResults,\n  createTextureWithRandomDataAndGetTexels,\n  generateSamplePointsCube,\n  kCubeSamplePointMethods,\n\n  chooseTextureSize,\n  isPotentiallyFilterableAndFillable,\n  skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable,\n  getTextureTypeForTextureViewDimension,\n  WGSLTextureSampleTest,\n  isSupportedViewFormatCombo,\n  skipIfNeedsFilteringAndIsUnfilterable } from\n'./texture_utils.js';\n\nexport const g = makeTestGroup(TextureTestMixin(WGSLTextureSampleTest));\n\n// See comment \"Issues with textureSampleBias\" in texture_utils.ts\n// 3 was chosen because it shows errors on M1 Mac\nconst kMinBlocksForTextureSampleBias = 3;\n\ng.test('sampled_2d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplebias').\ndesc(\n  `\nfn textureSampleBias(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, bias: f32) -> vec4<f32>\nfn textureSampleBias(t: texture_2d<f32>, s: sampler, coords: vec2<f32>, bias: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n).\nparams((u) =>\nu.\ncombine('format', kAllTextureFormats).\nfilter((t) => isPotentiallyFilterableAndFillable(t.format)).\ncombine('filt', ['nearest', 'linear']).\nfilter((t) => t.filt === 'nearest' || isFilterableAsTextureF32(t.format)).\ncombine('modeU', kShortAddressModes).\ncombine('modeV', kShortAddressModes).\ncombine('offset', [false, true]).\nbeginSubcases().\ncombine('samplePoints', kSamplePointMethods)\n).\nbeforeAllSubcases((t) =>\nskipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n).\nfn(async (t) => {\n  const { format, samplePoints, modeU, modeV, filt: minFilter, offset } = t.params;\n  skipIfNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n\n  // We want at least something wide enough for 3 mip levels with more than 1 pixel at the smallest level\n  const [width, height] = chooseTextureSize({\n    minSize: 8,\n    minBlocks: kMinBlocksForTextureSampleBias,\n    format\n  });\n\n  const descriptor = {\n    format,\n    size: { width, height },\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    mipLevelCount: 3\n  };\n  const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n  const sampler = {\n    addressModeU: kShortAddressModeToAddressMode[modeU],\n    addressModeV: kShortAddressModeToAddressMode[modeV],\n    minFilter,\n    magFilter: minFilter,\n    mipmapFilter: minFilter\n  };\n\n  const calls = generateTextureBuiltinInputs2D(50, {\n    sampler,\n    method: samplePoints,\n    descriptor,\n    bias: true,\n    offset,\n    hashInputs: [format, samplePoints, modeU, modeV, minFilter, offset]\n  }).map(({ coords, derivativeMult, offset, bias }) => {\n    return {\n      builtin: 'textureSampleBias',\n      coordType: 'f',\n      coords,\n      derivativeMult,\n      bias,\n      offset\n    };\n  });\n  const viewDescriptor = {};\n  const textureType = 'texture_2d<f32>';\n  const results = await doTextureCalls(\n    t,\n    texture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    'f'\n  );\n  const res = await checkCallResults(\n    t,\n    { texels, descriptor, viewDescriptor },\n    textureType,\n    sampler,\n    calls,\n    results,\n    'f',\n    texture\n  );\n  t.expectOK(res);\n});\n\ng.test('sampled_3d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplebias').\ndesc(\n  `\nfn textureSampleBias(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, bias: f32) -> vec4<f32>\nfn textureSampleBias(t: texture_3d<f32>, s: sampler, coords: vec3<f32>, bias: f32, offset: vec3<i32>) -> vec4<f32>\nfn textureSampleBias(t: texture_cube<f32>, s: sampler, coords: vec3<f32>, bias: f32) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n).\nparams((u) =>\nu.\ncombine('format', kAllTextureFormats).\nfilter((t) => isPotentiallyFilterableAndFillable(t.format)).\ncombine('dim', ['3d', 'cube']).\nfilter((t) => isSupportedViewFormatCombo(t.format, t.dim)).\ncombine('filt', ['nearest', 'linear']).\nfilter((t) => t.filt === 'nearest' || isFilterableAsTextureF32(t.format)).\ncombine('modeU', kShortAddressModes).\ncombine('modeV', kShortAddressModes).\ncombine('modeW', kShortAddressModes).\ncombine('offset', [false, true]).\nfilter((t) => t.dim !== 'cube' || t.offset !== true).\nbeginSubcases().\ncombine('samplePoints', kCubeSamplePointMethods).\nfilter((t) => t.samplePoints !== 'cube-edges' || t.dim !== '3d')\n).\nbeforeAllSubcases((t) =>\nskipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n).\nfn(async (t) => {\n  const {\n    format,\n    dim: viewDimension,\n    samplePoints,\n    modeU,\n    modeV,\n    modeW,\n    filt: minFilter,\n    offset\n  } = t.params;\n  skipIfNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n\n  const size = chooseTextureSize({ minSize: 8, minBlocks: 2, format, viewDimension });\n  const descriptor = {\n    format,\n    dimension: viewDimension === '3d' ? '3d' : '2d',\n    ...(t.isCompatibility && { textureBindingViewDimension: viewDimension }),\n    size,\n    // MAINTENANCE_TODO: use 3 for cube maps when derivatives are supported for cube maps.\n    mipLevelCount: viewDimension === '3d' ? 3 : 1,\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING\n  };\n  const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n  const sampler = {\n    addressModeU: kShortAddressModeToAddressMode[modeU],\n    addressModeV: kShortAddressModeToAddressMode[modeV],\n    addressModeW: kShortAddressModeToAddressMode[modeW],\n    minFilter,\n    magFilter: minFilter\n  };\n\n  const hashInputs = [\n  format,\n  viewDimension,\n  samplePoints,\n  modeU,\n  modeV,\n  modeW,\n  minFilter,\n  offset];\n\n  const calls = (\n  viewDimension === '3d' ?\n  generateTextureBuiltinInputs3D(50, {\n    method: samplePoints,\n    sampler,\n    descriptor,\n    bias: true,\n    offset,\n    hashInputs\n  }) :\n  generateSamplePointsCube(50, {\n    method: samplePoints,\n    sampler,\n    descriptor,\n    bias: true,\n    hashInputs\n  })).\n  map(({ coords, derivativeMult, offset, bias }) => {\n    return {\n      builtin: 'textureSampleBias',\n      coordType: 'f',\n      coords,\n      derivativeMult,\n      bias,\n      offset\n    };\n  });\n  const viewDescriptor = {\n    dimension: viewDimension\n  };\n  const textureType = getTextureTypeForTextureViewDimension(viewDimension);\n  const results = await doTextureCalls(\n    t,\n    texture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    'f'\n  );\n  const res = await checkCallResults(\n    t,\n    { texels, descriptor, viewDescriptor },\n    textureType,\n    sampler,\n    calls,\n    results,\n    'f',\n    texture\n  );\n  t.expectOK(res);\n});\n\ng.test('arrayed_2d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplebias').\ndesc(\n  `\nA: i32, u32\n\nfn textureSampleBias(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: A, bias: f32) -> vec4<f32>\nfn textureSampleBias(t: texture_2d_array<f32>, s: sampler, coords: vec2<f32>, array_index: A, bias: f32, offset: vec2<i32>) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index to sample.\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n).\nparams((u) =>\nu.\ncombine('format', kAllTextureFormats).\nfilter((t) => isPotentiallyFilterableAndFillable(t.format)).\ncombine('filt', ['nearest', 'linear']).\nfilter((t) => t.filt === 'nearest' || isFilterableAsTextureF32(t.format)).\ncombine('modeU', kShortAddressModes).\ncombine('modeV', kShortAddressModes).\ncombine('offset', [false, true]).\nbeginSubcases().\ncombine('samplePoints', kSamplePointMethods).\ncombine('A', ['i32', 'u32'])\n).\nbeforeAllSubcases((t) =>\nskipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format)\n).\nfn(async (t) => {\n  const { format, samplePoints, A, modeU, modeV, filt: minFilter, offset } = t.params;\n  skipIfNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n\n  // We want at least something wide enough for 3 mip levels with more than 1 pixel at the smallest level\n  const [width, height] = chooseTextureSize({\n    minSize: 8,\n    minBlocks: kMinBlocksForTextureSampleBias,\n    format\n  });\n  const depthOrArrayLayers = 4;\n\n  const descriptor = {\n    format,\n    size: { width, height, depthOrArrayLayers },\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    mipLevelCount: 3\n  };\n  const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n  const sampler = {\n    addressModeU: kShortAddressModeToAddressMode[modeU],\n    addressModeV: kShortAddressModeToAddressMode[modeV],\n    minFilter,\n    magFilter: minFilter,\n    mipmapFilter: minFilter\n  };\n\n  const calls = generateTextureBuiltinInputs2D(50, {\n    method: samplePoints,\n    sampler,\n    descriptor,\n    arrayIndex: { num: texture.depthOrArrayLayers, type: A },\n    bias: true,\n    offset,\n    hashInputs: [format, samplePoints, A, modeU, modeV, minFilter, offset]\n  }).map(({ coords, derivativeMult, arrayIndex, bias, offset }) => {\n    return {\n      builtin: 'textureSampleBias',\n      coordType: 'f',\n      coords,\n      derivativeMult,\n      arrayIndex,\n      arrayIndexType: A === 'i32' ? 'i' : 'u',\n      bias,\n      offset\n    };\n  });\n  const textureType = 'texture_2d_array<f32>';\n  const viewDescriptor = {};\n  const results = await doTextureCalls(\n    t,\n    texture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    'f'\n  );\n  const res = await checkCallResults(\n    t,\n    { texels, descriptor, viewDescriptor },\n    textureType,\n    sampler,\n    calls,\n    results,\n    'f',\n    texture\n  );\n  t.expectOK(res);\n});\n\ng.test('arrayed_3d_coords').\nspecURL('https://www.w3.org/TR/WGSL/#texturesamplebias').\ndesc(\n  `\nA: i32, u32\n\nfn textureSampleBias(t: texture_cube_array<f32>, s: sampler, coords: vec3<f32>, array_index: A, bias: f32) -> vec4<f32>\n\nParameters:\n * t: The sampled texture to read from\n * s: The sampler type\n * coords: The texture coordinates\n * array_index: The 0-based texture array index to sample.\n * bias: The bias to apply to the mip level before sampling. bias must be between -16.0 and 15.99.\n * offset:\n    - The optional texel offset applied to the unnormalized texture coordinate before sampling the texture.\n      This offset is applied before applying any texture wrapping modes.\n    - The offset expression must be a creation-time expression (e.g. vec2<i32>(1, 2)).\n    - Each offset component must be at least -8 and at most 7.\n      Values outside of this range will result in a shader-creation error.\n`\n).\nparams((u) =>\nu.\ncombine('format', kAllTextureFormats).\nfilter((t) => isPotentiallyFilterableAndFillable(t.format)).\ncombine('filt', ['nearest', 'linear']).\nfilter((t) => t.filt === 'nearest' || isFilterableAsTextureF32(t.format)).\ncombine('mode', kShortAddressModes).\nbeginSubcases().\ncombine('samplePoints', kCubeSamplePointMethods).\ncombine('A', ['i32', 'u32'])\n).\nbeforeAllSubcases((t) => {\n  skipIfTextureFormatNotSupportedNotAvailableOrNotFilterable(t, t.params.format);\n  t.skipIfTextureViewDimensionNotSupported('cube-array');\n}).\nfn(async (t) => {\n  const { format, samplePoints, A, mode, filt: minFilter } = t.params;\n  skipIfNeedsFilteringAndIsUnfilterable(t, minFilter, format);\n\n  const viewDimension = 'cube-array';\n  const size = chooseTextureSize({\n    minSize: 32,\n    minBlocks: 4,\n    format,\n    viewDimension\n  });\n  const descriptor = {\n    format,\n    size,\n    usage: GPUTextureUsage.COPY_DST | GPUTextureUsage.TEXTURE_BINDING,\n    // MAINTENANCE_TODO: use 3 for cube maps when derivatives are supported for cube maps.\n    mipLevelCount: 1\n  };\n  const { texels, texture } = await createTextureWithRandomDataAndGetTexels(t, descriptor);\n  const sampler = {\n    addressModeU: kShortAddressModeToAddressMode[mode],\n    addressModeV: kShortAddressModeToAddressMode[mode],\n    addressModeW: kShortAddressModeToAddressMode[mode],\n    minFilter,\n    magFilter: minFilter,\n    mipmapFilter: minFilter\n  };\n\n  const calls = generateSamplePointsCube(50, {\n    method: samplePoints,\n    sampler,\n    descriptor,\n    bias: true,\n    arrayIndex: { num: texture.depthOrArrayLayers / 6, type: A },\n    hashInputs: [format, viewDimension, A, samplePoints, mode, minFilter]\n  }).map(({ coords, derivativeMult, arrayIndex, bias }) => {\n    return {\n      builtin: 'textureSampleBias',\n      coordType: 'f',\n      coords,\n      derivativeMult,\n      arrayIndex,\n      arrayIndexType: A === 'i32' ? 'i' : 'u',\n      bias\n    };\n  });\n  const viewDescriptor = {\n    dimension: viewDimension\n  };\n  const textureType = getTextureTypeForTextureViewDimension(viewDimension);\n  const results = await doTextureCalls(\n    t,\n    texture,\n    viewDescriptor,\n    textureType,\n    sampler,\n    calls,\n    'f'\n  );\n  const res = await checkCallResults(\n    t,\n    { texels, descriptor, viewDescriptor },\n    textureType,\n    sampler,\n    calls,\n    results,\n    'f',\n    texture\n  );\n  t.expectOK(res);\n});"],"mappings":"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","ignoreList":[]}