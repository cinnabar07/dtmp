{"version":3,"file":"f16_conversion.cache.js","names":["abstractInt","bool","f16","i32","u32","FP","FPInterval","fullI32Range","fullI64Range","fullU32Range","makeCaseCache","f16FiniteRangeInterval","constants","negative","min","positive","max","f32_mat_cases","flatMap","cols","rows","map","nonConst","f32","generateMatrixToMatrixCases","sparseMatrixRange","correctlyRoundedMatrix","reduce","a","b","f16_mat_cases","abstract_float_mat_cases","abstract","d","input","expected","u32_non_const","u","correctlyRoundedInterval","u32_const","filter","v","contains","i32_non_const","i","i32_const","abstract_int","Number","f32_non_const","generateScalarToIntervalCases","scalarRange","f32_const","abstract_float","f"],"sources":["../../../../../../src/webgpu/shader/execution/expression/unary/f16_conversion.cache.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { abstractInt, bool, f16, i32, u32 } from '../../../../util/conversion.js';import { FP, FPInterval } from '../../../../util/floating_point.js';import { fullI32Range, fullI64Range, fullU32Range } from '../../../../util/math.js';\nimport { makeCaseCache } from '../case_cache.js';\n\nconst f16FiniteRangeInterval = new FPInterval(\n  'f16',\n  FP.f16.constants().negative.min,\n  FP.f16.constants().positive.max\n);\n\n// Cases: f32_matCxR_[non_]const\n// Note that f32 values may be not exactly representable in f16 and/or out of range.\nconst f32_mat_cases = [2, 3, 4].\nflatMap((cols) =>\n[2, 3, 4].flatMap((rows) =>\n[true, false].map((nonConst) => ({\n  [`f32_mat${cols}x${rows}_${nonConst ? 'non_const' : 'const'}`]: () => {\n    return FP.f32.generateMatrixToMatrixCases(\n      FP.f32.sparseMatrixRange(cols, rows),\n      nonConst ? 'unfiltered' : 'finite',\n      FP.f16.correctlyRoundedMatrix\n    );\n  }\n}))\n)\n).\nreduce((a, b) => ({ ...a, ...b }), {});\n\n// Cases: f16_matCxR_[non_]const\nconst f16_mat_cases = [2, 3, 4].\nflatMap((cols) =>\n[2, 3, 4].flatMap((rows) =>\n[true, false].map((nonConst) => ({\n  [`f16_mat${cols}x${rows}_${nonConst ? 'non_const' : 'const'}`]: () => {\n    // Input matrix is of f16 types, use f16.generateMatrixToMatrixCases.\n    return FP.f16.generateMatrixToMatrixCases(\n      FP.f16.sparseMatrixRange(cols, rows),\n      nonConst ? 'unfiltered' : 'finite',\n      FP.f16.correctlyRoundedMatrix\n    );\n  }\n}))\n)\n).\nreduce((a, b) => ({ ...a, ...b }), {});\n\n// Cases: abstract_float_matCxR\n// Note that abstract float values may be not exactly representable in f16\n// and/or out of range.\nconst abstract_float_mat_cases = [2, 3, 4].\nflatMap((cols) =>\n[2, 3, 4].map((rows) => ({\n  [`abstract_float_mat${cols}x${rows}`]: () => {\n    return FP.abstract.generateMatrixToMatrixCases(\n      FP.abstract.sparseMatrixRange(cols, rows),\n      'finite',\n      FP.f16.correctlyRoundedMatrix\n    );\n  }\n}))\n).\nreduce((a, b) => ({ ...a, ...b }), {});\n\nexport const d = makeCaseCache('unary/f16_conversion', {\n  bool: () => {\n    return [\n    { input: bool(true), expected: f16(1.0) },\n    { input: bool(false), expected: f16(0.0) }];\n\n  },\n  u32_non_const: () => {\n    return [...fullU32Range(), 65504].map((u) => {\n      return { input: u32(u), expected: FP.f16.correctlyRoundedInterval(u) };\n    });\n  },\n  u32_const: () => {\n    return [...fullU32Range(), 65504].\n    filter((v) => f16FiniteRangeInterval.contains(v)).\n    map((u) => {\n      return { input: u32(u), expected: FP.f16.correctlyRoundedInterval(u) };\n    });\n  },\n  i32_non_const: () => {\n    return [...fullI32Range(), 65504, -65504].map((i) => {\n      return { input: i32(i), expected: FP.f16.correctlyRoundedInterval(i) };\n    });\n  },\n  i32_const: () => {\n    return [...fullI32Range(), 65504, -65504].\n    filter((v) => f16FiniteRangeInterval.contains(v)).\n    map((i) => {\n      return { input: i32(i), expected: FP.f16.correctlyRoundedInterval(i) };\n    });\n  },\n  abstract_int: () => {\n    return [...fullI64Range(), 65504n, -65504n].\n    filter((v) => f16FiniteRangeInterval.contains(Number(v))).\n    map((i) => {\n      return { input: abstractInt(i), expected: FP.f16.correctlyRoundedInterval(Number(i)) };\n    });\n  },\n  // Note that f32 values may be not exactly representable in f16 and/or out of range.\n  f32_non_const: () => {\n    return FP.f32.generateScalarToIntervalCases(\n      [...FP.f32.scalarRange(), 65535.996, -65535.996],\n      'unfiltered',\n      FP.f16.correctlyRoundedInterval\n    );\n  },\n  f32_const: () => {\n    return FP.f32.generateScalarToIntervalCases(\n      [...FP.f32.scalarRange(), 65535.996, -65535.996],\n      'finite',\n      FP.f16.correctlyRoundedInterval\n    );\n  },\n  // Note that abstract float values may be not exactly representable in f16.\n  abstract_float: () => {\n    return FP.abstract.generateScalarToIntervalCases(\n      [...FP.abstract.scalarRange(), 65535.996, -65535.996],\n      'finite',\n      FP.f16.correctlyRoundedInterval\n    );\n  },\n  // All f16 values are exactly representable in f16.\n  f16: () => {\n    return FP.f16.scalarRange().map((f) => {\n      return { input: f16(f), expected: FP.f16.correctlyRoundedInterval(f) };\n    });\n  },\n  ...f32_mat_cases,\n  ...f16_mat_cases,\n  ...abstract_float_mat_cases\n});"],"mappings":"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","ignoreList":[]}