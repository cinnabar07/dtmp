{"version":3,"file":"ai_assignment.spec.js","names":["description","makeTestGroup","GPUTest","Type","abstractIntShaderBuilder","basicExpressionBuilder","onlyConstInputSource","run","d","concrete_assignment","value","abstract_assignment","g","test","specURL","desc","params","u","combine","fn","t","cases","get","abstractInt","i32","u32"],"sources":["../../../../../../src/webgpu/shader/execution/expression/unary/ai_assignment.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution Tests for assignment of AbstractInts\n`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport { Type } from '../../../../util/conversion.js';\nimport {\n\n  abstractIntShaderBuilder,\n  basicExpressionBuilder,\n  onlyConstInputSource,\n  run } from\n'../expression.js';\n\nimport { d } from './ai_assignment.cache.js';\n\nfunction concrete_assignment() {\n  return basicExpressionBuilder((value) => `${value}`);\n}\n\nfunction abstract_assignment() {\n  return abstractIntShaderBuilder((value) => `${value}`);\n}\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('abstract').\nspecURL('https://www.w3.org/TR/WGSL/#abstract-types').\ndesc(\n  `\ntesting that extracting abstract ints works\n`\n).\nparams((u) => u.combine('inputSource', onlyConstInputSource)).\nfn(async (t) => {\n  const cases = await d.get('abstract');\n  await run(t, abstract_assignment(), [Type.abstractInt], Type.abstractInt, t.params, cases, 1);\n});\n\ng.test('i32').\nspecURL('https://www.w3.org/TR/WGSL/#i32-builtin').\ndesc(\n  `\nconcretizing to i32\n`\n).\nparams((u) => u.combine('inputSource', onlyConstInputSource)).\nfn(async (t) => {\n  const cases = await d.get('i32');\n  await run(t, concrete_assignment(), [Type.abstractInt], Type.i32, t.params, cases);\n});\n\ng.test('u32').\nspecURL('https://www.w3.org/TR/WGSL/#u32-builtin').\ndesc(\n  `\nconcretizing to u32\n`\n).\nparams((u) => u.combine('inputSource', onlyConstInputSource)).\nfn(async (t) => {\n  const cases = await d.get('u32');\n  await run(t, concrete_assignment(), [Type.abstractInt], Type.u32, t.params, cases);\n});"],"mappings":";;IAAA;AACA;AACA,GAAG,OAAO,MAAMA,WAAW,GAAG;AAC9B;AACA,CAAC,CAAC,SAASC,aAAa,QAAQ,+CAA+C,CAC/E,SAASC,OAAO,QAAQ,yBAAyB,CACjD,SAASC,IAAI,QAAQ,gCAAgC;AACrD;;EAEEC,wBAAwB;EACxBC,sBAAsB;EACtBC,oBAAoB;EACpBC,GAAG;AACL,kBAAkB;;AAElB,SAASC,CAAC,QAAQ,0BAA0B;;AAE5C,SAASC,mBAAmBA,CAAA,EAAG;EAC7B,OAAOJ,sBAAsB,CAAC,CAACK,KAAK,KAAK,GAAGA,KAAK,EAAE,CAAC;AACtD;;AAEA,SAASC,mBAAmBA,CAAA,EAAG;EAC7B,OAAOP,wBAAwB,CAAC,CAACM,KAAK,KAAK,GAAGA,KAAK,EAAE,CAAC;AACxD;;AAEA,OAAO,MAAME,CAAC,GAAGX,aAAa,CAACC,OAAO,CAAC;;AAEvCU,CAAC,CAACC,IAAI,CAAC,UAAU,CAAC;AAClBC,OAAO,CAAC,4CAA4C,CAAC;AACrDC,IAAI;EACF;AACF;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEZ,oBAAoB,CAAC,CAAC;AAC7Da,EAAE,CAAC,OAAOC,CAAC,KAAK;EACd,MAAMC,KAAK,GAAG,MAAMb,CAAC,CAACc,GAAG,CAAC,UAAU,CAAC;EACrC,MAAMf,GAAG,CAACa,CAAC,EAAET,mBAAmB,CAAC,CAAC,EAAE,CAACR,IAAI,CAACoB,WAAW,CAAC,EAAEpB,IAAI,CAACoB,WAAW,EAAEH,CAAC,CAACJ,MAAM,EAAEK,KAAK,EAAE,CAAC,CAAC;AAC/F,CAAC,CAAC;;AAEFT,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;AACbC,OAAO,CAAC,yCAAyC,CAAC;AAClDC,IAAI;EACF;AACF;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEZ,oBAAoB,CAAC,CAAC;AAC7Da,EAAE,CAAC,OAAOC,CAAC,KAAK;EACd,MAAMC,KAAK,GAAG,MAAMb,CAAC,CAACc,GAAG,CAAC,KAAK,CAAC;EAChC,MAAMf,GAAG,CAACa,CAAC,EAAEX,mBAAmB,CAAC,CAAC,EAAE,CAACN,IAAI,CAACoB,WAAW,CAAC,EAAEpB,IAAI,CAACqB,GAAG,EAAEJ,CAAC,CAACJ,MAAM,EAAEK,KAAK,CAAC;AACpF,CAAC,CAAC;;AAEFT,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;AACbC,OAAO,CAAC,yCAAyC,CAAC;AAClDC,IAAI;EACF;AACF;AACA;AACA,CAAC;AACDC,MAAM,CAAC,CAACC,CAAC,KAAKA,CAAC,CAACC,OAAO,CAAC,aAAa,EAAEZ,oBAAoB,CAAC,CAAC;AAC7Da,EAAE,CAAC,OAAOC,CAAC,KAAK;EACd,MAAMC,KAAK,GAAG,MAAMb,CAAC,CAACc,GAAG,CAAC,KAAK,CAAC;EAChC,MAAMf,GAAG,CAACa,CAAC,EAAEX,mBAAmB,CAAC,CAAC,EAAE,CAACN,IAAI,CAACoB,WAAW,CAAC,EAAEpB,IAAI,CAACsB,GAAG,EAAEL,CAAC,CAACJ,MAAM,EAAEK,KAAK,CAAC;AACpF,CAAC,CAAC","ignoreList":[]}