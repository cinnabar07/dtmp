{"version":3,"file":"non_zero.spec.js","names":["description","makeTestGroup","GPUTest","ArrayValue","Type","scalarTypeOf","vec2","vec3","FP","allInputSources","basicExpressionBuilder","run","g","isMinOrMax","v","kConcreteTypesForAbstractType","valueFor","kind","constants","negative","min","positive","max","test","specURL","desc","params","u","combine","beforeAllSubcases","t","type","selectDeviceOrSkipTestCase","skipIf","value","fn","ops","input","create","expected","elementType","vectorType","vec","width","elements","infer_type","i","push","expand","abstract_type","concrete_type","suffix","concreteElementType","concreteVectorType","_","inputSource","constEvaluationMode","join","map","e","kMixSignatures","elementValue","nextValue","args","c","signature","matrixType","mat","columns","rows","column","row","concreteMatrixType","columnType","columnVectors","columnElements","arrayType","array","length","count","concreteArrayType","x","y","z","w","e00","e01","e02","e10","e11","e12","beginSubcases","member_types","includes","memberType","member_index","values","ty","builder","nested"],"sources":["../../../../../../src/webgpu/shader/execution/expression/constructor/non_zero.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nExecution Tests for value constructors from components\n`;import { makeTestGroup } from '../../../../../common/framework/test_group.js';\nimport { GPUTest } from '../../../../gpu_test.js';\nimport {\n  ArrayValue,\n\n\n  Type,\n\n\n\n  scalarTypeOf,\n  vec2,\n  vec3 } from\n'../../../../util/conversion.js';\nimport { FP } from '../../../../util/floating_point.js';\nimport {\n\n  allInputSources,\n  basicExpressionBuilder,\n  run } from\n'../expression.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n/** @returns true if 'v' is 'min' or 'max' */\nfunction isMinOrMax(v) {\n  return v === 'min' || v === 'max';\n}\n\n/** A list of concrete types to test for the given abstract-numeric type */\nconst kConcreteTypesForAbstractType = {\n  'abstract-float': ['f32', 'f16'],\n  'abstract-int': ['f32', 'f16', 'i32', 'u32'],\n  'vec3<abstract-int>': ['vec3f', 'vec3h', 'vec3i', 'vec3u'],\n  'vec4<abstract-float>': ['vec4f', 'vec4h'],\n  'mat2x3<abstract-float>': ['mat2x3f', 'mat2x3h']\n};\n\n/**\n * @returns the lowest finite value for 'kind' if 'v' is 'min',\n *          the highest finite value for 'kind' if 'v' is 'max',\n *          otherwise returns 'v'\n */\nfunction valueFor(v, kind) {\n  if (!isMinOrMax(v)) {\n    return v;\n  }\n  switch (kind) {\n    case 'bool':\n      return v === 'min' ? 0 : 1;\n    case 'i32':\n      return v === 'min' ? -0x80000000 : 0x7fffffff;\n    case 'u32':\n      return v === 'min' ? 0 : 0xffffffff;\n    case 'f32':\n      return v === 'min' ? FP['f32'].constants().negative.min : FP['f32'].constants().positive.max;\n    case 'f16':\n      return v === 'min' ? FP['f16'].constants().negative.min : FP['f16'].constants().positive.max;\n  }\n}\n\ng.test('scalar_identity').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(`Test that a scalar constructed from a value of the same type produces the expected value`).\nparams((u) =>\nu.\ncombine('inputSource', allInputSources).\ncombine('type', ['bool', 'i32', 'u32', 'f32', 'f16']).\ncombine('value', ['min', 'max', 1, 2, 5, 100])\n).\nbeforeAllSubcases((t) => {\n  if (t.params.type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n  t.skipIf(t.params.type === 'bool' && !isMinOrMax(t.params.value));\n}).\nfn(async (t) => {\n  const type = Type[t.params.type];\n  const value = valueFor(t.params.value, t.params.type);\n  await run(\n    t,\n    basicExpressionBuilder((ops) => `${type}(${ops[0]})`),\n    [type],\n    type,\n    t.params,\n    [{ input: [type.create(value)], expected: type.create(value) }]\n  );\n});\n\ng.test('vector_identity').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(`Test that a vector constructed from a value of the same type produces the expected value`).\nparams((u) =>\nu.\ncombine('inputSource', allInputSources).\ncombine('type', ['bool', 'i32', 'u32', 'f32', 'f16']).\ncombine('width', [2, 3, 4]).\ncombine('infer_type', [false, true])\n).\nbeforeAllSubcases((t) => {\n  if (t.params.type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn(async (t) => {\n  const elementType = Type[t.params.type];\n  const vectorType = Type.vec(t.params.width, elementType);\n  const elements = [];\n  const fn = t.params.infer_type ? `vec${t.params.width}` : `${vectorType}`;\n  for (let i = 0; i < t.params.width; i++) {\n    if (t.params.type === 'bool') {\n      elements.push(i & 1);\n    } else {\n      elements.push((i + 1) * 10);\n    }\n  }\n\n  await run(\n    t,\n    basicExpressionBuilder((ops) => `${fn}(${ops[0]})`),\n    [vectorType],\n    vectorType,\n    t.params,\n    [\n    {\n      input: vectorType.create(elements),\n      expected: vectorType.create(elements)\n    }]\n\n  );\n});\n\ng.test('concrete_vector_splat').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(`Test that a vector constructed from a single concrete scalar produces the expected value`).\nparams((u) =>\nu.\ncombine('inputSource', allInputSources).\ncombine('type', ['bool', 'i32', 'u32', 'f32', 'f16']).\ncombine('value', ['min', 'max', 1, 2, 5, 100]).\ncombine('width', [2, 3, 4]).\ncombine('infer_type', [false, true])\n).\nbeforeAllSubcases((t) => {\n  if (t.params.type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n  t.skipIf(t.params.type === 'bool' && !isMinOrMax(t.params.value));\n}).\nfn(async (t) => {\n  const value = valueFor(t.params.value, t.params.type);\n  const elementType = Type[t.params.type];\n  const vectorType = Type.vec(t.params.width, elementType);\n  const fn = t.params.infer_type ? `vec${t.params.width}` : `${vectorType}`;\n  await run(\n    t,\n    basicExpressionBuilder((ops) => `${fn}(${ops[0]})`),\n    [elementType],\n    vectorType,\n    t.params,\n    [{ input: [elementType.create(value)], expected: vectorType.create(value) }]\n  );\n});\n\ng.test('abstract_vector_splat').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(`Test that a vector constructed from a single abstract scalar produces the expected value`).\nparams((u) =>\nu.\ncombine('abstract_type', ['abstract-int', 'abstract-float']).\nexpand('concrete_type', (t) => kConcreteTypesForAbstractType[t.abstract_type]).\ncombine('value', [1, 2, 5, 100]).\ncombine('width', [2, 3, 4])\n).\nbeforeAllSubcases((t) => {\n  if (t.params.concrete_type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn(async (t) => {\n  const suffix = t.params.abstract_type === 'abstract-float' ? '.0' : '';\n  const concreteElementType = Type[t.params.concrete_type];\n  const concreteVectorType = Type.vec(t.params.width, concreteElementType);\n  const fn = `vec${t.params.width}`;\n  await run(\n    t,\n    basicExpressionBuilder((_) => `${fn}(${t.params.value * 0x100000000}${suffix}) / 0x100000000`),\n    [],\n    concreteVectorType,\n    { inputSource: 'const', constEvaluationMode: 'direct' },\n    [{ input: [], expected: concreteVectorType.create(t.params.value) }]\n  );\n});\n\ng.test('concrete_vector_elements').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(`Test that a vector constructed from concrete element values produces the expected value`).\nparams((u) =>\nu.\ncombine('inputSource', allInputSources).\ncombine('type', ['bool', 'i32', 'u32', 'f32', 'f16']).\ncombine('width', [2, 3, 4]).\ncombine('infer_type', [false, true])\n).\nbeforeAllSubcases((t) => {\n  if (t.params.type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn(async (t) => {\n  const elementType = Type[t.params.type];\n  const vectorType = Type.vec(t.params.width, elementType);\n  const elements = [];\n  const fn = t.params.infer_type ? `vec${t.params.width}` : `${vectorType}`;\n  for (let i = 0; i < t.params.width; i++) {\n    if (t.params.type === 'bool') {\n      elements.push(i & 1);\n    } else {\n      elements.push((i + 1) * 10);\n    }\n  }\n\n  await run(\n    t,\n    basicExpressionBuilder((ops) => `${fn}(${ops.join(', ')})`),\n    elements.map((e) => elementType),\n    vectorType,\n    t.params,\n    [\n    {\n      input: elements.map((v) => elementType.create(v)),\n      expected: vectorType.create(elements)\n    }]\n\n  );\n});\n\ng.test('abstract_vector_elements').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(`Test that a vector constructed from abstract element values produces the expected value`).\nparams((u) =>\nu.\ncombine('abstract_type', ['abstract-int', 'abstract-float']).\nexpand('concrete_type', (t) => kConcreteTypesForAbstractType[t.abstract_type]).\ncombine('width', [2, 3, 4])\n).\nbeforeAllSubcases((t) => {\n  if (t.params.concrete_type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn(async (t) => {\n  const suffix = t.params.abstract_type === 'abstract-float' ? '.0' : '';\n  const concreteElementType = Type[t.params.concrete_type];\n  const concreteVectorType = Type.vec(t.params.width, concreteElementType);\n  const fn = `vec${t.params.width}`;\n  const elements = [];\n  for (let i = 0; i < t.params.width; i++) {\n    elements.push((i + 1) * 10);\n  }\n  await run(\n    t,\n    basicExpressionBuilder(\n      (_) => `${fn}(${elements.map((v) => `${v * 0x100000000}${suffix}`).join(', ')}) / 0x100000000`\n    ),\n    [],\n    concreteVectorType,\n    { inputSource: 'const', constEvaluationMode: 'direct' },\n    [{ input: [], expected: concreteVectorType.create(elements) }]\n  );\n});\n\nconst kMixSignatures = [\n'2s', //   [vec2,   scalar]\n's2', //   [scalar, vec2]\n'2ss', //  [vec2,   scalar,   scalar]\n's2s', //  [scalar, vec2,     scalar]\n'ss2', //  [scalar, scalar,   vec2  ]\n'22', //   [vec2,   vec2]\n'3s', //   [vec3,   scalar]\n's3' //   [scalar, vec3]\n];\n\ng.test('concrete_vector_mix').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(\n  `Test that a vector constructed from a mix of concrete element values and sub-vectors produces the expected value`\n).\nparams((u) =>\nu.\ncombine('inputSource', allInputSources).\ncombine('type', ['bool', 'i32', 'u32', 'f32', 'f16']).\ncombine('signature', kMixSignatures).\ncombine('infer_type', [false, true])\n).\nbeforeAllSubcases((t) => {\n  if (t.params.type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn(async (t) => {\n  const elementType = Type[t.params.type];\n  let width = 0;\n  const elementValue = (i) => t.params.type === 'bool' ? i & 1 : (i + 1) * 10;\n  const elements = [];\n  const nextValue = () => {\n    const value = elementValue(width++);\n    elements.push(value);\n    return elementType.create(value);\n  };\n  const args = [];\n  for (const c of t.params.signature) {\n    switch (c) {\n      case '2':\n        args.push(vec2(nextValue(), nextValue()));\n        break;\n      case '3':\n        args.push(vec3(nextValue(), nextValue(), nextValue()));\n        break;\n      case 's':\n        args.push(nextValue());\n        break;\n    }\n  }\n  const vectorType = Type.vec(width, elementType);\n  const fn = t.params.infer_type ? `vec${width}` : `${vectorType}`;\n  await run(\n    t,\n    basicExpressionBuilder((ops) => `${fn}(${ops.join(', ')})`),\n    args.map((e) => e.type),\n    vectorType,\n    t.params,\n    [\n    {\n      input: args,\n      expected: vectorType.create(elements)\n    }]\n\n  );\n});\n\ng.test('abstract_vector_mix').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(\n  `Test that a vector constructed from a mix of abstract element values and sub-vectors produces the expected value`\n).\nparams((u) =>\nu.\ncombine('abstract_type', ['abstract-int', 'abstract-float']).\nexpand('concrete_type', (t) => kConcreteTypesForAbstractType[t.abstract_type]).\ncombine('signature', kMixSignatures)\n).\nbeforeAllSubcases((t) => {\n  if (t.params.concrete_type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn(async (t) => {\n  let width = 0;\n  const suffix = t.params.abstract_type === 'abstract-float' ? '.0' : '';\n  const concreteElementType = Type[t.params.concrete_type];\n  const elementValue = (i) => (i + 1) * 10;\n  const elements = [];\n  const nextValue = () => {\n    const value = elementValue(width++);\n    elements.push(value);\n    return `${value * 0x100000000}${suffix}`;\n  };\n  const args = [];\n  for (const c of t.params.signature) {\n    switch (c) {\n      case '2':\n        args.push(`vec2(${nextValue()}, ${nextValue()})`);\n        break;\n      case '3':\n        args.push(`vec3(${nextValue()}, ${nextValue()}, ${nextValue()})`);\n        break;\n      case 's':\n        args.push(`${nextValue()}`);\n        break;\n    }\n  }\n  const concreteVectorType = Type.vec(width, concreteElementType);\n  const fn = `vec${width}`;\n  await run(\n    t,\n    basicExpressionBuilder((_) => `${fn}(${args.join(', ')}) / 0x100000000`),\n    [],\n    concreteVectorType,\n    { inputSource: 'const', constEvaluationMode: 'direct' },\n    [\n    {\n      input: [],\n      expected: concreteVectorType.create(elements)\n    }]\n\n  );\n});\n\ng.test('matrix_identity').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(`Test that a matrix constructed from a value of the same type produces the expected value`).\nparams((u) =>\nu.\ncombine('inputSource', allInputSources).\ncombine('type', ['f32', 'f16']).\ncombine('columns', [2, 3, 4]).\ncombine('rows', [2, 3, 4]).\ncombine('infer_type', [false, true])\n).\nbeforeAllSubcases((t) => {\n  if (t.params.type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn(async (t) => {\n  const elementType = Type[t.params.type];\n  const matrixType = Type.mat(t.params.columns, t.params.rows, elementType);\n  const elements = [];\n  for (let column = 0; column < t.params.columns; column++) {\n    for (let row = 0; row < t.params.rows; row++) {\n      elements.push((column + 1) * 10 + (row + 1));\n    }\n  }\n  const fn = t.params.infer_type ? `mat${t.params.columns}x${t.params.rows}` : `${matrixType}`;\n  await run(\n    t,\n    basicExpressionBuilder((ops) => `${fn}(${ops[0]})`),\n    [matrixType],\n    matrixType,\n    t.params,\n    [\n    {\n      input: matrixType.create(elements),\n      expected: matrixType.create(elements)\n    }]\n\n  );\n});\n\ng.test('concrete_matrix_elements').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(`Test that a matrix constructed from concrete element values produces the expected value`).\nparams((u) =>\nu.\ncombine('inputSource', allInputSources).\ncombine('type', ['f32', 'f16']).\ncombine('columns', [2, 3, 4]).\ncombine('rows', [2, 3, 4]).\ncombine('infer_type', [false, true])\n).\nbeforeAllSubcases((t) => {\n  if (t.params.type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn(async (t) => {\n  const elementType = Type[t.params.type];\n  const matrixType = Type.mat(t.params.columns, t.params.rows, elementType);\n  const elements = [];\n  for (let column = 0; column < t.params.columns; column++) {\n    for (let row = 0; row < t.params.rows; row++) {\n      elements.push((column + 1) * 10 + (row + 1));\n    }\n  }\n  const fn = t.params.infer_type ? `mat${t.params.columns}x${t.params.rows}` : `${matrixType}`;\n  await run(\n    t,\n    basicExpressionBuilder((ops) => `${fn}(${ops.join(', ')})`),\n    elements.map((e) => elementType),\n    matrixType,\n    t.params,\n    [\n    {\n      input: elements.map((e) => elementType.create(e)),\n      expected: matrixType.create(elements)\n    }]\n\n  );\n});\n\ng.test('abstract_matrix_elements').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(`Test that a matrix constructed from concrete element values produces the expected value`).\nparams((u) =>\nu.\ncombine('concrete_type', ['f32', 'f16']).\ncombine('columns', [2, 3, 4]).\ncombine('rows', [2, 3, 4])\n).\nbeforeAllSubcases((t) => {\n  if (t.params.concrete_type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn(async (t) => {\n  const concreteElementType = Type[t.params.concrete_type];\n  const concreteMatrixType = Type.mat(t.params.columns, t.params.rows, concreteElementType);\n  const elements = [];\n  for (let column = 0; column < t.params.columns; column++) {\n    for (let row = 0; row < t.params.rows; row++) {\n      elements.push((column + 1) * 10 + (row + 1));\n    }\n  }\n  const fn = `mat${t.params.columns}x${t.params.rows}`;\n  await run(\n    t,\n    basicExpressionBuilder(\n      (_) => `${fn}(${elements.map((v) => `${v * 0x100000000}.0`).join(', ')}) * (1.0 / 0x100000000)`\n    ),\n    [],\n    concreteMatrixType,\n    { inputSource: 'const', constEvaluationMode: 'direct' },\n    [\n    {\n      input: [],\n      expected: concreteMatrixType.create(elements)\n    }]\n\n  );\n});\n\ng.test('concrete_matrix_column_vectors').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(`Test that a matrix constructed from concrete column vectors produces the expected value`).\nparams((u) =>\nu.\ncombine('inputSource', allInputSources).\ncombine('type', ['f32', 'f16']).\ncombine('columns', [2, 3, 4]).\ncombine('rows', [2, 3, 4]).\ncombine('infer_type', [false, true])\n).\nbeforeAllSubcases((t) => {\n  if (t.params.type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn(async (t) => {\n  const elementType = Type[t.params.type];\n  const columnType = Type.vec(t.params.rows, elementType);\n  const matrixType = Type.mat(t.params.columns, t.params.rows, elementType);\n  const elements = [];\n  const columnVectors = [];\n  for (let column = 0; column < t.params.columns; column++) {\n    const columnElements = [];\n    for (let row = 0; row < t.params.rows; row++) {\n      const v = (column + 1) * 10 + (row + 1);\n      elements.push(v);\n      columnElements.push(v);\n    }\n    columnVectors.push(columnType.create(columnElements));\n  }\n  const fn = t.params.infer_type ? `mat${t.params.columns}x${t.params.rows}` : `${matrixType}`;\n  await run(\n    t,\n    basicExpressionBuilder((ops) => `${fn}(${ops.join(', ')})`),\n    columnVectors.map((v) => v.type),\n    matrixType,\n    t.params,\n    [\n    {\n      input: columnVectors,\n      expected: matrixType.create(elements)\n    }]\n\n  );\n});\n\ng.test('abstract_matrix_column_vectors').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(`Test that a matrix constructed from abstract column vectors produces the expected value`).\nparams((u) =>\nu.\ncombine('concrete_type', ['f32', 'f16']).\ncombine('columns', [2, 3, 4]).\ncombine('rows', [2, 3, 4])\n).\nbeforeAllSubcases((t) => {\n  if (t.params.concrete_type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn(async (t) => {\n  const concreteElementType = Type[t.params.concrete_type];\n  const concreteMatrixType = Type.mat(t.params.columns, t.params.rows, concreteElementType);\n  const elements = [];\n  const columnVectors = [];\n  for (let column = 0; column < t.params.columns; column++) {\n    const columnElements = [];\n    for (let row = 0; row < t.params.rows; row++) {\n      const v = (column + 1) * 10 + (row + 1);\n      elements.push(v);\n      columnElements.push(`${v * 0x100000000}`);\n    }\n    columnVectors.push(`vec${t.params.rows}(${columnElements.join(', ')})`);\n  }\n  const fn = `mat${t.params.columns}x${t.params.rows}`;\n  await run(\n    t,\n    basicExpressionBuilder((_) => `${fn}(${columnVectors.join(', ')}) * (1.0 / 0x100000000)`),\n    [],\n    concreteMatrixType,\n    { inputSource: 'const', constEvaluationMode: 'direct' },\n    [\n    {\n      input: [],\n      expected: concreteMatrixType.create(elements)\n    }]\n\n  );\n});\n\ng.test('concrete_array_elements').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(`Test that an array constructed from concrete element values produces the expected value`).\nparams((u) =>\nu.\ncombine('inputSource', allInputSources).\ncombine('type', ['bool', 'i32', 'u32', 'f32', 'f16', 'vec3f', 'vec4i']).\ncombine('length', [1, 5, 10]).\ncombine('infer_type', [false, true])\n).\nbeforeAllSubcases((t) => {\n  if (t.params.type === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn(async (t) => {\n  const elementType = Type[t.params.type];\n  const arrayType = Type.array(t.params.length, elementType);\n  const elements = [];\n  for (let i = 0; i < t.params.length; i++) {\n    elements.push((i + 1) * 10);\n  }\n  const fn = t.params.infer_type ? `array` : `${arrayType}`;\n  await run(\n    t,\n    basicExpressionBuilder((ops) => `${fn}(${ops.join(', ')})`),\n    elements.map((e) => elementType),\n    arrayType,\n    t.params,\n    [\n    {\n      input: elements.map((e) => elementType.create(e)),\n      expected: arrayType.create(elements)\n    }]\n\n  );\n});\n\ng.test('abstract_array_elements').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(`Test that an array constructed from element values produces the expected value`).\nparams((u) =>\nu.\ncombine('abstract_type', [\n'abstract-int',\n'abstract-float',\n'vec3<abstract-int>',\n'vec4<abstract-float>',\n'mat2x3<abstract-float>']\n).\nexpand('concrete_type', (t) => kConcreteTypesForAbstractType[t.abstract_type]).\ncombine('length', [1, 5, 10])\n).\nbeforeAllSubcases((t) => {\n  if (scalarTypeOf(Type[t.params.concrete_type]).kind === 'f16') {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn(async (t) => {\n  const count = t.params.length;\n  const concreteElementType = Type[t.params.concrete_type];\n  const concreteArrayType = Type.array(count, concreteElementType);\n  const elements = [];\n  let i = 0;\n  const nextValue = () => ++i * 10;\n  for (let i = 0; i < count; i++) {\n    switch (t.params.abstract_type) {\n      case 'abstract-int':{\n          const value = nextValue();\n          elements.push({ args: `${value}`, value: concreteElementType.create(value) });\n          break;\n        }\n      case 'abstract-float':{\n          const value = nextValue();\n          elements.push({ args: `${value}.0`, value: concreteElementType.create(value) });\n          break;\n        }\n      case 'vec3<abstract-int>':{\n          const x = nextValue();\n          const y = nextValue();\n          const z = nextValue();\n          elements.push({\n            args: `vec3(${x}, ${y}, ${z})`,\n            value: concreteElementType.create([x, y, z])\n          });\n          break;\n        }\n      case 'vec4<abstract-float>':{\n          const x = nextValue();\n          const y = nextValue();\n          const z = nextValue();\n          const w = nextValue();\n          elements.push({\n            args: `vec4(${x}.0, ${y}.0, ${z}.0, ${w}.0)`,\n            value: concreteElementType.create([x, y, z, w])\n          });\n          break;\n        }\n      case 'mat2x3<abstract-float>':{\n          const e00 = nextValue();\n          const e01 = nextValue();\n          const e02 = nextValue();\n          const e10 = nextValue();\n          const e11 = nextValue();\n          const e12 = nextValue();\n          elements.push({\n            args: `mat2x3(vec3(${e00}.0, ${e01}.0, ${e02}.0), vec3(${e10}.0, ${e11}.0, ${e12}.0))`,\n            value: concreteElementType.create([e00, e01, e02, e10, e11, e12])\n          });\n          break;\n        }\n    }\n  }\n  const fn = `array`;\n  await run(\n    t,\n    basicExpressionBuilder((_) => `${fn}(${elements.map((e) => e.args).join(', ')})`),\n    [],\n    concreteArrayType,\n    { inputSource: 'const', constEvaluationMode: 'direct' },\n    [\n    {\n      input: [],\n      expected: new ArrayValue(elements.map((e) => e.value))\n    }]\n\n  );\n});\n\ng.test('structure').\nspecURL('https://www.w3.org/TR/WGSL/#value-constructor-builtin-function').\ndesc(`Test that an structure constructed from element values produces the expected value`).\nparams((u) =>\nu.\ncombine('member_types', [\n['bool'],\n['u32'],\n['vec3f'],\n['i32', 'u32'],\n['i32', 'f16', 'vec4i', 'mat3x2f'],\n['bool', 'u32', 'f16', 'vec3f', 'vec2i'],\n['i32', 'u32', 'f32', 'f16', 'vec3f', 'vec4i']]\n).\ncombine('nested', [false, true]).\nbeginSubcases().\nexpand('member_index', (t) => t.member_types.map((_, i) => i))\n).\nbeforeAllSubcases((t) => {\n  if (t.params.member_types.includes('f16')) {\n    t.selectDeviceOrSkipTestCase('shader-f16');\n  }\n}).\nfn(async (t) => {\n  const memberType = Type[t.params.member_types[t.params.member_index]];\n  const values = t.params.member_types.map((ty, i) => Type[ty].create(i));\n\n  const builder = basicExpressionBuilder((ops) =>\n  t.params.nested ?\n  `OuterStruct(10, MyStruct(${ops.join(', ')}), 20).inner.member_${t.params.member_index}` :\n  `MyStruct(${ops.join(', ')}).member_${t.params.member_index}`\n  );\n  await run(\n    t,\n    (params) => {\n      return `\n${t.params.member_types.includes('f16') ? 'enable f16;' : ''}\n\n${builder(params)}\n\nstruct MyStruct {\n${t.params.member_types.map((ty, i) => `  member_${i} : ${ty},`).join('\\n')}\n};\nstruct OuterStruct {\n  pre : i32,\n  inner : MyStruct,\n  post : i32,\n};\n`;\n    },\n    t.params.member_types.map((ty) => Type[ty]),\n    memberType,\n    { inputSource: 'const' },\n    [{ input: values, expected: values[t.params.member_index] }]\n  );\n});"],"mappings":"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","ignoreList":[]}