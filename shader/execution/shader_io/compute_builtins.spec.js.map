{"version":3,"file":"compute_builtins.spec.js","names":["description","makeTestGroup","iterRange","GPUTest","g","test","desc","params","u","combine","combineWithParams","groupSize","x","y","z","numGroups","beginSubcases","fn","t","invocationsPerGroup","totalInvocations","structures","local_id","local_index","global_id","group_id","num_groups","method","wgsl","pipeline","device","createComputePipeline","layout","compute","module","createShaderModule","code","entryPoint","kLocalIdOffset","kLocalIndexOffset","kGlobalIdOffset","kGroupIdOffset","kNumGroupsOffset","kOutputElementSize","outputBuffer","createBufferTracked","size","usage","GPUBufferUsage","STORAGE","COPY_SRC","bindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","buffer","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginComputePass","setPipeline","setBindGroup","dispatch","dispatchWorkgroups","dispatchBuffer","Uint32Array","BYTES_PER_ELEMENT","INDIRECT","mappedAtCreation","dispatchData","getMappedRange","unmap","dispatchWorkgroupsIndirect","end","queue","submit","finish","checkEachIndex","output","gz","gy","gx","lz","ly","lx","groupIndex","localIndex","globalIndex","globalOffset","expectEqual","name","expected","actual","Error","undefined","checkVec3Value","fieldOffset","offset","error","expectGPUBufferValuesPassCheck","outputData","type","typedLength","popcount","input","n","ErrorMsg","msg","got","checkSubgroupSizeConsistency","subgroupSizes","ballotSizes","min","max","invocations","subgroupSize","i","length","genLID","p0","p1","p2","sizes","kWGSizes","beforeAllSubcases","selectDeviceOrSkipTestCase","subgroupMinSize","subgroupMaxSize","adapterInfo","wgx","wgy","wgz","lid","wgThreads","maxComputeInvocationsPerWorkgroup","maxComputeWorkgroupSizeX","maxComputeWorkgroupSizeY","maxComputeWorkgroupSizeZ","limits","skipIf","numInvocations","numWGs","sizesBuffer","makeBufferWithContents","COPY_DST","trackForCleanup","compareBuffer","bg","sizesReadback","readGPUBufferRangeTyped","srcByteOffset","sizesData","data","compareReadback","compareData","expectOK","checkSubgroupInvocationIdConsistency","ids","wg","mappings","Map","idx","subgroup_id","v","get","BigInt","set","value","id","ballot","onebits","Number","asUintN","ballotP1","toString","placeholderValue","idsBuffer","sizeBuffer","sizeReadback","sizeData","outputReadback","idsReadback","idsData"],"sources":["../../../../../src/webgpu/shader/execution/shader_io/compute_builtins.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `Test compute shader builtin variables`;import { makeTestGroup } from '../../../../common/framework/test_group.js';\nimport { iterRange } from '../../../../common/util/util.js';\nimport { GPUTest } from '../../../gpu_test.js';\n\nexport const g = makeTestGroup(GPUTest);\n\n// Test that the values for each input builtin are correct.\ng.test('inputs').\ndesc(`Test compute shader builtin inputs values`).\nparams((u) =>\nu.\ncombine('method', ['param', 'struct', 'mixed']).\ncombine('dispatch', ['direct', 'indirect']).\ncombineWithParams([\n{\n  groupSize: { x: 1, y: 1, z: 1 },\n  numGroups: { x: 1, y: 1, z: 1 }\n},\n{\n  groupSize: { x: 8, y: 4, z: 2 },\n  numGroups: { x: 1, y: 1, z: 1 }\n},\n{\n  groupSize: { x: 1, y: 1, z: 1 },\n  numGroups: { x: 8, y: 4, z: 2 }\n},\n{\n  groupSize: { x: 3, y: 7, z: 5 },\n  numGroups: { x: 13, y: 9, z: 11 }\n}]\n).\nbeginSubcases()\n).\nfn((t) => {\n  const invocationsPerGroup = t.params.groupSize.x * t.params.groupSize.y * t.params.groupSize.z;\n  const totalInvocations =\n  invocationsPerGroup * t.params.numGroups.x * t.params.numGroups.y * t.params.numGroups.z;\n\n  // Generate the structures, parameters, and builtin expressions used in the shader.\n  let params = '';\n  let structures = '';\n  let local_id = '';\n  let local_index = '';\n  let global_id = '';\n  let group_id = '';\n  let num_groups = '';\n  switch (t.params.method) {\n    case 'param':\n      params = `\n          @builtin(local_invocation_id) local_id : vec3<u32>,\n          @builtin(local_invocation_index) local_index : u32,\n          @builtin(global_invocation_id) global_id : vec3<u32>,\n          @builtin(workgroup_id) group_id : vec3<u32>,\n          @builtin(num_workgroups) num_groups : vec3<u32>,\n        `;\n      local_id = 'local_id';\n      local_index = 'local_index';\n      global_id = 'global_id';\n      group_id = 'group_id';\n      num_groups = 'num_groups';\n      break;\n    case 'struct':\n      structures = `struct Inputs {\n            @builtin(local_invocation_id) local_id : vec3<u32>,\n            @builtin(local_invocation_index) local_index : u32,\n            @builtin(global_invocation_id) global_id : vec3<u32>,\n            @builtin(workgroup_id) group_id : vec3<u32>,\n            @builtin(num_workgroups) num_groups : vec3<u32>,\n          };`;\n      params = `inputs : Inputs`;\n      local_id = 'inputs.local_id';\n      local_index = 'inputs.local_index';\n      global_id = 'inputs.global_id';\n      group_id = 'inputs.group_id';\n      num_groups = 'inputs.num_groups';\n      break;\n    case 'mixed':\n      structures = `struct InputsA {\n          @builtin(local_invocation_index) local_index : u32,\n          @builtin(global_invocation_id) global_id : vec3<u32>,\n        };\n        struct InputsB {\n          @builtin(workgroup_id) group_id : vec3<u32>\n        };`;\n      params = `@builtin(local_invocation_id) local_id : vec3<u32>,\n                  inputsA : InputsA,\n                  inputsB : InputsB,\n                  @builtin(num_workgroups) num_groups : vec3<u32>,`;\n      local_id = 'local_id';\n      local_index = 'inputsA.local_index';\n      global_id = 'inputsA.global_id';\n      group_id = 'inputsB.group_id';\n      num_groups = 'num_groups';\n      break;\n  }\n\n  // WGSL shader that stores every builtin value to a buffer, for every invocation in the grid.\n  const wgsl = `\n      struct Outputs {\n        local_id: vec3u,\n        local_index: u32,\n        global_id: vec3u,\n        group_id: vec3u,\n        num_groups: vec3u,\n      };\n      @group(0) @binding(0) var<storage, read_write> outputs : array<Outputs>;\n\n      ${structures}\n\n      const group_width = ${t.params.groupSize.x}u;\n      const group_height = ${t.params.groupSize.y}u;\n      const group_depth = ${t.params.groupSize.z}u;\n\n      @compute @workgroup_size(group_width, group_height, group_depth)\n      fn main(\n        ${params}\n        ) {\n        let group_index = ((${group_id}.z * ${num_groups}.y) + ${group_id}.y) * ${num_groups}.x + ${group_id}.x;\n        let global_index = group_index * ${invocationsPerGroup}u + ${local_index};\n        var o: Outputs;\n        o.local_id = ${local_id};\n        o.local_index = ${local_index};\n        o.global_id = ${global_id};\n        o.group_id = ${group_id};\n        o.num_groups = ${num_groups};\n        outputs[global_index] = o;\n      }\n    `;\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: wgsl\n      }),\n      entryPoint: 'main'\n    }\n  });\n\n  // Offsets are in u32 size units\n  const kLocalIdOffset = 0;\n  const kLocalIndexOffset = 3;\n  const kGlobalIdOffset = 4;\n  const kGroupIdOffset = 8;\n  const kNumGroupsOffset = 12;\n  const kOutputElementSize = 16;\n\n  // Create the output buffers.\n  const outputBuffer = t.createBufferTracked({\n    size: totalInvocations * kOutputElementSize * 4,\n    usage: GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC\n  });\n\n  const bindGroup = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [{ binding: 0, resource: { buffer: outputBuffer } }]\n  });\n\n  // Run the shader.\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bindGroup);\n  switch (t.params.dispatch) {\n    case 'direct':\n      pass.dispatchWorkgroups(t.params.numGroups.x, t.params.numGroups.y, t.params.numGroups.z);\n      break;\n    case 'indirect':{\n        const dispatchBuffer = t.createBufferTracked({\n          size: 3 * Uint32Array.BYTES_PER_ELEMENT,\n          usage: GPUBufferUsage.INDIRECT,\n          mappedAtCreation: true\n        });\n        const dispatchData = new Uint32Array(dispatchBuffer.getMappedRange());\n        dispatchData[0] = t.params.numGroups.x;\n        dispatchData[1] = t.params.numGroups.y;\n        dispatchData[2] = t.params.numGroups.z;\n        dispatchBuffer.unmap();\n        pass.dispatchWorkgroupsIndirect(dispatchBuffer, 0);\n        break;\n      }\n  }\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n\n\n  // Helper to check that the vec3<u32> value at each index of the provided `output` buffer\n  // matches the expected value for that invocation, as generated by the `getBuiltinValue`\n  // function. The `name` parameter is the builtin name, used for error messages.\n  const checkEachIndex = (output) => {\n    // Loop over workgroups.\n    for (let gz = 0; gz < t.params.numGroups.z; gz++) {\n      for (let gy = 0; gy < t.params.numGroups.y; gy++) {\n        for (let gx = 0; gx < t.params.numGroups.x; gx++) {\n          // Loop over invocations within a group.\n          for (let lz = 0; lz < t.params.groupSize.z; lz++) {\n            for (let ly = 0; ly < t.params.groupSize.y; ly++) {\n              for (let lx = 0; lx < t.params.groupSize.x; lx++) {\n                const groupIndex = (gz * t.params.numGroups.y + gy) * t.params.numGroups.x + gx;\n                const localIndex = (lz * t.params.groupSize.y + ly) * t.params.groupSize.x + lx;\n                const globalIndex = groupIndex * invocationsPerGroup + localIndex;\n                const globalOffset = globalIndex * kOutputElementSize;\n\n                const expectEqual = (name, expected, actual) => {\n                  if (actual !== expected) {\n                    return new Error(\n                      `${name} failed at group(${gx},${gy},${gz}) local(${lx},${ly},${lz}))\\n` +\n                      `    expected: ${expected}\\n` +\n                      `    got:      ${actual}`\n                    );\n                  }\n                  return undefined;\n                };\n\n                const checkVec3Value = (name, fieldOffset, expected) => {\n                  const offset = globalOffset + fieldOffset;\n                  return (\n                    expectEqual(`${name}.x`, expected.x, output[offset + 0]) ||\n                    expectEqual(`${name}.y`, expected.y, output[offset + 1]) ||\n                    expectEqual(`${name}.z`, expected.z, output[offset + 2]));\n\n                };\n\n                const error =\n                checkVec3Value('local_id', kLocalIdOffset, { x: lx, y: ly, z: lz }) ||\n                checkVec3Value('global_id', kGlobalIdOffset, {\n                  x: gx * t.params.groupSize.x + lx,\n                  y: gy * t.params.groupSize.y + ly,\n                  z: gz * t.params.groupSize.z + lz\n                }) ||\n                checkVec3Value('group_id', kGroupIdOffset, { x: gx, y: gy, z: gz }) ||\n                checkVec3Value('num_groups', kNumGroupsOffset, t.params.numGroups) ||\n                expectEqual(\n                  'local_index',\n                  localIndex,\n                  output[globalOffset + kLocalIndexOffset]\n                );\n                if (error) {\n                  return error;\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n    return undefined;\n  };\n\n  t.expectGPUBufferValuesPassCheck(outputBuffer, (outputData) => checkEachIndex(outputData), {\n    type: Uint32Array,\n    typedLength: outputBuffer.size / 4\n  });\n});\n\n/**\n * @returns The population count of input.\n *\n * @param input Treated as an unsigned 32-bit integer\n */\nfunction popcount(input) {\n  let n = input;\n  n = n - (n >> 1 & 0x55555555);\n  n = (n & 0x33333333) + (n >> 2 & 0x33333333);\n  return (n + (n >> 4) & 0xf0f0f0f) * 0x1010101 >> 24;\n}\n\nfunction ErrorMsg(msg, got, expected) {\n  return `${msg}:\\n-      got: ${got}\\n- expected: ${expected}`;\n}\n\n/**\n * Checks that the subgroup size and ballot buffers are consistent.\n *\n * This function checks that all invocations see a consistent value for\n * subgroup_size and that all ballots are less than or equal to that value.\n *\n * @param subgroupSizes The subgroup_size buffer\n * @param ballotSizes The ballot buffer\n * @param min The minimum subgroup size allowed\n * @param max The maximum subgroup size allowed\n * @param invocations The number of invocations in a workgroup\n */\nfunction checkSubgroupSizeConsistency(\nsubgroupSizes,\nballotSizes,\nmin,\nmax,\ninvocations)\n{\n  const subgroupSize = subgroupSizes[0];\n  if (popcount(subgroupSize) !== 1) {\n    return new Error(`Subgroup size '${subgroupSize}' is not a power of two`);\n  }\n  if (subgroupSize < min) {\n    return new Error(`Subgroup size '${subgroupSize}' is less than minimum '${min}'`);\n  }\n  if (max < subgroupSize) {\n    return new Error(`Subgroup size '${subgroupSize}' is greater than maximum '${max}'`);\n  }\n\n  // Check that remaining invocations record a consistent subgroup size.\n  for (let i = 1; i < subgroupSizes.length; i++) {\n    if (subgroupSizes[i] !== subgroupSize) {\n      return new Error(\n        ErrorMsg(`Invocation ${i}: subgroup size inconsistency`, subgroupSizes[i], subgroupSize)\n      );\n    }\n  }\n\n  for (let i = 0; i < ballotSizes.length; i++) {\n    if (ballotSizes[i] > subgroupSize) {\n      return new Error(\n        `Invocation ${i}, subgroup size, ${ballotSizes[i]}, is greater than built-in value, ${subgroupSize}`\n      );\n    }\n  }\n\n  return undefined;\n}\n\n/**\n * Returns a WGSL function that generates linear local id\n *\n * Using (0,1,2) generates the standard local linear id.\n * Changing the order of p0, p1, and p2 changes the linearity.\n *\n * Assumes p0, p1, and p2 are not repeated and in range [0, 2].\n * @param p0 The index used for the x-dimension\n * @param p1 The index used for the y-dimension\n * @param p2 The index used for the z-dimension\n * @param sizes An array of workgroup sizes for each dimension.\n */\nfunction genLID(p0, p1, p2, sizes) {\n  return `\nfn getLID(lid : vec3u) -> u32 {\n  let p0 = lid[${p0}];\n  let p1 = lid[${p1}] * ${sizes[p0]};\n  let p2 = lid[${p2}] * ${sizes[p0]} * ${sizes[p1]};\n  return p0 + p1 + p2;\n}`;\n}\n\nconst kWGSizes = [\n[1, 1, 1],\n[4, 1, 1],\n[8, 1, 1],\n[16, 1, 1],\n[32, 1, 1],\n[64, 1, 1],\n[128, 1, 1],\n[256, 1, 1],\n[1, 4, 1],\n[1, 8, 1],\n[1, 16, 1],\n[1, 32, 1],\n[1, 64, 1],\n[1, 128, 1],\n[1, 256, 1],\n[1, 1, 4],\n[1, 1, 8],\n[1, 1, 16],\n[1, 1, 32],\n[1, 1, 64],\n[3, 3, 3],\n[4, 4, 4],\n[16, 16, 1],\n[16, 1, 16],\n[1, 16, 16],\n[15, 3, 3],\n[3, 15, 3],\n[3, 3, 15],\n[17, 5, 2],\n[17, 4, 2],\n[15, 2, 8]];\n\n\ng.test('subgroup_size').\ndesc('Tests subgroup_size values').\nparams((u) =>\nu.\ncombine('sizes', kWGSizes).\nbeginSubcases().\ncombine('numWGs', [1, 2]).\ncombine('lid', [\n[0, 1, 2],\n[0, 2, 1],\n[1, 0, 2],\n[1, 2, 0],\n[2, 0, 1],\n[2, 1, 0]]\n)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n\n\n\n\n  const { subgroupMinSize, subgroupMaxSize } = t.device.adapterInfo;\n\n  const wgx = t.params.sizes[0];\n  const wgy = t.params.sizes[1];\n  const wgz = t.params.sizes[2];\n  const lid = t.params.lid;\n  const wgThreads = wgx * wgy * wgz;\n\n  // Compatibility mode has lower workgroup limits.\n  const {\n    maxComputeInvocationsPerWorkgroup,\n    maxComputeWorkgroupSizeX,\n    maxComputeWorkgroupSizeY,\n    maxComputeWorkgroupSizeZ\n  } = t.device.limits;\n  t.skipIf(\n    maxComputeInvocationsPerWorkgroup < wgThreads ||\n    maxComputeWorkgroupSizeX < t.params.sizes[0] ||\n    maxComputeWorkgroupSizeY < t.params.sizes[1] ||\n    maxComputeWorkgroupSizeZ < t.params.sizes[2],\n    'Workgroup size too large'\n  );\n\n  const wgsl = `\nenable subgroups;\n\nconst stride = ${wgThreads};\n\n${genLID(lid[0], lid[1], lid[2], t.params.sizes)}\n\n@group(0) @binding(0)\nvar<storage, read_write> output : array<u32>;\n\n@group(0) @binding(1)\nvar<storage, read_write> compare : array<u32>;\n\n@compute @workgroup_size(${wgx}, ${wgy}, ${wgz})\nfn main(@builtin(subgroup_size) size : u32,\n        @builtin(workgroup_id) wgid : vec3u,\n        @builtin(local_invocation_id) local_id : vec3u) {\n  // Remap local ids according to test linearity.\n  let lid = getLID(local_id);\n\n  output[lid + wgid.x * stride] = size;\n  let ballot = countOneBits(subgroupBallot(true));\n  let ballotSize = ballot[0] + ballot[1] + ballot[2] + ballot[3];\n  compare[lid + wgid.x * stride] = ballotSize;\n}`;\n\n  const numInvocations = wgThreads * t.params.numWGs;\n  const sizesBuffer = t.makeBufferWithContents(\n    new Uint32Array([...iterRange(numInvocations, (x) => 0)]),\n    GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  );\n  t.trackForCleanup(sizesBuffer);\n  const compareBuffer = t.makeBufferWithContents(\n    new Uint32Array([...iterRange(numInvocations, (x) => 0)]),\n    GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  );\n  t.trackForCleanup(compareBuffer);\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: wgsl\n      }),\n      entryPoint: 'main'\n    }\n  });\n  const bg = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n    {\n      binding: 0,\n      resource: {\n        buffer: sizesBuffer\n      }\n    },\n    {\n      binding: 1,\n      resource: {\n        buffer: compareBuffer\n      }\n    }]\n\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatchWorkgroups(t.params.numWGs, 1, 1);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  const sizesReadback = await t.readGPUBufferRangeTyped(sizesBuffer, {\n    srcByteOffset: 0,\n    type: Uint32Array,\n    typedLength: numInvocations,\n    method: 'copy'\n  });\n  const sizesData = sizesReadback.data;\n\n  const compareReadback = await t.readGPUBufferRangeTyped(compareBuffer, {\n    srcByteOffset: 0,\n    type: Uint32Array,\n    typedLength: numInvocations,\n    method: 'copy'\n  });\n  const compareData = compareReadback.data;\n\n  t.expectOK(\n    checkSubgroupSizeConsistency(\n      sizesData,\n      compareData,\n      subgroupMinSize,\n      subgroupMaxSize,\n      wgThreads\n    )\n  );\n});\n\n/**\n * Checks the consistency of subgroup_invocation_id builtin values\n *\n * Creates a ballot out consisting of all invocations sharing the same generated\n * subgroup id. Checks that the ballot contains at most subgroupSize invocations\n * and that the invocations are tightly packed from the lowest id.\n * @param data The subgroup_invocation_id output data\n * @param ids The representative subgroup ids for each invocation\n * @param subgroupSize The subgroup size\n * @param invocations The number of invocations per workgroup\n * @param numWGs The number of workgroups\n */\nfunction checkSubgroupInvocationIdConsistency(\ndata,\nids,\nsubgroupSize,\ninvocations,\nnumWGs)\n{\n  for (let wg = 0; wg < numWGs; wg++) {\n    // Tracks an effective ballot of each subgroup based on the representative id\n    // (global id of invocation 0 in the subgroup).\n    const mappings = new Map();\n    for (let i = 0; i < invocations; i++) {\n      const idx = i + invocations * wg;\n      const subgroup_id = ids[idx];\n      if (subgroup_id === 999) {\n        return new Error(`Invocation ${i}: no data`);\n      }\n      let v = mappings.get(subgroup_id) ?? 0n;\n      v |= 1n << BigInt(data[idx]);\n      mappings.set(subgroup_id, v);\n    }\n\n    for (const value of mappings.entries()) {\n      const id = value[0];\n      const ballot = value[1];\n\n      let onebits = popcount(Number(BigInt.asUintN(32, ballot)));\n      onebits += popcount(Number(BigInt.asUintN(32, ballot >> 32n)));\n      onebits += popcount(Number(BigInt.asUintN(32, ballot >> 64n)));\n      onebits += popcount(Number(BigInt.asUintN(32, ballot >> 96n)));\n      if (onebits > subgroupSize) {\n        return new Error(\n          `Subgroup including invocation ${id} is too large, ${onebits}, for subgroup size, ${subgroupSize}`\n        );\n      }\n\n      const ballotP1 = ballot + 1n;\n      if ((ballot & ballotP1) !== 0n) {\n        return new Error(\n          `Subgroup including invocation ${id} has non-continguous ids: ${ballot.toString(2)}`\n        );\n      }\n    }\n  }\n\n  return undefined;\n}\n\ng.test('subgroup_invocation_id').\ndesc(\n  'Tests subgroup_invocation_id values. No mapping between local_invocation_index and subgroup_invocation_id can be relied upon.'\n).\nparams((u) =>\nu.\ncombine('sizes', kWGSizes).\nbeginSubcases().\ncombine('numWGs', [1, 2]).\ncombine('lid', [\n[0, 1, 2],\n[0, 2, 1],\n[1, 0, 2],\n[1, 2, 0],\n[2, 0, 1],\n[2, 1, 0]]\n)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase('subgroups');\n}).\nfn(async (t) => {\n  const wgx = t.params.sizes[0];\n  const wgy = t.params.sizes[1];\n  const wgz = t.params.sizes[2];\n  const lid = t.params.lid;\n  const wgThreads = wgx * wgy * wgz;\n\n  // Compatibility mode has lower workgroup limits.\n  const {\n    maxComputeInvocationsPerWorkgroup,\n    maxComputeWorkgroupSizeX,\n    maxComputeWorkgroupSizeY,\n    maxComputeWorkgroupSizeZ\n  } = t.device.limits;\n  t.skipIf(\n    maxComputeInvocationsPerWorkgroup < wgThreads ||\n    maxComputeWorkgroupSizeX < wgx ||\n    maxComputeWorkgroupSizeY < wgy ||\n    maxComputeWorkgroupSizeZ < wgz,\n    'Workgroup size too large'\n  );\n\n  const wgsl = `\nenable subgroups;\n\nconst stride = ${wgThreads};\n\n${genLID(lid[0], lid[1], lid[2], t.params.sizes)}\n\n@group(0) @binding(0)\nvar<storage, read_write> output : array<u32>;\n\n// This var stores the global id of invocation 0 in the subgroup.\n@group(0) @binding(1)\nvar<storage, read_write> subgroup_ids : array<u32>;\n\n@group(0) @binding(2)\nvar<storage, read_write> sizes : array<u32>;\n\n@compute @workgroup_size(${wgx}, ${wgy}, ${wgz})\nfn main(@builtin(subgroup_size) size : u32,\n        @builtin(subgroup_invocation_id) id : u32,\n        @builtin(workgroup_id) wgid : vec3u,\n        @builtin(local_invocation_id) local_id : vec3u) {\n  // Remap local ids according to test linearity.\n  let lid = getLID(local_id);\n\n  // Representative subgroup_id value.\n  let gid = lid + stride * wgid.x;\n\n  let b = subgroupBroadcast(gid, 0);\n  output[gid] = id;\n  subgroup_ids[gid] = b;\n  if (lid == 0) {\n    sizes[wgid.x] = size;\n  }\n}`;\n\n  const numInvocations = wgThreads * t.params.numWGs;\n  const outputBuffer = t.makeBufferWithContents(\n    new Uint32Array([...iterRange(numInvocations, (x) => 0)]),\n    GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  );\n  t.trackForCleanup(outputBuffer);\n  const placeholderValue = 999;\n  const idsBuffer = t.makeBufferWithContents(\n    new Uint32Array([...iterRange(numInvocations, (x) => placeholderValue)]),\n    GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  );\n  t.trackForCleanup(idsBuffer);\n  const sizeBuffer = t.makeBufferWithContents(\n    new Uint32Array([...iterRange(t.params.numWGs, (x) => 0)]),\n    GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST\n  );\n  t.trackForCleanup(sizeBuffer);\n\n  const pipeline = t.device.createComputePipeline({\n    layout: 'auto',\n    compute: {\n      module: t.device.createShaderModule({\n        code: wgsl\n      }),\n      entryPoint: 'main'\n    }\n  });\n  const bg = t.device.createBindGroup({\n    layout: pipeline.getBindGroupLayout(0),\n    entries: [\n    {\n      binding: 0,\n      resource: {\n        buffer: outputBuffer\n      }\n    },\n    {\n      binding: 1,\n      resource: {\n        buffer: idsBuffer\n      }\n    },\n    {\n      binding: 2,\n      resource: {\n        buffer: sizeBuffer\n      }\n    }]\n\n  });\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginComputePass();\n  pass.setPipeline(pipeline);\n  pass.setBindGroup(0, bg);\n  pass.dispatchWorkgroups(t.params.numWGs, 1, 1);\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t, t.queue.submit, [[encoder.finish()]], () => t.queue.submit([encoder.finish()]));\n\n  const sizeReadback = await t.readGPUBufferRangeTyped(sizeBuffer, {\n    srcByteOffset: 0,\n    type: Uint32Array,\n    typedLength: 1,\n    method: 'copy'\n  });\n  const sizeData = sizeReadback.data;\n\n  const outputReadback = await t.readGPUBufferRangeTyped(outputBuffer, {\n    srcByteOffset: 0,\n    type: Uint32Array,\n    typedLength: numInvocations,\n    method: 'copy'\n  });\n  const outputData = outputReadback.data;\n\n  const idsReadback = await t.readGPUBufferRangeTyped(idsBuffer, {\n    srcByteOffset: 0,\n    type: Uint32Array,\n    typedLength: numInvocations,\n    method: 'copy'\n  });\n  const idsData = idsReadback.data;\n\n  t.expectOK(\n    checkSubgroupInvocationIdConsistency(\n      outputData,\n      idsData,\n      sizeData[0],\n      wgThreads,\n      t.params.numWGs\n    )\n  );\n});"],"mappings":"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","ignoreList":[]}