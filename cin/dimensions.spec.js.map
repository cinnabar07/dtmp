{"version":3,"file":"dimensions.spec.js","names":["makeTestGroup","GPUTest","description","g","getVeryLargeBufferSize","test","desc","fn","t","usageFlagsList","GPUBufferUsage","MAP_READ","MAP_WRITE","COPY_SRC","COPY_DST","STORAGE","usage","descriptor","size","expectValidationError","globalThis","_TRAMPOLINE_","device","createBuffer","params","u","combineWithParams","pushErrorScope","buffer","popPromise","popErrorScope","eventualAsyncExpectation","niceStack","error","GPUOutOfMemoryError","message","rec","validationFailed","commandEncoder","createCommandEncoder","copyBufferToBuffer","queue","submit","finish","dimension","width","height","combine","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","STORAGE_BINDING","createTexture","format","getMaxTextureDimension2D","limits","maxTextureDimension2D","beginSubcases","exceed","limit","dimensionToCreate","shouldError"],"sources":["../../../src/webgpu/cin/dimensions.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/ /**\n * @fileoverview\n * Tests for zero or extremely large buffer/texture dimensions.\n * - Zero-length buffers\n * - Very large buffers (near or exceeding device limits)\n * - Zero-size textures\n * - Very large textures (near or exceeding device limits)\n */import { makeTestGroup } from '../../common/framework/test_group.js';\nimport { GPUTest } from '../gpu_test.js';\n\nexport const description = `\nValidation and usage tests for buffer/texture dimension extremes (e.g. zero-sized or very large).\n`;\n\nexport const g = makeTestGroup(GPUTest);\n\n/**\n * Utility to obtain a buffer size near the device's limits.\n * There's no formal \"maxBufferSize\" in the spec, but we can attempt something near\n * the maximum safe integer or the largest safe usage that won't exceed GPU requirements.\n *\n * In practice, `maxBufferSize` is limited by the device's memory and resource constraints.\n * For conformance, we can pick some \"very large\" number below JS's safe integer limit\n * or below the device's reported memory limit, if any.\n *\n * This example picks 128 MB for demonstration, which is \"large\" enough to test interesting edge\n * cases, but small enough to typically not exhaust GPU memory in a normal environment.\n * Adjust as needed.\n */\nfunction getVeryLargeBufferSize() {\n  // 128MB as an example \"large\" buffer for testing\n  return 128 * 1024 * 1024;\n}\n\ng.test('buffer,zero_size').\ndesc(\n  `\nTests creating a buffer with size=0. This is allowed by the spec\nand should succeed (the buffer is just an empty resource).\n`\n).\nfn((t) => {\n  // Try different usage flags to ensure it doesn't matter for zero-size buffers.\n  const usageFlagsList = [\n  GPUBufferUsage.MAP_READ,\n  GPUBufferUsage.MAP_WRITE,\n  GPUBufferUsage.COPY_SRC | GPUBufferUsage.COPY_DST,\n  GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST];\n\n\n  for (const usage of usageFlagsList) {\n    const descriptor = {\n      size: 0,\n      usage\n    };\n\n    // Validation: This should succeed in creation. There's no rule disallowing size=0.\n    t.expectValidationError(() => {\n      globalThis._TRAMPOLINE_(\"createBuffer\", t.device, t.device.createBuffer, [descriptor], () => t.device.createBuffer(descriptor));\n    }, false /* shouldError */);\n  }\n});\n\ng.test('buffer,very_large_size').\ndesc(\n  `\nTests creating a \"very large\" buffer (128MB or so). In real usage,\nthis might be near or over some device resource limit. The test must\naccept either:\n- creation success, or\n- a valid error (if the adapter can't allocate that much).\n`\n).\nparams((u) =>\nu.combineWithParams([\n{ usage: GPUBufferUsage.MAP_WRITE },\n{ usage: GPUBufferUsage.COPY_DST },\n{ usage: GPUBufferUsage.STORAGE },\n{ usage: GPUBufferUsage.STORAGE | GPUBufferUsage.MAP_WRITE }]\n)\n).\nfn((t) => {\n  const { usage } = t.params;\n  const size = getVeryLargeBufferSize();\n\n  // We expect that this might fail to allocate, so if it fails, it should be an OOM error,\n  // or it might pass. In that sense, either is legal per spec. We'll rely on .shouldThrow\n  // to catch if it fails for reasons other than out-of-memory or validation.\n  t.device.pushErrorScope('out-of-memory');\n  const buffer = globalThis._TRAMPOLINE_(\"createBuffer\", t.device, t.device.createBuffer, [{\n    size,\n    usage\n  }], () => t.device.createBuffer({ size, usage }));\n  const popPromise = t.device.popErrorScope();\n\n  t.eventualAsyncExpectation(async (niceStack) => {\n    const error = await popPromise;\n    // If error is non-null, we expect OOM. Validation error would not be correct here\n    // but let's gracefully handle it anyway:\n    if (error && !(error instanceof GPUOutOfMemoryError)) {\n      niceStack.message = `Expected out-of-memory, got: ${error}`;\n      t.rec.validationFailed(niceStack);\n    } else {\n      // else success or OOM is fine\n      if (!error) {\n        // Buffer created successfully. Just do a trivial usage to ensure it doesn't fail.\n        // e.g. queue a no-op copy of 0 bytes:\n        const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n        commandEncoder.copyBufferToBuffer(buffer, 0, buffer, 0, 0);\n        globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[commandEncoder.finish()]], () => t.device.queue.submit([commandEncoder.finish()]));\n      }\n    }\n  });\n});\n\ng.test('texture,zero_size').\ndesc(\n  `\nTests creating a 2D texture with one or more zero dimensions (width=0 or height=0).\nCreating a texture with a zero dimension is disallowed by the spec, so we expect\na validation error in each case.\n`\n).\nparams((u) =>\nu.\ncombineWithParams([\n{ dimension: '2d', width: 0, height: 16 },\n{ dimension: '2d', width: 16, height: 0 },\n{ dimension: '2d', width: 0, height: 0 }]\n)\n// Try a few example usage flags that are likely to be used\n.combine('usage', [\nGPUTextureUsage.TEXTURE_BINDING,\nGPUTextureUsage.RENDER_ATTACHMENT,\nGPUTextureUsage.STORAGE_BINDING]\n)\n).\nfn((t) => {\n  const { dimension, width, height, usage } = t.params;\n  t.expectValidationError(() => {\n    t.device.createTexture({\n      dimension,\n      size: [width, height, 1],\n      format: 'rgba8unorm',\n      usage\n    });\n  }, true);\n});\n\n/**\n * Try to get a \"max\" texture dimension for a 2D texture, from adapter limits.\n * For demonstration, if the adapter claims e.g. 16384 as maxTextureDimension2D,\n * we use that for a \"very large\" dimension test. We also test dimension + 1 to\n * confirm it fails validation.\n */\nfunction getMaxTextureDimension2D(t) {\n  // The spec says 'maxTextureDimension2D' is guaranteed to be at least 8192 in core. But\n  // let's ask the actual device for the real limit at runtime, so we can test near it.\n  return t.device.limits.maxTextureDimension2D;\n}\n\ng.test('texture,very_large_size').\ndesc(\n  `\nTest creating a texture with dimension near the device limit. We test:\n- exactly at the limit: this should succeed\n- one above the limit: should fail\n`\n).\nparams((u) =>\nu.\nbeginSubcases().\ncombine('exceed', [false, true]).\ncombine('usage', [\nGPUTextureUsage.TEXTURE_BINDING,\nGPUTextureUsage.RENDER_ATTACHMENT,\nGPUTextureUsage.STORAGE_BINDING]\n)\n).\nfn((t) => {\n  const { exceed, usage } = t.params;\n  // We'll test a 2D texture for simplicity. One dimension large, the other normal:\n  const limit = getMaxTextureDimension2D(t);\n  const dimensionToCreate = exceed ? limit + 1 : limit;\n  const desc = {\n    size: [dimensionToCreate, 2, 1],\n    format: 'rgba8unorm',\n    usage\n  };\n\n  // If exceed=false, we expect no validation error.\n  // If exceed=true, we expect a validation error.\n  const shouldError = exceed;\n\n  t.expectValidationError(() => {\n    t.device.createTexture(desc);\n  }, shouldError);\n});"],"mappings":"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","ignoreList":[]}