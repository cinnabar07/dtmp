{"version":3,"file":"canvas_complex.html.js","names":["assert","unreachable","kTextureFormatInfo","gammaDecompress","float32ToFloat16Bits","align","runRefTest","run","format","targets","t","shaderValue","isOutputSrgb","shaderValueStr","toFixed","copyBufferToTexture","ctx","rows","canvas","height","bytesPerPixel","color","bytes","undefined","bytesPerRow","width","componentsPerPixel","buffer","globalThis","_TRAMPOLINE_","device","createBuffer","mappedAtCreation","size","usage","GPUBufferUsage","COPY_SRC","red","green","blue","yellow","mapping","getMappedRange","data","Uint8Array","Uint16Array","i","j","pixel","set","unmap","encoder","createCommandEncoder","texture","getCurrentTexture","queue","submit","finish","getImageBitmap","Uint8ClampedArray","offset","imageData","ImageData","createImageBitmap","setupSrcTexture","imageBitmap","srcWidth","srcHeight","srcTexture","createTexture","GPUTextureUsage","TEXTURE_BINDING","RENDER_ATTACHMENT","COPY_DST","copyExternalImageToTexture","source","copyTextureToTexture","mipLevel","origin","x","y","z","DrawTextureSample","pipeline","createRenderPipeline","layout","vertex","module","createShaderModule","code","entryPoint","fragment","primitive","topology","sampler","createSampler","magFilter","minFilter","uniformBindGroup","createBindGroup","getBindGroupLayout","entries","binding","resource","createView","renderPassDescriptor","colorAttachments","view","clearValue","r","g","b","a","loadOp","storeOp","commandEncoder","passEncoder","beginRenderPass","setPipeline","setBindGroup","draw","end","DrawVertexColor","DrawFragcoord","halfCanvasWidthStr","halfCanvasHeightStr","FragmentTextureStore","bg","outputTexture","ComputeWorkgroup1x1TextureStore","createComputePipeline","compute","pass","beginComputePass","dispatchWorkgroups","ComputeWorkgroup16x16TextureStore","canvasWidthStr","canvasHeightStr","cvs","writeCanvasMethod","getContext","GPUCanvasContext","STORAGE_BINDING","configure"],"sources":["../../../../src/webgpu/web_platform/reftests/canvas_complex.html.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { assert, unreachable } from '../../../common/util/util.js';import { kTextureFormatInfo } from '../../format_info.js';import { gammaDecompress, float32ToFloat16Bits } from '../../util/conversion.js';\nimport { align } from '../../util/math.js';\n\nimport { runRefTest } from './gpu_ref_test.js';\n\n\n\n\n\n\n\n\n\n\n\n\nexport function run(\nformat,\ntargets)\n{\n  runRefTest(async (t) => {\n    let shaderValue = 0x66 / 0xff;\n    let isOutputSrgb = false;\n    switch (format) {\n      case 'bgra8unorm':\n      case 'rgba8unorm':\n      case 'rgba16float':\n        break;\n      case 'bgra8unorm-srgb':\n      case 'rgba8unorm-srgb':\n        // NOTE: \"-srgb\" cases haven't been tested (there aren't any .html files that use them).\n\n        // Reverse gammaCompress to get same value shader output as non-srgb formats:\n        shaderValue = gammaDecompress(shaderValue);\n        isOutputSrgb = true;\n        break;\n      default:\n        unreachable();\n    }\n    const shaderValueStr = shaderValue.toFixed(5);\n\n    function copyBufferToTexture(ctx) {\n      const rows = ctx.canvas.height;\n      const bytesPerPixel = kTextureFormatInfo[format].color.bytes;\n      if (bytesPerPixel === undefined) {\n        unreachable();\n      }\n      const bytesPerRow = align(bytesPerPixel * ctx.canvas.width, 256);\n      const componentsPerPixel = 4;\n\n      const buffer = globalThis._TRAMPOLINE_(\"createBuffer\", t.device, t.device.createBuffer, [{\n        mappedAtCreation: true,\n        size: rows * bytesPerRow,\n        usage: GPUBufferUsage.COPY_SRC\n      }], () => t.device.createBuffer({ mappedAtCreation: true, size: rows * bytesPerRow, usage: GPUBufferUsage.COPY_SRC }));\n      // These are run only once per test, so there are no wasted reallocations below.\n      let red;\n      let green;\n      let blue;\n      let yellow;\n\n      const mapping = buffer.getMappedRange();\n      let data;\n      switch (format) {\n        case 'bgra8unorm':\n        case 'bgra8unorm-srgb':\n          {\n            data = new Uint8Array(mapping);\n            red = new Uint8Array([0x00, 0x00, 0x66, 0xff]);\n            green = new Uint8Array([0x00, 0x66, 0x00, 0xff]);\n            blue = new Uint8Array([0x66, 0x00, 0x00, 0xff]);\n            yellow = new Uint8Array([0x00, 0x66, 0x66, 0xff]);\n          }\n          break;\n        case 'rgba8unorm':\n        case 'rgba8unorm-srgb':\n          {\n            data = new Uint8Array(mapping);\n            red = new Uint8Array([0x66, 0x00, 0x00, 0xff]);\n            green = new Uint8Array([0x00, 0x66, 0x00, 0xff]);\n            blue = new Uint8Array([0x00, 0x00, 0x66, 0xff]);\n            yellow = new Uint8Array([0x66, 0x66, 0x00, 0xff]);\n          }\n          break;\n        case 'rgba16float':\n          {\n            data = new Uint16Array(mapping);\n            red = new Uint16Array([\n            float32ToFloat16Bits(0.4),\n            float32ToFloat16Bits(0.0),\n            float32ToFloat16Bits(0.0),\n            float32ToFloat16Bits(1.0)]\n            );\n            green = new Uint16Array([\n            float32ToFloat16Bits(0.0),\n            float32ToFloat16Bits(0.4),\n            float32ToFloat16Bits(0.0),\n            float32ToFloat16Bits(1.0)]\n            );\n            blue = new Uint16Array([\n            float32ToFloat16Bits(0.0),\n            float32ToFloat16Bits(0.0),\n            float32ToFloat16Bits(0.4),\n            float32ToFloat16Bits(1.0)]\n            );\n            yellow = new Uint16Array([\n            float32ToFloat16Bits(0.4),\n            float32ToFloat16Bits(0.4),\n            float32ToFloat16Bits(0.0),\n            float32ToFloat16Bits(1.0)]\n            );\n          }\n          break;\n        default:\n          unreachable();\n      }\n      for (let i = 0; i < ctx.canvas.width; ++i)\n      for (let j = 0; j < ctx.canvas.height; ++j) {\n        let pixel;\n        if (i < ctx.canvas.width / 2) {\n          if (j < ctx.canvas.height / 2) {\n            pixel = red;\n          } else {\n            pixel = blue;\n          }\n        } else {\n          if (j < ctx.canvas.height / 2) {\n            pixel = green;\n          } else {\n            pixel = yellow;\n          }\n        }\n        data.set(pixel, (i + j * (bytesPerRow / bytesPerPixel)) * componentsPerPixel);\n      }\n      buffer.unmap();\n\n      const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n      encoder.copyBufferToTexture({ buffer, bytesPerRow }, { texture: ctx.getCurrentTexture() }, [\n      ctx.canvas.width,\n      ctx.canvas.height,\n      1]\n      );\n      globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n    }\n\n    function getImageBitmap(ctx) {\n      const data = new Uint8ClampedArray(ctx.canvas.width * ctx.canvas.height * 4);\n      for (let i = 0; i < ctx.canvas.width; ++i)\n      for (let j = 0; j < ctx.canvas.height; ++j) {\n        const offset = (i + j * ctx.canvas.width) * 4;\n        if (i < ctx.canvas.width / 2) {\n          if (j < ctx.canvas.height / 2) {\n            data.set([0x66, 0x00, 0x00, 0xff], offset);\n          } else {\n            data.set([0x00, 0x00, 0x66, 0xff], offset);\n          }\n        } else {\n          if (j < ctx.canvas.height / 2) {\n            data.set([0x00, 0x66, 0x00, 0xff], offset);\n          } else {\n            data.set([0x66, 0x66, 0x00, 0xff], offset);\n          }\n        }\n      }\n      const imageData = new ImageData(data, ctx.canvas.width, ctx.canvas.height);\n      return createImageBitmap(imageData);\n    }\n\n    function setupSrcTexture(imageBitmap) {\n      const [srcWidth, srcHeight] = [imageBitmap.width, imageBitmap.height];\n      const srcTexture = t.device.createTexture({\n        size: [srcWidth, srcHeight, 1],\n        format,\n        usage:\n        GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.RENDER_ATTACHMENT |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.COPY_SRC\n      });\n      t.device.queue.copyExternalImageToTexture({ source: imageBitmap }, { texture: srcTexture }, [\n      imageBitmap.width,\n      imageBitmap.height]\n      );\n      return srcTexture;\n    }\n\n    async function copyExternalImageToTexture(ctx) {\n      const imageBitmap = await getImageBitmap(ctx);\n      t.device.queue.copyExternalImageToTexture(\n        { source: imageBitmap },\n        { texture: ctx.getCurrentTexture() },\n        [imageBitmap.width, imageBitmap.height]\n      );\n    }\n\n    async function copyTextureToTexture(ctx) {\n      const imageBitmap = await getImageBitmap(ctx);\n      const srcTexture = setupSrcTexture(imageBitmap);\n\n      const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n      encoder.copyTextureToTexture(\n        { texture: srcTexture, mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n        { texture: ctx.getCurrentTexture(), mipLevel: 0, origin: { x: 0, y: 0, z: 0 } },\n        [imageBitmap.width, imageBitmap.height, 1]\n      );\n      globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n    }\n\n    async function DrawTextureSample(ctx) {\n      const imageBitmap = await getImageBitmap(ctx);\n      const srcTexture = setupSrcTexture(imageBitmap);\n\n      const pipeline = t.device.createRenderPipeline({\n        layout: 'auto',\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragUV : vec2<f32>,\n}\n\n@vertex\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>( 1.0, -1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>(-1.0,  1.0));\n\n  var uv = array<vec2<f32>, 6>(\n      vec2<f32>(1.0, 0.0),\n      vec2<f32>(1.0, 1.0),\n      vec2<f32>(0.0, 1.0),\n      vec2<f32>(1.0, 0.0),\n      vec2<f32>(0.0, 1.0),\n      vec2<f32>(0.0, 0.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  output.fragUV = uv[VertexIndex];\n  return output;\n}\n            `\n          }),\n          entryPoint: 'main'\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            // NOTE: \"-srgb\" cases haven't been tested (there aren't any .html files that use them).\n            code: `\n@group(0) @binding(0) var mySampler: sampler;\n@group(0) @binding(1) var myTexture: texture_2d<f32>;\n\nfn gammaDecompress(n: f32) -> f32 {\n  var r = n;\n  if (r <= 0.04045) {\n    r = r * 25.0 / 323.0;\n  } else {\n    r = pow((200.0 * r + 11.0) / 121.0, 12.0 / 5.0);\n  }\n  r = clamp(r, 0.0, 1.0);\n  return r;\n}\n\n@fragment\nfn srgbMain(@location(0) fragUV: vec2<f32>) -> @location(0) vec4<f32> {\n  var result = textureSample(myTexture, mySampler, fragUV);\n  result.r = gammaDecompress(result.r);\n  result.g = gammaDecompress(result.g);\n  result.b = gammaDecompress(result.b);\n  return result;\n}\n\n@fragment\nfn linearMain(@location(0) fragUV: vec2<f32>) -> @location(0) vec4<f32> {\n  return textureSample(myTexture, mySampler, fragUV);\n}\n            `\n          }),\n          entryPoint: isOutputSrgb ? 'srgbMain' : 'linearMain',\n          targets: [{ format }]\n        },\n        primitive: {\n          topology: 'triangle-list'\n        }\n      });\n\n      const sampler = t.device.createSampler({\n        magFilter: 'nearest',\n        minFilter: 'nearest'\n      });\n\n      const uniformBindGroup = t.device.createBindGroup({\n        layout: pipeline.getBindGroupLayout(0),\n        entries: [\n        {\n          binding: 0,\n          resource: sampler\n        },\n        {\n          binding: 1,\n          resource: srcTexture.createView()\n        }]\n\n      });\n\n      const renderPassDescriptor = {\n        colorAttachments: [\n        {\n          view: ctx.getCurrentTexture().createView(),\n\n          clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store'\n        }]\n\n      };\n\n      const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, uniformBindGroup);\n      passEncoder.draw(6, 1, 0, 0);\n      passEncoder.end();\n      globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[commandEncoder.finish()]], () => t.device.queue.submit([commandEncoder.finish()]));\n    }\n\n    function DrawVertexColor(ctx) {\n      const pipeline = t.device.createRenderPipeline({\n        layout: 'auto',\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>,\n  @location(0) fragColor : vec4<f32>,\n}\n\n@vertex\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 0.5,  0.5),\n      vec2<f32>( 0.5, -0.5),\n      vec2<f32>(-0.5, -0.5),\n      vec2<f32>( 0.5,  0.5),\n      vec2<f32>(-0.5, -0.5),\n      vec2<f32>(-0.5,  0.5));\n\n  var offset = array<vec2<f32>, 4>(\n    vec2<f32>( -0.5,  0.5),\n    vec2<f32>( 0.5, 0.5),\n    vec2<f32>(-0.5, -0.5),\n    vec2<f32>( 0.5,  -0.5));\n\n  var color = array<vec4<f32>, 4>(\n      vec4<f32>(${shaderValueStr}, 0.0, 0.0, 1.0),\n      vec4<f32>(0.0, ${shaderValueStr}, 0.0, 1.0),\n      vec4<f32>(0.0, 0.0, ${shaderValueStr}, 1.0),\n      vec4<f32>(${shaderValueStr}, ${shaderValueStr}, 0.0, 1.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex % 6u] + offset[VertexIndex / 6u], 0.0, 1.0);\n  output.fragColor = color[VertexIndex / 6u];\n  return output;\n}\n            `\n          }),\n          entryPoint: 'main'\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n@fragment\nfn main(@location(0) fragColor: vec4<f32>) -> @location(0) vec4<f32> {\n  return fragColor;\n}\n            `\n          }),\n          entryPoint: 'main',\n          targets: [{ format }]\n        },\n        primitive: {\n          topology: 'triangle-list'\n        }\n      });\n\n      const renderPassDescriptor = {\n        colorAttachments: [\n        {\n          view: ctx.getCurrentTexture().createView(),\n\n          clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store'\n        }]\n\n      };\n\n      const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.draw(24, 1, 0, 0);\n      passEncoder.end();\n      globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[commandEncoder.finish()]], () => t.device.queue.submit([commandEncoder.finish()]));\n    }\n\n    function DrawFragcoord(ctx) {\n      const halfCanvasWidthStr = (ctx.canvas.width / 2).toFixed();\n      const halfCanvasHeightStr = (ctx.canvas.height / 2).toFixed();\n      const pipeline = t.device.createRenderPipeline({\n        layout: 'auto',\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>\n}\n\n@vertex\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>( 1.0, -1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>(-1.0,  1.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  return output;\n}\n            `\n          }),\n          entryPoint: 'main'\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n@group(0) @binding(0) var mySampler: sampler;\n@group(0) @binding(1) var myTexture: texture_2d<f32>;\n\n@fragment\nfn main(@builtin(position) fragcoord: vec4<f32>) -> @location(0) vec4<f32> {\n  var coord = vec2<u32>(floor(fragcoord.xy));\n  var color = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  if (coord.x < ${halfCanvasWidthStr}u) {\n    if (coord.y < ${halfCanvasHeightStr}u) {\n      color.r = ${shaderValueStr};\n    } else {\n      color.b = ${shaderValueStr};\n    }\n  } else {\n    if (coord.y < ${halfCanvasHeightStr}u) {\n      color.g = ${shaderValueStr};\n    } else {\n      color.r = ${shaderValueStr};\n      color.g = ${shaderValueStr};\n    }\n  }\n  return color;\n}\n            `\n          }),\n          entryPoint: 'main',\n          targets: [{ format }]\n        },\n        primitive: {\n          topology: 'triangle-list'\n        }\n      });\n\n      const renderPassDescriptor = {\n        colorAttachments: [\n        {\n          view: ctx.getCurrentTexture().createView(),\n\n          clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store'\n        }]\n\n      };\n\n      const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.draw(6, 1, 0, 0);\n      passEncoder.end();\n      globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[commandEncoder.finish()]], () => t.device.queue.submit([commandEncoder.finish()]));\n    }\n\n    function FragmentTextureStore(ctx) {\n      const halfCanvasWidthStr = (ctx.canvas.width / 2).toFixed();\n      const halfCanvasHeightStr = (ctx.canvas.height / 2).toFixed();\n      const pipeline = t.device.createRenderPipeline({\n        layout: 'auto',\n        vertex: {\n          module: t.device.createShaderModule({\n            code: `\nstruct VertexOutput {\n  @builtin(position) Position : vec4<f32>\n}\n\n@vertex\nfn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n  var pos = array<vec2<f32>, 6>(\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>( 1.0, -1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>( 1.0,  1.0),\n      vec2<f32>(-1.0, -1.0),\n      vec2<f32>(-1.0,  1.0));\n\n  var output : VertexOutput;\n  output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n  return output;\n}\n            `\n          }),\n          entryPoint: 'main'\n        },\n        fragment: {\n          module: t.device.createShaderModule({\n            code: `\n@group(0) @binding(0) var outImage : texture_storage_2d<${format}, write>;\n\n@fragment\nfn main(@builtin(position) fragcoord: vec4<f32>) -> @location(0) vec4<f32> {\n  var coord = vec2<u32>(floor(fragcoord.xy));\n  var color = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  if (coord.x < ${halfCanvasWidthStr}u) {\n    if (coord.y < ${halfCanvasHeightStr}u) {\n      color.r = ${shaderValueStr};\n    } else {\n      color.b = ${shaderValueStr};\n    }\n  } else {\n    if (coord.y < ${halfCanvasHeightStr}u) {\n      color.g = ${shaderValueStr};\n    } else {\n      color.r = ${shaderValueStr};\n      color.g = ${shaderValueStr};\n    }\n  }\n  textureStore(outImage, vec2<i32>(coord), color);\n  return color;\n}\n            `\n          }),\n          entryPoint: 'main',\n          targets: [{ format }]\n        },\n        primitive: {\n          topology: 'triangle-list'\n        }\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [{ binding: 0, resource: ctx.getCurrentTexture().createView() }],\n        layout: pipeline.getBindGroupLayout(0)\n      });\n\n      const outputTexture = t.device.createTexture({\n        format,\n        size: [ctx.canvas.width, ctx.canvas.height, 1],\n        usage: GPUTextureUsage.RENDER_ATTACHMENT\n      });\n\n      const renderPassDescriptor = {\n        colorAttachments: [\n        {\n          view: outputTexture.createView(),\n\n          clearValue: { r: 0.5, g: 0.5, b: 0.5, a: 1.0 },\n          loadOp: 'clear',\n          storeOp: 'store'\n        }]\n\n      };\n\n      const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.setBindGroup(0, bg);\n      passEncoder.draw(6, 1, 0, 0);\n      passEncoder.end();\n      globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[commandEncoder.finish()]], () => t.device.queue.submit([commandEncoder.finish()]));\n    }\n\n    function ComputeWorkgroup1x1TextureStore(ctx) {\n      const halfCanvasWidthStr = (ctx.canvas.width / 2).toFixed();\n      const halfCanvasHeightStr = (ctx.canvas.height / 2).toFixed();\n      const pipeline = t.device.createComputePipeline({\n        layout: 'auto',\n        compute: {\n          module: t.device.createShaderModule({\n            code: `\n@group(0) @binding(0) var outImage : texture_storage_2d<${format}, write>;\n\n@compute @workgroup_size(1, 1, 1)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  var color = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  if (GlobalInvocationID.x < ${halfCanvasWidthStr}u) {\n    if (GlobalInvocationID.y < ${halfCanvasHeightStr}u) {\n      color.r = ${shaderValueStr};\n    } else {\n      color.b = ${shaderValueStr};\n    }\n  } else {\n    if (GlobalInvocationID.y < ${halfCanvasHeightStr}u) {\n      color.g = ${shaderValueStr};\n    } else {\n      color.r = ${shaderValueStr};\n      color.g = ${shaderValueStr};\n    }\n  }\n  textureStore(outImage, vec2<i32>(GlobalInvocationID.xy), color);\n  return;\n}\n          `\n          }),\n          entryPoint: 'main'\n        }\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [{ binding: 0, resource: ctx.getCurrentTexture().createView() }],\n        layout: pipeline.getBindGroupLayout(0)\n      });\n\n      const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bg);\n      pass.dispatchWorkgroups(ctx.canvas.width, ctx.canvas.height, 1);\n      pass.end();\n      globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n    }\n\n    function ComputeWorkgroup16x16TextureStore(ctx) {\n      const canvasWidthStr = ctx.canvas.width.toFixed();\n      const canvasHeightStr = ctx.canvas.height.toFixed();\n      const halfCanvasWidthStr = (ctx.canvas.width / 2).toFixed();\n      const halfCanvasHeightStr = (ctx.canvas.height / 2).toFixed();\n      const pipeline = t.device.createComputePipeline({\n        layout: 'auto',\n        compute: {\n          module: t.device.createShaderModule({\n            code: `\n@group(0) @binding(0) var outImage : texture_storage_2d<${format}, write>;\n\n@compute @workgroup_size(16, 16, 1)\nfn main(@builtin(global_invocation_id) GlobalInvocationID : vec3<u32>) {\n  if (GlobalInvocationID.x >= ${canvasWidthStr}u ||\n      GlobalInvocationID.y >= ${canvasHeightStr}u) {\n        return;\n  }\n  var color = vec4<f32>(0.0, 0.0, 0.0, 1.0);\n  if (GlobalInvocationID.x < ${halfCanvasWidthStr}u) {\n    if (GlobalInvocationID.y < ${halfCanvasHeightStr}u) {\n      color.r = ${shaderValueStr};\n    } else {\n      color.b = ${shaderValueStr};\n    }\n  } else {\n    if (GlobalInvocationID.y < ${halfCanvasHeightStr}u) {\n      color.g = ${shaderValueStr};\n    } else {\n      color.r = ${shaderValueStr};\n      color.g = ${shaderValueStr};\n    }\n  }\n  textureStore(outImage, vec2<i32>(GlobalInvocationID.xy), color);\n  return;\n}\n            `\n          }),\n          entryPoint: 'main'\n        }\n      });\n\n      const bg = t.device.createBindGroup({\n        entries: [{ binding: 0, resource: ctx.getCurrentTexture().createView() }],\n        layout: pipeline.getBindGroupLayout(0)\n      });\n\n      const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n      const pass = encoder.beginComputePass();\n      pass.setPipeline(pipeline);\n      pass.setBindGroup(0, bg);\n      pass.dispatchWorkgroups(\n        align(ctx.canvas.width, 16) / 16,\n        align(ctx.canvas.height, 16) / 16,\n        1\n      );\n      pass.end();\n      globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n    }\n\n    for (const { cvs, writeCanvasMethod } of targets) {\n      const ctx = cvs.getContext('webgpu');\n      assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n      let usage;\n      switch (writeCanvasMethod) {\n        case 'copyBufferToTexture':\n        case 'copyTextureToTexture':\n          usage = GPUTextureUsage.COPY_DST;\n          break;\n        case 'copyExternalImageToTexture':\n          usage = GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT;\n          break;\n        case 'DrawTextureSample':\n        case 'DrawVertexColor':\n        case 'DrawFragcoord':\n          usage = GPUTextureUsage.RENDER_ATTACHMENT;\n          break;\n        case 'FragmentTextureStore':\n        case 'ComputeWorkgroup1x1TextureStore':\n        case 'ComputeWorkgroup16x16TextureStore':\n          usage = GPUTextureUsage.STORAGE_BINDING;\n          break;\n        default:\n          unreachable();\n      }\n\n      ctx.configure({\n        device: t.device,\n        format,\n        usage\n      });\n\n      switch (writeCanvasMethod) {\n        case 'copyBufferToTexture':\n          copyBufferToTexture(ctx);\n          break;\n        case 'copyExternalImageToTexture':\n          await copyExternalImageToTexture(ctx);\n          break;\n        case 'copyTextureToTexture':\n          await copyTextureToTexture(ctx);\n          break;\n        case 'DrawTextureSample':\n          await DrawTextureSample(ctx);\n          break;\n        case 'DrawVertexColor':\n          DrawVertexColor(ctx);\n          break;\n        case 'DrawFragcoord':\n          DrawFragcoord(ctx);\n          break;\n        case 'FragmentTextureStore':\n          FragmentTextureStore(ctx);\n          break;\n        case 'ComputeWorkgroup1x1TextureStore':\n          ComputeWorkgroup1x1TextureStore(ctx);\n          break;\n        case 'ComputeWorkgroup16x16TextureStore':\n          ComputeWorkgroup16x16TextureStore(ctx);\n          break;\n        default:\n          unreachable();\n      }\n    }\n  });\n}"],"mappings":"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","ignoreList":[]}