{"version":3,"file":"canvas_composite_alpha.html.js","names":["assert","unreachable","runRefTest","run","format","alphaMode","writeCanvasMethod","t","module","device","createShaderModule","code","document","querySelectorAll","forEach","canvas","ctx","getContext","GPUCanvasContext","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_DST","configure","kBlendStateSourceOver","color","srcFactor","dstFactor","operation","alpha","pipeline","createRenderPipeline","layout","vertex","entryPoint","fragment","targets","blend","premultiplied","opaque","undefined","primitive","topology","renderTarget","getCurrentTexture","createTexture","size","width","height","COPY_SRC","renderPassDescriptor","colorAttachments","view","createView","clearValue","r","g","b","a","loadOp","storeOp","commandEncoder","globalThis","_TRAMPOLINE_","createCommandEncoder","passEncoder","beginRenderPass","setPipeline","draw","end","copyTextureToTexture","texture","queue","submit","finish"],"sources":["../../../../src/webgpu/web_platform/reftests/canvas_composite_alpha.html.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { assert, unreachable } from '../../../common/util/util.js';import { runRefTest } from './gpu_ref_test.js';\n\n\n\nexport function run(\nformat,\nalphaMode,\nwriteCanvasMethod)\n{\n  runRefTest((t) => {\n    const module = t.device.createShaderModule({\n      code: `\nstruct VertexOutput {\n@builtin(position) Position : vec4<f32>,\n@location(0) fragColor : vec4<f32>,\n}\n\n@vertex\nfn mainVS(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\nvar pos = array<vec2<f32>, 6>(\n    vec2<f32>( 0.75,  0.75),\n    vec2<f32>( 0.75, -0.75),\n    vec2<f32>(-0.75, -0.75),\n    vec2<f32>( 0.75,  0.75),\n    vec2<f32>(-0.75, -0.75),\n    vec2<f32>(-0.75,  0.75));\n\nvar offset = array<vec2<f32>, 4>(\nvec2<f32>( -0.25,  0.25),\nvec2<f32>( 0.25, 0.25),\nvec2<f32>(-0.25, -0.25),\nvec2<f32>( 0.25,  -0.25));\n\n// Alpha channel value is set to 0.5 regardless of the canvas alpha mode.\n// For 'opaque' mode, it shouldn't affect the end result, as the alpha channel should always get cleared to 1.0.\nvar color = array<vec4<f32>, 4>(\n    vec4<f32>(0.4, 0.0, 0.0, 0.5),\n    vec4<f32>(0.0, 0.4, 0.0, 0.5),\n    vec4<f32>(0.0, 0.0, 0.4, 0.5),\n    vec4<f32>(0.4, 0.4, 0.0, 0.5)); // 0.4 -> 0x66\n\nvar output : VertexOutput;\noutput.Position = vec4<f32>(pos[VertexIndex % 6u] + offset[VertexIndex / 6u], 0.0, 1.0);\noutput.fragColor = color[VertexIndex / 6u];\nreturn output;\n}\n\n@fragment\nfn mainFS(@location(0) fragColor: vec4<f32>) -> @location(0) vec4<f32> {\nreturn fragColor;\n}\n      `\n    });\n\n    document.querySelectorAll('canvas').forEach((canvas) => {\n      const ctx = canvas.getContext('webgpu');\n      assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n      switch (format) {\n        case 'bgra8unorm':\n        case 'bgra8unorm-srgb':\n        case 'rgba8unorm':\n        case 'rgba8unorm-srgb':\n        case 'rgba16float':\n          break;\n        default:\n          unreachable();\n      }\n\n      let usage = 0;\n      switch (writeCanvasMethod) {\n        case 'draw':\n          usage = GPUTextureUsage.RENDER_ATTACHMENT;\n          break;\n        case 'copy':\n          usage = GPUTextureUsage.COPY_DST;\n          break;\n      }\n      ctx.configure({\n        device: t.device,\n        format,\n        usage,\n        alphaMode\n      });\n\n      // The blending behavior here is to mimic 2d context blending behavior\n      // of drawing rects in order\n      // https://drafts.fxtf.org/compositing/#porterduffcompositingoperators_srcover\n      const kBlendStateSourceOver = {\n        color: {\n          srcFactor: 'src-alpha',\n          dstFactor: 'one-minus-src-alpha',\n          operation: 'add'\n        },\n        alpha: {\n          srcFactor: 'one',\n          dstFactor: 'one-minus-src-alpha',\n          operation: 'add'\n        }\n      };\n\n      const pipeline = t.device.createRenderPipeline({\n        layout: 'auto',\n        vertex: {\n          module,\n          entryPoint: 'mainVS'\n        },\n        fragment: {\n          module,\n          entryPoint: 'mainFS',\n          targets: [\n          {\n            format,\n            blend: { premultiplied: kBlendStateSourceOver, opaque: undefined }[alphaMode]\n          }]\n\n        },\n        primitive: {\n          topology: 'triangle-list'\n        }\n      });\n\n      let renderTarget;\n      switch (writeCanvasMethod) {\n        case 'draw':\n          renderTarget = ctx.getCurrentTexture();\n          break;\n        case 'copy':\n          renderTarget = t.device.createTexture({\n            size: [ctx.canvas.width, ctx.canvas.height],\n            format,\n            usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n          });\n          break;\n      }\n      const renderPassDescriptor = {\n        colorAttachments: [\n        {\n          view: renderTarget.createView(),\n          clearValue: { r: 0.0, g: 0.0, b: 0.0, a: 0.0 },\n          loadOp: 'clear',\n          storeOp: 'store'\n        }]\n\n      };\n\n      const commandEncoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor);\n      passEncoder.setPipeline(pipeline);\n      passEncoder.draw(6, 1, 0, 0);\n      passEncoder.draw(6, 1, 6, 0);\n      passEncoder.draw(6, 1, 12, 0);\n      passEncoder.draw(6, 1, 18, 0);\n      passEncoder.end();\n\n      switch (writeCanvasMethod) {\n        case 'draw':\n          break;\n        case 'copy':\n          commandEncoder.copyTextureToTexture(\n            {\n              texture: renderTarget\n            },\n            {\n              texture: ctx.getCurrentTexture()\n            },\n            [ctx.canvas.width, ctx.canvas.height]\n          );\n          break;\n      }\n\n      globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[commandEncoder.finish()]], () => t.device.queue.submit([commandEncoder.finish()]));\n    });\n  });\n}"],"mappings":"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","ignoreList":[]}