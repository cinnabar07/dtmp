{"version":3,"file":"getCurrentTexture.spec.js","names":["description","SkipTestCase","makeTestGroup","timeout","assert","unreachable","GPUTest","kAllCanvasTypes","createCanvas","kFormat","GPUContextTest","initCanvasContext","canvasType","canvas","onscreencanvas","style","position","top","left","opacity","document","body","appendChild","trackForCleanup","close","removeChild","ctx","getContext","GPUCanvasContext","configure","device","format","usage","GPUTextureUsage","RENDER_ATTACHMENT","COPY_SRC","expectTextureDestroyed","texture","expectDestroyed","expectValidationError","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","loadOp","storeOp","end","queue","submit","finish","g","test","desc","params","u","combine","fn","t","shouldThrow","getCurrentTexture","prevTexture","currentTexture","expect","unconfigure","frameTexture","clearValue","expectSingleColor","size","width","height","exp","R","G","B","A","destroy","beginSubcases","beforeAllSubcases","OffscreenCanvas","prototype","clearTexture","Promise","resolve","frameCount","frameCheck","requestAnimationFrame","transferToImageBitmap","prevFrameCallsite","getCurrentTextureAgain","bgl","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","COMPUTE","runInNewCanvasFrame","checkGetCurrentTexture","queueMicrotask","prevTextureView","createBindGroup","layout","resource"],"sources":["../../../../src/webgpu/web_platform/canvas/getCurrentTexture.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTests for GPUCanvasContext.getCurrentTexture.\n`;import { SkipTestCase } from '../../../common/framework/fixture.js';\nimport { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { timeout } from '../../../common/util/timeout.js';\nimport { assert, unreachable } from '../../../common/util/util.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { kAllCanvasTypes, createCanvas } from '../../util/create_elements.js';\n\nconst kFormat = 'bgra8unorm';\n\nclass GPUContextTest extends GPUTest {\n  initCanvasContext(canvasType = 'onscreen') {\n    const canvas = createCanvas(this, canvasType, 2, 2);\n    if (canvasType === 'onscreen') {\n      // To make sure onscreen canvas are visible\n      const onscreencanvas = canvas;\n      onscreencanvas.style.position = 'fixed';\n      onscreencanvas.style.top = '0';\n      onscreencanvas.style.left = '0';\n      // Set it to transparent so that if multiple canvas are created, they are still visible.\n      onscreencanvas.style.opacity = '50%';\n      document.body.appendChild(onscreencanvas);\n      this.trackForCleanup({\n        close() {\n          document.body.removeChild(onscreencanvas);\n        }\n      });\n    }\n    const ctx = canvas.getContext('webgpu');\n    assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n    ctx.configure({\n      device: this.device,\n      format: kFormat,\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC\n    });\n\n    return ctx;\n  }\n\n  expectTextureDestroyed(texture, expectDestroyed = true) {\n    this.expectValidationError(() => {\n      // Try using the texture in a render pass. Because it's a canvas texture\n      // it should have RENDER_ATTACHMENT usage.\n      assert((texture.usage & GPUTextureUsage.RENDER_ATTACHMENT) !== 0);\n      const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", this.device, this.device.createCommandEncoder, [], () => this.device.createCommandEncoder());\n      const pass = encoder.beginRenderPass({\n        colorAttachments: [\n        {\n          view: texture.createView(),\n          loadOp: 'clear',\n          storeOp: 'store'\n        }]\n\n      });\n      pass.end();\n      // Submitting should generate a validation error if the texture is destroyed.\n      globalThis._TRAMPOLINE_(\"submit\", this, this.queue.submit, [[encoder.finish()]], () => this.queue.submit([encoder.finish()]));\n    }, expectDestroyed);\n  }\n}\n\nexport const g = makeTestGroup(GPUContextTest);\n\ng.test('configured').\ndesc(\n  `Checks that calling getCurrentTexture requires the context to be configured first, and\n  that each call to configure causes getCurrentTexture to return a new texture.`\n).\nparams((u) =>\nu //\n.combine('canvasType', kAllCanvasTypes)\n).\nfn((t) => {\n  const canvas = createCanvas(t, t.params.canvasType, 2, 2);\n  const ctx = canvas.getContext('webgpu');\n  assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n  // Calling getCurrentTexture prior to configuration should throw an InvalidStateError exception.\n  t.shouldThrow('InvalidStateError', () => {\n    ctx.getCurrentTexture();\n  });\n\n  // Once the context has been configured getCurrentTexture can be called.\n  ctx.configure({\n    device: t.device,\n    format: kFormat\n  });\n\n  let prevTexture = ctx.getCurrentTexture();\n\n  // Calling configure again with different values will change the texture returned.\n  ctx.configure({\n    device: t.device,\n    format: 'bgra8unorm'\n  });\n\n  let currentTexture = ctx.getCurrentTexture();\n  t.expect(prevTexture !== currentTexture);\n  prevTexture = currentTexture;\n\n  // Calling configure again with the same values will still change the texture returned.\n  ctx.configure({\n    device: t.device,\n    format: 'bgra8unorm'\n  });\n\n  currentTexture = ctx.getCurrentTexture();\n  t.expect(prevTexture !== currentTexture);\n  prevTexture = currentTexture;\n\n  // Calling getCurrentTexture after calling unconfigure should throw an InvalidStateError exception.\n  ctx.unconfigure();\n\n  t.shouldThrow('InvalidStateError', () => {\n    ctx.getCurrentTexture();\n  });\n});\n\ng.test('single_frames').\ndesc(`Checks that the value of getCurrentTexture is consistent within a single frame.`).\nparams((u) =>\nu //\n.combine('canvasType', kAllCanvasTypes)\n).\nfn((t) => {\n  const ctx = t.initCanvasContext(t.params.canvasType);\n  const frameTexture = ctx.getCurrentTexture();\n\n  // Calling getCurrentTexture a second time returns the same texture.\n  t.expect(frameTexture === ctx.getCurrentTexture());\n\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: frameTexture.createView(),\n      clearValue: [1.0, 0.0, 0.0, 1.0],\n      loadOp: 'clear',\n      storeOp: 'store'\n    }]\n\n  });\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n\n  // Calling getCurrentTexture after performing some work on the texture returns the same texture.\n  t.expect(frameTexture === ctx.getCurrentTexture());\n\n  // Ensure that getCurrentTexture does not clear the texture.\n  t.expectSingleColor(frameTexture, frameTexture.format, {\n    size: [frameTexture.width, frameTexture.height, 1],\n    exp: { R: 1, G: 0, B: 0, A: 1 }\n  });\n\n  globalThis._TRAMPOLINE_(\"destroy\", frameTexture, frameTexture.destroy, [], () => frameTexture.destroy());\n\n  // Calling getCurrentTexture after destroying the texture still returns the same texture.\n  t.expect(frameTexture === ctx.getCurrentTexture());\n});\n\ng.test('multiple_frames').\ndesc(`Checks that the value of getCurrentTexture differs across multiple frames.`).\nparams((u) =>\nu //\n.combine('canvasType', kAllCanvasTypes).\nbeginSubcases().\ncombine('clearTexture', [true, false])\n).\nbeforeAllSubcases((t) => {\n  const { canvasType } = t.params;\n  if (canvasType === 'offscreen' && !('transferToImageBitmap' in OffscreenCanvas.prototype)) {\n    throw new SkipTestCase('transferToImageBitmap not supported');\n  }\n}).\nfn((t) => {\n  const { canvasType, clearTexture } = t.params;\n\n  return new Promise((resolve) => {\n    const ctx = t.initCanvasContext(canvasType);\n    let prevTexture;\n    let frameCount = 0;\n\n    function frameCheck() {\n      const currentTexture = ctx.getCurrentTexture();\n\n      if (prevTexture) {\n        // Ensure that each frame a new texture object is returned.\n        t.expect(currentTexture !== prevTexture);\n\n        // Ensure that the texture's initial contents are transparent black.\n        t.expectSingleColor(currentTexture, currentTexture.format, {\n          size: [currentTexture.width, currentTexture.height, 1],\n          exp: { R: 0, G: 0, B: 0, A: 0 }\n        });\n      }\n\n      if (clearTexture) {\n        // Fill the texture with a non-zero color, to test that texture\n        // contents don't carry over from frame to frame.\n        const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n        const pass = encoder.beginRenderPass({\n          colorAttachments: [\n          {\n            view: currentTexture.createView(),\n            clearValue: [1.0, 0.0, 0.0, 1.0],\n            loadOp: 'clear',\n            storeOp: 'store'\n          }]\n\n        });\n        pass.end();\n        globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n      }\n\n      prevTexture = currentTexture;\n\n      if (frameCount++ < 5) {\n        // Which method will be used to begin a new \"frame\"?\n        switch (canvasType) {\n          case 'onscreen':\n            requestAnimationFrame(frameCheck);\n            break;\n          case 'offscreen':{\n              ctx.canvas.transferToImageBitmap();\n              frameCheck();\n              break;\n            }\n          default:\n            unreachable();\n        }\n      } else {\n        resolve();\n      }\n    }\n\n    // Render the first frame immediately. The rest will be triggered recursively.\n    frameCheck();\n  });\n});\n\ng.test('resize').\ndesc(`Checks the value of getCurrentTexture differs when the canvas is resized.`).\nparams((u) =>\nu //\n.combine('canvasType', kAllCanvasTypes)\n).\nfn((t) => {\n  const ctx = t.initCanvasContext(t.params.canvasType);\n  let prevTexture = ctx.getCurrentTexture();\n\n  // Trigger a resize by changing the width.\n  ctx.canvas.width = 4;\n\n  t.expectTextureDestroyed(prevTexture);\n\n  // When the canvas resizes the texture returned by getCurrentTexture should immediately begin\n  // returning a new texture matching the update dimensions.\n  let currentTexture = ctx.getCurrentTexture();\n  t.expect(prevTexture !== currentTexture);\n  t.expect(currentTexture.width === ctx.canvas.width);\n  t.expect(currentTexture.height === ctx.canvas.height);\n\n  // The width and height of the previous texture should remain unchanged.\n  t.expect(prevTexture.width === 2);\n  t.expect(prevTexture.height === 2);\n  prevTexture = currentTexture;\n\n  // Ensure that texture contents are transparent black.\n  t.expectSingleColor(currentTexture, currentTexture.format, {\n    size: [currentTexture.width, currentTexture.height, 1],\n    exp: { R: 0, G: 0, B: 0, A: 0 }\n  });\n\n  // Trigger a resize by changing the height.\n  ctx.canvas.height = 4;\n\n  // Check to ensure the texture is resized again.\n  currentTexture = ctx.getCurrentTexture();\n  t.expect(prevTexture !== currentTexture);\n  t.expect(currentTexture.width === ctx.canvas.width);\n  t.expect(currentTexture.height === ctx.canvas.height);\n  t.expect(prevTexture.width === 4);\n  t.expect(prevTexture.height === 2);\n\n  // Ensure that texture contents are transparent black.\n  t.expectSingleColor(currentTexture, currentTexture.format, {\n    size: [currentTexture.width, currentTexture.height, 1],\n    exp: { R: 0, G: 0, B: 0, A: 0 }\n  });\n\n  // HTMLCanvasElement behaves differently than OffscreenCanvas\n  if (t.params.canvasType === 'onscreen') {\n    // Ensure canvas goes back to defaults when set to negative numbers.\n    ctx.canvas.width = -1;\n    currentTexture = ctx.getCurrentTexture();\n    t.expect(currentTexture.width === 300);\n    t.expect(currentTexture.height === 4);\n\n    ctx.canvas.height = -1;\n    currentTexture = ctx.getCurrentTexture();\n    t.expect(currentTexture.width === 300);\n    t.expect(currentTexture.height === 150);\n\n    // Setting the canvas width and height values to their current values should\n    // still trigger a change in the texture.\n    prevTexture = ctx.getCurrentTexture();\n    const { width, height } = ctx.canvas;\n    ctx.canvas.width = width;\n    ctx.canvas.height = height;\n\n    t.expectTextureDestroyed(prevTexture);\n\n    currentTexture = ctx.getCurrentTexture();\n    t.expect(prevTexture !== currentTexture);\n  }\n});\n\ng.test('expiry').\ndesc(\n  `\nTest automatic WebGPU canvas texture expiry on all canvas types with the following requirements:\n- getCurrentTexture returns the same texture object until the next task:\n  - after previous frame update the rendering\n  - before current frame update the rendering\n  - in a microtask off the current frame task\n- getCurrentTexture returns a new texture object and the old texture object becomes invalid\n  as soon as possible after HTML update the rendering.\n\nTODO: test more canvas types, and ways to update the rendering\n- if on a different thread, expiry happens when the worker updates its rendering (worker \"rPAF\") OR transferToImageBitmap is called\n- [draw, transferControlToOffscreen, then canvas is displayed] on either {main thread, or transferred to worker}\n- [draw, canvas is displayed, then transferControlToOffscreen] on either {main thread, or transferred to worker}\n- reftests for the above 2 (what gets displayed when the canvas is displayed)\n- with canvas element added to DOM or not (applies to other canvas tests as well)\n  - canvas is added to DOM after being rendered\n  - canvas is already in DOM but becomes visible after being rendered\n  `\n).\nparams((u) =>\nu //\n.combine('canvasType', kAllCanvasTypes).\ncombine('prevFrameCallsite', ['runInNewCanvasFrame', 'requestAnimationFrame']).\ncombine('getCurrentTextureAgain', [true, false])\n).\nbeforeAllSubcases((t) => {\n  if (\n  t.params.prevFrameCallsite === 'requestAnimationFrame' &&\n  typeof requestAnimationFrame === 'undefined')\n  {\n    throw new SkipTestCase('requestAnimationFrame not available');\n  }\n}).\nfn((t) => {\n  const { canvasType, prevFrameCallsite, getCurrentTextureAgain } = t.params;\n  const ctx = t.initCanvasContext(t.params.canvasType);\n  // Create a bindGroupLayout to test invalid texture view usage later.\n  const bgl = t.device.createBindGroupLayout({\n    entries: [\n    {\n      binding: 0,\n      visibility: GPUShaderStage.COMPUTE,\n      texture: {}\n    }]\n\n  });\n\n  // The fn is called immediately after previous frame updating the rendering.\n  // Polyfill by calling the callback by setTimeout, in the requestAnimationFrame callback (for onscreen canvas)\n  // or after transferToImageBitmap (for offscreen canvas).\n  function runInNewCanvasFrame(fn) {\n    switch (canvasType) {\n      case 'onscreen':\n        requestAnimationFrame(() => timeout(fn));\n        break;\n      case 'offscreen':\n        // for offscreen canvas, after calling transferToImageBitmap, we are in a new frame immediately\n        ctx.canvas.transferToImageBitmap();\n        fn();\n        break;\n      default:\n        unreachable();\n    }\n  }\n\n  function checkGetCurrentTexture() {\n    // Call getCurrentTexture on previous frame.\n    const prevTexture = ctx.getCurrentTexture();\n\n    // Call getCurrentTexture immediately after the frame, the texture object should stay the same.\n    queueMicrotask(() => {\n      if (getCurrentTextureAgain) {\n        t.expect(prevTexture === ctx.getCurrentTexture());\n      }\n\n      // Call getCurrentTexture in a new frame.\n      // It should expire the previous texture object return a new texture object by the next frame by then.\n      // Call runInNewCanvasFrame in the micro task to make sure the new frame run after the getCurrentTexture in the micro task for offscreen canvas.\n      runInNewCanvasFrame(() => {\n        if (getCurrentTextureAgain) {\n          t.expect(prevTexture !== ctx.getCurrentTexture());\n        }\n\n        // Event when prevTexture expired, createView should still succeed anyway.\n        const prevTextureView = prevTexture.createView();\n        // Using the invalid view should fail if it expires.\n        t.expectValidationError(() => {\n          t.device.createBindGroup({\n            layout: bgl,\n            entries: [{ binding: 0, resource: prevTextureView }]\n          });\n        });\n      });\n    });\n  }\n\n  switch (prevFrameCallsite) {\n    case 'runInNewCanvasFrame':\n      runInNewCanvasFrame(checkGetCurrentTexture);\n      break;\n    case 'requestAnimationFrame':\n      requestAnimationFrame(checkGetCurrentTexture);\n      break;\n    default:\n      break;\n  }\n});"],"mappings":"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","ignoreList":[]}