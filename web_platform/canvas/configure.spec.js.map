{"version":3,"file":"configure.spec.js","names":["description","makeTestGroup","assert","kCanvasTextureFormats","kTextureUsages","GPUConst","kAllTextureFormats","kFeaturesForFormats","filterFormatsByFeature","viewCompatible","GPUTest","kAllCanvasTypes","createCanvas","g","test","desc","params","u","combine","fn","t","canvasType","canvas","ctx","getContext","GPUCanvasContext","configure","device","format","configuration","getConfiguration","expect","usage","GPUTextureUsage","RENDER_ATTACHMENT","viewFormats","length","colorSpace","toneMapping","mode","alphaMode","currentTexture","getCurrentTexture","dimension","width","height","depthOrArrayLayers","mipLevelCount","sampleCount","shouldThrow","unconfigure","newConfiguration","beforeAllSubcases","selectDeviceForTextureFormatOrSkipTestCase","validFormat","canvasFormat","beginSubcases","expand","usageSet","Set","usage0","usage1","add","GPUTexture","TextureUsage","encoder","globalThis","_TRAMPOLINE_","createCommandEncoder","pass","beginRenderPass","colorAttachments","view","createView","clearValue","loadOp","storeOp","end","queue","submit","finish","TEXTURE_BINDING","bgl","createBindGroupLayout","entries","binding","visibility","GPUShaderStage","FRAGMENT","texture","createBindGroup","layout","resource","STORAGE_BINDING","storageTexture","access","COPY_DST","rgbaData","Uint8Array","writeTexture","COPY_SRC","size","dstTexture","createTextureTracked","copyTextureToTexture","zeroDimension","expectValidationError","viewFormatFeature","selectDeviceOrSkipTestCase","viewFormat","skipIfTextureFormatNotSupported","compatible","isCompatibility"],"sources":["../../../../src/webgpu/web_platform/canvas/configure.spec.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/export const description = `\nTests for GPUCanvasContext.configure.\n\nTODO:\n- Test colorSpace\n- Test toneMapping\n`;import { makeTestGroup } from '../../../common/framework/test_group.js';\nimport { assert } from '../../../common/util/util.js';\nimport { kCanvasTextureFormats, kTextureUsages } from '../../capability_info.js';\nimport { GPUConst } from '../../constants.js';\nimport {\n  kAllTextureFormats,\n  kFeaturesForFormats,\n  filterFormatsByFeature,\n  viewCompatible } from\n'../../format_info.js';\nimport { GPUTest } from '../../gpu_test.js';\nimport { kAllCanvasTypes, createCanvas } from '../../util/create_elements.js';\n\nexport const g = makeTestGroup(GPUTest);\n\ng.test('defaults').\ndesc(\n  `\n    Ensure that the defaults for GPUCanvasConfiguration are correct.\n    `\n).\nparams((u) =>\nu //\n.combine('canvasType', kAllCanvasTypes)\n).\nfn((t) => {\n  const { canvasType } = t.params;\n  const canvas = createCanvas(t, canvasType, 2, 2);\n  const ctx = canvas.getContext('webgpu');\n  assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n  ctx.configure({\n    device: t.device,\n    format: 'rgba8unorm'\n  });\n\n  const configuration = ctx.getConfiguration();\n  assert(configuration !== null);\n  t.expect(configuration.device === t.device);\n  t.expect(configuration.format === 'rgba8unorm');\n  t.expect(configuration.usage === GPUTextureUsage.RENDER_ATTACHMENT);\n  t.expect(configuration.viewFormats.length === 0);\n  t.expect(configuration.colorSpace === 'srgb');\n  t.expect(configuration.toneMapping?.mode === 'standard');\n  t.expect(configuration.alphaMode === 'opaque');\n\n  const currentTexture = ctx.getCurrentTexture();\n  t.expect(currentTexture.format === 'rgba8unorm');\n  t.expect(currentTexture.usage === GPUTextureUsage.RENDER_ATTACHMENT);\n  t.expect(currentTexture.dimension === '2d');\n  t.expect(currentTexture.width === canvas.width);\n  t.expect(currentTexture.height === canvas.height);\n  t.expect(currentTexture.depthOrArrayLayers === 1);\n  t.expect(currentTexture.mipLevelCount === 1);\n  t.expect(currentTexture.sampleCount === 1);\n});\n\ng.test('device').\ndesc(\n  `\n    Ensure that configure reacts appropriately to various device states.\n    `\n).\nparams((u) =>\nu //\n.combine('canvasType', kAllCanvasTypes)\n).\nfn((t) => {\n  const { canvasType } = t.params;\n  const canvas = createCanvas(t, canvasType, 2, 2);\n  const ctx = canvas.getContext('webgpu');\n  assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n  // getConfiguration returns null before configure.\n  t.expect(ctx.getConfiguration() === null);\n\n  // Calling configure without a device should throw a TypeError.\n  t.shouldThrow('TypeError', () => {\n    ctx.configure({\n      format: 'rgba8unorm'\n    });\n  });\n\n  // Device is not configured, so getCurrentTexture will throw an InvalidStateError.\n  t.shouldThrow('InvalidStateError', () => {\n    ctx.getCurrentTexture();\n  });\n\n  // Calling configure with a device should succeed.\n  ctx.configure({\n    device: t.device,\n    format: 'rgba8unorm',\n    alphaMode: 'opaque'\n  });\n\n  // getConfiguration will succeed after configure.\n  const configuration = ctx.getConfiguration();\n  assert(configuration !== null);\n  t.expect(configuration.device === t.device);\n  t.expect(configuration.format === 'rgba8unorm');\n  t.expect(configuration.usage === GPUTextureUsage.RENDER_ATTACHMENT);\n  t.expect(configuration.viewFormats.length === 0);\n  t.expect(configuration.colorSpace === 'srgb');\n  t.expect(configuration.toneMapping?.mode === 'standard');\n  t.expect(configuration.alphaMode === 'opaque');\n\n  // getCurrentTexture will succeed with a valid device.\n  ctx.getCurrentTexture();\n\n  // Unconfiguring should cause the device to be cleared.\n  ctx.unconfigure();\n  t.shouldThrow('InvalidStateError', () => {\n    ctx.getCurrentTexture();\n  });\n\n  // getConfiguration returns null after unconfigure.\n  t.expect(ctx.getConfiguration() === null);\n\n  // Should be able to successfully configure again after unconfiguring.\n  ctx.configure({\n    device: t.device,\n    format: 'rgba8unorm',\n    alphaMode: 'premultiplied'\n  });\n  ctx.getCurrentTexture();\n\n  // getConfiguration will succeed after configure.\n  const newConfiguration = ctx.getConfiguration();\n  assert(newConfiguration !== null);\n  t.expect(newConfiguration.device === t.device);\n  t.expect(newConfiguration.format === 'rgba8unorm');\n  t.expect(newConfiguration.usage === GPUTextureUsage.RENDER_ATTACHMENT);\n  t.expect(newConfiguration.viewFormats.length === 0);\n  t.expect(newConfiguration.colorSpace === 'srgb');\n  t.expect(newConfiguration.toneMapping?.mode === 'standard');\n  t.expect(newConfiguration.alphaMode === 'premultiplied');\n});\n\ng.test('format').\ndesc(\n  `\n    Ensure that only valid texture formats are allowed when calling configure.\n    `\n).\nparams((u) =>\nu //\n.combine('canvasType', kAllCanvasTypes).\ncombine('format', kAllTextureFormats)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceForTextureFormatOrSkipTestCase(t.params.format);\n}).\nfn((t) => {\n  const { canvasType, format } = t.params;\n  const canvas = createCanvas(t, canvasType, 2, 2);\n  const ctx = canvas.getContext('webgpu');\n  assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n  // Would prefer to use kCanvasTextureFormats.includes(format), but that's giving TS errors.\n  let validFormat = false;\n  for (const canvasFormat of kCanvasTextureFormats) {\n    if (format === canvasFormat) {\n      validFormat = true;\n      break;\n    }\n  }\n\n  if (validFormat) {\n    ctx.configure({\n      device: t.device,\n      format\n    });\n    const configuration = ctx.getConfiguration();\n    t.expect(configuration.format === format);\n  } else {\n    t.shouldThrow('TypeError', () => {\n      ctx.configure({\n        device: t.device,\n        format\n      });\n    });\n  }\n});\n\ng.test('usage').\ndesc(\n  `\n    Ensure that getCurrentTexture returns a texture with the configured usages.\n    `\n).\nparams((u) =>\nu //\n.combine('canvasType', kAllCanvasTypes).\nbeginSubcases().\nexpand('usage', () => {\n  const usageSet = new Set();\n  for (const usage0 of kTextureUsages) {\n    for (const usage1 of kTextureUsages) {\n      usageSet.add(usage0 | usage1);\n    }\n  }\n  return usageSet;\n})\n).\nfn((t) => {\n  const { canvasType, usage } = t.params;\n  const canvas = createCanvas(t, canvasType, 2, 2);\n  const ctx = canvas.getContext('webgpu');\n  assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n  ctx.configure({\n    device: t.device,\n    format: 'rgba8unorm',\n    usage\n  });\n\n  const configuration = ctx.getConfiguration();\n  t.expect(configuration.usage === usage);\n\n  const currentTexture = ctx.getCurrentTexture();\n  t.expect(currentTexture instanceof GPUTexture);\n  t.expect(currentTexture.usage === usage);\n\n  // Try to use the texture with the given usage\n\n  if (usage & GPUConst.TextureUsage.RENDER_ATTACHMENT) {\n    const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n    const pass = encoder.beginRenderPass({\n      colorAttachments: [\n      {\n        view: currentTexture.createView(),\n        clearValue: [1.0, 0.0, 0.0, 1.0],\n        loadOp: 'clear',\n        storeOp: 'store'\n      }]\n\n    });\n    pass.end();\n    globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n  }\n\n  if (usage & GPUConst.TextureUsage.TEXTURE_BINDING) {\n    const bgl = t.device.createBindGroupLayout({\n      entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        texture: {}\n      }]\n\n    });\n\n    t.device.createBindGroup({\n      layout: bgl,\n      entries: [\n      {\n        binding: 0,\n        resource: currentTexture.createView()\n      }]\n\n    });\n  }\n\n  if (usage & GPUConst.TextureUsage.STORAGE_BINDING) {\n    const bgl = t.device.createBindGroupLayout({\n      entries: [\n      {\n        binding: 0,\n        visibility: GPUShaderStage.FRAGMENT,\n        storageTexture: { access: 'write-only', format: currentTexture.format }\n      }]\n\n    });\n\n    t.device.createBindGroup({\n      layout: bgl,\n      entries: [\n      {\n        binding: 0,\n        resource: currentTexture.createView()\n      }]\n\n    });\n  }\n\n  if (usage & GPUConst.TextureUsage.COPY_DST) {\n    const rgbaData = new Uint8Array([255, 0, 0, 255]);\n\n    t.device.queue.writeTexture({ texture: currentTexture }, rgbaData, {}, [1, 1, 1]);\n  }\n\n  if (usage & GPUConst.TextureUsage.COPY_SRC) {\n    const size = [currentTexture.width, currentTexture.height, 1];\n    const dstTexture = t.createTextureTracked({\n      format: currentTexture.format,\n      usage: GPUTextureUsage.COPY_DST,\n      size\n    });\n\n    const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n    encoder.copyTextureToTexture({ texture: currentTexture }, { texture: dstTexture }, size);\n    globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n  }\n});\n\ng.test('alpha_mode').\ndesc(\n  `\n    Ensure that all valid alphaMode values are allowed when calling configure.\n    `\n).\nparams((u) =>\nu //\n.combine('canvasType', kAllCanvasTypes).\nbeginSubcases().\ncombine('alphaMode', ['opaque', 'premultiplied'])\n).\nfn((t) => {\n  const { canvasType, alphaMode } = t.params;\n  const canvas = createCanvas(t, canvasType, 2, 2);\n  const ctx = canvas.getContext('webgpu');\n  assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n  ctx.configure({\n    device: t.device,\n    format: 'rgba8unorm',\n    alphaMode\n  });\n\n  const configuration = ctx.getConfiguration();\n  t.expect(configuration.alphaMode === alphaMode);\n\n  const currentTexture = ctx.getCurrentTexture();\n  t.expect(currentTexture instanceof GPUTexture);\n});\n\ng.test('size_zero_before_configure').\ndesc(`Ensure a validation error is raised in configure() if the size of the canvas is zero.`).\nparams((u) =>\nu //\n.combine('canvasType', kAllCanvasTypes).\ncombine('zeroDimension', ['width', 'height'])\n).\nfn((t) => {\n  const { canvasType, zeroDimension } = t.params;\n  const canvas = createCanvas(t, canvasType, 1, 1);\n  canvas[zeroDimension] = 0;\n  const ctx = canvas.getContext('webgpu');\n  assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n  // Validation error, the canvas size is 0 which doesn't make a valid GPUTextureDescriptor.\n  t.expectValidationError(() => {\n    ctx.configure({\n      device: t.device,\n      format: 'bgra8unorm',\n      usage: GPUTextureUsage.RENDER_ATTACHMENT\n    });\n  });\n\n  canvas[zeroDimension] = 1;\n\n  // The size being incorrect doesn't make for an invalid configuration. Now that it is fixed\n  // getting textures from the canvas should work.\n  const currentTexture = ctx.getCurrentTexture();\n\n  // Try rendering to it even!\n  const encoder = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  const pass = encoder.beginRenderPass({\n    colorAttachments: [\n    {\n      view: currentTexture.createView(),\n      clearValue: [1.0, 0.0, 0.0, 1.0],\n      loadOp: 'clear',\n      storeOp: 'store'\n    }]\n\n  });\n  pass.end();\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[encoder.finish()]], () => t.device.queue.submit([encoder.finish()]));\n});\n\ng.test('size_zero_after_configure').\ndesc(\n  `Ensure a validation error is raised after configure() if the size of the canvas becomes zero.`\n).\nparams((u) =>\nu //\n.combine('canvasType', kAllCanvasTypes).\ncombine('zeroDimension', ['width', 'height'])\n).\nfn((t) => {\n  const { canvasType, zeroDimension } = t.params;\n  const canvas = createCanvas(t, canvasType, 1, 1);\n  const ctx = canvas.getContext('webgpu');\n  assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n  ctx.configure({\n    device: t.device,\n    format: 'bgra8unorm',\n    usage: GPUTextureUsage.RENDER_ATTACHMENT\n  });\n\n  canvas[zeroDimension] = 0;\n\n  // The size is incorrect, we should be getting an error texture and a validation error.\n  let currentTexture;\n  t.expectValidationError(() => {\n    currentTexture = ctx.getCurrentTexture();\n  });\n\n  t.expect(currentTexture[zeroDimension] === 0);\n\n  // Using the texture should produce a validation error.\n  t.expectValidationError(() => {\n    currentTexture.createView();\n  });\n});\n\ng.test('viewFormats').\ndesc(\n  `Test the validation that viewFormats are compatible with the format (for all canvas format / view formats)`\n).\nparams((u) =>\nu.\ncombine('canvasType', kAllCanvasTypes).\ncombine('format', kCanvasTextureFormats).\ncombine('viewFormatFeature', kFeaturesForFormats).\nbeginSubcases().\nexpand('viewFormat', ({ viewFormatFeature }) =>\nfilterFormatsByFeature(viewFormatFeature, kAllTextureFormats)\n)\n).\nbeforeAllSubcases((t) => {\n  t.selectDeviceOrSkipTestCase([t.params.viewFormatFeature]);\n}).\nfn((t) => {\n  const { canvasType, format, viewFormat } = t.params;\n\n  t.skipIfTextureFormatNotSupported(viewFormat);\n\n  const canvas = createCanvas(t, canvasType, 1, 1);\n  const ctx = canvas.getContext('webgpu');\n  assert(ctx instanceof GPUCanvasContext, 'Failed to get WebGPU context from canvas');\n\n  const compatible = viewCompatible(t.isCompatibility, format, viewFormat);\n\n  // Test configure() produces an error if the formats aren't compatible.\n  t.expectValidationError(() => {\n    ctx.configure({\n      device: t.device,\n      format,\n      viewFormats: [viewFormat]\n    });\n  }, !compatible);\n\n  const viewFormats = ctx.getConfiguration().viewFormats;\n  t.expect(viewFormats[0] === viewFormat);\n\n  // Likewise for getCurrentTexture().\n  let currentTexture;\n  t.expectValidationError(() => {\n    currentTexture = ctx.getCurrentTexture();\n  }, !compatible);\n\n  // The returned texture is an error texture.\n  t.expectValidationError(() => {\n    currentTexture.createView();\n  }, !compatible);\n});"],"mappings":"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","ignoreList":[]}