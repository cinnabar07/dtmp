{"version":3,"file":"multisample_info.js","names":["samplePositionToFragmentPosition","pos","map","v","samplePositionsToFragmentPositions","positions","kMultisamplingTables","Map","getMultisampleFragmentOffsets","sampleCount","get"],"sources":["../../src/webgpu/multisample_info.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/ /* Data used for multisample tests */const samplePositionToFragmentPosition = (pos) =>\npos.map((v) => v / 16);\nconst samplePositionsToFragmentPositions = (\npositions) =>\npositions.map(samplePositionToFragmentPosition);\n\n// These are sample positions based on a 16x16 grid with 0,0 at the top left.\n// For example 8,8 would be a fragment coordinate of 0.5, 0.5\n// Based on: https://learn.microsoft.com/en-us/windows/win32/api/d3d11/ne-d3d11-d3d11_standard_multisample_quality_levels\nconst kMultisamplingTables = new Map([\n[1, samplePositionsToFragmentPositions([[8, 8]])],\n[\n2,\nsamplePositionsToFragmentPositions([\n[4, 4],\n[12, 12]]\n)],\n\n[\n4,\nsamplePositionsToFragmentPositions([\n[6, 2],\n[14, 6],\n[2, 10],\n[10, 14]]\n)],\n\n[\n8,\nsamplePositionsToFragmentPositions([\n[9, 5],\n[7, 11],\n[13, 9],\n[5, 3],\n[3, 13],\n[1, 7],\n[11, 15],\n[15, 1]]\n)],\n\n[\n16,\nsamplePositionsToFragmentPositions([\n[9, 9],\n[7, 5],\n[5, 10],\n[12, 7],\n\n[3, 6],\n[10, 13],\n[13, 11],\n[11, 3],\n\n[6, 14],\n[8, 1],\n[4, 2],\n[2, 12],\n\n[0, 8],\n[15, 4],\n[14, 15],\n[1, 0]]\n)]]\n\n);\n\n/**\n * For a given sampleCount returns an array of 2d fragment offsets\n * where each offset is between 0 and 1.\n */\nexport function getMultisampleFragmentOffsets(sampleCount) {\n  return kMultisamplingTables.get(sampleCount);\n}"],"mappings":";;IAAA;AACA;AACA,GAFA,CAEI,qCAAqC,MAAMA,gCAAgC,GAAGA,CAACC,GAAG,KACtFA,GAAG,CAACC,GAAG,CAAC,CAACC,CAAC,KAAKA,CAAC,GAAG,EAAE,CAAC,CACtB,MAAMC,kCAAkC,GAAGA;AAC3CC,SAAS;AACTA,SAAS,CAACH,GAAG,CAACF,gCAAgC,CAAC;;AAE/C;AACA;AACA;AACA,MAAMM,oBAAoB,GAAG,IAAIC,GAAG,CAAC;AACrC,CAAC,CAAC,EAAEH,kCAAkC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACjD;AACA,CAAC;AACDA,kCAAkC,CAAC;AACnC,CAAC,CAAC,EAAE,CAAC,CAAC;AACN,CAAC,EAAE,EAAE,EAAE,CAAC;AACR,CAAC,CAAC;;AAEF;AACA,CAAC;AACDA,kCAAkC,CAAC;AACnC,CAAC,CAAC,EAAE,CAAC,CAAC;AACN,CAAC,EAAE,EAAE,CAAC,CAAC;AACP,CAAC,CAAC,EAAE,EAAE,CAAC;AACP,CAAC,EAAE,EAAE,EAAE,CAAC;AACR,CAAC,CAAC;;AAEF;AACA,CAAC;AACDA,kCAAkC,CAAC;AACnC,CAAC,CAAC,EAAE,CAAC,CAAC;AACN,CAAC,CAAC,EAAE,EAAE,CAAC;AACP,CAAC,EAAE,EAAE,CAAC,CAAC;AACP,CAAC,CAAC,EAAE,CAAC,CAAC;AACN,CAAC,CAAC,EAAE,EAAE,CAAC;AACP,CAAC,CAAC,EAAE,CAAC,CAAC;AACN,CAAC,EAAE,EAAE,EAAE,CAAC;AACR,CAAC,EAAE,EAAE,CAAC,CAAC;AACP,CAAC,CAAC;;AAEF;AACA,EAAE;AACFA,kCAAkC,CAAC;AACnC,CAAC,CAAC,EAAE,CAAC,CAAC;AACN,CAAC,CAAC,EAAE,CAAC,CAAC;AACN,CAAC,CAAC,EAAE,EAAE,CAAC;AACP,CAAC,EAAE,EAAE,CAAC,CAAC;;AAEP,CAAC,CAAC,EAAE,CAAC,CAAC;AACN,CAAC,EAAE,EAAE,EAAE,CAAC;AACR,CAAC,EAAE,EAAE,EAAE,CAAC;AACR,CAAC,EAAE,EAAE,CAAC,CAAC;;AAEP,CAAC,CAAC,EAAE,EAAE,CAAC;AACP,CAAC,CAAC,EAAE,CAAC,CAAC;AACN,CAAC,CAAC,EAAE,CAAC,CAAC;AACN,CAAC,CAAC,EAAE,EAAE,CAAC;;AAEP,CAAC,CAAC,EAAE,CAAC,CAAC;AACN,CAAC,EAAE,EAAE,CAAC,CAAC;AACP,CAAC,EAAE,EAAE,EAAE,CAAC;AACR,CAAC,CAAC,EAAE,CAAC,CAAC;AACN,CAAC,CAAC;;AAEF,CAAC;;AAED;AACA;AACA;AACA;AACA,OAAO,SAASI,6BAA6BA,CAACC,WAAW,EAAE;EACzD,OAAOH,oBAAoB,CAACI,GAAG,CAACD,WAAW,CAAC;AAC9C","ignoreList":[]}