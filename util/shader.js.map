{"version":3,"file":"shader.js","names":["assert","unreachable","kDefaultVertexShaderCode","kDefaultFragmentShaderCode","kFullscreenQuadVertexShaderCode","kPlainTypeInfo","i32","suffix","fractionDigits","u32","f32","getPlainTypeInfo","sampleType","getFragmentShaderCodeWithOutput","outputs","fragDepth","dualSourceBlending","length","value","toFixed","resultStrings","outputStructString","push","i","o","plainType","outputType","v","values","map","n","componentCount","join","kValidShaderStages","getShaderWithEntryPoint","shaderStage","entryPoint","code"],"sources":["../../../src/webgpu/util/shader.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { assert, unreachable } from '../../common/util/util.js';export const kDefaultVertexShaderCode = `\n@vertex fn main() -> @builtin(position) vec4<f32> {\n  return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n}\n`;\n\nexport const kDefaultFragmentShaderCode = `\n@fragment fn main() -> @location(0) vec4<f32>  {\n  return vec4<f32>(1.0, 1.0, 1.0, 1.0);\n}`;\n\n// MAINTENANCE_TODO(#3344): deduplicate fullscreen quad shader code.\nexport const kFullscreenQuadVertexShaderCode = `\n  struct VertexOutput {\n    @builtin(position) Position : vec4<f32>\n  };\n\n  @vertex fn main(@builtin(vertex_index) VertexIndex : u32) -> VertexOutput {\n    var pos = array<vec2<f32>, 6>(\n        vec2<f32>( 1.0,  1.0),\n        vec2<f32>( 1.0, -1.0),\n        vec2<f32>(-1.0, -1.0),\n        vec2<f32>( 1.0,  1.0),\n        vec2<f32>(-1.0, -1.0),\n        vec2<f32>(-1.0,  1.0));\n\n    var output : VertexOutput;\n    output.Position = vec4<f32>(pos[VertexIndex], 0.0, 1.0);\n    return output;\n  }\n`;\n\nconst kPlainTypeInfo = {\n  i32: {\n    suffix: '',\n    fractionDigits: 0\n  },\n  u32: {\n    suffix: 'u',\n    fractionDigits: 0\n  },\n  f32: {\n    suffix: '',\n    fractionDigits: 4\n  }\n};\n\n/**\n *\n * @param sampleType sampleType of texture format\n * @returns plain type compatible of the sampleType\n */\nexport function getPlainTypeInfo(sampleType) {\n  switch (sampleType) {\n    case 'sint':\n      return 'i32';\n    case 'uint':\n      return 'u32';\n    case 'float':\n    case 'unfilterable-float':\n    case 'depth':\n      return 'f32';\n    default:\n      unreachable();\n  }\n}\n\n/**\n * Build a fragment shader based on output value and types\n * e.g. write to color target 0 a `vec4<f32>(1.0, 0.0, 1.0, 1.0)` and color target 2 a `vec2<u32>(1, 2)`\n * ```\n * outputs: [\n *   {\n *     values: [1, 0, 1, 1],,\n *     plainType: 'f32',\n *     componentCount: 4,\n *   },\n *   null,\n *   {\n *     values: [1, 2],\n *     plainType: 'u32',\n *     componentCount: 2,\n *   },\n * ]\n * ```\n *\n * return:\n * ```\n * struct Outputs {\n *     @location(0) o1 : vec4<f32>,\n *     @location(2) o3 : vec2<u32>,\n * }\n * @fragment fn main() -> Outputs {\n *     return Outputs(vec4<f32>(1.0, 0.0, 1.0, 1.0), vec4<u32>(1, 2));\n * }\n * ```\n *\n * If fragDepth is given there will be an extra @builtin(frag_depth) output with the specified value assigned.\n *\n * @param outputs the shader outputs for each location attribute\n * @param fragDepth the shader outputs frag_depth value (optional)\n * @returns the fragment shader string\n */\nexport function getFragmentShaderCodeWithOutput(\noutputs,\n\n\n\n\nfragDepth = null,\ndualSourceBlending = false)\n{\n  if (outputs.length === 0) {\n    if (fragDepth) {\n      return `\n        @fragment fn main() -> @builtin(frag_depth) f32 {\n          return ${fragDepth.value.toFixed(kPlainTypeInfo['f32'].fractionDigits)};\n        }`;\n    }\n    return `\n        @fragment fn main() {\n        }`;\n  }\n\n  const resultStrings = [];\n  let outputStructString = '';\n\n  if (fragDepth) {\n    resultStrings.push(`${fragDepth.value.toFixed(kPlainTypeInfo['f32'].fractionDigits)}`);\n    outputStructString += `@builtin(frag_depth) depth_out: f32,\\n`;\n  }\n\n  for (let i = 0; i < outputs.length; i++) {\n    const o = outputs[i];\n    if (o === null) {\n      continue;\n    }\n\n    const plainType = o.plainType;\n    const { suffix, fractionDigits } = kPlainTypeInfo[plainType];\n\n    let outputType;\n    const v = o.values.map((n) => n.toFixed(fractionDigits));\n    switch (o.componentCount) {\n      case 1:\n        outputType = plainType;\n        resultStrings.push(`${v[0]}${suffix}`);\n        break;\n      case 2:\n        outputType = `vec2<${plainType}>`;\n        resultStrings.push(`${outputType}(${v[0]}${suffix}, ${v[1]}${suffix})`);\n        break;\n      case 3:\n        outputType = `vec3<${plainType}>`;\n        resultStrings.push(`${outputType}(${v[0]}${suffix}, ${v[1]}${suffix}, ${v[2]}${suffix})`);\n        break;\n      case 4:\n        outputType = `vec4<${plainType}>`;\n        resultStrings.push(\n          `${outputType}(${v[0]}${suffix}, ${v[1]}${suffix}, ${v[2]}${suffix}, ${v[3]}${suffix})`\n        );\n        break;\n      default:\n        unreachable();\n    }\n\n    if (dualSourceBlending) {\n      assert(i === 0 && outputs.length === 1);\n      outputStructString += `\n          @location(0) @blend_src(0) o0 : ${outputType},\n          @location(0) @blend_src(1) o0_blend : ${outputType},\n      `;\n      resultStrings.push(resultStrings[0]);\n      break;\n    } else {\n      outputStructString += `@location(${i}) o${i} : ${outputType},\\n`;\n    }\n  }\n\n  return `\n    ${dualSourceBlending ? 'enable dual_source_blending;' : ''}\n\n    struct Outputs {\n      ${outputStructString}\n    }\n\n    @fragment fn main() -> Outputs {\n        return Outputs(${resultStrings.join(',')});\n    }`;\n}\n\nexport const kValidShaderStages = ['compute', 'vertex', 'fragment'];\n\n\n\n/**\n * Return a foo shader of the given stage with the given entry point\n * @param shaderStage\n * @param entryPoint\n * @returns the shader string\n */\nexport function getShaderWithEntryPoint(shaderStage, entryPoint) {\n  let code;\n  switch (shaderStage) {\n    case 'compute':{\n        code = `@compute @workgroup_size(1) fn ${entryPoint}() {}`;\n        break;\n      }\n    case 'vertex':{\n        code = `\n      @vertex fn ${entryPoint}() -> @builtin(position) vec4<f32> {\n        return vec4<f32>(0.0, 0.0, 0.0, 1.0);\n      }`;\n        break;\n      }\n    case 'fragment':{\n        code = `\n      @fragment fn ${entryPoint}() -> @location(0) vec4<f32> {\n        return vec4<f32>(0.0, 1.0, 0.0, 1.0);\n      }`;\n        break;\n      }\n    case 'empty':\n    default:{\n        code = '';\n        break;\n      }\n  }\n  return code;\n}"],"mappings":"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","ignoreList":[]}