{"version":3,"file":"compare.js","names":["getIsBuildingDataCache","Colors","assert","unreachable","deserializeExpectation","serializeExpectation","toComparator","ArrayValue","isFloatValue","isScalarValue","MatrixValue","VectorValue","FPInterval","SerializedComparatorKind","serializeComparatorKind","s","value","writeU8","AnyOf","SkipUndefined","AlwaysPass","deserializeComparatorKind","kind","readU8","compareValue","got","expected","gTy","type","eTy","bothFloatTypes","matched","red","toString","g","e","isFloat","green","gLen","elements","length","eLen","every","_","i","compare","gCols","cols","eCols","gRows","rows","eRows","c","j","Error","compareInterval","contains","compareVector","elementType","results","map","idx","match","index","failures","filter","v","expected_string","convertArrayToString","m","join","compareMatrix","expected_strings","Array","forEach","r","anyOf","expectations","failed","Set","cmp","add","data","skipUndefined","expectation","undefined","alwaysPass","msg","serializeComparator","writeArray","writeCond","if_true","if_false","writeString","deserializeComparator","readArray","readCond","readString"],"sources":["../../../src/webgpu/util/compare.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { getIsBuildingDataCache } from '../../common/framework/data_cache.js';import { Colors } from '../../common/util/colors.js';import { assert, unreachable } from '../../common/util/util.js';\nimport {\n  deserializeExpectation,\n  serializeExpectation } from\n'../shader/execution/expression/case_cache.js';\nimport { toComparator } from '../shader/execution/expression/expectation.js';\n\n\nimport {\n  ArrayValue,\n  isFloatValue,\n  isScalarValue,\n  MatrixValue,\n\n\n  VectorValue } from\n'./conversion.js';\nimport { FPInterval } from './floating_point.js';\n\n/** Comparison describes the result of a Comparator function. */\n\n\n\n\n\n\n// All Comparators must be serializable to be used in the CaseCache.\n// New Comparators should add a new entry to SerializableComparatorKind and\n// define functionality in serialize/deserializeComparator as needed.\n//\n// 'value' and 'packed' are internal framework Comparators that exist, so that\n// the whole Case type hierarchy doesn't need to be split into Serializable vs\n// non-Serializable paths. Passing them into the CaseCache will cause a runtime\n// error.\n// 'value' and 'packed' should never be used in .spec.ts files.\n//\n\n\n\n\n\n/** Comparator is a function that compares whether the provided value matches an expectation. */\n\n\n\n\n\n\n/** SerializedComparator is an enum of all the possible serialized comparator types. */var\nSerializedComparatorKind = /*#__PURE__*/function (SerializedComparatorKind) {SerializedComparatorKind[SerializedComparatorKind[\"AnyOf\"] = 0] = \"AnyOf\";SerializedComparatorKind[SerializedComparatorKind[\"SkipUndefined\"] = 1] = \"SkipUndefined\";SerializedComparatorKind[SerializedComparatorKind[\"AlwaysPass\"] = 2] = \"AlwaysPass\";return SerializedComparatorKind;}(SerializedComparatorKind || {});\n\n\n\n\n\n/** serializeComparatorKind() serializes a ComparatorKind to a BinaryStream */\nfunction serializeComparatorKind(s, value) {\n  switch (value) {\n    case 'anyOf':\n      return s.writeU8(SerializedComparatorKind.AnyOf);\n    case 'skipUndefined':\n      return s.writeU8(SerializedComparatorKind.SkipUndefined);\n    case 'alwaysPass':\n      return s.writeU8(SerializedComparatorKind.AlwaysPass);\n  }\n}\n\n/** deserializeComparatorKind() deserializes a ComparatorKind from a BinaryStream */\nfunction deserializeComparatorKind(s) {\n  const kind = s.readU8();\n  switch (kind) {\n    case SerializedComparatorKind.AnyOf:\n      return 'anyOf';\n    case SerializedComparatorKind.SkipUndefined:\n      return 'skipUndefined';\n    case SerializedComparatorKind.AlwaysPass:\n      return 'alwaysPass';\n    default:\n      unreachable(`invalid serialized ComparatorKind: ${kind}`);\n  }\n}\n\n/**\n * compares 'got' Value  to 'expected' Value, returning the Comparison information.\n * @param got the Value obtained from the test\n * @param expected the expected Value\n * @returns the comparison results\n */\n// NOTE: This function does not use objectEquals, since that does not handle FP\n// specific corners cases correctly, i.e. that f64/f32/f16 are all considered\n// the same type for this comparison.\nfunction compareValue(got, expected) {\n  {\n    // Check types\n    const gTy = got.type;\n    const eTy = expected.type;\n    const bothFloatTypes = isFloatValue(got) && isFloatValue(expected);\n    if (gTy !== eTy && !bothFloatTypes) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `${Colors.red(eTy.toString())}(${expected})`\n      };\n    }\n  }\n\n  if (isScalarValue(got)) {\n    const g = got;\n    const e = expected;\n    const isFloat = g.type.kind === 'f64' || g.type.kind === 'f32' || g.type.kind === 'f16';\n    const matched =\n    isFloat && g.value === e.value || !isFloat && g.value === e.value;\n    return {\n      matched,\n      got: g.toString(),\n      expected: matched ? Colors.green(e.toString()) : Colors.red(e.toString())\n    };\n  }\n\n  if (got instanceof VectorValue || got instanceof ArrayValue) {\n    const e = expected;\n    const gLen = got.elements.length;\n    const eLen = e.elements.length;\n    let matched = gLen === eLen;\n    if (matched) {\n      // Iterating and calling compare instead of just using objectEquals to use the FP specific logic from above\n      matched = got.elements.every((_, i) => {\n        return compare(got.elements[i], e.elements[i]).matched;\n      });\n    }\n\n    return {\n      matched,\n      got: `${got.toString()}`,\n      expected: matched ? Colors.green(e.toString()) : Colors.red(e.toString())\n    };\n  }\n\n  if (got instanceof MatrixValue) {\n    const e = expected;\n    const gCols = got.type.cols;\n    const eCols = e.type.cols;\n    const gRows = got.type.rows;\n    const eRows = e.type.rows;\n    let matched = gCols === eCols && gRows === eRows;\n    if (matched) {\n      // Iterating and calling compare instead of just using objectEquals to use the FP specific logic from above\n      matched = got.elements.every((c, i) => {\n        return c.every((_, j) => {\n          return compare(got.elements[i][j], e.elements[i][j]).matched;\n        });\n      });\n    }\n\n    return {\n      matched,\n      got: `${got.toString()}`,\n      expected: matched ? Colors.green(e.toString()) : Colors.red(e.toString())\n    };\n  }\n\n  throw new Error(`unhandled type '${typeof got}'`);\n}\n\n/**\n * Tests it a 'got' Value is contained in 'expected' interval, returning the Comparison information.\n * @param got the Value obtained from the test\n * @param expected the expected FPInterval\n * @returns the comparison results\n */\nfunction compareInterval(got, expected) {\n  {\n    // Check type\n    const gTy = got.type;\n    if (!isFloatValue(got)) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `floating point value`\n      };\n    }\n  }\n\n  if (isScalarValue(got)) {\n    const g = got.value;\n    const matched = expected.contains(g);\n    return {\n      matched,\n      got: g.toString(),\n      expected: matched ? Colors.green(expected.toString()) : Colors.red(expected.toString())\n    };\n  }\n\n  // Vector results are currently not handled\n  throw new Error(`unhandled type '${typeof got}`);\n}\n\n/**\n * Tests it a 'got' Value is contained in 'expected' vector, returning the Comparison information.\n * @param got the Value obtained from the test, is expected to be a Vector\n * @param expected the expected array of FPIntervals, one for each element of the vector\n * @returns the comparison results\n */\nfunction compareVector(got, expected) {\n  // Check got type\n  if (!(got instanceof VectorValue)) {\n    return {\n      matched: false,\n      got: `${Colors.red((typeof got).toString())}(${got})`,\n      expected: `Vector`\n    };\n  }\n\n  // Check element type\n  {\n    const gTy = got.type.elementType;\n    if (!isFloatValue(got.elements[0])) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `floating point elements`\n      };\n    }\n  }\n\n  if (got.elements.length !== expected.length) {\n    return {\n      matched: false,\n      got: `Vector of ${got.elements.length} elements`,\n      expected: `${expected.length} elements`\n    };\n  }\n\n  const results = got.elements.map((_, idx) => {\n    const g = got.elements[idx].value;\n    return { match: expected[idx].contains(g), index: idx };\n  });\n\n  const failures = results.filter((v) => !v.match).map((v) => v.index);\n  if (failures.length !== 0) {\n    const expected_string = expected.map((v, idx) =>\n    idx in failures ? Colors.red(`[${v}]`) : Colors.green(`[${v}]`)\n    );\n    return {\n      matched: false,\n      got: `[${got.elements}]`,\n      expected: `[${expected_string}]`\n    };\n  }\n\n  return {\n    matched: true,\n    got: `[${got.elements}]`,\n    expected: `[${Colors.green(expected.toString())}]`\n  };\n}\n\n// Utility to get arround not being able to nest `` blocks\nfunction convertArrayToString(m) {\n  return `[${m.join(',')}]`;\n}\n\n/**\n * Tests it a 'got' Value is contained in 'expected' matrix, returning the Comparison information.\n * @param got the Value obtained from the test, is expected to be a Matrix\n * @param expected the expected array of array of FPIntervals, representing a column-major matrix\n * @returns the comparison results\n */\nfunction compareMatrix(got, expected) {\n  // Check got type\n  if (!(got instanceof MatrixValue)) {\n    return {\n      matched: false,\n      got: `${Colors.red((typeof got).toString())}(${got})`,\n      expected: `Matrix`\n    };\n  }\n\n  // Check element type\n  {\n    const gTy = got.type.elementType;\n    if (!isFloatValue(got.elements[0][0])) {\n      return {\n        matched: false,\n        got: `${Colors.red(gTy.toString())}(${got})`,\n        expected: `floating point elements`\n      };\n    }\n  }\n\n  // Check matrix dimensions\n  {\n    const gCols = got.elements.length;\n    const gRows = got.elements[0].length;\n    const eCols = expected.length;\n    const eRows = expected[0].length;\n\n    if (gCols !== eCols || gRows !== eRows) {\n      assert(false);\n      return {\n        matched: false,\n        got: `Matrix of ${gCols}x${gRows} elements`,\n        expected: `Matrix of ${eCols}x${eRows} elements`\n      };\n    }\n  }\n\n  // Check that got values fall in expected intervals\n  let matched = true;\n  const expected_strings = [...Array(got.elements.length)].map((_) => [\n  ...Array(got.elements[0].length)]\n  );\n\n  got.elements.forEach((c, i) => {\n    c.forEach((r, j) => {\n      const g = r.value;\n      if (expected[i][j].contains(g)) {\n        expected_strings[i][j] = Colors.green(`[${expected[i][j]}]`);\n      } else {\n        matched = false;\n        expected_strings[i][j] = Colors.red(`[${expected[i][j]}]`);\n      }\n    });\n  });\n\n  return {\n    matched,\n    got: convertArrayToString(got.elements.map(convertArrayToString)),\n    expected: convertArrayToString(expected_strings.map(convertArrayToString))\n  };\n}\n\n/**\n * compare() compares 'got' to 'expected', returning the Comparison information.\n * @param got the result obtained from the test\n * @param expected the expected result\n * @returns the comparison results\n */\nexport function compare(\ngot,\nexpected)\n{\n  if (expected instanceof Array) {\n    if (expected[0] instanceof Array) {\n      expected = expected;\n      return compareMatrix(got, expected);\n    } else {\n      expected = expected;\n      return compareVector(got, expected);\n    }\n  }\n\n  if (expected instanceof FPInterval) {\n    return compareInterval(got, expected);\n  }\n\n  return compareValue(got, expected);\n}\n\n/** @returns a Comparator that checks whether a test value matches any of the provided options */\nexport function anyOf(...expectations) {\n  const c = {\n    compare: (got) => {\n      const failed = new Set();\n      for (const e of expectations) {\n        const cmp = toComparator(e).compare(got);\n        if (cmp.matched) {\n          return cmp;\n        }\n        failed.add(cmp.expected);\n      }\n      return { matched: false, got: got.toString(), expected: [...failed].join(' or ') };\n    },\n    kind: 'anyOf'\n  };\n\n  if (getIsBuildingDataCache()) {\n    // If there's an active DataCache, and it supports storing, then append the\n    // Expectations to the result, so it can be serialized.\n    c.data = expectations;\n  }\n  return c;\n}\n\n/** @returns a Comparator that skips the test if the expectation is undefined */\nexport function skipUndefined(expectation) {\n  const c = {\n    compare: (got) => {\n      if (expectation !== undefined) {\n        return toComparator(expectation).compare(got);\n      }\n      return { matched: true, got: got.toString(), expected: `Treating 'undefined' as Any` };\n    },\n    kind: 'skipUndefined'\n  };\n\n  if (expectation !== undefined && getIsBuildingDataCache()) {\n    // If there's an active DataCache, and it supports storing, then append the\n    // Expectation to the result, so it can be serialized.\n    c.data = expectation;\n  }\n  return c;\n}\n\n/**\n * @returns a Comparator that always passes, used to test situations where the\n * result of computation doesn't matter, but the fact it finishes is being\n * tested.\n */\nexport function alwaysPass(msg = 'always pass') {\n  const c = {\n    compare: (got) => {\n      return { matched: true, got: got.toString(), expected: msg };\n    },\n    kind: 'alwaysPass'\n  };\n\n  if (getIsBuildingDataCache()) {\n    // If there's an active DataCache, and it supports storing, then append the\n    // message string to the result, so it can be serialized.\n    c.data = msg;\n  }\n  return c;\n}\n\n/** serializeComparator() serializes a Comparator to a BinaryStream */\nexport function serializeComparator(s, c) {\n  serializeComparatorKind(s, c.kind);\n  switch (c.kind) {\n    case 'anyOf':\n      s.writeArray(c.data, serializeExpectation);\n      return;\n    case 'skipUndefined':\n      s.writeCond(c.data !== undefined, {\n        if_true: () => {\n          // defined data\n          serializeExpectation(s, c.data);\n        },\n        if_false: () => {\n\n          // undefined data\n        } });\n      return;\n    case 'alwaysPass':{\n        s.writeString(c.data);\n        return;\n      }\n    case 'value':\n    case 'packed':{\n        unreachable(`Serializing '${c.kind}' comparators is not allowed (${c})`);\n        break;\n      }\n  }\n  unreachable(`Unable serialize comparator '${c}'`);\n}\n\n/** deserializeComparator() deserializes a Comparator from a BinaryStream */\nexport function deserializeComparator(s) {\n  const kind = deserializeComparatorKind(s);\n  switch (kind) {\n    case 'anyOf':\n      return anyOf(...s.readArray(deserializeExpectation));\n    case 'skipUndefined':\n      return s.readCond({\n        if_true: () => {\n          // defined data\n          return skipUndefined(deserializeExpectation(s));\n        },\n        if_false: () => {\n          // undefined data\n          return skipUndefined(undefined);\n        }\n      });\n    case 'alwaysPass':\n      return alwaysPass(s.readString());\n  }\n  unreachable(`Unable deserialize comparator '${s}'`);\n}"],"mappings":"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","ignoreList":[]}