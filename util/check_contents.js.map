{"version":3,"file":"check_contents.js","names":["assert","ErrorWithExtra","iterRange","range","Float16Array","generatePrettyTable","checkElementsEqual","actual","expected","constructor","length","failedElementsFirstMaybe","undefined","failedElements","i","failedElementsFirst","failCheckElements","predicatePrinter","leftHeader","getValueForCell","index","checkElementsBetween","error","checkElementsPassPredicate","value","Math","min","max","checkElementsEqualEither","checkElementsEqualGenerated","generator","predicate","size","ctor","printAsFloat","Float32Array","Float64Array","failedElementsLast","printElementsStart","printElementsEnd","printElementsCount","numericToString","val","toPrecision","intToPaddedHex","byteLength","BYTES_PER_ELEMENT","numberPrefix","printActual","subarray","printExpected","cell","push","printFailedValueMarkers","opts","fillToWidth","msg","slice","Number","isInteger","is_negative","str","toString","padStart"],"sources":["../../../src/webgpu/util/check_contents.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/ // MAINTENANCE_TODO: The \"checkThingTrue\" naming is confusing; these must be used with `expectOK`\n// or the result is dropped on the floor. Rename these to things like `typedArrayIsOK`(??) to\n// make it clearer.\n// MAINTENANCE_TODO: Also, audit to make sure we aren't dropping any on the floor. Consider a\n// no-ignored-return lint check if we can find one that we can use.\nimport { assert,\nErrorWithExtra,\niterRange,\nrange } from\n\n\n'../../common/util/util.js';\nimport { Float16Array } from '../../external/petamoriken/float16/float16.js';\n\nimport { generatePrettyTable } from './pretty_diff_tables.js';\n\n/** Generate an expected value at `index`, to test for equality with the actual value. */\n\n/** Check whether the actual `value` at `index` is as expected. */\n\n/**\n * Provides a pretty-printing implementation for a particular CheckElementsPredicate.\n * This is an array; each element provides info to print an additional row in the error message.\n */\n\n\n\n\n\n\n\n\n\n\n/**\n * Check whether two `TypedArray`s have equal contents.\n * Returns `undefined` if the check passes, or an `Error` if not.\n */\nexport function checkElementsEqual(\nactual,\nexpected)\n{\n  assert(actual.constructor === expected.constructor, 'TypedArray type mismatch');\n  assert(\n    actual.length === expected.length,\n    `length mismatch: expected ${expected.length} got ${actual.length}`\n  );\n\n  let failedElementsFirstMaybe = undefined;\n  /** Sparse array with `true` for elements that failed. */\n  const failedElements = [];\n  for (let i = 0; i < actual.length; ++i) {\n    if (actual[i] !== expected[i]) {\n      failedElementsFirstMaybe ??= i;\n      failedElements[i] = true;\n    }\n  }\n\n  if (failedElementsFirstMaybe === undefined) {\n    return undefined;\n  }\n\n  const failedElementsFirst = failedElementsFirstMaybe;\n  return failCheckElements({\n    actual,\n    failedElements,\n    failedElementsFirst,\n    predicatePrinter: [{ leftHeader: 'expected ==', getValueForCell: (index) => expected[index] }]\n  });\n}\n\n/**\n * Check whether each value in a `TypedArray` is between the two corresponding \"expected\" values\n * (either `a(i) <= actual[i] <= b(i)` or `a(i) >= actual[i] => b(i)`).\n */\nexport function checkElementsBetween(\nactual,\nexpected)\n{\n  const error = checkElementsPassPredicate(\n    actual,\n    (index, value) =>\n    value >= Math.min(expected[0](index), expected[1](index)) &&\n    value <= Math.max(expected[0](index), expected[1](index)),\n    {\n      predicatePrinter: [\n      { leftHeader: 'between', getValueForCell: (index) => expected[0](index) },\n      { leftHeader: 'and', getValueForCell: (index) => expected[1](index) }]\n\n    }\n  );\n  // If there was an error, extend it with additional extras.\n  return error ? new ErrorWithExtra(error, () => ({ expected })) : undefined;\n}\n\n/**\n * Check whether each value in a `TypedArray` is equal to one of the two corresponding \"expected\"\n * values (either `actual[i] === a[i]` or `actual[i] === b[i]`)\n */\nexport function checkElementsEqualEither(\nactual,\nexpected)\n{\n  const error = checkElementsPassPredicate(\n    actual,\n    (index, value) => value === expected[0][index] || value === expected[1][index],\n    {\n      predicatePrinter: [\n      { leftHeader: 'either', getValueForCell: (index) => expected[0][index] },\n      { leftHeader: 'or', getValueForCell: (index) => expected[1][index] }]\n\n    }\n  );\n  // If there was an error, extend it with additional extras.\n  return error ? new ErrorWithExtra(error, () => ({ expected })) : undefined;\n}\n\n/**\n * Check whether a `TypedArray`'s contents equal the values produced by a generator function.\n * Returns `undefined` if the check passes, or an `Error` if not.\n *\n * ```text\n * Array had unexpected contents at indices 2 through 19.\n *  Starting at index 1:\n *    actual == 0x: 00 fe ff 00 01 02 03 04 05 06 07 08 09 0a 0b 0c 0d 0e 0f 00\n *    failed ->        xx xx    xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\n *  expected ==     00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00\n * ```\n *\n * ```text\n * Array had unexpected contents at indices 2 through 29.\n *  Starting at index 1:\n *    actual ==  0.000 -2.000e+100 -1.000e+100 0.000 1.000e+100 2.000e+100 3.000e+100 4.000e+100 5.000e+100 6.000e+100 7.000e+100 ...\n *    failed ->                 xx          xx               xx         xx         xx         xx         xx         xx         xx ...\n *  expected ==  0.000       0.000       0.000 0.000      0.000      0.000      0.000      0.000      0.000      0.000      0.000 ...\n * ```\n */\nexport function checkElementsEqualGenerated(\nactual,\ngenerator)\n{\n  let failedElementsFirstMaybe = undefined;\n  /** Sparse array with `true` for elements that failed. */\n  const failedElements = [];\n  for (let i = 0; i < actual.length; ++i) {\n    if (actual[i] !== generator(i)) {\n      failedElementsFirstMaybe ??= i;\n      failedElements[i] = true;\n    }\n  }\n\n  if (failedElementsFirstMaybe === undefined) {\n    return undefined;\n  }\n\n  const failedElementsFirst = failedElementsFirstMaybe;\n  const error = failCheckElements({\n    actual,\n    failedElements,\n    failedElementsFirst,\n    predicatePrinter: [{ leftHeader: 'expected ==', getValueForCell: (index) => generator(index) }]\n  });\n  // Add more extras to the error.\n  return new ErrorWithExtra(error, () => ({ generator }));\n}\n\n/**\n * Check whether a `TypedArray`'s values pass the provided predicate function.\n * Returns `undefined` if the check passes, or an `Error` if not.\n */\nexport function checkElementsPassPredicate(\nactual,\npredicate,\n{ predicatePrinter })\n{\n  let failedElementsFirstMaybe = undefined;\n  /** Sparse array with `true` for elements that failed. */\n  const failedElements = [];\n  for (let i = 0; i < actual.length; ++i) {\n    if (!predicate(i, actual[i])) {\n      failedElementsFirstMaybe ??= i;\n      failedElements[i] = true;\n    }\n  }\n\n  if (failedElementsFirstMaybe === undefined) {\n    return undefined;\n  }\n\n  const failedElementsFirst = failedElementsFirstMaybe;\n  return failCheckElements({ actual, failedElements, failedElementsFirst, predicatePrinter });\n}\n\n\n\n\n\n\n\n\n/**\n * Implements the failure case of some checkElementsX helpers above. This allows those functions to\n * implement their checks directly without too many function indirections in between.\n *\n * Note: Separating this into its own function significantly speeds up the non-error case in\n * Chromium (though this may be V8-specific behavior).\n */\nfunction failCheckElements({\n  actual,\n  failedElements,\n  failedElementsFirst,\n  predicatePrinter\n}) {\n  const size = actual.length;\n  const ctor = actual.constructor;\n  const printAsFloat = ctor === Float16Array || ctor === Float32Array || ctor === Float64Array;\n\n  const failedElementsLast = failedElements.length - 1;\n\n  // Include one extra non-failed element at the beginning and end (if they exist), for context.\n  const printElementsStart = Math.max(0, failedElementsFirst - 1);\n  const printElementsEnd = Math.min(size, failedElementsLast + 2);\n  const printElementsCount = printElementsEnd - printElementsStart;\n\n  const numericToString = (val) => {\n    if (typeof val === 'number' && printAsFloat) {\n      return val.toPrecision(4);\n    }\n    return intToPaddedHex(val, { byteLength: ctor.BYTES_PER_ELEMENT });\n  };\n\n  const numberPrefix = printAsFloat ? '' : '0x:';\n\n  const printActual = actual.subarray(printElementsStart, printElementsEnd);\n  const printExpected = [];\n  if (predicatePrinter) {\n    for (const { leftHeader, getValueForCell: cell } of predicatePrinter) {\n      printExpected.push(\n        function* () {\n          yield* [leftHeader, ''];\n          yield* iterRange(printElementsCount, (i) => cell(printElementsStart + i));\n        }()\n      );\n    }\n  }\n\n  const printFailedValueMarkers = function* () {\n    yield* ['failed ->', ''];\n    yield* range(printElementsCount, (i) => failedElements[printElementsStart + i] ? 'xx' : '');\n  }();\n\n  const opts = {\n    fillToWidth: 120,\n    numericToString\n  };\n  const msg = `Array had unexpected contents at indices ${failedElementsFirst} through ${failedElementsLast}.\n Starting at index ${printElementsStart}:\n${generatePrettyTable(opts, [\n  ['actual ==', numberPrefix, ...printActual],\n  printFailedValueMarkers,\n  ...printExpected]\n  )}`;\n  return new ErrorWithExtra(msg, () => ({\n    actual: actual.slice()\n  }));\n}\n\n// Helper helpers\n\n/** Convert an integral `number` into a hex string, padded to the specified `byteLength`. */\nfunction intToPaddedHex(val, { byteLength }) {\n  assert(Number.isInteger(val), 'number must be integer');\n  const is_negative = typeof val === 'number' ? val < 0 : val < 0n;\n  let str = (is_negative ? -val : val).toString(16);\n  if (byteLength) str = str.padStart(byteLength * 2, '0');\n  if (is_negative) str = '-' + str;\n  return str;\n}"],"mappings":";;IAAA;AACA;AACA,GAFA,CAEI;AACJ;AACA;AACA;AACA;AACA,SAASA,MAAM,EACfC,cAAc,EACdC,SAAS;EACTC,KAAK;;;AAGL,2BAA2B;AAC3B,SAASC,YAAY,QAAQ,+CAA+C;;AAE5E,SAASC,mBAAmB,QAAQ,yBAAyB;;AAE7D;;AAEA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;AAWA;AACA;AACA;AACA;AACA,OAAO,SAASC,kBAAkBA;AAClCC,MAAM;AACNC,QAAQ;AACR;EACER,MAAM,CAACO,MAAM,CAACE,WAAW,KAAKD,QAAQ,CAACC,WAAW,EAAE,0BAA0B,CAAC;EAC/ET,MAAM;IACJO,MAAM,CAACG,MAAM,KAAKF,QAAQ,CAACE,MAAM;IACjC,6BAA6BF,QAAQ,CAACE,MAAM,QAAQH,MAAM,CAACG,MAAM;EACnE,CAAC;;EAED,IAAIC,wBAAwB,GAAGC,SAAS;EACxC;EACA,MAAMC,cAAc,GAAG,EAAE;EACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAM,CAACG,MAAM,EAAE,EAAEI,CAAC,EAAE;IACtC,IAAIP,MAAM,CAACO,CAAC,CAAC,KAAKN,QAAQ,CAACM,CAAC,CAAC,EAAE;MAC7BH,wBAAwB,KAAKG,CAAC;MAC9BD,cAAc,CAACC,CAAC,CAAC,GAAG,IAAI;IAC1B;EACF;;EAEA,IAAIH,wBAAwB,KAAKC,SAAS,EAAE;IAC1C,OAAOA,SAAS;EAClB;;EAEA,MAAMG,mBAAmB,GAAGJ,wBAAwB;EACpD,OAAOK,iBAAiB,CAAC;IACvBT,MAAM;IACNM,cAAc;IACdE,mBAAmB;IACnBE,gBAAgB,EAAE,CAAC,EAAEC,UAAU,EAAE,aAAa,EAAEC,eAAe,EAAEA,CAACC,KAAK,KAAKZ,QAAQ,CAACY,KAAK,CAAC,CAAC,CAAC;EAC/F,CAAC,CAAC;AACJ;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASC,oBAAoBA;AACpCd,MAAM;AACNC,QAAQ;AACR;EACE,MAAMc,KAAK,GAAGC,0BAA0B;IACtChB,MAAM;IACN,CAACa,KAAK,EAAEI,KAAK;IACbA,KAAK,IAAIC,IAAI,CAACC,GAAG,CAAClB,QAAQ,CAAC,CAAC,CAAC,CAACY,KAAK,CAAC,EAAEZ,QAAQ,CAAC,CAAC,CAAC,CAACY,KAAK,CAAC,CAAC;IACzDI,KAAK,IAAIC,IAAI,CAACE,GAAG,CAACnB,QAAQ,CAAC,CAAC,CAAC,CAACY,KAAK,CAAC,EAAEZ,QAAQ,CAAC,CAAC,CAAC,CAACY,KAAK,CAAC,CAAC;IACzD;MACEH,gBAAgB,EAAE;MAClB,EAAEC,UAAU,EAAE,SAAS,EAAEC,eAAe,EAAEA,CAACC,KAAK,KAAKZ,QAAQ,CAAC,CAAC,CAAC,CAACY,KAAK,CAAC,CAAC,CAAC;MACzE,EAAEF,UAAU,EAAE,KAAK,EAAEC,eAAe,EAAEA,CAACC,KAAK,KAAKZ,QAAQ,CAAC,CAAC,CAAC,CAACY,KAAK,CAAC,CAAC,CAAC;;IAEvE;EACF,CAAC;EACD;EACA,OAAOE,KAAK,GAAG,IAAIrB,cAAc,CAACqB,KAAK,EAAE,OAAO,EAAEd,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAGI,SAAS;AAC5E;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASgB,wBAAwBA;AACxCrB,MAAM;AACNC,QAAQ;AACR;EACE,MAAMc,KAAK,GAAGC,0BAA0B;IACtChB,MAAM;IACN,CAACa,KAAK,EAAEI,KAAK,KAAKA,KAAK,KAAKhB,QAAQ,CAAC,CAAC,CAAC,CAACY,KAAK,CAAC,IAAII,KAAK,KAAKhB,QAAQ,CAAC,CAAC,CAAC,CAACY,KAAK,CAAC;IAC9E;MACEH,gBAAgB,EAAE;MAClB,EAAEC,UAAU,EAAE,QAAQ,EAAEC,eAAe,EAAEA,CAACC,KAAK,KAAKZ,QAAQ,CAAC,CAAC,CAAC,CAACY,KAAK,CAAC,CAAC,CAAC;MACxE,EAAEF,UAAU,EAAE,IAAI,EAAEC,eAAe,EAAEA,CAACC,KAAK,KAAKZ,QAAQ,CAAC,CAAC,CAAC,CAACY,KAAK,CAAC,CAAC,CAAC;;IAEtE;EACF,CAAC;EACD;EACA,OAAOE,KAAK,GAAG,IAAIrB,cAAc,CAACqB,KAAK,EAAE,OAAO,EAAEd,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAGI,SAAS;AAC5E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASiB,2BAA2BA;AAC3CtB,MAAM;AACNuB,SAAS;AACT;EACE,IAAInB,wBAAwB,GAAGC,SAAS;EACxC;EACA,MAAMC,cAAc,GAAG,EAAE;EACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAM,CAACG,MAAM,EAAE,EAAEI,CAAC,EAAE;IACtC,IAAIP,MAAM,CAACO,CAAC,CAAC,KAAKgB,SAAS,CAAChB,CAAC,CAAC,EAAE;MAC9BH,wBAAwB,KAAKG,CAAC;MAC9BD,cAAc,CAACC,CAAC,CAAC,GAAG,IAAI;IAC1B;EACF;;EAEA,IAAIH,wBAAwB,KAAKC,SAAS,EAAE;IAC1C,OAAOA,SAAS;EAClB;;EAEA,MAAMG,mBAAmB,GAAGJ,wBAAwB;EACpD,MAAMW,KAAK,GAAGN,iBAAiB,CAAC;IAC9BT,MAAM;IACNM,cAAc;IACdE,mBAAmB;IACnBE,gBAAgB,EAAE,CAAC,EAAEC,UAAU,EAAE,aAAa,EAAEC,eAAe,EAAEA,CAACC,KAAK,KAAKU,SAAS,CAACV,KAAK,CAAC,CAAC,CAAC;EAChG,CAAC,CAAC;EACF;EACA,OAAO,IAAInB,cAAc,CAACqB,KAAK,EAAE,OAAO,EAAEQ,SAAS,CAAC,CAAC,CAAC,CAAC;AACzD;;AAEA;AACA;AACA;AACA;AACA,OAAO,SAASP,0BAA0BA;AAC1ChB,MAAM;AACNwB,SAAS;AACT,EAAEd,gBAAgB,CAAC,CAAC;AACpB;EACE,IAAIN,wBAAwB,GAAGC,SAAS;EACxC;EACA,MAAMC,cAAc,GAAG,EAAE;EACzB,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGP,MAAM,CAACG,MAAM,EAAE,EAAEI,CAAC,EAAE;IACtC,IAAI,CAACiB,SAAS,CAACjB,CAAC,EAAEP,MAAM,CAACO,CAAC,CAAC,CAAC,EAAE;MAC5BH,wBAAwB,KAAKG,CAAC;MAC9BD,cAAc,CAACC,CAAC,CAAC,GAAG,IAAI;IAC1B;EACF;;EAEA,IAAIH,wBAAwB,KAAKC,SAAS,EAAE;IAC1C,OAAOA,SAAS;EAClB;;EAEA,MAAMG,mBAAmB,GAAGJ,wBAAwB;EACpD,OAAOK,iBAAiB,CAAC,EAAET,MAAM,EAAEM,cAAc,EAAEE,mBAAmB,EAAEE,gBAAgB,CAAC,CAAC,CAAC;AAC7F;;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,iBAAiBA,CAAC;EACzBT,MAAM;EACNM,cAAc;EACdE,mBAAmB;EACnBE;AACF,CAAC,EAAE;EACD,MAAMe,IAAI,GAAGzB,MAAM,CAACG,MAAM;EAC1B,MAAMuB,IAAI,GAAG1B,MAAM,CAACE,WAAW;EAC/B,MAAMyB,YAAY,GAAGD,IAAI,KAAK7B,YAAY,IAAI6B,IAAI,KAAKE,YAAY,IAAIF,IAAI,KAAKG,YAAY;;EAE5F,MAAMC,kBAAkB,GAAGxB,cAAc,CAACH,MAAM,GAAG,CAAC;;EAEpD;EACA,MAAM4B,kBAAkB,GAAGb,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEZ,mBAAmB,GAAG,CAAC,CAAC;EAC/D,MAAMwB,gBAAgB,GAAGd,IAAI,CAACC,GAAG,CAACM,IAAI,EAAEK,kBAAkB,GAAG,CAAC,CAAC;EAC/D,MAAMG,kBAAkB,GAAGD,gBAAgB,GAAGD,kBAAkB;;EAEhE,MAAMG,eAAe,GAAGA,CAACC,GAAG,KAAK;IAC/B,IAAI,OAAOA,GAAG,KAAK,QAAQ,IAAIR,YAAY,EAAE;MAC3C,OAAOQ,GAAG,CAACC,WAAW,CAAC,CAAC,CAAC;IAC3B;IACA,OAAOC,cAAc,CAACF,GAAG,EAAE,EAAEG,UAAU,EAAEZ,IAAI,CAACa,iBAAiB,CAAC,CAAC,CAAC;EACpE,CAAC;;EAED,MAAMC,YAAY,GAAGb,YAAY,GAAG,EAAE,GAAG,KAAK;;EAE9C,MAAMc,WAAW,GAAGzC,MAAM,CAAC0C,QAAQ,CAACX,kBAAkB,EAAEC,gBAAgB,CAAC;EACzE,MAAMW,aAAa,GAAG,EAAE;EACxB,IAAIjC,gBAAgB,EAAE;IACpB,KAAK,MAAM,EAAEC,UAAU,EAAEC,eAAe,EAAEgC,IAAI,CAAC,CAAC,IAAIlC,gBAAgB,EAAE;MACpEiC,aAAa,CAACE,IAAI;QAChB,aAAa;UACX,OAAO,CAAClC,UAAU,EAAE,EAAE,CAAC;UACvB,OAAOhB,SAAS,CAACsC,kBAAkB,EAAE,CAAC1B,CAAC,KAAKqC,IAAI,CAACb,kBAAkB,GAAGxB,CAAC,CAAC,CAAC;QAC3E,CAAC,CAAC;MACJ,CAAC;IACH;EACF;;EAEA,MAAMuC,uBAAuB,GAAG,aAAa;IAC3C,OAAO,CAAC,WAAW,EAAE,EAAE,CAAC;IACxB,OAAOlD,KAAK,CAACqC,kBAAkB,EAAE,CAAC1B,CAAC,KAAKD,cAAc,CAACyB,kBAAkB,GAAGxB,CAAC,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;EAC7F,CAAC,CAAC,CAAC;;EAEH,MAAMwC,IAAI,GAAG;IACXC,WAAW,EAAE,GAAG;IAChBd;EACF,CAAC;EACD,MAAMe,GAAG,GAAG,4CAA4CzC,mBAAmB,YAAYsB,kBAAkB;AAC3G,qBAAqBC,kBAAkB;AACvC,EAAEjC,mBAAmB,CAACiD,IAAI,EAAE;EAC1B,CAAC,WAAW,EAAEP,YAAY,EAAE,GAAGC,WAAW,CAAC;EAC3CK,uBAAuB;EACvB,GAAGH,aAAa;EAChB,CAAC,EAAE;EACH,OAAO,IAAIjD,cAAc,CAACuD,GAAG,EAAE,OAAO;IACpCjD,MAAM,EAAEA,MAAM,CAACkD,KAAK,CAAC;EACvB,CAAC,CAAC,CAAC;AACL;;AAEA;;AAEA;AACA,SAASb,cAAcA,CAACF,GAAG,EAAE,EAAEG,UAAU,CAAC,CAAC,EAAE;EAC3C7C,MAAM,CAAC0D,MAAM,CAACC,SAAS,CAACjB,GAAG,CAAC,EAAE,wBAAwB,CAAC;EACvD,MAAMkB,WAAW,GAAG,OAAOlB,GAAG,KAAK,QAAQ,GAAGA,GAAG,GAAG,CAAC,GAAGA,GAAG,GAAG,EAAE;EAChE,IAAImB,GAAG,GAAG,CAACD,WAAW,GAAG,CAAClB,GAAG,GAAGA,GAAG,EAAEoB,QAAQ,CAAC,EAAE,CAAC;EACjD,IAAIjB,UAAU,EAAEgB,GAAG,GAAGA,GAAG,CAACE,QAAQ,CAAClB,UAAU,GAAG,CAAC,EAAE,GAAG,CAAC;EACvD,IAAIe,WAAW,EAAEC,GAAG,GAAG,GAAG,GAAGA,GAAG;EAChC,OAAOA,GAAG;AACZ","ignoreList":[]}