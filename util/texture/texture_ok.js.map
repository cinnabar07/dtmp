{"version":3,"file":"texture_ok.js","names":["assert","ErrorWithExtra","unreachable","kTextureFormatInfo","numbersApproximatelyEqual","generatePrettyTable","numericToStringBuilder","reifyExtent3D","reifyOrigin3D","fullSubrectCoordinates","getTextureSubCopyLayout","kTexelRepresentationInfo","TexelView","makeTexelViewComparer","format","actTexelView","expTexelView","opts","maxIntDiff","maxFractionalDiff","maxDiffULPsForNormFormat","maxDiffULPsForFloatFormat","undefined","fmtIsInt","includes","fmtIsNorm","fmtIsFloat","tvc","predicate","coords","comparePerComponent","color","ulpFromZero","repr","tableRows","failedCoords","act","exp","componentOrder","map","ch","join","toleranceULPs","toPrecision","actual","expected","maxDiff","Object","keys","every","key","k","createTextureCopyForMapRead","t","source","copySize","byteLength","bytesPerRow","rowsPerImage","aspect","buffer","createBufferTracked","usage","GPUBufferUsage","COPY_DST","MAP_READ","size","cmd","globalThis","_TRAMPOLINE_","device","createCommandEncoder","copyTextureToBuffer","queue","submit","finish","findFailedPixels","subrectOrigin","subrectSize","texelCompareOptions","comparer","lowerCorner","width","height","depthOrArrayLayers","upperCorner","failedPixels","coord","x","y","z","push","Math","min","max","length","info","printAsInteger","type","depth","numericToString","componentOrderStr","printCoords","printActualBytes","Array","from","bytes","b","toString","padStart","printActualColors","pixel","printExpectedColors","printActualULPs","printExpectedULPs","fillToWidth","textureContentIsOKByT2B","copySize_","origin","mapAsync","GPUMapMode","READ","data","Uint8Array","getMappedRange","texelViewConfig","fromTextureDataByReference","failedPixelsMessage","msg","slice"],"sources":["../../../../src/webgpu/util/texture/texture_ok.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { assert, ErrorWithExtra, unreachable } from '../../../common/util/util.js';import { kTextureFormatInfo } from '../../format_info.js';\nimport { numbersApproximatelyEqual } from '../conversion.js';\nimport { generatePrettyTable, numericToStringBuilder } from '../pretty_diff_tables.js';\nimport { reifyExtent3D, reifyOrigin3D } from '../unions.js';\n\nimport { fullSubrectCoordinates } from './base.js';\nimport { getTextureSubCopyLayout } from './layout.js';\nimport { kTexelRepresentationInfo } from './texel_data.js';\nimport { TexelView } from './texel_view.js';\n\n\n\n/** Threshold options for comparing texels of different formats (norm/float/int). */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction makeTexelViewComparer(\nformat,\n{ actTexelView, expTexelView },\nopts)\n{\n  const {\n    maxIntDiff = 0,\n    maxFractionalDiff,\n    maxDiffULPsForNormFormat,\n    maxDiffULPsForFloatFormat\n  } = opts;\n\n  assert(maxIntDiff >= 0, 'threshold must be non-negative');\n  if (maxFractionalDiff !== undefined) {\n    assert(maxFractionalDiff >= 0, 'threshold must be non-negative');\n  }\n  if (maxDiffULPsForFloatFormat !== undefined) {\n    assert(maxDiffULPsForFloatFormat >= 0, 'threshold must be non-negative');\n  }\n  if (maxDiffULPsForNormFormat !== undefined) {\n    assert(maxDiffULPsForNormFormat >= 0, 'threshold must be non-negative');\n  }\n\n  const fmtIsInt = format.includes('int');\n  const fmtIsNorm = format.includes('norm');\n  const fmtIsFloat = format.includes('float');\n\n  const tvc = {};\n  if (fmtIsInt) {\n    tvc.predicate = (coords) =>\n    comparePerComponent(actTexelView.color(coords), expTexelView.color(coords), maxIntDiff);\n  } else if (fmtIsNorm && maxDiffULPsForNormFormat !== undefined) {\n    tvc.predicate = (coords) =>\n    comparePerComponent(\n      actTexelView.ulpFromZero(coords),\n      expTexelView.ulpFromZero(coords),\n      maxDiffULPsForNormFormat\n    );\n  } else if (fmtIsFloat && maxDiffULPsForFloatFormat !== undefined) {\n    tvc.predicate = (coords) =>\n    comparePerComponent(\n      actTexelView.ulpFromZero(coords),\n      expTexelView.ulpFromZero(coords),\n      maxDiffULPsForFloatFormat\n    );\n  } else if (maxFractionalDiff !== undefined) {\n    tvc.predicate = (coords) =>\n    comparePerComponent(\n      actTexelView.color(coords),\n      expTexelView.color(coords),\n      maxFractionalDiff\n    );\n  } else {\n    if (fmtIsNorm) {\n      unreachable('need maxFractionalDiff or maxDiffULPsForNormFormat to compare norm textures');\n    } else if (fmtIsFloat) {\n      unreachable('need maxFractionalDiff or maxDiffULPsForFloatFormat to compare float textures');\n    } else {\n      unreachable();\n    }\n  }\n\n  const repr = kTexelRepresentationInfo[format];\n  if (fmtIsInt) {\n    tvc.tableRows = (failedCoords) => [\n    [`tolerance ± ${maxIntDiff}`],\n    function* () {\n      yield* [` diff (act - exp)`, '==', ''];\n      for (const coords of failedCoords) {\n        const act = actTexelView.color(coords);\n        const exp = expTexelView.color(coords);\n        yield repr.componentOrder.map((ch) => act[ch] - exp[ch]).join(',');\n      }\n    }()];\n\n  } else if (\n  fmtIsNorm && maxDiffULPsForNormFormat !== undefined ||\n  fmtIsFloat && maxDiffULPsForFloatFormat !== undefined)\n  {\n    const toleranceULPs = fmtIsNorm ? maxDiffULPsForNormFormat : maxDiffULPsForFloatFormat;\n    tvc.tableRows = (failedCoords) => [\n    [`tolerance ± ${toleranceULPs} normal-ULPs`],\n    function* () {\n      yield* [` diff (act - exp) in normal-ULPs`, '==', ''];\n      for (const coords of failedCoords) {\n        const act = actTexelView.ulpFromZero(coords);\n        const exp = expTexelView.ulpFromZero(coords);\n        yield repr.componentOrder.map((ch) => act[ch] - exp[ch]).join(',');\n      }\n    }()];\n\n  } else {\n    assert(maxFractionalDiff !== undefined);\n    tvc.tableRows = (failedCoords) => [\n    [`tolerance ± ${maxFractionalDiff}`],\n    function* () {\n      yield* [` diff (act - exp)`, '==', ''];\n      for (const coords of failedCoords) {\n        const act = actTexelView.color(coords);\n        const exp = expTexelView.color(coords);\n        yield repr.componentOrder.map((ch) => (act[ch] - exp[ch]).toPrecision(4)).join(',');\n      }\n    }()];\n\n  }\n\n  return tvc;\n}\n\nfunction comparePerComponent(\nactual,\nexpected,\nmaxDiff)\n{\n  return Object.keys(actual).every((key) => {\n    const k = key;\n    const act = actual[k];\n    const exp = expected[k];\n    if (exp === undefined) return false;\n    return numbersApproximatelyEqual(act, exp, maxDiff);\n  });\n}\n\n/** Create a new mappable GPUBuffer, and copy a subrectangle of GPUTexture data into it. */\nfunction createTextureCopyForMapRead(\nt,\nsource,\ncopySize,\n{ format })\n{\n  const { byteLength, bytesPerRow, rowsPerImage } = getTextureSubCopyLayout(format, copySize, {\n    aspect: source.aspect\n  });\n\n  const buffer = t.createBufferTracked({\n    usage: GPUBufferUsage.COPY_DST | GPUBufferUsage.MAP_READ,\n    size: byteLength\n  });\n\n  const cmd = globalThis._TRAMPOLINE_(\"createCommandEncoder\", t.device, t.device.createCommandEncoder, [], () => t.device.createCommandEncoder());\n  cmd.copyTextureToBuffer(source, { buffer, bytesPerRow, rowsPerImage }, copySize);\n  globalThis._TRAMPOLINE_(\"submit\", t.device, t.device.queue.submit, [[cmd.finish()]], () => t.device.queue.submit([cmd.finish()]));\n\n  return { buffer, bytesPerRow, rowsPerImage };\n}\n\nexport function findFailedPixels(\nformat,\nsubrectOrigin,\nsubrectSize,\n{ actTexelView, expTexelView },\ntexelCompareOptions,\ncoords)\n{\n  const comparer = makeTexelViewComparer(\n    format,\n    { actTexelView, expTexelView },\n    texelCompareOptions\n  );\n\n  const lowerCorner = [subrectSize.width, subrectSize.height, subrectSize.depthOrArrayLayers];\n  const upperCorner = [0, 0, 0];\n  const failedPixels = [];\n  for (const coord of coords ?? fullSubrectCoordinates(subrectOrigin, subrectSize)) {\n    const { x, y, z } = coord;\n    if (!comparer.predicate(coord)) {\n      failedPixels.push(coord);\n      lowerCorner[0] = Math.min(lowerCorner[0], x);\n      lowerCorner[1] = Math.min(lowerCorner[1], y);\n      lowerCorner[2] = Math.min(lowerCorner[2], z);\n      upperCorner[0] = Math.max(upperCorner[0], x);\n      upperCorner[1] = Math.max(upperCorner[1], y);\n      upperCorner[2] = Math.max(upperCorner[2], z);\n    }\n  }\n  if (failedPixels.length === 0) {\n    return undefined;\n  }\n\n  const info = kTextureFormatInfo[format];\n  const repr = kTexelRepresentationInfo[format];\n  // MAINTENANCE_TODO: Print depth-stencil formats as float+int instead of float+float.\n  const printAsInteger = info.color ?\n  // For color, pick the type based on the format type\n  ['uint', 'sint'].includes(info.color.type) :\n  // Print depth as \"float\", depth-stencil as \"float,float\", stencil as \"int\".\n  !info.depth;\n  const numericToString = numericToStringBuilder(printAsInteger);\n\n  const componentOrderStr = repr.componentOrder.join(',') + ':';\n\n  const printCoords = function* () {\n    yield* [' coords', '==', 'X,Y,Z:'];\n    for (const coords of failedPixels) yield `${coords.x},${coords.y},${coords.z}`;\n  }();\n  const printActualBytes = function* () {\n    yield* [' act. texel bytes (little-endian)', '==', '0x:'];\n    for (const coords of failedPixels) {\n      yield Array.from(actTexelView.bytes(coords), (b) => b.toString(16).padStart(2, '0')).join(' ');\n    }\n  }();\n  const printActualColors = function* () {\n    yield* [' act. colors', '==', componentOrderStr];\n    for (const coords of failedPixels) {\n      const pixel = actTexelView.color(coords);\n      yield `${repr.componentOrder.map((ch) => numericToString(pixel[ch])).join(',')}`;\n    }\n  }();\n  const printExpectedColors = function* () {\n    yield* [' exp. colors', '==', componentOrderStr];\n    for (const coords of failedPixels) {\n      const pixel = expTexelView.color(coords);\n      yield `${repr.componentOrder.map((ch) => numericToString(pixel[ch])).join(',')}`;\n    }\n  }();\n  const printActualULPs = function* () {\n    yield* [' act. normal-ULPs-from-zero', '==', componentOrderStr];\n    for (const coords of failedPixels) {\n      const pixel = actTexelView.ulpFromZero(coords);\n      yield `${repr.componentOrder.map((ch) => pixel[ch]).join(',')}`;\n    }\n  }();\n  const printExpectedULPs = function* () {\n    yield* [` exp. normal-ULPs-from-zero`, '==', componentOrderStr];\n    for (const coords of failedPixels) {\n      const pixel = expTexelView.ulpFromZero(coords);\n      yield `${repr.componentOrder.map((ch) => pixel[ch]).join(',')}`;\n    }\n  }();\n\n  const opts = {\n    fillToWidth: 120,\n    numericToString\n  };\n  return `\\\n between ${lowerCorner} and ${upperCorner} inclusive:\n${generatePrettyTable(opts, [\n  printCoords,\n  printActualBytes,\n  printActualColors,\n  printExpectedColors,\n  printActualULPs,\n  printExpectedULPs,\n  ...comparer.tableRows(failedPixels)]\n  )}`;\n}\n\n/**\n * Check the contents of a GPUTexture by reading it back (with copyTextureToBuffer+mapAsync), then\n * comparing the data with the data in `expTexelView`.\n *\n * The actual and expected texture data are both converted to the \"NormalULPFromZero\" format,\n * which is a signed number representing how far the number is from zero, in ULPs, skipping\n * subnormal numbers (where ULP is defined for float, normalized, and integer formats).\n */\nexport async function textureContentIsOKByT2B(\nt,\nsource,\ncopySize_,\n{ expTexelView },\ntexelCompareOptions,\ncoords)\n{\n  const subrectOrigin = reifyOrigin3D(source.origin ?? [0, 0, 0]);\n  const subrectSize = reifyExtent3D(copySize_);\n  const format = expTexelView.format;\n\n  const { buffer, bytesPerRow, rowsPerImage } = createTextureCopyForMapRead(\n    t,\n    source,\n    subrectSize,\n    { format }\n  );\n\n  await globalThis._TRAMPOLINE_(\"mapAsync\", buffer, buffer.mapAsync, [GPUMapMode.READ], () => buffer.mapAsync(GPUMapMode.READ));\n  const data = new Uint8Array(buffer.getMappedRange());\n\n  const texelViewConfig = {\n    bytesPerRow,\n    rowsPerImage,\n    subrectOrigin,\n    subrectSize\n  };\n\n  const actTexelView = TexelView.fromTextureDataByReference(format, data, texelViewConfig);\n\n  const failedPixelsMessage = findFailedPixels(\n    format,\n    subrectOrigin,\n    subrectSize,\n    { actTexelView, expTexelView },\n    texelCompareOptions,\n    coords\n  );\n\n  if (failedPixelsMessage === undefined) {\n    return undefined;\n  }\n\n  const msg = 'Texture level had unexpected contents:\\n' + failedPixelsMessage;\n  return new ErrorWithExtra(msg, () => ({\n    expTexelView,\n    // Make a new TexelView with a copy of the data so we can unmap the buffer (debug mode only).\n    actTexelView: TexelView.fromTextureDataByReference(format, data.slice(), texelViewConfig)\n  }));\n}"],"mappings":"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","ignoreList":[]}