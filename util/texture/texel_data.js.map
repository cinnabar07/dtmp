{"version":3,"file":"texel_data.js","names":["assert","unreachable","kValue","assertInIntegerRange","float32ToFloatBits","float32ToFloat16Bits","floatAsNormalizedInteger","gammaCompress","gammaDecompress","normalizedIntegerAsFloat","packRGB9E5UFloat","floatBitsToNumber","float16BitsToFloat32","floatBitsToNormalULPFromZero","kFloat32Format","kFloat16Format","kUFloat9e5Format","numberToFloat32Bits","float32BitsToNumber","numberToFloatBits","ufloatM9E5BitsToNumber","clamp","signExtend","TexelComponent","makePerTexelComponent","components","value","values","c","applyEach","fn","Object","assign","undefined","encodeSRGB","R","G","B","kRGB","decodeSRGB","makeClampToRange","format","repr","kTexelRepresentationInfo","numericRange","perComponentRanges","range","x","component","perComponentRange","componentOrder","smallComponentDataViews","Map","getComponentDataView","byteLength","buffer","ArrayBuffer","DataView","dataView","get","set","packComponents","bitLengths","componentDataTypes","bitLengthMap","totalBitLength","length","entries","reduce","acc","componentDataTypeMap","bitOffset","type","bitLength","byteOffset","Math","floor","ceil","setUint8","setUint16","setUint32","currentValue","getUint32","mask","bitsToClearRight","bitsToClearLeft","newValue","setInt8","setInt16","setInt32","setFloat32","unpackComponentsBits","byteView","index","shortView","Uint16Array","longView","Uint32Array","getUint8","getUint16","word","makeNormalizedInfo","opt","encodeNonSRGB","n","signed","decodeNonSRGB","numberToBitsNonSRGB","bitsToNumberNonSRGB","encode","decode","numberToBits","bitsToNumber","sRGB","bitsToULPFromZero","maxValue","max","dataType","min","componentInfo","pack","unpackBits","data","finiteMin","finiteMax","makeIntegerInfo","maxUnsignedValue","decodedN","bitMask","v","makeFloatInfo","restrictedDepth","Float32Array","identity","Number","NEGATIVE_INFINITY","POSITIVE_INFINITY","f32","negative","f16","positive","kR","kRG","kRGBA","A","kBGRA","kFloat11Format","exponentBits","mantissaBits","bias","kFloat10Format","rgb10a2uint","rgb10a2unorm","rg11b10ufloat","componentsBits","rgb9e5ufloat","encoded","redMantissa","greenMantissa","blueMantissa","exponentSharedBits","depth32float","Depth","depth16unorm","depth24plus","stencil8","Stencil","getSingleDataType","infos","cur","getComponentReadbackTraits","ReadbackTypedArray","shaderType","Int32Array"],"sources":["../../../../src/webgpu/util/texture/texel_data.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { assert, unreachable } from '../../../common/util/util.js';import { kValue } from '../constants.js';\nimport {\n  assertInIntegerRange,\n  float32ToFloatBits,\n  float32ToFloat16Bits,\n  floatAsNormalizedInteger,\n  gammaCompress,\n  gammaDecompress,\n  normalizedIntegerAsFloat,\n  packRGB9E5UFloat,\n  floatBitsToNumber,\n  float16BitsToFloat32,\n  floatBitsToNormalULPFromZero,\n  kFloat32Format,\n  kFloat16Format,\n  kUFloat9e5Format,\n  numberToFloat32Bits,\n  float32BitsToNumber,\n  numberToFloatBits,\n  ufloatM9E5BitsToNumber } from\n'../conversion.js';\nimport { clamp, signExtend } from '../math.js';\n\n/** A component of a texture format: R, G, B, A, Depth, or Stencil. */\nexport let TexelComponent = /*#__PURE__*/function (TexelComponent) {TexelComponent[\"R\"] = \"R\";TexelComponent[\"G\"] = \"G\";TexelComponent[\"B\"] = \"B\";TexelComponent[\"A\"] = \"A\";TexelComponent[\"Depth\"] = \"Depth\";TexelComponent[\"Stencil\"] = \"Stencil\";return TexelComponent;}({});\n\n\n\n\n\n\n\n\n/** Arbitrary data, per component of a texel format. */\n\n\n/** How a component is encoded in its bit range of a texel format. */\n\n\n/**\n * Maps component values to component values\n * @param {PerTexelComponent<number>} components - The input components.\n * @returns {PerTexelComponent<number>} The new output components.\n */\n\n\n/**\n * Packs component values as an ArrayBuffer\n * @param {PerTexelComponent<number>} components - The input components.\n * @returns {ArrayBuffer} The packed data.\n */\n\n\n/** Unpacks component values from a Uint8Array */\n\n\n/**\n * Create a PerTexelComponent object filled with the same value for all components.\n * @param {TexelComponent[]} components - The component names.\n * @param {T} value - The value to assign to each component.\n * @returns {PerTexelComponent<T>}\n */\nfunction makePerTexelComponent(components, value) {\n  const values = {};\n  for (const c of components) {\n    values[c] = value;\n  }\n  return values;\n}\n\n/**\n * Create a function which applies clones a `PerTexelComponent<number>` and then applies the\n * function `fn` to each component of `components`.\n * @param {(value: number) => number} fn - The mapping function to apply to component values.\n * @param {TexelComponent[]} components - The component names.\n * @returns {ComponentMapFn} The map function which clones the input component values, and applies\n *                           `fn` to each of component of `components`.\n */\nfunction applyEach(\nfn,\ncomponents)\n{\n  return (values) => {\n    values = Object.assign({}, values);\n    for (const c of components) {\n      assert(values[c] !== undefined);\n      values[c] = fn(values[c], c);\n    }\n    return values;\n  };\n}\n\n/**\n * A `ComponentMapFn` for encoding sRGB.\n * @param {PerTexelComponent<number>} components - The input component values.\n * @returns {TexelComponent<number>} Gamma-compressed copy of `components`.\n */\nconst encodeSRGB = (components) => {\n  assert(\n    components.R !== undefined && components.G !== undefined && components.B !== undefined,\n    'sRGB requires all of R, G, and B components'\n  );\n  return applyEach(gammaCompress, kRGB)(components);\n};\n\n/**\n * A `ComponentMapFn` for decoding sRGB.\n * @param {PerTexelComponent<number>} components - The input component values.\n * @returns {TexelComponent<number>} Gamma-decompressed copy of `components`.\n */\nconst decodeSRGB = (components) => {\n  components = Object.assign({}, components);\n  assert(\n    components.R !== undefined && components.G !== undefined && components.B !== undefined,\n    'sRGB requires all of R, G, and B components'\n  );\n  return applyEach(gammaDecompress, kRGB)(components);\n};\n\n/**\n * Makes a `ComponentMapFn` for clamping values to the specified range.\n */\nexport function makeClampToRange(format) {\n  const repr = kTexelRepresentationInfo[format];\n  assert(repr.numericRange !== null, 'Format has unknown numericRange');\n  const perComponentRanges = repr.numericRange;\n  const range = repr.numericRange;\n\n  return applyEach((x, component) => {\n    const perComponentRange = perComponentRanges[component];\n    return clamp(x, perComponentRange ? perComponentRange : range);\n  }, repr.componentOrder);\n}\n\n// MAINTENANCE_TODO: Look into exposing this map to the test fixture so that it can be GCed at the\n// end of each test group. That would allow for caching of larger buffers (though it's unclear how\n// ofter larger buffers are used by packComponents.)\nconst smallComponentDataViews = new Map();\nfunction getComponentDataView(byteLength) {\n  if (byteLength > 32) {\n    const buffer = new ArrayBuffer(byteLength);\n    return new DataView(buffer);\n  }\n  let dataView = smallComponentDataViews.get(byteLength);\n  if (!dataView) {\n    const buffer = new ArrayBuffer(byteLength);\n    dataView = new DataView(buffer);\n    smallComponentDataViews.set(byteLength, dataView);\n  }\n  return dataView;\n}\n\n/**\n * Helper function to pack components as an ArrayBuffer.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {PerTexelComponent<number>} components - The input component values.\n * @param {number | PerTexelComponent<number>} bitLengths - The length in bits of each component.\n *   If a single number, all components are the same length, otherwise this is a dictionary of\n *   per-component bit lengths.\n * @param {ComponentDataType | PerTexelComponent<ComponentDataType>} componentDataTypes -\n *   The type of the data in `components`. If a single value, all components have the same value.\n *   Otherwise, this is a dictionary of per-component data types.\n * @returns {ArrayBuffer} The packed component data.\n */\nfunction packComponents(\ncomponentOrder,\ncomponents,\nbitLengths,\ncomponentDataTypes)\n{\n  let bitLengthMap;\n  let totalBitLength;\n  if (typeof bitLengths === 'number') {\n    bitLengthMap = makePerTexelComponent(componentOrder, bitLengths);\n    totalBitLength = bitLengths * componentOrder.length;\n  } else {\n    bitLengthMap = bitLengths;\n    totalBitLength = Object.entries(bitLengthMap).reduce((acc, [, value]) => {\n      assert(value !== undefined);\n      return acc + value;\n    }, 0);\n  }\n  assert(totalBitLength % 8 === 0);\n\n  const componentDataTypeMap =\n  typeof componentDataTypes === 'string' || componentDataTypes === null ?\n  makePerTexelComponent(componentOrder, componentDataTypes) :\n  componentDataTypes;\n\n  const dataView = getComponentDataView(totalBitLength / 8);\n  let bitOffset = 0;\n  for (const c of componentOrder) {\n    const value = components[c];\n    const type = componentDataTypeMap[c];\n    const bitLength = bitLengthMap[c];\n    assert(value !== undefined);\n    assert(type !== undefined);\n    assert(bitLength !== undefined);\n\n    const byteOffset = Math.floor(bitOffset / 8);\n    const byteLength = Math.ceil(bitLength / 8);\n    switch (type) {\n      case 'uint':\n      case 'unorm':\n        if (byteOffset === bitOffset / 8 && byteLength === bitLength / 8) {\n          switch (byteLength) {\n            case 1:\n              dataView.setUint8(byteOffset, value);\n              break;\n            case 2:\n              dataView.setUint16(byteOffset, value, true);\n              break;\n            case 4:\n              dataView.setUint32(byteOffset, value, true);\n              break;\n            default:\n              unreachable();\n          }\n        } else {\n          // Packed representations are all 32-bit and use Uint as the data type.\n          // ex.) rg10b11float, rgb10a2unorm\n          switch (dataView.byteLength) {\n            case 4:{\n                const currentValue = dataView.getUint32(0, true);\n\n                let mask = 0xffffffff;\n                const bitsToClearRight = bitOffset;\n                const bitsToClearLeft = 32 - (bitLength + bitOffset);\n\n                mask = mask >>> bitsToClearRight << bitsToClearRight;\n                mask = mask << bitsToClearLeft >>> bitsToClearLeft;\n\n                const newValue = currentValue & ~mask | value << bitOffset;\n\n                dataView.setUint32(0, newValue, true);\n                break;\n              }\n            default:\n              unreachable();\n          }\n        }\n        break;\n      case 'sint':\n      case 'snorm':\n        assert(byteOffset === bitOffset / 8 && byteLength === bitLength / 8);\n        switch (byteLength) {\n          case 1:\n            dataView.setInt8(byteOffset, value);\n            break;\n          case 2:\n            dataView.setInt16(byteOffset, value, true);\n            break;\n          case 4:\n            dataView.setInt32(byteOffset, value, true);\n            break;\n          default:\n            unreachable();\n        }\n        break;\n      case 'float':\n        assert(byteOffset === bitOffset / 8 && byteLength === bitLength / 8);\n        switch (byteLength) {\n          case 4:\n            dataView.setFloat32(byteOffset, value, true);\n            break;\n          default:\n            unreachable();\n        }\n        break;\n      case 'ufloat':\n      case null:\n        unreachable();\n    }\n\n    bitOffset += bitLength;\n  }\n\n  return dataView.buffer;\n}\n\n/**\n * Unpack substrings of bits from a Uint8Array, e.g. [8,8,8,8] or [9,9,9,5].\n */\nfunction unpackComponentsBits(\ncomponentOrder,\nbyteView,\nbitLengths)\n{\n  const components = makePerTexelComponent(componentOrder, 0);\n\n  let bitLengthMap;\n  let totalBitLength;\n  if (typeof bitLengths === 'number') {\n    let index = 0;\n    // Optimized cases for when the bit lengths are all a well aligned value.\n    switch (bitLengths) {\n      case 8:\n        for (const c of componentOrder) {\n          components[c] = byteView[index++];\n        }\n        return components;\n      case 16:{\n          const shortView = new Uint16Array(byteView.buffer, byteView.byteOffset);\n          for (const c of componentOrder) {\n            components[c] = shortView[index++];\n          }\n          return components;\n        }\n      case 32:{\n          const longView = new Uint32Array(byteView.buffer, byteView.byteOffset);\n          for (const c of componentOrder) {\n            components[c] = longView[index++];\n          }\n          return components;\n        }\n    }\n\n    bitLengthMap = makePerTexelComponent(componentOrder, bitLengths);\n    totalBitLength = bitLengths * componentOrder.length;\n  } else {\n    bitLengthMap = bitLengths;\n    totalBitLength = Object.entries(bitLengthMap).reduce((acc, [, value]) => {\n      assert(value !== undefined);\n      return acc + value;\n    }, 0);\n  }\n\n  assert(totalBitLength % 8 === 0);\n\n  const dataView = new DataView(byteView.buffer, byteView.byteOffset, byteView.byteLength);\n  let bitOffset = 0;\n  for (const c of componentOrder) {\n    const bitLength = bitLengthMap[c];\n    assert(bitLength !== undefined);\n\n    let value;\n\n    const byteOffset = Math.floor(bitOffset / 8);\n    const byteLength = Math.ceil(bitLength / 8);\n    if (byteOffset === bitOffset / 8 && byteLength === bitLength / 8) {\n      switch (byteLength) {\n        case 1:\n          value = dataView.getUint8(byteOffset);\n          break;\n        case 2:\n          value = dataView.getUint16(byteOffset, true);\n          break;\n        case 4:\n          value = dataView.getUint32(byteOffset, true);\n          break;\n        default:\n          unreachable();\n      }\n    } else {\n      // Packed representations are all 32-bit and use Uint as the data type.\n      // ex.) rg10b11float, rgb10a2unorm\n      assert(dataView.byteLength === 4);\n      const word = dataView.getUint32(0, true);\n      value = word >>> bitOffset & (1 << bitLength) - 1;\n    }\n\n    bitOffset += bitLength;\n    components[c] = value;\n  }\n\n  return components;\n}\n\n/**\n * Create an entry in `kTexelRepresentationInfo` for normalized integer texel data with constant\n * bitlength.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {number} bitLength - The number of bits in each component.\n * @param {{signed: boolean; sRGB: boolean}} opt - Boolean flags for `signed` and `sRGB`.\n */\nfunction makeNormalizedInfo(\ncomponentOrder,\nbitLength,\nopt)\n{\n  const encodeNonSRGB = applyEach(\n    (n) => floatAsNormalizedInteger(n, bitLength, opt.signed),\n    componentOrder\n  );\n  const decodeNonSRGB = applyEach(\n    (n) => normalizedIntegerAsFloat(n, bitLength, opt.signed),\n    componentOrder\n  );\n\n  const numberToBitsNonSRGB = applyEach(\n    (n) => floatAsNormalizedInteger(n, bitLength, opt.signed),\n    componentOrder\n  );\n  let bitsToNumberNonSRGB;\n  if (opt.signed) {\n    bitsToNumberNonSRGB = applyEach(\n      (n) => normalizedIntegerAsFloat(signExtend(n, bitLength), bitLength, opt.signed),\n      componentOrder\n    );\n  } else {\n    bitsToNumberNonSRGB = applyEach(\n      (n) => normalizedIntegerAsFloat(n, bitLength, opt.signed),\n      componentOrder\n    );\n  }\n\n  let encode;\n  let decode;\n  let numberToBits;\n  let bitsToNumber;\n  if (opt.sRGB) {\n    encode = (components) => encodeNonSRGB(encodeSRGB(components));\n    decode = (components) => decodeSRGB(decodeNonSRGB(components));\n    numberToBits = (components) => numberToBitsNonSRGB(encodeSRGB(components));\n    bitsToNumber = (components) => decodeSRGB(bitsToNumberNonSRGB(components));\n  } else {\n    encode = encodeNonSRGB;\n    decode = decodeNonSRGB;\n    numberToBits = numberToBitsNonSRGB;\n    bitsToNumber = bitsToNumberNonSRGB;\n  }\n\n  let bitsToULPFromZero;\n  if (opt.signed) {\n    const maxValue = (1 << bitLength - 1) - 1; // e.g. 127 for snorm8\n    bitsToULPFromZero = applyEach(\n      (n) => Math.max(-maxValue, signExtend(n, bitLength)),\n      componentOrder\n    );\n  } else {\n    bitsToULPFromZero = (components) => components;\n  }\n\n  const dataType = opt.signed ? 'snorm' : 'unorm';\n  const min = opt.signed ? -1 : 0;\n  const max = 1;\n  return {\n    componentOrder,\n    componentInfo: makePerTexelComponent(componentOrder, {\n      dataType,\n      bitLength\n    }),\n    encode,\n    decode,\n    pack: (components) =>\n    packComponents(componentOrder, components, bitLength, dataType),\n    unpackBits: (data) => unpackComponentsBits(componentOrder, data, bitLength),\n    numberToBits,\n    bitsToNumber,\n    bitsToULPFromZero,\n    numericRange: { min, max, finiteMin: min, finiteMax: max }\n  };\n}\n\n/**\n * Create an entry in `kTexelRepresentationInfo` for integer texel data with constant bitlength.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {number} bitLength - The number of bits in each component.\n * @param {{signed: boolean}} opt - Boolean flag for `signed`.\n */\nfunction makeIntegerInfo(\ncomponentOrder,\nbitLength,\nopt)\n{\n  assert(bitLength <= 32);\n  const min = opt.signed ? -(2 ** (bitLength - 1)) : 0;\n  const max = opt.signed ? 2 ** (bitLength - 1) - 1 : 2 ** bitLength - 1;\n  const numericRange = { min, max, finiteMin: min, finiteMax: max };\n  const maxUnsignedValue = 2 ** bitLength;\n  const encode = applyEach(\n    (n) => (assertInIntegerRange(n, bitLength, opt.signed), n),\n    componentOrder\n  );\n  const decode = applyEach(\n    (n) => (assertInIntegerRange(n, bitLength, opt.signed), n),\n    componentOrder\n  );\n  const bitsToNumber = applyEach((n) => {\n    const decodedN = opt.signed ? n > numericRange.max ? n - maxUnsignedValue : n : n;\n    assertInIntegerRange(decodedN, bitLength, opt.signed);\n    return decodedN;\n  }, componentOrder);\n\n  let bitsToULPFromZero;\n  if (opt.signed) {\n    bitsToULPFromZero = applyEach((n) => signExtend(n, bitLength), componentOrder);\n  } else {\n    bitsToULPFromZero = (components) => components;\n  }\n\n  const dataType = opt.signed ? 'sint' : 'uint';\n  const bitMask = (1 << bitLength) - 1;\n  return {\n    componentOrder,\n    componentInfo: makePerTexelComponent(componentOrder, {\n      dataType,\n      bitLength\n    }),\n    encode,\n    decode,\n    pack: (components) =>\n    packComponents(componentOrder, components, bitLength, dataType),\n    unpackBits: (data) => unpackComponentsBits(componentOrder, data, bitLength),\n    numberToBits: applyEach((v) => v & bitMask, componentOrder),\n    bitsToNumber,\n    bitsToULPFromZero,\n    numericRange\n  };\n}\n\n/**\n * Create an entry in `kTexelRepresentationInfo` for floating point texel data with constant\n * bitlength.\n * @param {TexelComponent[]} componentOrder - The order of the component data.\n * @param {number} bitLength - The number of bits in each component.\n */\nfunction makeFloatInfo(\ncomponentOrder,\nbitLength,\n{ restrictedDepth = false } = {})\n{\n  let encode;\n  let numberToBits;\n  let bitsToNumber;\n  let bitsToULPFromZero;\n  switch (bitLength) {\n    case 32:\n      if (restrictedDepth) {\n        encode = applyEach((v) => {\n          assert(v >= 0.0 && v <= 1.0, 'depth out of range');\n          return new Float32Array([v])[0];\n        }, componentOrder);\n      } else {\n        encode = applyEach((v) => new Float32Array([v])[0], componentOrder);\n      }\n      numberToBits = applyEach(numberToFloat32Bits, componentOrder);\n      bitsToNumber = applyEach(float32BitsToNumber, componentOrder);\n      bitsToULPFromZero = applyEach(\n        (v) => floatBitsToNormalULPFromZero(v, kFloat32Format),\n        componentOrder\n      );\n      break;\n    case 16:\n      if (restrictedDepth) {\n        encode = applyEach((v) => {\n          assert(v >= 0.0 && v <= 1.0, 'depth out of range');\n          return float16BitsToFloat32(float32ToFloat16Bits(v));\n        }, componentOrder);\n      } else {\n        encode = applyEach((v) => float16BitsToFloat32(float32ToFloat16Bits(v)), componentOrder);\n      }\n      numberToBits = applyEach(float32ToFloat16Bits, componentOrder);\n      bitsToNumber = applyEach(float16BitsToFloat32, componentOrder);\n      bitsToULPFromZero = applyEach(\n        (v) => floatBitsToNormalULPFromZero(v, kFloat16Format),\n        componentOrder\n      );\n      break;\n    default:\n      unreachable();\n  }\n  const decode = applyEach(identity, componentOrder);\n\n  return {\n    componentOrder,\n    componentInfo: makePerTexelComponent(componentOrder, {\n      dataType: 'float',\n      bitLength\n    }),\n    encode,\n    decode,\n    pack: (components) => {\n      switch (bitLength) {\n        case 16:\n          components = applyEach(float32ToFloat16Bits, componentOrder)(components);\n          return packComponents(componentOrder, components, 16, 'uint');\n        case 32:\n          return packComponents(componentOrder, components, bitLength, 'float');\n        default:\n          unreachable();\n      }\n    },\n    unpackBits: (data) => unpackComponentsBits(componentOrder, data, bitLength),\n    numberToBits,\n    bitsToNumber,\n    bitsToULPFromZero,\n    numericRange: restrictedDepth ?\n    { min: 0, max: 1, finiteMin: 0, finiteMax: 1 } :\n    {\n      min: Number.NEGATIVE_INFINITY,\n      max: Number.POSITIVE_INFINITY,\n      finiteMin: bitLength === 32 ? kValue.f32.negative.min : kValue.f16.negative.min,\n      finiteMax: bitLength === 32 ? kValue.f32.positive.max : kValue.f16.positive.max\n    }\n  };\n}\n\nconst kR = [TexelComponent.R];\nconst kRG = [TexelComponent.R, TexelComponent.G];\nconst kRGB = [TexelComponent.R, TexelComponent.G, TexelComponent.B];\nconst kRGBA = [TexelComponent.R, TexelComponent.G, TexelComponent.B, TexelComponent.A];\nconst kBGRA = [TexelComponent.B, TexelComponent.G, TexelComponent.R, TexelComponent.A];\n\nconst identity = (n) => n;\n\nconst kFloat11Format = { signed: 0, exponentBits: 5, mantissaBits: 6, bias: 15 };\nconst kFloat10Format = { signed: 0, exponentBits: 5, mantissaBits: 5, bias: 15 };\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nexport const kTexelRepresentationInfo =\n\n{\n  ...{\n    'r8unorm': makeNormalizedInfo(kR, 8, { signed: false, sRGB: false }),\n    'r8snorm': makeNormalizedInfo(kR, 8, { signed: true, sRGB: false }),\n    'r8uint': makeIntegerInfo(kR, 8, { signed: false }),\n    'r8sint': makeIntegerInfo(kR, 8, { signed: true }),\n    'r16uint': makeIntegerInfo(kR, 16, { signed: false }),\n    'r16sint': makeIntegerInfo(kR, 16, { signed: true }),\n    'r16float': makeFloatInfo(kR, 16),\n    'rg8unorm': makeNormalizedInfo(kRG, 8, { signed: false, sRGB: false }),\n    'rg8snorm': makeNormalizedInfo(kRG, 8, { signed: true, sRGB: false }),\n    'rg8uint': makeIntegerInfo(kRG, 8, { signed: false }),\n    'rg8sint': makeIntegerInfo(kRG, 8, { signed: true }),\n    'r32uint': makeIntegerInfo(kR, 32, { signed: false }),\n    'r32sint': makeIntegerInfo(kR, 32, { signed: true }),\n    'r32float': makeFloatInfo(kR, 32),\n    'rg16uint': makeIntegerInfo(kRG, 16, { signed: false }),\n    'rg16sint': makeIntegerInfo(kRG, 16, { signed: true }),\n    'rg16float': makeFloatInfo(kRG, 16),\n    'rgba8unorm': makeNormalizedInfo(kRGBA, 8, { signed: false, sRGB: false }),\n    'rgba8unorm-srgb': makeNormalizedInfo(kRGBA, 8, { signed: false, sRGB: true }),\n    'rgba8snorm': makeNormalizedInfo(kRGBA, 8, { signed: true, sRGB: false }),\n    'rgba8uint': makeIntegerInfo(kRGBA, 8, { signed: false }),\n    'rgba8sint': makeIntegerInfo(kRGBA, 8, { signed: true }),\n    'bgra8unorm': makeNormalizedInfo(kBGRA, 8, { signed: false, sRGB: false }),\n    'bgra8unorm-srgb': makeNormalizedInfo(kBGRA, 8, { signed: false, sRGB: true }),\n    'rg32uint': makeIntegerInfo(kRG, 32, { signed: false }),\n    'rg32sint': makeIntegerInfo(kRG, 32, { signed: true }),\n    'rg32float': makeFloatInfo(kRG, 32),\n    'rgba16uint': makeIntegerInfo(kRGBA, 16, { signed: false }),\n    'rgba16sint': makeIntegerInfo(kRGBA, 16, { signed: true }),\n    'rgba16float': makeFloatInfo(kRGBA, 16),\n    'rgba32uint': makeIntegerInfo(kRGBA, 32, { signed: false }),\n    'rgba32sint': makeIntegerInfo(kRGBA, 32, { signed: true }),\n    'rgba32float': makeFloatInfo(kRGBA, 32)\n  },\n  ...{\n    rgb10a2uint: {\n      componentOrder: kRGBA,\n      componentInfo: {\n        R: { dataType: 'uint', bitLength: 10 },\n        G: { dataType: 'uint', bitLength: 10 },\n        B: { dataType: 'uint', bitLength: 10 },\n        A: { dataType: 'uint', bitLength: 2 }\n      },\n      encode: (components) => {\n        assertInIntegerRange(components.R, 10, false);\n        assertInIntegerRange(components.G, 10, false);\n        assertInIntegerRange(components.B, 10, false);\n        assertInIntegerRange(components.A, 2, false);\n        return components;\n      },\n      decode: (components) => {\n        assertInIntegerRange(components.R, 10, false);\n        assertInIntegerRange(components.G, 10, false);\n        assertInIntegerRange(components.B, 10, false);\n        assertInIntegerRange(components.A, 2, false);\n        return components;\n      },\n      pack: (components) =>\n      packComponents(\n        kRGBA,\n        components,\n        {\n          R: 10,\n          G: 10,\n          B: 10,\n          A: 2\n        },\n        'uint'\n      ),\n      unpackBits: (data) =>\n      unpackComponentsBits(kRGBA, data, { R: 10, G: 10, B: 10, A: 2 }),\n      numberToBits: (components) => ({\n        R: components.R & 0x3ff,\n        G: components.G & 0x3ff,\n        B: components.B & 0x3ff,\n        A: components.A & 0x3\n      }),\n      bitsToNumber: (components) => {\n        assertInIntegerRange(components.R, 10, false);\n        assertInIntegerRange(components.G, 10, false);\n        assertInIntegerRange(components.B, 10, false);\n        assertInIntegerRange(components.A, 2, false);\n        return components;\n      },\n      bitsToULPFromZero: (components) => components,\n      numericRange: {\n        R: { min: 0, max: 0x3ff, finiteMin: 0, finiteMax: 0x3ff },\n        G: { min: 0, max: 0x3ff, finiteMin: 0, finiteMax: 0x3ff },\n        B: { min: 0, max: 0x3ff, finiteMin: 0, finiteMax: 0x3ff },\n        A: { min: 0, max: 0x3, finiteMin: 0, finiteMax: 0x3 }\n      }\n    },\n    rgb10a2unorm: {\n      componentOrder: kRGBA,\n      componentInfo: {\n        R: { dataType: 'unorm', bitLength: 10 },\n        G: { dataType: 'unorm', bitLength: 10 },\n        B: { dataType: 'unorm', bitLength: 10 },\n        A: { dataType: 'unorm', bitLength: 2 }\n      },\n      encode: (components) => {\n        return {\n          R: floatAsNormalizedInteger(components.R ?? unreachable(), 10, false),\n          G: floatAsNormalizedInteger(components.G ?? unreachable(), 10, false),\n          B: floatAsNormalizedInteger(components.B ?? unreachable(), 10, false),\n          A: floatAsNormalizedInteger(components.A ?? unreachable(), 2, false)\n        };\n      },\n      decode: (components) => {\n        return {\n          R: normalizedIntegerAsFloat(components.R ?? unreachable(), 10, false),\n          G: normalizedIntegerAsFloat(components.G ?? unreachable(), 10, false),\n          B: normalizedIntegerAsFloat(components.B ?? unreachable(), 10, false),\n          A: normalizedIntegerAsFloat(components.A ?? unreachable(), 2, false)\n        };\n      },\n      pack: (components) =>\n      packComponents(\n        kRGBA,\n        components,\n        {\n          R: 10,\n          G: 10,\n          B: 10,\n          A: 2\n        },\n        'uint'\n      ),\n      unpackBits: (data) =>\n      unpackComponentsBits(kRGBA, data, { R: 10, G: 10, B: 10, A: 2 }),\n      numberToBits: (components) => ({\n        R: floatAsNormalizedInteger(components.R ?? unreachable(), 10, false),\n        G: floatAsNormalizedInteger(components.G ?? unreachable(), 10, false),\n        B: floatAsNormalizedInteger(components.B ?? unreachable(), 10, false),\n        A: floatAsNormalizedInteger(components.A ?? unreachable(), 2, false)\n      }),\n      bitsToNumber: (components) => ({\n        R: normalizedIntegerAsFloat(components.R, 10, false),\n        G: normalizedIntegerAsFloat(components.G, 10, false),\n        B: normalizedIntegerAsFloat(components.B, 10, false),\n        A: normalizedIntegerAsFloat(components.A, 2, false)\n      }),\n      bitsToULPFromZero: (components) => components,\n      numericRange: { min: 0, max: 1, finiteMin: 0, finiteMax: 1 }\n    },\n    rg11b10ufloat: {\n      componentOrder: kRGB,\n      encode: applyEach(identity, kRGB),\n      decode: applyEach(identity, kRGB),\n      componentInfo: {\n        R: { dataType: 'ufloat', bitLength: 11 },\n        G: { dataType: 'ufloat', bitLength: 11 },\n        B: { dataType: 'ufloat', bitLength: 10 }\n      },\n      pack: (components) => {\n        const componentsBits = {\n          R: float32ToFloatBits(components.R ?? unreachable(), 0, 5, 6, 15),\n          G: float32ToFloatBits(components.G ?? unreachable(), 0, 5, 6, 15),\n          B: float32ToFloatBits(components.B ?? unreachable(), 0, 5, 5, 15)\n        };\n        return packComponents(\n          kRGB,\n          componentsBits,\n          {\n            R: 11,\n            G: 11,\n            B: 10\n          },\n          'uint'\n        );\n      },\n      unpackBits: (data) => unpackComponentsBits(kRGB, data, { R: 11, G: 11, B: 10 }),\n      numberToBits: (components) => ({\n        R: numberToFloatBits(components.R ?? unreachable(), kFloat11Format),\n        G: numberToFloatBits(components.G ?? unreachable(), kFloat11Format),\n        B: numberToFloatBits(components.B ?? unreachable(), kFloat10Format)\n      }),\n      bitsToNumber: (components) => ({\n        R: floatBitsToNumber(components.R, kFloat11Format),\n        G: floatBitsToNumber(components.G, kFloat11Format),\n        B: floatBitsToNumber(components.B, kFloat10Format)\n      }),\n      bitsToULPFromZero: (components) => ({\n        R: floatBitsToNormalULPFromZero(components.R, kFloat11Format),\n        G: floatBitsToNormalULPFromZero(components.G, kFloat11Format),\n        B: floatBitsToNormalULPFromZero(components.B, kFloat10Format)\n      }),\n      numericRange: {\n        min: 0,\n        max: Number.POSITIVE_INFINITY,\n        finiteMin: 0,\n        finiteMax: {\n          R: floatBitsToNumber(0b111_1011_1111, kFloat11Format),\n          G: floatBitsToNumber(0b111_1011_1111, kFloat11Format),\n          B: floatBitsToNumber(0b11_1101_1111, kFloat10Format)\n        }\n      }\n    },\n    rgb9e5ufloat: {\n      componentOrder: kRGB,\n      componentInfo: makePerTexelComponent(kRGB, {\n        dataType: 'ufloat',\n        bitLength: -1 // Components don't really have a bitLength since the format is packed.\n      }),\n      encode: applyEach(identity, kRGB),\n      decode: applyEach(identity, kRGB),\n      pack: (components) =>\n      new Uint32Array([\n      packRGB9E5UFloat(\n        components.R ?? unreachable(),\n        components.G ?? unreachable(),\n        components.B ?? unreachable()\n      )]\n      ).buffer,\n      unpackBits: (data) => {\n        const encoded = data[3] << 24 | data[2] << 16 | data[1] << 8 | data[0];\n        const redMantissa = encoded >>> 0 & 0b111111111;\n        const greenMantissa = encoded >>> 9 & 0b111111111;\n        const blueMantissa = encoded >>> 18 & 0b111111111;\n        const exponentSharedBits = (encoded >>> 27 & 0b11111) << 9;\n        return {\n          R: exponentSharedBits | redMantissa,\n          G: exponentSharedBits | greenMantissa,\n          B: exponentSharedBits | blueMantissa\n        };\n      },\n      numberToBits: (components) => ({\n        R: float32ToFloatBits(components.R ?? unreachable(), 0, 5, 9, 15),\n        G: float32ToFloatBits(components.G ?? unreachable(), 0, 5, 9, 15),\n        B: float32ToFloatBits(components.B ?? unreachable(), 0, 5, 9, 15)\n      }),\n      bitsToNumber: (components) => ({\n        R: ufloatM9E5BitsToNumber(components.R, kUFloat9e5Format),\n        G: ufloatM9E5BitsToNumber(components.G, kUFloat9e5Format),\n        B: ufloatM9E5BitsToNumber(components.B, kUFloat9e5Format)\n      }),\n      bitsToULPFromZero: (components) => ({\n        R: floatBitsToNormalULPFromZero(components.R, kUFloat9e5Format),\n        G: floatBitsToNormalULPFromZero(components.G, kUFloat9e5Format),\n        B: floatBitsToNormalULPFromZero(components.B, kUFloat9e5Format)\n      }),\n      numericRange: {\n        min: 0,\n        max: Number.POSITIVE_INFINITY,\n        finiteMin: 0,\n        finiteMax: ufloatM9E5BitsToNumber(0b11_1111_1111_1111, kUFloat9e5Format)\n      }\n    },\n    depth32float: makeFloatInfo([TexelComponent.Depth], 32, { restrictedDepth: true }),\n    depth16unorm: makeNormalizedInfo([TexelComponent.Depth], 16, { signed: false, sRGB: false }),\n    depth24plus: {\n      componentOrder: [TexelComponent.Depth],\n      componentInfo: { Depth: { dataType: null, bitLength: 24 } },\n      encode: applyEach(() => unreachable('depth24plus cannot be encoded'), [TexelComponent.Depth]),\n      decode: applyEach(() => unreachable('depth24plus cannot be decoded'), [TexelComponent.Depth]),\n      pack: () => unreachable('depth24plus data cannot be packed'),\n      unpackBits: () => unreachable('depth24plus data cannot be unpacked'),\n      numberToBits: () => unreachable('depth24plus has no representation'),\n      bitsToNumber: () => unreachable('depth24plus has no representation'),\n      bitsToULPFromZero: () => unreachable('depth24plus has no representation'),\n      numericRange: { min: 0, max: 1, finiteMin: 0, finiteMax: 1 }\n    },\n    stencil8: makeIntegerInfo([TexelComponent.Stencil], 8, { signed: false }),\n    'depth32float-stencil8': {\n      componentOrder: [TexelComponent.Depth, TexelComponent.Stencil],\n      componentInfo: {\n        Depth: {\n          dataType: 'float',\n          bitLength: 32\n        },\n        Stencil: {\n          dataType: 'uint',\n          bitLength: 8\n        }\n      },\n      encode: (components) => {\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      decode: (components) => {\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      pack: () => unreachable('depth32float-stencil8 data cannot be packed'),\n      unpackBits: () => unreachable('depth32float-stencil8 data cannot be unpacked'),\n      numberToBits: () => unreachable('not implemented'),\n      bitsToNumber: () => unreachable('not implemented'),\n      bitsToULPFromZero: () => unreachable('not implemented'),\n      numericRange: null\n    },\n    'depth24plus-stencil8': {\n      componentOrder: [TexelComponent.Depth, TexelComponent.Stencil],\n      componentInfo: {\n        Depth: {\n          dataType: null,\n          bitLength: 24\n        },\n        Stencil: {\n          dataType: 'uint',\n          bitLength: 8\n        }\n      },\n      encode: (components) => {\n        assert(components.Depth === undefined, 'depth24plus cannot be encoded');\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      decode: (components) => {\n        assert(components.Depth === undefined, 'depth24plus cannot be decoded');\n        assert(components.Stencil !== undefined);\n        assertInIntegerRange(components.Stencil, 8, false);\n        return components;\n      },\n      pack: () => unreachable('depth24plus-stencil8 data cannot be packed'),\n      unpackBits: () => unreachable('depth24plus-stencil8 data cannot be unpacked'),\n      numberToBits: () => unreachable('depth24plus-stencil8 has no representation'),\n      bitsToNumber: () => unreachable('depth24plus-stencil8 has no representation'),\n      bitsToULPFromZero: () => unreachable('depth24plus-stencil8 has no representation'),\n      numericRange: null\n    }\n  }\n};\n\n/**\n * Get the `ComponentDataType` for a format. All components must have the same type.\n * @param {UncompressedTextureFormat} format - The input format.\n * @returns {ComponentDataType} The data of the components.\n */\nexport function getSingleDataType(format) {\n  const infos = Object.values(kTexelRepresentationInfo[format].componentInfo);\n  assert(infos.length > 0);\n  return infos.reduce((acc, cur) => {\n    assert(cur !== undefined);\n    assert(acc === undefined || acc === cur.dataType);\n    return cur.dataType;\n  }, infos[0].dataType);\n}\n\n/**\n * Get traits for generating code to readback data from a component.\n * @param {ComponentDataType} dataType - The input component data type.\n * @returns A dictionary containing the respective `ReadbackTypedArray` and `shaderType`.\n */\nexport function getComponentReadbackTraits(dataType) {\n  switch (dataType) {\n    case 'ufloat':\n    case 'float':\n    case 'unorm':\n    case 'snorm':\n      return {\n        ReadbackTypedArray: Float32Array,\n        shaderType: 'f32'\n      };\n    case 'uint':\n      return {\n        ReadbackTypedArray: Uint32Array,\n        shaderType: 'u32'\n      };\n    case 'sint':\n      return {\n        ReadbackTypedArray: Int32Array,\n        shaderType: 'i32'\n      };\n    default:\n      unreachable();\n  }\n}"],"mappings":"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","ignoreList":[]}