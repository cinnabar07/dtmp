{"version":3,"file":"data_generation.js","names":["DataArrayGenerator","dataBuffer","Uint8Array","lastOffset","lastStart","lastByteSize","nextPowerOfTwo","value","Math","clz32","generateData","byteSize","start","offset","prevSize","length","newData","set","fill","i","generateView","buffer","generateAndCopyView","slice"],"sources":["../../../../src/webgpu/util/texture/data_generation.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/ /**\n * A helper class that generates ranges of dummy data for buffer or texture operations\n * efficiently. Tries to minimize allocations and data updates.\n */export class DataArrayGenerator {dataBuffer = new Uint8Array(256);\n\n  lastOffset = 0;\n  lastStart = 0;\n  lastByteSize = 0;\n\n  /** Find the nearest power of two greater than or equal to the input value. */\n  nextPowerOfTwo(value) {\n    return 1 << 32 - Math.clz32(value - 1);\n  }\n\n  generateData(byteSize, start = 0, offset = 0) {\n    const prevSize = this.dataBuffer.length;\n\n    if (prevSize < byteSize) {\n      // If the requested data is larger than the allocated buffer, reallocate it to a buffer large\n      // enough to handle the new request.\n      const newData = new Uint8Array(this.nextPowerOfTwo(byteSize));\n\n      if (this.lastOffset === offset && this.lastStart === start && this.lastByteSize) {\n        // Do a fast copy of any previous data that was generated.\n        newData.set(this.dataBuffer);\n      }\n\n      this.dataBuffer = newData;\n    } else if (this.lastOffset < offset) {\n      // Ensure all values up to the offset are zeroed out.\n      this.dataBuffer.fill(0, this.lastOffset, offset);\n    }\n\n    // If the offset or start values have changed, the whole data range needs to be regenerated.\n    if (this.lastOffset !== offset || this.lastStart !== start) {\n      this.lastByteSize = 0;\n    }\n\n    // Generate any new values that are required\n    if (this.lastByteSize < byteSize) {\n      for (let i = this.lastByteSize; i < byteSize - offset; ++i) {\n        this.dataBuffer[i + offset] = (i ** 3 + i + start) % 251 + 1; // Ensure data is always non-zero\n      }\n\n      this.lastOffset = offset;\n      this.lastStart = start;\n      this.lastByteSize = byteSize;\n    }\n  }\n\n  /**\n   * Returns a new view into the generated data that's the correct length. Because this is a view\n   * previously returned views from the same generator will have their values overwritten as well.\n   * @param {number} byteSize - Number of bytes the returned view should contain.\n   * @param {number} [start] - The value of the first element generated in the view.\n   * @param {number} [offset] - Offset of the generated data within the view. Preceeding values will be 0.\n   * @returns {Uint8Array} A new Uint8Array view into the generated data.\n   */\n  generateView(byteSize, start = 0, offset = 0) {\n    this.generateData(byteSize, start, offset);\n\n    if (this.dataBuffer.length === byteSize) {\n      return this.dataBuffer;\n    }\n    return new Uint8Array(this.dataBuffer.buffer, 0, byteSize);\n  }\n\n  /**\n   * Returns a copy of the generated data. Note that this still changes the underlying buffer, so\n   * any previously generated views will still be overwritten, but the returned copy won't reflect\n   * future generate* calls.\n   * @param {number} byteSize - Number of bytes the returned array should contain.\n   * @param {number} [start] - The value of the first element generated in the view.\n   * @param {number} [offset] - Offset of the generated data within the view. Preceeding values will be 0.\n   * @returns {Uint8Array} A new Uint8Array copy of the generated data.\n   */\n  generateAndCopyView(byteSize, start = 0, offset = 0) {\n    this.generateData(byteSize, start, offset);\n    return this.dataBuffer.slice(0, byteSize);\n  }\n}"],"mappings":";;IAAA;AACA;AACA,GAFA,CAEI;AACJ;AACA;AACA,EAAG,OAAO,MAAMA,kBAAkB,CAAC,CAACC,UAAU,GAAG,IAAIC,UAAU,CAAC,GAAG,CAAC,CAElEC,UAAU,GAAG,CAAC;EACdC,SAAS,GAAG,CAAC;EACbC,YAAY,GAAG,CAAC;;EAEhB;EACAC,cAAcA,CAACC,KAAK,EAAE;IACpB,OAAO,CAAC,IAAI,EAAE,GAAGC,IAAI,CAACC,KAAK,CAACF,KAAK,GAAG,CAAC,CAAC;EACxC;;EAEAG,YAAYA,CAACC,QAAQ,EAAEC,KAAK,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,EAAE;IAC5C,MAAMC,QAAQ,GAAG,IAAI,CAACb,UAAU,CAACc,MAAM;;IAEvC,IAAID,QAAQ,GAAGH,QAAQ,EAAE;MACvB;MACA;MACA,MAAMK,OAAO,GAAG,IAAId,UAAU,CAAC,IAAI,CAACI,cAAc,CAACK,QAAQ,CAAC,CAAC;;MAE7D,IAAI,IAAI,CAACR,UAAU,KAAKU,MAAM,IAAI,IAAI,CAACT,SAAS,KAAKQ,KAAK,IAAI,IAAI,CAACP,YAAY,EAAE;QAC/E;QACAW,OAAO,CAACC,GAAG,CAAC,IAAI,CAAChB,UAAU,CAAC;MAC9B;;MAEA,IAAI,CAACA,UAAU,GAAGe,OAAO;IAC3B,CAAC,MAAM,IAAI,IAAI,CAACb,UAAU,GAAGU,MAAM,EAAE;MACnC;MACA,IAAI,CAACZ,UAAU,CAACiB,IAAI,CAAC,CAAC,EAAE,IAAI,CAACf,UAAU,EAAEU,MAAM,CAAC;IAClD;;IAEA;IACA,IAAI,IAAI,CAACV,UAAU,KAAKU,MAAM,IAAI,IAAI,CAACT,SAAS,KAAKQ,KAAK,EAAE;MAC1D,IAAI,CAACP,YAAY,GAAG,CAAC;IACvB;;IAEA;IACA,IAAI,IAAI,CAACA,YAAY,GAAGM,QAAQ,EAAE;MAChC,KAAK,IAAIQ,CAAC,GAAG,IAAI,CAACd,YAAY,EAAEc,CAAC,GAAGR,QAAQ,GAAGE,MAAM,EAAE,EAAEM,CAAC,EAAE;QAC1D,IAAI,CAAClB,UAAU,CAACkB,CAAC,GAAGN,MAAM,CAAC,GAAG,CAACM,CAAC,IAAI,CAAC,GAAGA,CAAC,GAAGP,KAAK,IAAI,GAAG,GAAG,CAAC,CAAC,CAAC;MAChE;;MAEA,IAAI,CAACT,UAAU,GAAGU,MAAM;MACxB,IAAI,CAACT,SAAS,GAAGQ,KAAK;MACtB,IAAI,CAACP,YAAY,GAAGM,QAAQ;IAC9B;EACF;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACES,YAAYA,CAACT,QAAQ,EAAEC,KAAK,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,EAAE;IAC5C,IAAI,CAACH,YAAY,CAACC,QAAQ,EAAEC,KAAK,EAAEC,MAAM,CAAC;;IAE1C,IAAI,IAAI,CAACZ,UAAU,CAACc,MAAM,KAAKJ,QAAQ,EAAE;MACvC,OAAO,IAAI,CAACV,UAAU;IACxB;IACA,OAAO,IAAIC,UAAU,CAAC,IAAI,CAACD,UAAU,CAACoB,MAAM,EAAE,CAAC,EAAEV,QAAQ,CAAC;EAC5D;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACEW,mBAAmBA,CAACX,QAAQ,EAAEC,KAAK,GAAG,CAAC,EAAEC,MAAM,GAAG,CAAC,EAAE;IACnD,IAAI,CAACH,YAAY,CAACC,QAAQ,EAAEC,KAAK,EAAEC,MAAM,CAAC;IAC1C,OAAO,IAAI,CAACZ,UAAU,CAACsB,KAAK,CAAC,CAAC,EAAEZ,QAAQ,CAAC;EAC3C;AACF","ignoreList":[]}