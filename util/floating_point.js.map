{"version":3,"file":"floating_point.js","names":["assert","unreachable","Float16Array","anyOf","kValue","abstractFloat","f16","f32","isFloatType","toMatrix","toVector","u32","calculatePermutations","cartesianProduct","correctlyRoundedF16","correctlyRoundedF32","correctlyRoundedF64","every2DArray","flatten2DArray","flushSubnormalNumberF16","flushSubnormalNumberF32","flushSubnormalNumberF64","isFiniteF16","isFiniteF32","isSubnormalNumberF16","isSubnormalNumberF32","isSubnormalNumberF64","map2DArray","oneULPF16","oneULPF32","quantizeToF16","quantizeToF32","scalarF16Range","scalarF32Range","scalarF64Range","sparseMatrixF16Range","sparseMatrixF32Range","sparseMatrixF64Range","sparseScalarF16Range","sparseScalarF32Range","sparseScalarF64Range","sparseVectorF16Range","sparseVectorF32Range","sparseVectorF64Range","unflatten2DArray","vectorF16Range","vectorF32Range","vectorF64Range","SerializedFPIntervalKind","serializeFPKind","s","value","writeU8","Abstract","F16","F32","deserializeFPKind","kind","readU8","FPInterval","constructor","endpoints","begin","end","length","Number","isNaN","traits","FP","isPoint","contains","n","NEGATIVE_INFINITY","POSITIVE_INFINITY","containsZeroOrSubnormals","constants","negative","subnormal","min","positive","max","isFinite","toString","map","scalarBuilder","serializeFPInterval","i","writeCond","unboundedInterval","if_true","writeF64","writeF32","writeF16","if_false","deserializeFPInterval","readCond","readF64","readF32","readF16","addFlushedIfNeededF16","values","some","v","concat","FPTraits","k","toInterval","Array","toParam","interval","fromParam","p","param","spanIntervals","intervals","every","forEach","Math","isVector","e","f","spanVectors","vectors","vector_length","result","isMatrix","m","c","num_rows","bind","spanMatrices","matrices","ms","num_cols","r","_","j","addFlushedIfNeeded","subnormals","filter","isSubnormal","needs_zero","unimplementedScalarToInterval","name","_x","unimplementedScalarPairToInterval","_y","unimplementedScalarTripleToInterval","_z","unimplementedScalarToVector","unimplementedVectorToInterval","unimplementedVectorPairToInterval","unimplementedVectorToVector","unimplementedVectorPairToVector","unimplementedVectorScalarToVector","unimplementedScalarVectorToVector","unimplementedMatrixToInterval","unimplementedMatrixToMatrix","unimplementedMatrixPairToMatrix","unimplementedMatrixScalarToMatrix","unimplementedScalarMatrixToMatrix","unimplementedMatrixVectorToVector","unimplementedVectorMatrixToVector","unimplementedDistance","unimplementedFaceForward","unimplementedLength","unimplementedModf","unimplementedRefract","_i","_s","_r","unimplementedAbsoluteErrorInterval","_n","_error_range","unimplementedUlpInterval","_numULP","makeScalarToIntervalCase","ops","quantize","o","undefined","input","expected","generateScalarToIntervalCases","params","reduce","cases","push","makeScalarPairToIntervalCase","param0","param1","generateScalarPairToIntervalCases","param0s","param1s","makeScalarTripleToIntervalCase","param2","generateScalarTripleToIntervalCases","param2s","makeVectorToIntervalCase","generateVectorToIntervalCases","makeVectorPairToIntervalCase","generateVectorPairToIntervalCases","makeVectorToVectorCase","generateVectorToVectorCases","makeScalarVectorToVectorCase","scalar","vector","results","generateScalarVectorToVectorCases","scalars","makeVectorScalarToVectorCase","generateVectorScalarToVectorCases","makeVectorPairToVectorCase","generateVectorPairToVectorCases","makeVectorPairScalarToVectorComponentWiseCase","componentWiseOps","width","el0","index","generateVectorPairScalarToVectorComponentWiseCase","makeMatrixToScalarCase","generateMatrixToScalarCases","makeMatrixToMatrixCase","generateMatrixToMatrixCases","makeMatrixPairToMatrixCase","generateMatrixPairToMatrixCases","makeMatrixScalarToMatrixCase","mat","generateMatrixScalarToMatrixCases","mats","makeScalarMatrixToMatrixCase","generateScalarMatrixToMatrixCases","makeMatrixVectorToVectorCase","vec","generateMatrixVectorToVectorCases","vecs","makeVectorMatrixToVectorCase","generateVectorMatrixToVectorCases","roundAndFlushScalarToInterval","op","correctlyRounded","inputs","domain","Set","impl","roundAndFlushScalarPairToInterval","x","y","x_values","y_values","x_inputs","y_inputs","inner_x","inner_y","add","roundAndFlushScalarTripleToInterval","z","z_values","z_inputs","inner_z","roundAndFlushVectorToInterval","x_rounded","x_flushed","roundAndFlushVectorPairToInterval","y_rounded","y_flushed","roundAndFlushVectorToVector","interval_vectors","roundAndFlushVectorPairToVector","roundAndFlushMatrixToMatrix","m_flat","m_rounded","m_flushed","m_options","m_inputs","interval_matrices","inner_m","runScalarToIntervalOp","extrema","b","runScalarPairToIntervalOp","outputs","runScalarTripleToIntervalOp","runVectorToIntervalOp","runVectorPairToIntervalOp","runVectorToVectorOp","unboundedVector","runScalarToIntervalOpComponentWise","runVectorPairToVectorOp","runScalarPairToIntervalOpVectorComponentWise","idx","runMatrixToMatrixOp","m_values","unflat_m","result_cols","result_rows","unboundedMatrix","runScalarPairToIntervalOpScalarMatrixComponentWise","cols","rows","runScalarPairToIntervalOpMatrixMatrixComponentWise","flat_x","flat_y","AbsoluteErrorIntervalOp","error_range","absoluteErrorIntervalImpl","abs","CorrectlyRoundedIntervalOp","correctlyRoundedIntervalImpl","correctlyRoundedMatrixImpl","correctlyRoundedInterval","ULPIntervalOp","numULP","ulp","oneULP","flushSubnormal","ulpIntervalImpl","AbsIntervalOp","absIntervalImpl","AcosIntervalOp","sqrtInterval","subtractionInterval","multiplicationInterval","approx_abs_error","atan2Interval","absoluteErrorInterval","acos","negOneToOneInterval","acosIntervalImpl","AcoshAlternativeIntervalOp","inner_value","additionInterval","sqrt_value","logInterval","acoshAlternativeIntervalImpl","AcoshPrimaryIntervalOp","acoshPrimaryIntervalImpl","AdditionIntervalOp","additionIntervalImpl","additionMatrixMatrixIntervalImpl","AsinIntervalOp","asin","asinIntervalImpl","AsinhIntervalOp","asinhIntervalImpl","AtanIntervalOp","ulp_error","ulpInterval","atan","atanIntervalImpl","Atan2IntervalOpBuilder","domain_x","domain_y","atan_yx","f64","pi","whole","atan2IntervalImpl","AtanhIntervalOp","numerator","denominator","log_interval","divisionInterval","atanhIntervalImpl","CeilIntervalOp","ceil","ceilIntervalImpl","ClampMedianIntervalOp","sort","a","clampMedianIntervalImpl","ClampMinMaxIntervalOp","low","high","minInterval","maxInterval","clampMinMaxIntervalImpl","CosIntervalOp","abs_error","cos","negPiToPiInterval","cosIntervalImpl","CoshIntervalOp","minus_n","negationInterval","expInterval","coshIntervalImpl","CrossIntervalOp","r0","r1","r2","crossIntervalImpl","DegreesIntervalOp","degreesIntervalImpl","minorNxN","col","row","dim","col_indices","keys","row_indices","determinant2x2Interval","determinant3x3Interval","A","B","C","permutations","prev","cur","determinant4x4Interval","D","determinantIntervalImpl","DistanceIntervalScalarOp","lengthInterval","DistanceIntervalVectorOp","SubtractionIntervalOp","distanceIntervalImpl","DivisionIntervalOpBuilder","divisionIntervalImpl","DotIntervalOp","multiplications","MultiplicationIntervalOp","dotIntervalImpl","ExpIntervalOp","exp","expIntervalImpl","Exp2IntervalOp","pow","exp2IntervalImpl","faceForwardIntervalsImpl","x_vec","positive_x","negative_x","NegationIntervalOp","dot_interval","dotInterval","FloorIntervalOp","floor","floorIntervalImpl","FmaIntervalOp","fmaIntervalImpl","FractIntervalOp","floorInterval","less_than_one","fractIntervalImpl","InverseSqrtIntervalOp","sqrt","greaterThanZeroInterval","inverseSqrtIntervalImpl","LdexpIntervalOp","e1","e2","isInteger","bias","ldexpIntervalImpl","LengthIntervalScalarOp","LengthIntervalVectorOp","lengthIntervalImpl","LogIntervalOp","log","logIntervalImpl","Log2IntervalOp","log2","log2IntervalImpl","MaxIntervalOp","maxIntervalImpl","MinIntervalOp","minIntervalImpl","MixImpreciseIntervalOp","t","mixImpreciseIntervalImpl","MixPreciseIntervalOp","mixPreciseIntervalImpl","modfIntervalImpl","fract","MultiplicationInnerOp","multiplicationIntervalImpl","multiplyVectorByScalar","multiplicationMatrixScalarIntervalImpl","multiplicationScalarMatrixIntervalImpl","multiplicationMatrixScalarInterval","multiplicationMatrixMatrixIntervalImpl","mat_x","mat_y","x_cols","x_rows","y_cols","y_rows","x_transposed","transposeInterval","oob_result","multiplicationMatrixVectorIntervalImpl","multiplicationVectorMatrixIntervalImpl","negationIntervalImpl","NormalizeIntervalOp","normalizeIntervalImpl","PowIntervalOp","exp2Interval","log2Interval","powIntervalImpl","RadiansIntervalOp","radiansIntervalImpl","ReflectIntervalOp","rhs","reflectIntervalImpl","refractIntervalImpl","r_squared","dot","dot_squared","one_minus_dot_squared","zeroVector","dot_times_r","k_sqrt","RemainderIntervalOp","truncInterval","remainderIntervalImpl","RoundIntervalOp","diff_before","diff_after","roundIntervalImpl","saturateIntervalImpl","SignIntervalOp","signIntervalImpl","SinIntervalOp","sin","sinIntervalImpl","SinhIntervalOp","sinhIntervalImpl","SmoothStepOp","clampMedianInterval","smoothStepIntervalImpl","SqrtIntervalOp","inverseSqrtInterval","sqrtIntervalImpl","StepIntervalOp","edge","stepIntervalImpl","subtractionIntervalImpl","subtractionMatrixMatrixIntervalImpl","TanIntervalOp","sinInterval","cosInterval","tanIntervalImpl","TanhIntervalOp","sinhInterval","coshInterval","tanhIntervalImpl","TransposeIntervalOp","transposeIntervalImpl","TruncIntervalOp","trunc","truncIntervalImpl","kF32UnboundedInterval","kF32ZeroInterval","F32Traits","_constants","infinity","nearest_max","three_quarters","half","third","quarter","sixth","nearest_min","zeroInterval","scalarRange","sparseScalarRange","vectorRange","sparseVectorRange","sparseMatrixRange","correctlyRoundedMatrix","absInterval","acosInterval","acoshAlternativeInterval","acoshPrimaryInterval","acoshIntervals","additionMatrixMatrixInterval","asinInterval","asinhInterval","atanInterval","atanhInterval","ceilInterval","clampMinMaxInterval","clampIntervals","crossInterval","degreesInterval","determinantInterval","distanceInterval","faceForwardIntervals","fmaInterval","fractInterval","ldexpInterval","mixImpreciseInterval","mixPreciseInterval","mixIntervals","modfInterval","multiplicationMatrixMatrixInterval","multiplicationScalarMatrixInterval","multiplicationMatrixVectorInterval","multiplicationVectorMatrixInterval","normalizeInterval","powInterval","radiansInterval","reflectInterval","refractInterval","remainderInterval","roundInterval","saturateInterval","signInterval","smoothStepInterval","stepInterval","subtractionMatrixMatrixInterval","tanInterval","tanhInterval","makeU32ToVectorCase","generateU32ToIntervalCases","QuantizeToF16IntervalOp","rounded","flushed","quantizeToF16IntervalImpl","quantizeToF16Interval","unpackData","ArrayBuffer","unpackDataU32","Uint32Array","unpackDataU16","Uint16Array","unpackDataU8","Uint8Array","unpackDataI16","Int16Array","unpackDataI8","Int8Array","unpackDataF16","unpack2x16floatIntervalImpl","unpack2x16floatInterval","unpack2x16snormIntervalImpl","unpack2x16snormInterval","unpack2x16unormIntervalImpl","unpack2x16unormInterval","unpack4x8snormIntervalImpl","unpack4x8snormInterval","unpack4x8unormIntervalImpl","unpack4x8unormInterval","kF32Traits","kAbstractUnboundedInterval","kAbstractZeroInterval","FPAbstractTraits","_target","_mode","kF16UnboundedInterval","kF16ZeroInterval","F16Traits","abstract","fpTraitsFor","type","isRepresentable"],"sources":["../../../src/webgpu/util/floating_point.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/import { assert, unreachable } from '../../common/util/util.js';import { Float16Array } from '../../external/petamoriken/float16/float16.js';\n\n\n\n\nimport { anyOf } from './compare.js';\nimport { kValue } from './constants.js';\nimport {\n  abstractFloat,\n  f16,\n  f32,\n  isFloatType,\n\n\n  toMatrix,\n  toVector,\n  u32 } from\n'./conversion.js';\nimport {\n  calculatePermutations,\n  cartesianProduct,\n  correctlyRoundedF16,\n  correctlyRoundedF32,\n  correctlyRoundedF64,\n  every2DArray,\n  flatten2DArray,\n\n  flushSubnormalNumberF16,\n  flushSubnormalNumberF32,\n  flushSubnormalNumberF64,\n  isFiniteF16,\n  isFiniteF32,\n  isSubnormalNumberF16,\n  isSubnormalNumberF32,\n  isSubnormalNumberF64,\n  map2DArray,\n  oneULPF16,\n  oneULPF32,\n  quantizeToF16,\n  quantizeToF32,\n  scalarF16Range,\n  scalarF32Range,\n  scalarF64Range,\n  sparseMatrixF16Range,\n  sparseMatrixF32Range,\n  sparseMatrixF64Range,\n  sparseScalarF16Range,\n  sparseScalarF32Range,\n  sparseScalarF64Range,\n  sparseVectorF16Range,\n  sparseVectorF32Range,\n  sparseVectorF64Range,\n  unflatten2DArray,\n  vectorF16Range,\n  vectorF32Range,\n  vectorF64Range } from\n'./math.js';\n\n/** Indicate the kind of WGSL floating point numbers being operated on */var\n\n\nSerializedFPIntervalKind = /*#__PURE__*/function (SerializedFPIntervalKind) {SerializedFPIntervalKind[SerializedFPIntervalKind[\"Abstract\"] = 0] = \"Abstract\";SerializedFPIntervalKind[SerializedFPIntervalKind[\"F32\"] = 1] = \"F32\";SerializedFPIntervalKind[SerializedFPIntervalKind[\"F16\"] = 2] = \"F16\";return SerializedFPIntervalKind;}(SerializedFPIntervalKind || {});\n\n\n\n\n\n/** serializeFPKind() serializes a FPKind to a BinaryStream */\nexport function serializeFPKind(s, value) {\n  switch (value) {\n    case 'abstract':\n      s.writeU8(SerializedFPIntervalKind.Abstract);\n      break;\n    case 'f16':\n      s.writeU8(SerializedFPIntervalKind.F16);\n      break;\n    case 'f32':\n      s.writeU8(SerializedFPIntervalKind.F32);\n      break;\n  }\n}\n\n/** deserializeFPKind() deserializes a FPKind from a BinaryStream */\nexport function deserializeFPKind(s) {\n  const kind = s.readU8();\n  switch (kind) {\n    case SerializedFPIntervalKind.Abstract:\n      return 'abstract';\n    case SerializedFPIntervalKind.F16:\n      return 'f16';\n    case SerializedFPIntervalKind.F32:\n      return 'f32';\n    default:\n      unreachable(`invalid deserialized FPKind: ${kind}`);\n  }\n}\n// Containers\n\n/**\n * Representation of endpoints for an interval as an array with either one or\n * two elements. Single element indicates that the interval is a single point.\n * For two elements, the first is the lower edges of the interval and the\n * second is the upper edge, i.e. e[0] <= e[1], where e is an IntervalEndpoints\n */\n\n\n/** Represents a closed interval of floating point numbers */\nexport class FPInterval {\n\n\n\n\n  /**\n   * Constructor\n   *\n   * `FPTraits.toInterval` is the preferred way to create FPIntervals\n   *\n   * @param kind the floating point number type this is an interval for\n   * @param endpoints beginning and end of the interval\n   */\n  constructor(kind, ...endpoints) {\n    this.kind = kind;\n\n    const begin = endpoints[0];\n    const end = endpoints.length === 2 ? endpoints[1] : endpoints[0];\n    assert(!Number.isNaN(begin) && !Number.isNaN(end), `endpoints need to be non-NaN`);\n    assert(\n      begin <= end,\n      `endpoints[0] (${begin}) must be less than or equal to endpoints[1]  (${end})`\n    );\n\n    this.begin = begin;\n    this.end = end;\n  }\n\n  /** @returns the floating point traits for this interval */\n  traits() {\n    return FP[this.kind];\n  }\n\n  /** @returns begin and end if non-point interval, otherwise just begin */\n  endpoints() {\n    return this.isPoint() ? [this.begin] : [this.begin, this.end];\n  }\n\n  /** @returns if a point or interval is completely contained by this interval */\n  contains(n) {\n    if (Number.isNaN(n)) {\n      // Being the 'any' interval indicates that accuracy is not defined for this\n      // test, so the test is just checking that this input doesn't cause the\n      // implementation to misbehave, so NaN is accepted.\n      return this.begin === Number.NEGATIVE_INFINITY && this.end === Number.POSITIVE_INFINITY;\n    }\n\n    if (n instanceof FPInterval) {\n      return this.begin <= n.begin && this.end >= n.end;\n    }\n    return this.begin <= n && this.end >= n;\n  }\n\n  /** @returns if any values in the interval may be flushed to zero, this\n   *           includes any subnormals and zero itself.\n   */\n  containsZeroOrSubnormals() {\n    return !(\n    this.end < this.traits().constants().negative.subnormal.min ||\n    this.begin > this.traits().constants().positive.subnormal.max);\n\n  }\n\n  /** @returns if this interval contains a single point */\n  isPoint() {\n    return this.begin === this.end;\n  }\n\n  /** @returns if this interval only contains finite values */\n  isFinite() {\n    return this.traits().isFinite(this.begin) && this.traits().isFinite(this.end);\n  }\n\n  /** @returns a string representation for logging purposes */\n  toString() {\n    return `{ '${this.kind}', [${this.endpoints().map(this.traits().scalarBuilder)}] }`;\n  }\n}\n\n/** serializeFPInterval() serializes a FPInterval to a BinaryStream */\nexport function serializeFPInterval(s, i) {\n  serializeFPKind(s, i.kind);\n  const traits = FP[i.kind];\n  s.writeCond(i !== traits.constants().unboundedInterval, {\n    if_true: () => {\n      // Bounded\n      switch (i.kind) {\n        case 'abstract':\n          s.writeF64(i.begin);\n          s.writeF64(i.end);\n          break;\n        case 'f32':\n          s.writeF32(i.begin);\n          s.writeF32(i.end);\n          break;\n        case 'f16':\n          s.writeF16(i.begin);\n          s.writeF16(i.end);\n          break;\n        default:\n          unreachable(`Unable to serialize FPInterval ${i}`);\n          break;\n      }\n    },\n    if_false: () => {\n\n      // Unbounded\n    } });\n}\n\n/** deserializeFPInterval() deserializes a FPInterval from a BinaryStream */\nexport function deserializeFPInterval(s) {\n  const kind = deserializeFPKind(s);\n  const traits = FP[kind];\n  return s.readCond({\n    if_true: () => {\n      // Bounded\n      switch (kind) {\n        case 'abstract':\n          return new FPInterval(traits.kind, s.readF64(), s.readF64());\n        case 'f32':\n          return new FPInterval(traits.kind, s.readF32(), s.readF32());\n        case 'f16':\n          return new FPInterval(traits.kind, s.readF16(), s.readF16());\n      }\n      unreachable(`Unable to deserialize FPInterval with kind ${kind}`);\n    },\n    if_false: () => {\n      // Unbounded\n      return traits.constants().unboundedInterval;\n    }\n  });\n}\n\n/**\n * Representation of a vec2/3/4 of floating point intervals as an array of\n * FPIntervals.\n */\n\n\n\n\n\n/** Shorthand for an Array of Arrays that contains a column-major matrix */\n\n\n/**\n * Representation of a matCxR of floating point intervals as an array of arrays\n * of FPIntervals. This maps onto the WGSL concept of matrix. Internally\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Utilities\n\n/** @returns input with an appended 0, if inputs contains non-zero subnormals */\n// When f16 traits is defined, this can be replaced with something like\n// `FP.f16..addFlushIfNeeded`\nfunction addFlushedIfNeededF16(values) {\n  return values.some((v) => v !== 0 && isSubnormalNumberF16(v)) ? values.concat(0) : values;\n}\n\n// Operations\n\n/**\n * A function that converts a point to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/** Operation used to implement a ScalarToInterval */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A function that converts a pair of points to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/** Domain for a ScalarPairToInterval implementation */\n\n\n\n\n\n\n/** Operation used to implement a ScalarPairToInterval */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * A function that converts a triplet of points to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/** Operation used to implement a ScalarTripleToInterval */\n\n\n\n\n\n\n// Currently ScalarToVector is not integrated with the rest of the floating point\n// framework, because the only builtins that use it are actually\n// u32 -> [f32, f32, f32, f32] functions, so the whole rounding and interval\n// process doesn't get applied to the inputs.\n// They do use the framework internally by invoking divisionInterval on segments\n// of the input.\n/**\n * A function that converts a point to a vector of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/**\n * A function that converts a vector to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/** Operation used to implement a VectorToInterval */\n\n\n\n\n\n\n/**\n * A function that converts a pair of vectors to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/** Operation used to implement a VectorPairToInterval */\n\n\n\n\n\n\n/**\n * A function that converts a vector to a vector of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/** Operation used to implement a VectorToVector */\n\n\n\n\n\n\n/**\n * A function that converts a pair of vectors to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/** Operation used to implement a VectorPairToVector */\n\n\n\n\n\n\n/**\n * A function that converts a vector and a scalar to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/**\n * A function that converts a scalar and a vector  to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/**\n * A function that converts a matrix to an acceptance interval.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/** Operation used to implement a MatrixToMatrix */\n\n\n\n\n\n\n/**\n * A function that converts a matrix to a matrix of acceptance intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/**\n * A function that converts a pair of matrices to a matrix of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/**\n * A function that converts a matrix and a scalar to a matrix of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/**\n * A function that converts a scalar and a matrix to a matrix of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/**\n * A function that converts a matrix and a vector to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n/**\n * A function that converts a vector and a matrix to a vector of acceptance\n * intervals.\n * This is the public facing API for builtin implementations that is called\n * from tests.\n */\n\n\n\n\n// Traits\n\n/**\n * Typed structure containing all the constants defined for each\n * WGSL floating point kind\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/** A representation of an FPInterval for a case param */\n\n\n\n\n\n/** Abstract base class for all floating-point traits */\nexport class FPTraits {\n\n  constructor(k) {\n    this.kind = k;\n  }\n\n\n\n  // Utilities - Implemented\n\n  /** @returns an interval containing the point or the original interval */\n  toInterval(n) {\n    if (n instanceof FPInterval) {\n      if (n.kind === this.kind) {\n        return n;\n      }\n\n      // Preserve if the original interval was unbounded or bounded\n      if (!n.isFinite()) {\n        return this.constants().unboundedInterval;\n      }\n\n      return new FPInterval(this.kind, ...n.endpoints());\n    }\n\n    if (n instanceof Array) {\n      return new FPInterval(this.kind, ...n);\n    }\n\n    return new FPInterval(this.kind, n, n);\n  }\n\n  /**\n   * Makes a param that can be turned into an interval\n   */\n  toParam(n) {\n    return {\n      kind: this.kind,\n      interval: n\n    };\n  }\n\n  /**\n   * Converts p into an FPInterval if it is an FPIntervalPAram\n   */\n  fromParam(\n  p)\n  {\n    const param = p;\n    if (param.interval && param.kind) {\n      assert(param.kind === this.kind);\n      return this.toInterval(param.interval);\n    }\n    return p;\n  }\n\n  /**\n   * @returns an interval with the tightest endpoints that includes all provided\n   *          intervals\n   */\n  spanIntervals(...intervals) {\n    assert(intervals.length > 0, `span of an empty list of FPIntervals is not allowed`);\n    assert(\n      intervals.every((i) => i.kind === this.kind),\n      `span is only defined for intervals with the same kind`\n    );\n    let begin = Number.POSITIVE_INFINITY;\n    let end = Number.NEGATIVE_INFINITY;\n    intervals.forEach((i) => {\n      begin = Math.min(i.begin, begin);\n      end = Math.max(i.end, end);\n    });\n    return this.toInterval([begin, end]);\n  }\n\n  /** Narrow an array of values to FPVector if possible */\n  isVector(v) {\n    if (v.every((e) => e instanceof FPInterval && e.kind === this.kind)) {\n      return v.length === 2 || v.length === 3 || v.length === 4;\n    }\n    return false;\n  }\n\n  /** @returns an FPVector representation of an array of values if possible */\n  toVector(v) {\n    if (this.isVector(v) && v.every((e) => e.kind === this.kind)) {\n      return v;\n    }\n\n    const f = v.map((e) => this.toInterval(e));\n    // The return of the map above is a readonly FPInterval[], which needs to be narrowed\n    // to FPVector, since FPVector is defined as fixed length tuples.\n    if (this.isVector(f)) {\n      return f;\n    }\n    unreachable(`Cannot convert [${v}] to FPVector`);\n  }\n\n  /**\n   * @returns a FPVector where each element is the span for corresponding\n   *          elements at the same index in the input vectors\n   */\n  spanVectors(...vectors) {\n    assert(\n      vectors.every((e) => this.isVector(e)),\n      'Vector span is not defined for vectors of differing floating point kinds'\n    );\n\n    const vector_length = vectors[0].length;\n    assert(\n      vectors.every((e) => e.length === vector_length),\n      `Vector span is not defined for vectors of differing lengths`\n    );\n\n    const result = new Array(vector_length);\n\n    for (let i = 0; i < vector_length; i++) {\n      result[i] = this.spanIntervals(...vectors.map((v) => v[i]));\n    }\n    return this.toVector(result);\n  }\n\n  /** Narrow an array of an array of values to FPMatrix if possible */\n  isMatrix(m) {\n    if (!m.every((c) => c.every((e) => e instanceof FPInterval && e.kind === this.kind))) {\n      return false;\n    }\n    // At this point m guaranteed to be a ROArrayArray<FPInterval>, but maybe typed as a\n    // FPVector[].\n    // Coercing the type since FPVector[] is functionally equivalent to\n    // ROArrayArray<FPInterval> for .length and .every, but they are type compatible,\n    // since tuples are not equivalent to arrays, so TS considers c in .every to\n    // be unresolvable below, even though our usage is safe.\n    m = m;\n\n    if (m.length > 4 || m.length < 2) {\n      return false;\n    }\n\n    const num_rows = m[0].length;\n    if (num_rows > 4 || num_rows < 2) {\n      return false;\n    }\n\n    return m.every((c) => c.length === num_rows);\n  }\n\n  /** @returns an FPMatrix representation of an array of an array of values if possible */\n  toMatrix(m) {\n    if (\n    this.isMatrix(m) &&\n    every2DArray(m, (e) => {\n      return e.kind === this.kind;\n    }))\n    {\n      return m;\n    }\n\n    const result = map2DArray(m, this.toInterval.bind(this));\n\n    // The return of the map above is a ROArrayArray<FPInterval>, which needs to be\n    // narrowed to FPMatrix, since FPMatrix is defined as fixed length tuples.\n    if (this.isMatrix(result)) {\n      return result;\n    }\n    unreachable(`Cannot convert ${m} to FPMatrix`);\n  }\n\n  /**\n   * @returns a FPMatrix where each element is the span for corresponding\n   *          elements at the same index in the input matrices\n   */\n  spanMatrices(...matrices) {\n    // Coercing the type of matrices, since tuples are not generally compatible\n    // with Arrays, but they are functionally equivalent for the usages in this\n    // function.\n    const ms = matrices;\n    const num_cols = ms[0].length;\n    const num_rows = ms[0][0].length;\n    assert(\n      ms.every((m) => m.length === num_cols && m.every((r) => r.length === num_rows)),\n      `Matrix span is not defined for Matrices of differing dimensions`\n    );\n\n    const result = [...Array(num_cols)].map((_) => [...Array(num_rows)]);\n    for (let i = 0; i < num_cols; i++) {\n      for (let j = 0; j < num_rows; j++) {\n        result[i][j] = this.spanIntervals(...ms.map((m) => m[i][j]));\n      }\n    }\n\n    return this.toMatrix(result);\n  }\n\n  /** @returns input with an appended 0, if inputs contains non-zero subnormals */\n  addFlushedIfNeeded(values) {\n    const subnormals = values.filter(this.isSubnormal);\n    const needs_zero = subnormals.length > 0 && subnormals.every((s) => s !== 0);\n    return needs_zero ? values.concat(0) : values;\n  }\n\n  /** Stub for scalar to interval generator */\n  unimplementedScalarToInterval(name, _x) {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for scalar pair to interval generator */\n  unimplementedScalarPairToInterval(\n  name,\n  _x,\n  _y)\n  {\n    unreachable(`'${name}' is yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for scalar triple to interval generator */\n  unimplementedScalarTripleToInterval(\n  name,\n  _x,\n  _y,\n  _z)\n  {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for scalar to vector generator */\n  unimplementedScalarToVector(name, _x) {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for vector to interval generator */\n  unimplementedVectorToInterval(name, _x) {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for vector pair to interval generator */\n  unimplementedVectorPairToInterval(\n  name,\n  _x,\n  _y)\n  {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for vector to vector generator */\n  unimplementedVectorToVector(\n  name,\n  _x)\n  {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for vector pair to vector generator */\n  unimplementedVectorPairToVector(\n  name,\n  _x,\n  _y)\n  {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for vector-scalar to vector generator */\n  unimplementedVectorScalarToVector(\n  name,\n  _x,\n  _y)\n  {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for scalar-vector to vector generator */\n  unimplementedScalarVectorToVector(\n  name,\n  _x,\n  _y)\n  {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for matrix to interval generator */\n  unimplementedMatrixToInterval(name, _x) {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for matrix to matirx generator */\n  unimplementedMatrixToMatrix(name, _x) {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for matrix pair to matrix generator */\n  unimplementedMatrixPairToMatrix(\n  name,\n  _x,\n  _y)\n  {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for matrix-scalar to matrix generator  */\n  unimplementedMatrixScalarToMatrix(\n  name,\n  _x,\n  _y)\n  {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for scalar-matrix to matrix generator  */\n  unimplementedScalarMatrixToMatrix(\n  name,\n  _x,\n  _y)\n  {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for matrix-vector to vector generator  */\n  unimplementedMatrixVectorToVector(\n  name,\n  _x,\n  _y)\n  {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for vector-matrix to vector generator  */\n  unimplementedVectorMatrixToVector(\n  name,\n  _x,\n  _y)\n  {\n    unreachable(`'${name}' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for distance generator */\n  unimplementedDistance(\n  _x,\n  _y)\n  {\n    unreachable(`'distance' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for faceForward */\n  unimplementedFaceForward(\n  _x,\n  _y,\n  _z)\n  {\n    unreachable(`'faceForward' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for length generator */\n  unimplementedLength(\n  _x)\n  {\n    unreachable(`'length' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for modf generator */\n  unimplementedModf(_x) {\n    unreachable(`'modf' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for refract generator */\n  unimplementedRefract(\n  _i,\n  _s,\n  _r)\n  {\n    unreachable(`'refract' is not yet implemented for '${this.kind}'`);\n  }\n\n  /** Stub for absolute errors */\n  unimplementedAbsoluteErrorInterval(_n, _error_range) {\n    unreachable(`Absolute Error is not implement for '${this.kind}'`);\n  }\n\n  /** Stub for ULP errors */\n  unimplementedUlpInterval(_n, _numULP) {\n    unreachable(`ULP Error is not implement for '${this.kind}'`);\n  }\n\n  // Utilities - Defined by subclass\n  /**\n   * @returns the nearest precise value to the input. Rounding should be IEEE\n   *          'roundTiesToEven'.\n   */\n\n  /** @returns all valid roundings of input */\n\n  /** @returns true if input is considered finite, otherwise false */\n\n  /** @returns true if input is considered subnormal, otherwise false */\n\n  /** @returns 0 if the provided number is subnormal, otherwise returns the proved number */\n\n  /** @returns 1 * ULP: (number) */\n\n  /** @returns a builder for converting numbers to ScalarsValues */\n\n  /** @returns a range of scalars for testing */\n\n  /** @returns a reduced range of scalars for testing */\n\n  /** @returns a range of dim element vectors for testing */\n\n  /** @returns a reduced range of dim element vectors for testing */\n\n  /** @returns a reduced range of cols x rows matrices for testing\n   *\n   * A non-sparse version of this generator is intentionally not provided due to\n   * runtime issues with more dense ranges.\n   */\n\n\n  // Framework - Cases\n\n  /**\n   * @returns a Case for the param and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  makeScalarToIntervalCase(\n  param,\n  filter,\n  ...ops)\n  {\n    param = this.quantize(param);\n\n    const intervals = ops.map((o) => o(param));\n    if (filter === 'finite' && intervals.some((i) => !i.isFinite())) {\n      return undefined;\n    }\n    return { input: [this.scalarBuilder(param)], expected: anyOf(...intervals) };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  generateScalarToIntervalCases(\n  params,\n  filter,\n  ...ops)\n  {\n    return params.reduce((cases, e) => {\n      const c = this.makeScalarToIntervalCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array());\n  }\n\n  /**\n   * @returns a Case for the params and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param0 the first param to pass in\n   * @param param1 the second param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  makeScalarPairToIntervalCase(\n  param0,\n  param1,\n  filter,\n  ...ops)\n  {\n    param0 = this.quantize(param0);\n    param1 = this.quantize(param1);\n\n    const intervals = ops.map((o) => o(param0, param1));\n    if (filter === 'finite' && intervals.some((i) => !i.isFinite())) {\n      return undefined;\n    }\n    return {\n      input: [this.scalarBuilder(param0), this.scalarBuilder(param1)],\n      expected: anyOf(...intervals)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of inputs to try for the first input\n   * @param param1s array of inputs to try for the second input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  generateScalarPairToIntervalCases(\n  param0s,\n  param1s,\n  filter,\n  ...ops)\n  {\n    return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n      const c = this.makeScalarPairToIntervalCase(e[0], e[1], filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array());\n  }\n\n  /**\n   * @returns a Case for the params and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param0 the first param to pass in\n   * @param param1 the second param to pass in\n   * @param param2 the third param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  makeScalarTripleToIntervalCase(\n  param0,\n  param1,\n  param2,\n  filter,\n  ...ops)\n  {\n    param0 = this.quantize(param0);\n    param1 = this.quantize(param1);\n    param2 = this.quantize(param2);\n\n    const intervals = ops.map((o) => o(param0, param1, param2));\n    if (filter === 'finite' && intervals.some((i) => !i.isFinite())) {\n      return undefined;\n    }\n    return {\n      input: [this.scalarBuilder(param0), this.scalarBuilder(param1), this.scalarBuilder(param2)],\n      expected: anyOf(...intervals)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of inputs to try for the first input\n   * @param param1s array of inputs to try for the second input\n   * @param param2s array of inputs to try for the third input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  generateScalarTripleToIntervalCases(\n  param0s,\n  param1s,\n  param2s,\n  filter,\n  ...ops)\n  {\n    return cartesianProduct(param0s, param1s, param2s).reduce((cases, e) => {\n      const c = this.makeScalarTripleToIntervalCase(e[0], e[1], e[2], filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array());\n  }\n\n  /**\n   * @returns a Case for the params and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  makeVectorToIntervalCase(\n  param,\n  filter,\n  ...ops)\n  {\n    param = param.map(this.quantize);\n\n    const intervals = ops.map((o) => o(param));\n    if (filter === 'finite' && intervals.some((i) => !i.isFinite())) {\n      return undefined;\n    }\n    return {\n      input: [toVector(param, this.scalarBuilder)],\n      expected: anyOf(...intervals)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  generateVectorToIntervalCases(\n  params,\n  filter,\n  ...ops)\n  {\n    return params.reduce((cases, e) => {\n      const c = this.makeVectorToIntervalCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array());\n  }\n\n  /**\n   * @returns a Case for the params and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param0 the first param to pass in\n   * @param param1 the second param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  makeVectorPairToIntervalCase(\n  param0,\n  param1,\n  filter,\n  ...ops)\n  {\n    param0 = param0.map(this.quantize);\n    param1 = param1.map(this.quantize);\n\n    const intervals = ops.map((o) => o(param0, param1));\n    if (filter === 'finite' && intervals.some((i) => !i.isFinite())) {\n      return undefined;\n    }\n    return {\n      input: [toVector(param0, this.scalarBuilder), toVector(param1, this.scalarBuilder)],\n      expected: anyOf(...intervals)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of inputs to try for the first input\n   * @param param1s array of inputs to try for the second input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  generateVectorPairToIntervalCases(\n  param0s,\n  param1s,\n  filter,\n  ...ops)\n  {\n    return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n      const c = this.makeVectorPairToIntervalCase(e[0], e[1], filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array());\n  }\n\n  /**\n   * @returns a Case for the param and vector of intervals generator provided\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals.\n   */\n  makeVectorToVectorCase(\n  param,\n  filter,\n  ...ops)\n  {\n    param = param.map(this.quantize);\n\n    const vectors = ops.map((o) => o(param));\n    if (filter === 'finite' && vectors.some((v) => v.some((e) => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [toVector(param, this.scalarBuilder)],\n      expected: anyOf(...vectors)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals.\n   */\n  generateVectorToVectorCases(\n  params,\n  filter,\n  ...ops)\n  {\n    return params.reduce((cases, e) => {\n      const c = this.makeVectorToVectorCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array());\n  }\n\n  /**\n   * @returns a Case for the params and the interval vector generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param scalar the scalar param to pass in\n   * @param vector the vector param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance intervals\n   */\n  makeScalarVectorToVectorCase(\n  scalar,\n  vector,\n  filter,\n  ...ops)\n  {\n    scalar = this.quantize(scalar);\n    vector = vector.map(this.quantize);\n\n    const results = ops.map((o) => o(scalar, vector));\n    if (filter === 'finite' && results.some((r) => r.some((e) => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [this.scalarBuilder(scalar), toVector(vector, this.scalarBuilder)],\n      expected: anyOf(...results)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param scalars array of scalar inputs to try\n   * @param vectors array of vector inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance intervals\n   */\n  generateScalarVectorToVectorCases(\n  scalars,\n  vectors,\n  filter,\n  ...ops)\n  {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases = [];\n    scalars.forEach((scalar) => {\n      vectors.forEach((vector) => {\n        const c = this.makeScalarVectorToVectorCase(scalar, vector, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the params and the interval vector generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param vector the vector param to pass in\n   * @param scalar the scalar param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance intervals\n   */\n  makeVectorScalarToVectorCase(\n  vector,\n  scalar,\n  filter,\n  ...ops)\n  {\n    vector = vector.map(this.quantize);\n    scalar = this.quantize(scalar);\n\n    const results = ops.map((o) => o(vector, scalar));\n    if (filter === 'finite' && results.some((r) => r.some((e) => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [toVector(vector, this.scalarBuilder), this.scalarBuilder(scalar)],\n      expected: anyOf(...results)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param vectors array of vector inputs to try\n   * @param scalars array of scalar inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance intervals\n   */\n  generateVectorScalarToVectorCases(\n  vectors,\n  scalars,\n  filter,\n  ...ops)\n  {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases = [];\n    vectors.forEach((vector) => {\n      scalars.forEach((scalar) => {\n        const c = this.makeVectorScalarToVectorCase(vector, scalar, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the param and vector of intervals generator provided\n   * @param param0 the first param to pass in\n   * @param param1 the second param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals.\n   */\n  makeVectorPairToVectorCase(\n  param0,\n  param1,\n  filter,\n  ...ops)\n  {\n    param0 = param0.map(this.quantize);\n    param1 = param1.map(this.quantize);\n    const vectors = ops.map((o) => o(param0, param1));\n    if (filter === 'finite' && vectors.some((v) => v.some((e) => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [toVector(param0, this.scalarBuilder), toVector(param1, this.scalarBuilder)],\n      expected: anyOf(...vectors)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of inputs to try for the first input\n   * @param param1s array of inputs to try for the second input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals.\n   */\n  generateVectorPairToVectorCases(\n  param0s,\n  param1s,\n  filter,\n  ...ops)\n  {\n    return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n      const c = this.makeVectorPairToVectorCase(e[0], e[1], filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array());\n  }\n\n  /**\n   * @returns a Case for the params and the component-wise interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param0 the first vector param to pass in\n   * @param param1 the second vector param to pass in\n   * @param param2 the scalar param to pass in\n   * @param filter what interval filtering to apply\n   * @param componentWiseOps callbacks that implement generating a component-wise acceptance interval,\n   *                         one component result at a time.\n   */\n  makeVectorPairScalarToVectorComponentWiseCase(\n  param0,\n  param1,\n  param2,\n  filter,\n  ...componentWiseOps)\n  {\n    // Width of input vector\n    const width = param0.length;\n    assert(2 <= width && width <= 4, 'input vector width must between 2 and 4');\n    assert(param1.length === width, 'two input vectors must have the same width');\n    param0 = param0.map(this.quantize);\n    param1 = param1.map(this.quantize);\n    param2 = this.quantize(param2);\n\n    // Call the component-wise interval generator and build the expectation FPVector\n    const results = componentWiseOps.map((o) => {\n      return param0.map((el0, index) => o(el0, param1[index], param2));\n    });\n    if (filter === 'finite' && results.some((r) => r.some((e) => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [\n      toVector(param0, this.scalarBuilder),\n      toVector(param1, this.scalarBuilder),\n      this.scalarBuilder(param2)],\n\n      expected: anyOf(...results)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of first vector inputs to try\n   * @param param1s array of second vector inputs to try\n   * @param param2s array of scalar inputs to try\n   * @param filter what interval filtering to apply\n   * @param componentWiseOpscallbacks that implement generating a component-wise acceptance interval\n   */\n  generateVectorPairScalarToVectorComponentWiseCase(\n  param0s,\n  param1s,\n  param2s,\n  filter,\n  ...componentWiseOps)\n  {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases = [];\n    param0s.forEach((param0) => {\n      param1s.forEach((param1) => {\n        param2s.forEach((param2) => {\n          const c = this.makeVectorPairScalarToVectorComponentWiseCase(\n            param0,\n            param1,\n            param2,\n            filter,\n            ...componentWiseOps\n          );\n          if (c !== undefined) {\n            cases.push(c);\n          }\n        });\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the param and an array of interval generators provided\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  makeMatrixToScalarCase(\n  param,\n  filter,\n  ...ops)\n  {\n    param = map2DArray(param, this.quantize);\n\n    const results = ops.map((o) => o(param));\n    if (filter === 'finite' && results.some((e) => !e.isFinite())) {\n      return undefined;\n    }\n\n    return {\n      input: [toMatrix(param, this.scalarBuilder)],\n      expected: anyOf(...results)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  generateMatrixToScalarCases(\n  params,\n  filter,\n  ...ops)\n  {\n    return params.reduce((cases, e) => {\n      const c = this.makeMatrixToScalarCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array());\n  }\n\n  /**\n   * @returns a Case for the param and an array of interval generators provided\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  makeMatrixToMatrixCase(\n  param,\n  filter,\n  ...ops)\n  {\n    param = map2DArray(param, this.quantize);\n\n    const results = ops.map((o) => o(param));\n    if (filter === 'finite' && results.some((m) => m.some((c) => c.some((r) => !r.isFinite())))) {\n      return undefined;\n    }\n\n    return {\n      input: [toMatrix(param, this.scalarBuilder)],\n      expected: anyOf(...results)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  generateMatrixToMatrixCases(\n  params,\n  filter,\n  ...ops)\n  {\n    return params.reduce((cases, e) => {\n      const c = this.makeMatrixToMatrixCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array());\n  }\n\n  /**\n   * @returns a Case for the params and matrix of intervals generator provided\n   * @param param0 the first param to pass in\n   * @param param1 the second param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  makeMatrixPairToMatrixCase(\n  param0,\n  param1,\n  filter,\n  ...ops)\n  {\n    param0 = map2DArray(param0, this.quantize);\n    param1 = map2DArray(param1, this.quantize);\n    const results = ops.map((o) => o(param0, param1));\n    if (filter === 'finite' && results.some((m) => m.some((c) => c.some((r) => !r.isFinite())))) {\n      return undefined;\n    }\n    return {\n      input: [toMatrix(param0, this.scalarBuilder), toMatrix(param1, this.scalarBuilder)],\n      expected: anyOf(...results)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param param0s array of inputs to try for the first input\n   * @param param1s array of inputs to try for the second input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  generateMatrixPairToMatrixCases(\n  param0s,\n  param1s,\n  filter,\n  ...ops)\n  {\n    return cartesianProduct(param0s, param1s).reduce((cases, e) => {\n      const c = this.makeMatrixPairToMatrixCase(e[0], e[1], filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array());\n  }\n\n  /**\n   * @returns a Case for the params and matrix of intervals generator provided\n   * @param mat the matrix param to pass in\n   * @param scalar the scalar to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  makeMatrixScalarToMatrixCase(\n  mat,\n  scalar,\n  filter,\n  ...ops)\n  {\n    mat = map2DArray(mat, this.quantize);\n    scalar = this.quantize(scalar);\n\n    const results = ops.map((o) => o(mat, scalar));\n    if (filter === 'finite' && results.some((m) => m.some((c) => c.some((r) => !r.isFinite())))) {\n      return undefined;\n    }\n    return {\n      input: [toMatrix(mat, this.scalarBuilder), this.scalarBuilder(scalar)],\n      expected: anyOf(...results)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param mats array of inputs to try for the matrix input\n   * @param scalars array of inputs to try for the scalar input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  generateMatrixScalarToMatrixCases(\n  mats,\n  scalars,\n  filter,\n  ...ops)\n  {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases = [];\n    mats.forEach((mat) => {\n      scalars.forEach((scalar) => {\n        const c = this.makeMatrixScalarToMatrixCase(mat, scalar, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the params and matrix of intervals generator provided\n   * @param scalar the scalar to pass in\n   * @param mat the matrix param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  makeScalarMatrixToMatrixCase(\n  scalar,\n  mat,\n  filter,\n  ...ops)\n  {\n    scalar = this.quantize(scalar);\n    mat = map2DArray(mat, this.quantize);\n\n    const results = ops.map((o) => o(scalar, mat));\n    if (filter === 'finite' && results.some((m) => m.some((c) => c.some((r) => !r.isFinite())))) {\n      return undefined;\n    }\n    return {\n      input: [this.scalarBuilder(scalar), toMatrix(mat, this.scalarBuilder)],\n      expected: anyOf(...results)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param scalars array of inputs to try for the scalar input\n   * @param mats array of inputs to try for the matrix input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a matrix of acceptance\n   *            intervals\n   */\n  generateScalarMatrixToMatrixCases(\n  scalars,\n  mats,\n  filter,\n  ...ops)\n  {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases = [];\n    mats.forEach((mat) => {\n      scalars.forEach((scalar) => {\n        const c = this.makeScalarMatrixToMatrixCase(scalar, mat, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the params and the vector of intervals generator provided\n   * @param mat the matrix param to pass in\n   * @param vec the vector to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals\n   */\n  makeMatrixVectorToVectorCase(\n  mat,\n  vec,\n  filter,\n  ...ops)\n  {\n    mat = map2DArray(mat, this.quantize);\n    vec = vec.map(this.quantize);\n\n    const results = ops.map((o) => o(mat, vec));\n    if (filter === 'finite' && results.some((v) => v.some((e) => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [toMatrix(mat, this.scalarBuilder), toVector(vec, this.scalarBuilder)],\n      expected: anyOf(...results)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param mats array of inputs to try for the matrix input\n   * @param vecs array of inputs to try for the vector input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals\n   */\n  generateMatrixVectorToVectorCases(\n  mats,\n  vecs,\n  filter,\n  ...ops)\n  {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases = [];\n    mats.forEach((mat) => {\n      vecs.forEach((vec) => {\n        const c = this.makeMatrixVectorToVectorCase(mat, vec, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  /**\n   * @returns a Case for the params and the vector of intervals generator provided\n   * @param vec the vector to pass in\n   * @param mat the matrix param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals\n   */\n  makeVectorMatrixToVectorCase(\n  vec,\n  mat,\n  filter,\n  ...ops)\n  {\n    vec = vec.map(this.quantize);\n    mat = map2DArray(mat, this.quantize);\n\n    const results = ops.map((o) => o(vec, mat));\n    if (filter === 'finite' && results.some((v) => v.some((e) => !e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: [toVector(vec, this.scalarBuilder), toMatrix(mat, this.scalarBuilder)],\n      expected: anyOf(...results)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param vecs array of inputs to try for the vector input\n   * @param mats array of inputs to try for the matrix input\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating a vector of acceptance\n   *            intervals\n   */\n  generateVectorMatrixToVectorCases(\n  vecs,\n  mats,\n  filter,\n  ...ops)\n  {\n    // Cannot use cartesianProduct here, due to heterogeneous types\n    const cases = [];\n    vecs.forEach((vec) => {\n      mats.forEach((mat) => {\n        const c = this.makeVectorMatrixToVectorCase(vec, mat, filter, ...ops);\n        if (c !== undefined) {\n          cases.push(c);\n        }\n      });\n    });\n    return cases;\n  }\n\n  // Framework - Intervals\n\n  /**\n   * Converts a point to an acceptance interval, using a specific function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   * op.extrema is invoked before this point in the call stack.\n   * op.domain is tested before this point in the call stack.\n   *\n   * @param n value to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  roundAndFlushScalarToInterval(n, op) {\n    assert(!Number.isNaN(n), `flush not defined for NaN`);\n    const values = this.correctlyRounded(n);\n    const inputs = this.addFlushedIfNeeded(values);\n\n    if (op.domain !== undefined) {\n      // Cannot invoke op.domain() directly in the .some, because the narrowing doesn't propegate.\n      const domain = op.domain();\n      if (inputs.some((i) => !domain.contains(i))) {\n        return this.constants().unboundedInterval;\n      }\n    }\n\n    const results = new Set(inputs.map(op.impl));\n    return this.spanIntervals(...results);\n  }\n\n  /**\n   * Converts a pair to an acceptance interval, using a specific function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   * All unique combinations of x & y are run.\n   * op.extrema is invoked before this point in the call stack.\n   * op.domain is tested before this point in the call stack.\n   *\n   * @param x first param to flush & round then invoke op.impl on\n   * @param y second param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  roundAndFlushScalarPairToInterval(\n  x,\n  y,\n  op)\n  {\n    assert(!Number.isNaN(x), `flush not defined for NaN`);\n    assert(!Number.isNaN(y), `flush not defined for NaN`);\n\n    const x_values = this.correctlyRounded(x);\n    const y_values = this.correctlyRounded(y);\n    const x_inputs = this.addFlushedIfNeeded(x_values);\n    const y_inputs = this.addFlushedIfNeeded(y_values);\n\n    if (op.domain !== undefined) {\n      // Cannot invoke op.domain() directly in the .some, because the narrowing doesn't propegate.\n      const domain = op.domain();\n\n      if (x_inputs.some((i) => !domain.x.some((e) => e.contains(i)))) {\n        return this.constants().unboundedInterval;\n      }\n\n      if (y_inputs.some((j) => !domain.y.some((e) => e.contains(j)))) {\n        return this.constants().unboundedInterval;\n      }\n    }\n\n    const intervals = new Set();\n    x_inputs.forEach((inner_x) => {\n      y_inputs.forEach((inner_y) => {\n        intervals.add(op.impl(inner_x, inner_y));\n      });\n    });\n    return this.spanIntervals(...intervals);\n  }\n\n  /**\n   * Converts a triplet to an acceptance interval, using a specific function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   * All unique combinations of x, y & z are run.\n   *\n   * @param x first param to flush & round then invoke op.impl on\n   * @param y second param to flush & round then invoke op.impl on\n   * @param z third param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  roundAndFlushScalarTripleToInterval(\n  x,\n  y,\n  z,\n  op)\n  {\n    assert(!Number.isNaN(x), `flush not defined for NaN`);\n    assert(!Number.isNaN(y), `flush not defined for NaN`);\n    assert(!Number.isNaN(z), `flush not defined for NaN`);\n    const x_values = this.correctlyRounded(x);\n    const y_values = this.correctlyRounded(y);\n    const z_values = this.correctlyRounded(z);\n    const x_inputs = this.addFlushedIfNeeded(x_values);\n    const y_inputs = this.addFlushedIfNeeded(y_values);\n    const z_inputs = this.addFlushedIfNeeded(z_values);\n    const intervals = new Set();\n\n    x_inputs.forEach((inner_x) => {\n      y_inputs.forEach((inner_y) => {\n        z_inputs.forEach((inner_z) => {\n          intervals.add(op.impl(inner_x, inner_y, inner_z));\n        });\n      });\n    });\n\n    return this.spanIntervals(...intervals);\n  }\n\n  /**\n   * Converts a vector to an acceptance interval using a specific function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   *\n   * @param x param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  roundAndFlushVectorToInterval(x, op) {\n    assert(\n      x.every((e) => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n\n    const x_rounded = x.map(this.correctlyRounded);\n    const x_flushed = x_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const x_inputs = cartesianProduct(...x_flushed);\n\n    const intervals = new Set();\n    x_inputs.forEach((inner_x) => {\n      intervals.add(op.impl(inner_x));\n    });\n    return this.spanIntervals(...intervals);\n  }\n\n  /**\n   * Converts a pair of vectors to an acceptance interval using a specific\n   * function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   * All unique combinations of x & y are run.\n   *\n   * @param x first param to flush & round then invoke op.impl on\n   * @param y second param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  roundAndFlushVectorPairToInterval(\n  x,\n  y,\n  op)\n  {\n    assert(\n      x.every((e) => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n    assert(\n      y.every((e) => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n\n    const x_rounded = x.map(this.correctlyRounded);\n    const y_rounded = y.map(this.correctlyRounded);\n    const x_flushed = x_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const y_flushed = y_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const x_inputs = cartesianProduct(...x_flushed);\n    const y_inputs = cartesianProduct(...y_flushed);\n\n    const intervals = new Set();\n    x_inputs.forEach((inner_x) => {\n      y_inputs.forEach((inner_y) => {\n        intervals.add(op.impl(inner_x, inner_y));\n      });\n    });\n    return this.spanIntervals(...intervals);\n  }\n\n  /**\n   * Converts a vector to a vector of acceptance intervals using a specific\n   * function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   *\n   * @param x param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a vector of spans for each outputs of op.impl\n   */\n  roundAndFlushVectorToVector(x, op) {\n    assert(\n      x.every((e) => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n\n    const x_rounded = x.map(this.correctlyRounded);\n    const x_flushed = x_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const x_inputs = cartesianProduct(...x_flushed);\n\n    const interval_vectors = new Set();\n    x_inputs.forEach((inner_x) => {\n      interval_vectors.add(op.impl(inner_x));\n    });\n\n    return this.spanVectors(...interval_vectors);\n  }\n\n  /**\n   * Converts a pair of vectors to a vector of acceptance intervals using a\n   * specific function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   *\n   * @param x first param to flush & round then invoke op.impl on\n   * @param y second param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a vector of spans for each output of op.impl\n   */\n  roundAndFlushVectorPairToVector(\n  x,\n  y,\n  op)\n  {\n    assert(\n      x.every((e) => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n    assert(\n      y.every((e) => !Number.isNaN(e)),\n      `flush not defined for NaN`\n    );\n\n    const x_rounded = x.map(this.correctlyRounded);\n    const y_rounded = y.map(this.correctlyRounded);\n    const x_flushed = x_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const y_flushed = y_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const x_inputs = cartesianProduct(...x_flushed);\n    const y_inputs = cartesianProduct(...y_flushed);\n\n    const interval_vectors = new Set();\n    x_inputs.forEach((inner_x) => {\n      y_inputs.forEach((inner_y) => {\n        interval_vectors.add(op.impl(inner_x, inner_y));\n      });\n    });\n\n    return this.spanVectors(...interval_vectors);\n  }\n\n  /**\n   * Converts a matrix to a matrix of acceptance intervals using a specific\n   * function\n   *\n   * This handles correctly rounding and flushing inputs as needed.\n   * Duplicate inputs are pruned before invoking op.impl.\n   *\n   * @param m param to flush & round then invoke op.impl on\n   * @param op operation defining the function being run\n   * @returns a matrix of spans for each outputs of op.impl\n   */\n  roundAndFlushMatrixToMatrix(m, op) {\n    const num_cols = m.length;\n    const num_rows = m[0].length;\n    assert(\n      m.every((c) => c.every((r) => !Number.isNaN(r))),\n      `flush not defined for NaN`\n    );\n\n    const m_flat = flatten2DArray(m);\n    const m_rounded = m_flat.map(this.correctlyRounded);\n    const m_flushed = m_rounded.map(this.addFlushedIfNeeded.bind(this));\n    const m_options = cartesianProduct(...m_flushed);\n    const m_inputs = m_options.map((e) =>\n    unflatten2DArray(e, num_cols, num_rows)\n    );\n\n    const interval_matrices = new Set();\n    m_inputs.forEach((inner_m) => {\n      interval_matrices.add(op.impl(inner_m));\n    });\n\n    return this.spanMatrices(...interval_matrices);\n  }\n\n  /**\n   * Calculate the acceptance interval for a unary function over an interval\n   *\n   * If the interval is actually a point, this just decays to\n   * roundAndFlushScalarToInterval.\n   *\n   * The provided domain interval may be adjusted if the operation defines an\n   * extrema function.\n   *\n   * @param x input domain interval\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  runScalarToIntervalOp(x, op) {\n    if (!x.isFinite()) {\n      return this.constants().unboundedInterval;\n    }\n\n    if (op.extrema !== undefined) {\n      x = op.extrema(x);\n    }\n\n    const result = this.spanIntervals(\n      ...x.endpoints().map((b) => this.roundAndFlushScalarToInterval(b, op))\n    );\n    return result.isFinite() ? result : this.constants().unboundedInterval;\n  }\n\n  /**\n   * Calculate the acceptance interval for a binary function over an interval\n   *\n   * The provided domain intervals may be adjusted if the operation defines an\n   * extrema function.\n   *\n   * @param x first input domain interval\n   * @param y second input domain interval\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  runScalarPairToIntervalOp(\n  x,\n  y,\n  op)\n  {\n    if (!x.isFinite() || !y.isFinite()) {\n      return this.constants().unboundedInterval;\n    }\n\n    if (op.extrema !== undefined) {\n      [x, y] = op.extrema(x, y);\n    }\n\n    const outputs = new Set();\n    x.endpoints().forEach((inner_x) => {\n      y.endpoints().forEach((inner_y) => {\n        outputs.add(this.roundAndFlushScalarPairToInterval(inner_x, inner_y, op));\n      });\n    });\n\n    const result = this.spanIntervals(...outputs);\n    return result.isFinite() ? result : this.constants().unboundedInterval;\n  }\n\n  /**\n   * Calculate the acceptance interval for a ternary function over an interval\n   *\n   * @param x first input domain interval\n   * @param y second input domain interval\n   * @param z third input domain interval\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  runScalarTripleToIntervalOp(\n  x,\n  y,\n  z,\n  op)\n  {\n    if (!x.isFinite() || !y.isFinite() || !z.isFinite()) {\n      return this.constants().unboundedInterval;\n    }\n\n    const outputs = new Set();\n    x.endpoints().forEach((inner_x) => {\n      y.endpoints().forEach((inner_y) => {\n        z.endpoints().forEach((inner_z) => {\n          outputs.add(this.roundAndFlushScalarTripleToInterval(inner_x, inner_y, inner_z, op));\n        });\n      });\n    });\n\n    const result = this.spanIntervals(...outputs);\n    return result.isFinite() ? result : this.constants().unboundedInterval;\n  }\n\n  /**\n   * Calculate the acceptance interval for a vector function over given\n   * intervals\n   *\n   * @param x input domain intervals vector\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  runVectorToIntervalOp(x, op) {\n    if (x.some((e) => !e.isFinite())) {\n      return this.constants().unboundedInterval;\n    }\n\n    const x_values = cartesianProduct(...x.map((e) => e.endpoints()));\n\n    const outputs = new Set();\n    x_values.forEach((inner_x) => {\n      outputs.add(this.roundAndFlushVectorToInterval(inner_x, op));\n    });\n\n    const result = this.spanIntervals(...outputs);\n    return result.isFinite() ? result : this.constants().unboundedInterval;\n  }\n\n  /**\n   * Calculate the acceptance interval for a vector pair function over given\n   * intervals\n   *\n   * @param x first input domain intervals vector\n   * @param y second input domain intervals vector\n   * @param op operation defining the function being run\n   * @returns a span over all the outputs of op.impl\n   */\n  runVectorPairToIntervalOp(\n  x,\n  y,\n  op)\n  {\n    if (x.some((e) => !e.isFinite()) || y.some((e) => !e.isFinite())) {\n      return this.constants().unboundedInterval;\n    }\n\n    const x_values = cartesianProduct(...x.map((e) => e.endpoints()));\n    const y_values = cartesianProduct(...y.map((e) => e.endpoints()));\n\n    const outputs = new Set();\n    x_values.forEach((inner_x) => {\n      y_values.forEach((inner_y) => {\n        outputs.add(this.roundAndFlushVectorPairToInterval(inner_x, inner_y, op));\n      });\n    });\n\n    const result = this.spanIntervals(...outputs);\n    return result.isFinite() ? result : this.constants().unboundedInterval;\n  }\n\n  /**\n   * Calculate the vector of acceptance intervals for a pair of vector function\n   * over given intervals\n   *\n   * @param x input domain intervals vector\n   * @param op operation defining the function being run\n   * @returns a vector of spans over all the outputs of op.impl\n   */\n  runVectorToVectorOp(x, op) {\n    if (x.some((e) => !e.isFinite())) {\n      return this.constants().unboundedVector[x.length];\n    }\n\n    const x_values = cartesianProduct(...x.map((e) => e.endpoints()));\n\n    const outputs = new Set();\n    x_values.forEach((inner_x) => {\n      outputs.add(this.roundAndFlushVectorToVector(inner_x, op));\n    });\n\n    const result = this.spanVectors(...outputs);\n    return result.every((e) => e.isFinite()) ?\n    result :\n    this.constants().unboundedVector[result.length];\n  }\n\n  /**\n   * Calculate the vector of acceptance intervals by running a scalar operation\n   * component-wise over a vector.\n   *\n   * This is used for situations where a component-wise operation, like vector\n   * negation, is needed as part of an inherited accuracy, but the top-level\n   * operation test don't require an explicit vector definition of the function,\n   * due to the generated 'vectorize' tests being sufficient.\n   *\n   * @param x input domain intervals vector\n   * @param op scalar operation to be run component-wise\n   * @returns a vector of intervals with the outputs of op.impl\n   */\n  runScalarToIntervalOpComponentWise(x, op) {\n    return this.toVector(x.map((e) => this.runScalarToIntervalOp(e, op)));\n  }\n\n  /**\n   * Calculate the vector of acceptance intervals for a vector function over\n   * given intervals\n   *\n   * @param x first input domain intervals vector\n   * @param y second input domain intervals vector\n   * @param op operation defining the function being run\n   * @returns a vector of spans over all the outputs of op.impl\n   */\n  runVectorPairToVectorOp(x, y, op) {\n    if (x.some((e) => !e.isFinite()) || y.some((e) => !e.isFinite())) {\n      return this.constants().unboundedVector[x.length];\n    }\n\n    const x_values = cartesianProduct(...x.map((e) => e.endpoints()));\n    const y_values = cartesianProduct(...y.map((e) => e.endpoints()));\n\n    const outputs = new Set();\n    x_values.forEach((inner_x) => {\n      y_values.forEach((inner_y) => {\n        outputs.add(this.roundAndFlushVectorPairToVector(inner_x, inner_y, op));\n      });\n    });\n\n    const result = this.spanVectors(...outputs);\n    return result.every((e) => e.isFinite()) ?\n    result :\n    this.constants().unboundedVector[result.length];\n  }\n\n  /**\n   * Calculate the vector of acceptance intervals by running a scalar operation\n   * component-wise over a pair of vectors.\n   *\n   * This is used for situations where a component-wise operation, like vector\n   * subtraction, is needed as part of an inherited accuracy, but the top-level\n   * operation test don't require an explicit vector definition of the function,\n   * due to the generated 'vectorize' tests being sufficient.\n   *\n   * @param x first input domain intervals vector\n   * @param y second input domain intervals vector\n   * @param op scalar operation to be run component-wise\n   * @returns a vector of intervals with the outputs of op.impl\n   */\n  runScalarPairToIntervalOpVectorComponentWise(\n  x,\n  y,\n  op)\n  {\n    assert(\n      x.length === y.length,\n      `runScalarPairToIntervalOpVectorComponentWise requires vectors of the same dimensions`\n    );\n\n    return this.toVector(\n      x.map((i, idx) => {\n        return this.runScalarPairToIntervalOp(i, y[idx], op);\n      })\n    );\n  }\n\n  /**\n   * Calculate the matrix of acceptance intervals for a pair of matrix function over\n   * given intervals\n   *\n   * @param m input domain intervals matrix\n   * @param op operation defining the function being run\n   * @returns a matrix of spans over all the outputs of op.impl\n   */\n  runMatrixToMatrixOp(m, op) {\n    const num_cols = m.length;\n    const num_rows = m[0].length;\n\n    // Do not check for OOB inputs and exit early here, because the shape of\n    // the output matrix may be determined by the operation being run,\n    // i.e. transpose.\n\n    const m_flat = flatten2DArray(m);\n    const m_values = cartesianProduct(\n      ...m_flat.map((e) => e.endpoints())\n    );\n\n    const outputs = new Set();\n    m_values.forEach((inner_m) => {\n      const unflat_m = unflatten2DArray(inner_m, num_cols, num_rows);\n      outputs.add(this.roundAndFlushMatrixToMatrix(unflat_m, op));\n    });\n\n    const result = this.spanMatrices(...outputs);\n    const result_cols = result.length;\n    const result_rows = result[0].length;\n\n    // FPMatrix has to be coerced to ROArrayArray<FPInterval> to use .every. This should\n    // always be safe, since FPMatrix are defined as fixed length array of\n    // arrays.\n    return result.every((c) => c.every((r) => r.isFinite())) ?\n    result :\n    this.constants().unboundedMatrix[result_cols][result_rows];\n  }\n\n  /**\n   * Calculate the Matrix of acceptance intervals by running a scalar operation\n   * component-wise over a scalar and a matrix.\n   *\n   * An example of this is performing constant scaling.\n   *\n   * @param i scalar  input\n   * @param m matrix input\n   * @param op scalar operation to be run component-wise\n   * @returns a matrix of intervals with the outputs of op.impl\n   */\n  runScalarPairToIntervalOpScalarMatrixComponentWise(\n  i,\n  m,\n  op)\n  {\n    const cols = m.length;\n    const rows = m[0].length;\n    return this.toMatrix(\n      unflatten2DArray(\n        flatten2DArray(m).map((e) => this.runScalarPairToIntervalOp(i, e, op)),\n        cols,\n        rows\n      )\n    );\n  }\n\n  /**\n   * Calculate the Matrix of acceptance intervals by running a scalar operation\n   * component-wise over a pair of matrices.\n   *\n   * An example of this is performing matrix addition.\n   *\n   * @param x first input domain intervals matrix\n   * @param y second input domain intervals matrix\n   * @param op scalar operation to be run component-wise\n   * @returns a matrix of intervals with the outputs of op.impl\n   */\n  runScalarPairToIntervalOpMatrixMatrixComponentWise(\n  x,\n  y,\n  op)\n  {\n    assert(\n      x.length === y.length && x[0].length === y[0].length,\n      `runScalarPairToIntervalOpMatrixMatrixComponentWise requires matrices of the same dimensions`\n    );\n\n    const cols = x.length;\n    const rows = x[0].length;\n    const flat_x = flatten2DArray(x);\n    const flat_y = flatten2DArray(y);\n\n    return this.toMatrix(\n      unflatten2DArray(\n        flat_x.map((i, idx) => {\n          return this.runScalarPairToIntervalOp(i, flat_y[idx], op);\n        }),\n        cols,\n        rows\n      )\n    );\n  }\n\n  // API - Fundamental Error Intervals\n\n  /** @returns a ScalarToIntervalOp for [n - error_range, n + error_range] */\n  AbsoluteErrorIntervalOp(error_range) {\n    const op = {\n      impl: (_) => {\n        return this.constants().unboundedInterval;\n      }\n    };\n\n    assert(\n      error_range >= 0,\n      `absoluteErrorInterval must have non-negative error range, get ${error_range}`\n    );\n\n    if (this.isFinite(error_range)) {\n      op.impl = (n) => {\n        assert(!Number.isNaN(n), `absolute error not defined for NaN`);\n        // Return anyInterval if given center n is infinity.\n        if (!this.isFinite(n)) {\n          return this.constants().unboundedInterval;\n        }\n        return this.toInterval([n - error_range, n + error_range]);\n      };\n    }\n\n    return op;\n  }\n\n  absoluteErrorIntervalImpl(n, error_range) {\n    error_range = Math.abs(error_range);\n    return this.runScalarToIntervalOp(\n      this.toInterval(n),\n      this.AbsoluteErrorIntervalOp(error_range)\n    );\n  }\n\n  /** @returns an interval of the absolute error around the point */\n\n\n  /**\n   * Defines a ScalarToIntervalOp for an interval of the correctly rounded values\n   * around the point\n   */\n  CorrectlyRoundedIntervalOp = {\n    impl: (n) => {\n      assert(!Number.isNaN(n), `absolute not defined for NaN`);\n      return this.toInterval(n);\n    }\n  };\n\n  correctlyRoundedIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.CorrectlyRoundedIntervalOp);\n  }\n\n  /** @returns an interval of the correctly rounded values around the point */\n\n\n  correctlyRoundedMatrixImpl(m) {\n    return this.toMatrix(map2DArray(m, this.correctlyRoundedInterval));\n  }\n\n  /** @returns a matrix of correctly rounded intervals for the provided matrix */\n\n\n  /** @returns a ScalarToIntervalOp for [n - numULP * ULP(n), n + numULP * ULP(n)] */\n  ULPIntervalOp(numULP) {\n    const op = {\n      impl: (_) => {\n        return this.constants().unboundedInterval;\n      }\n    };\n\n    if (this.isFinite(numULP)) {\n      op.impl = (n) => {\n        assert(!Number.isNaN(n), `ULP error not defined for NaN`);\n\n        const ulp = this.oneULP(n);\n        const begin = n - numULP * ulp;\n        const end = n + numULP * ulp;\n\n        return this.toInterval([\n        Math.min(begin, this.flushSubnormal(begin)),\n        Math.max(end, this.flushSubnormal(end))]\n        );\n      };\n    }\n\n    return op;\n  }\n\n  ulpIntervalImpl(n, numULP) {\n    numULP = Math.abs(numULP);\n    return this.runScalarToIntervalOp(this.toInterval(n), this.ULPIntervalOp(numULP));\n  }\n\n  /** @returns an interval of N * ULP around the point */\n\n\n  // API - Acceptance Intervals\n\n  AbsIntervalOp = {\n    impl: (n) => {\n      return this.correctlyRoundedInterval(Math.abs(n));\n    }\n  };\n\n  absIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AbsIntervalOp);\n  }\n\n  /** Calculate an acceptance interval for abs(n) */\n\n\n  // This op is implemented differently for f32 and f16.\n  AcosIntervalOp = {\n    impl: (n) => {\n      assert(this.kind === 'f32' || this.kind === 'f16');\n      // acos(n) = atan2(sqrt(1.0 - n * n), n) or a polynomial approximation with absolute error\n      const y = this.sqrtInterval(this.subtractionInterval(1, this.multiplicationInterval(n, n)));\n      const approx_abs_error = this.kind === 'f32' ? 6.77e-5 : 3.91e-3;\n      return this.spanIntervals(\n        this.atan2Interval(y, n),\n        this.absoluteErrorInterval(Math.acos(n), approx_abs_error)\n      );\n    },\n    domain: () => {\n      return this.constants().negOneToOneInterval;\n    }\n  };\n\n  acosIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AcosIntervalOp);\n  }\n\n  /** Calculate an acceptance interval for acos(n) */\n\n\n  AcoshAlternativeIntervalOp = {\n    impl: (x) => {\n      // acosh(x) = log(x + sqrt((x + 1.0f) * (x - 1.0)))\n      const inner_value = this.multiplicationInterval(\n        this.additionInterval(x, 1.0),\n        this.subtractionInterval(x, 1.0)\n      );\n      const sqrt_value = this.sqrtInterval(inner_value);\n      return this.logInterval(this.additionInterval(x, sqrt_value));\n    }\n  };\n\n  acoshAlternativeIntervalImpl(x) {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.AcoshAlternativeIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of acosh(x) using log(x + sqrt((x + 1.0f) * (x - 1.0))) */\n\n\n  AcoshPrimaryIntervalOp = {\n    impl: (x) => {\n      // acosh(x) = log(x + sqrt(x * x - 1.0))\n      const inner_value = this.subtractionInterval(this.multiplicationInterval(x, x), 1.0);\n      const sqrt_value = this.sqrtInterval(inner_value);\n      return this.logInterval(this.additionInterval(x, sqrt_value));\n    }\n  };\n\n  acoshPrimaryIntervalImpl(x) {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.AcoshPrimaryIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of acosh(x) using log(x + sqrt(x * x - 1.0)) */\n\n\n  /** All acceptance interval functions for acosh(x) */\n\n\n  AdditionIntervalOp = {\n    impl: (x, y) => {\n      return this.correctlyRoundedInterval(x + y);\n    }\n  };\n\n  additionIntervalImpl(x, y) {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.AdditionIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x + y, when x and y are both scalars */\n\n\n\n\n\n  additionMatrixMatrixIntervalImpl(x, y) {\n    return this.runScalarPairToIntervalOpMatrixMatrixComponentWise(\n      this.toMatrix(x),\n      this.toMatrix(y),\n      this.AdditionIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x + y, when x and y are matrices */\n\n\n\n\n\n  // This op is implemented differently for f32 and f16.\n  AsinIntervalOp = {\n    impl: (n) => {\n      assert(this.kind === 'f32' || this.kind === 'f16');\n      // asin(n) = atan2(n, sqrt(1.0 - n * n)) or a polynomial approximation with absolute error\n      const x = this.sqrtInterval(this.subtractionInterval(1, this.multiplicationInterval(n, n)));\n      const approx_abs_error = this.kind === 'f32' ? 6.81e-5 : 3.91e-3;\n      return this.spanIntervals(\n        this.atan2Interval(n, x),\n        this.absoluteErrorInterval(Math.asin(n), approx_abs_error)\n      );\n    },\n    domain: () => {\n      return this.constants().negOneToOneInterval;\n    }\n  };\n\n  /** Calculate an acceptance interval for asin(n) */\n  asinIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AsinIntervalOp);\n  }\n\n  /** Calculate an acceptance interval for asin(n) */\n\n\n  AsinhIntervalOp = {\n    impl: (x) => {\n      // asinh(x) = log(x + sqrt(x * x + 1.0))\n      const inner_value = this.additionInterval(this.multiplicationInterval(x, x), 1.0);\n      const sqrt_value = this.sqrtInterval(inner_value);\n      return this.logInterval(this.additionInterval(x, sqrt_value));\n    }\n  };\n\n  asinhIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AsinhIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of asinh(x) */\n\n\n  AtanIntervalOp = {\n    impl: (n) => {\n      assert(this.kind === 'f32' || this.kind === 'f16');\n      const ulp_error = this.kind === 'f32' ? 4096 : 5;\n      return this.ulpInterval(Math.atan(n), ulp_error);\n    }\n  };\n\n  /** Calculate an acceptance interval of atan(x) */\n  atanIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AtanIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of atan(x) */\n\n\n  // This op is implemented differently for f32 and f16.\n  Atan2IntervalOpBuilder() {\n    assert(this.kind === 'f32' || this.kind === 'f16');\n    const constants = this.constants();\n    // For atan2, the params are labelled (y, x), not (x, y), so domain.x is first parameter (y),\n    // and domain.y is the second parameter (x).\n    // The first param must be finite and normal.\n    const domain_x = [\n    this.toInterval([constants.negative.min, constants.negative.max]),\n    this.toInterval([constants.positive.min, constants.positive.max])];\n\n    // inherited from division\n    const domain_y =\n    this.kind === 'f32' ?\n    [this.toInterval([-(2 ** 126), -(2 ** -126)]), this.toInterval([2 ** -126, 2 ** 126])] :\n    [this.toInterval([-(2 ** 14), -(2 ** -14)]), this.toInterval([2 ** -14, 2 ** 14])];\n    const ulp_error = this.kind === 'f32' ? 4096 : 5;\n    return {\n      impl: (y, x) => {\n        // Accurate result in f64\n        let atan_yx = Math.atan(y / x);\n        // Offset by +/-pi according to the definition. Use pi value in f64 because we are\n        // handling accurate result.\n        if (x < 0) {\n          // x < 0, y > 0, result is atan(y/x) + π\n          if (y > 0) {\n            atan_yx = atan_yx + kValue.f64.positive.pi.whole;\n          } else {\n            // x < 0, y < 0, result is atan(y/x) - π\n            atan_yx = atan_yx - kValue.f64.positive.pi.whole;\n          }\n        }\n\n        return this.ulpInterval(atan_yx, ulp_error);\n      },\n      extrema: (y, x) => {\n        // There is discontinuity, which generates an unbounded result, at y/x = 0 that will dominate the accuracy\n        if (y.contains(0)) {\n          if (x.contains(0)) {\n            return [this.toInterval(0), this.toInterval(0)];\n          }\n          return [this.toInterval(0), x];\n        }\n        return [y, x];\n      },\n      domain: () => {\n        return { x: domain_x, y: domain_y };\n      }\n    };\n  }\n\n  atan2IntervalImpl(y, x) {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(y),\n      this.toInterval(x),\n      this.Atan2IntervalOpBuilder()\n    );\n  }\n\n  /** Calculate an acceptance interval of atan2(y, x) */\n\n\n\n\n\n  AtanhIntervalOp = {\n    impl: (n) => {\n      // atanh(x) = log((1.0 + x) / (1.0 - x)) * 0.5\n      const numerator = this.additionInterval(1.0, n);\n      const denominator = this.subtractionInterval(1.0, n);\n      const log_interval = this.logInterval(this.divisionInterval(numerator, denominator));\n      return this.multiplicationInterval(log_interval, 0.5);\n    }\n  };\n\n  atanhIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.AtanhIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of atanh(x) */\n\n\n  CeilIntervalOp = {\n    impl: (n) => {\n      return this.correctlyRoundedInterval(Math.ceil(n));\n    }\n  };\n\n  ceilIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.CeilIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of ceil(x) */\n\n\n  ClampMedianIntervalOp = {\n    impl: (x, y, z) => {\n      return this.correctlyRoundedInterval(\n        // Default sort is string sort, so have to implement numeric comparison.\n        // Cannot use the b-a one-liner, because that assumes no infinities.\n        [x, y, z].sort((a, b) => {\n          if (a < b) {\n            return -1;\n          }\n          if (a > b) {\n            return 1;\n          }\n          return 0;\n        })[1]\n      );\n    }\n  };\n\n  clampMedianIntervalImpl(\n  x,\n  y,\n  z)\n  {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.toInterval(z),\n      this.ClampMedianIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of clamp(x, y, z) via median(x, y, z) */\n\n\n\n\n\n\n  ClampMinMaxIntervalOp = {\n    impl: (x, low, high) => {\n      return this.minInterval(this.maxInterval(x, low), high);\n    }\n  };\n\n  clampMinMaxIntervalImpl(\n  x,\n  low,\n  high)\n  {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(low),\n      this.toInterval(high),\n      this.ClampMinMaxIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of clamp(x, high, low) via min(max(x, low), high) */\n\n\n\n\n\n\n  /** All acceptance interval functions for clamp(x, y, z) */\n\n\n  CosIntervalOp = {\n    impl: (n) => {\n      assert(this.kind === 'f32' || this.kind === 'f16');\n      const abs_error = this.kind === 'f32' ? 2 ** -11 : 2 ** -7;\n      return this.absoluteErrorInterval(Math.cos(n), abs_error);\n    },\n    domain: () => {\n      return this.constants().negPiToPiInterval;\n    }\n  };\n\n  cosIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.CosIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of cos(x) */\n\n\n  CoshIntervalOp = {\n    impl: (n) => {\n      // cosh(x) = (exp(x) + exp(-x)) * 0.5\n      const minus_n = this.negationInterval(n);\n      return this.multiplicationInterval(\n        this.additionInterval(this.expInterval(n), this.expInterval(minus_n)),\n        0.5\n      );\n    }\n  };\n\n  coshIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.CoshIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of cosh(x) */\n\n\n  CrossIntervalOp = {\n    impl: (x, y) => {\n      assert(x.length === 3, `CrossIntervalOp received x with ${x.length} instead of 3`);\n      assert(y.length === 3, `CrossIntervalOp received y with ${y.length} instead of 3`);\n\n      // cross(x, y) = r, where\n      //   r[0] = x[1] * y[2] - x[2] * y[1]\n      //   r[1] = x[2] * y[0] - x[0] * y[2]\n      //   r[2] = x[0] * y[1] - x[1] * y[0]\n\n      const r0 = this.subtractionInterval(\n        this.multiplicationInterval(x[1], y[2]),\n        this.multiplicationInterval(x[2], y[1])\n      );\n      const r1 = this.subtractionInterval(\n        this.multiplicationInterval(x[2], y[0]),\n        this.multiplicationInterval(x[0], y[2])\n      );\n      const r2 = this.subtractionInterval(\n        this.multiplicationInterval(x[0], y[1]),\n        this.multiplicationInterval(x[1], y[0])\n      );\n\n      if (r0.isFinite() && r1.isFinite() && r2.isFinite()) {\n        return [r0, r1, r2];\n      }\n      return this.constants().unboundedVector[3];\n    }\n  };\n\n  crossIntervalImpl(x, y) {\n    assert(x.length === 3, `Cross is only defined for vec3`);\n    assert(y.length === 3, `Cross is only defined for vec3`);\n    return this.runVectorPairToVectorOp(this.toVector(x), this.toVector(y), this.CrossIntervalOp);\n  }\n\n  /** Calculate a vector of acceptance intervals for cross(x, y) */\n\n\n  DegreesIntervalOp = {\n    impl: (n) => {\n      return this.multiplicationInterval(n, 57.295779513082322865);\n    }\n  };\n\n  degreesIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.DegreesIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of degrees(x) */\n\n\n  /**\n   * Calculate the minor of a NxN matrix.\n   *\n   * The ijth minor of a square matrix, is the N-1xN-1 matrix created by removing\n   * the ith column and jth row from the original matrix.\n   */\n  minorNxN(m, col, row) {\n    const dim = m.length;\n    assert(m.length === m[0].length, `minorMatrix is only defined for square matrices`);\n    assert(col >= 0 && col < dim, `col ${col} needs be in [0, # of columns '${dim}')`);\n    assert(row >= 0 && row < dim, `row ${row} needs be in [0, # of rows '${dim}')`);\n\n    const result = [...Array(dim - 1)].map((_) => [...Array(dim - 1)]);\n\n    const col_indices = [...Array(dim).keys()].filter((e) => e !== col);\n    const row_indices = [...Array(dim).keys()].filter((e) => e !== row);\n\n    col_indices.forEach((c, i) => {\n      row_indices.forEach((r, j) => {\n        result[i][j] = m[c][r];\n      });\n    });\n    return result;\n  }\n\n  /** Calculate an acceptance interval for determinant(m), where m is a 2x2 matrix */\n  determinant2x2Interval(m) {\n    assert(\n      m.length === m[0].length && m.length === 2,\n      `determinant2x2Interval called on non-2x2 matrix`\n    );\n    return this.subtractionInterval(\n      this.multiplicationInterval(m[0][0], m[1][1]),\n      this.multiplicationInterval(m[0][1], m[1][0])\n    );\n  }\n\n  /** Calculate an acceptance interval for determinant(m), where m is a 3x3 matrix */\n  determinant3x3Interval(m) {\n    assert(\n      m.length === m[0].length && m.length === 3,\n      `determinant3x3Interval called on non-3x3 matrix`\n    );\n\n    // M is a 3x3 matrix\n    // det(M) is A + B + C, where A, B, C are three elements in a row/column times\n    // their own co-factor.\n    // (The co-factor is the determinant of the minor of that position with the\n    // appropriate +/-)\n    // For simplicity sake A, B, C are calculated as the elements of the first\n    // column\n    const A = this.multiplicationInterval(\n      m[0][0],\n      this.determinant2x2Interval(this.minorNxN(m, 0, 0))\n    );\n    const B = this.multiplicationInterval(\n      -m[0][1],\n      this.determinant2x2Interval(this.minorNxN(m, 0, 1))\n    );\n    const C = this.multiplicationInterval(\n      m[0][2],\n      this.determinant2x2Interval(this.minorNxN(m, 0, 2))\n    );\n\n    // Need to calculate permutations, since for fp addition is not associative,\n    // so A + B + C is not guaranteed to equal B + C + A, etc.\n    const permutations = calculatePermutations([A, B, C]);\n    return this.spanIntervals(\n      ...permutations.map((p) =>\n      p.reduce((prev, cur) => this.additionInterval(prev, cur))\n      )\n    );\n  }\n\n  /** Calculate an acceptance interval for determinant(m), where m is a 4x4 matrix */\n  determinant4x4Interval(m) {\n    assert(\n      m.length === m[0].length && m.length === 4,\n      `determinant3x3Interval called on non-4x4 matrix`\n    );\n\n    // M is a 4x4 matrix\n    // det(M) is A + B + C + D, where A, B, C, D are four elements in a row/column\n    // times their own co-factor.\n    // (The co-factor is the determinant of the minor of that position with the\n    // appropriate +/-)\n    // For simplicity sake A, B, C, D are calculated as the elements of the\n    // first column\n    const A = this.multiplicationInterval(\n      m[0][0],\n      this.determinant3x3Interval(this.minorNxN(m, 0, 0))\n    );\n    const B = this.multiplicationInterval(\n      -m[0][1],\n      this.determinant3x3Interval(this.minorNxN(m, 0, 1))\n    );\n    const C = this.multiplicationInterval(\n      m[0][2],\n      this.determinant3x3Interval(this.minorNxN(m, 0, 2))\n    );\n    const D = this.multiplicationInterval(\n      -m[0][3],\n      this.determinant3x3Interval(this.minorNxN(m, 0, 3))\n    );\n\n    // Need to calculate permutations, since for fp addition is not associative\n    // so A + B + C + D is not guaranteed to equal B + C + A + D, etc.\n    const permutations = calculatePermutations([A, B, C, D]);\n    return this.spanIntervals(\n      ...permutations.map((p) =>\n      p.reduce((prev, cur) => this.additionInterval(prev, cur))\n      )\n    );\n  }\n\n  /**\n   * This code calculates 3x3 and 4x4 determinants using the textbook co-factor\n   * method, using the first column for the co-factor selection.\n   *\n   * For matrices composed of integer elements, e, with |e|^4 < 2**21, this\n   * should be fine.\n   *\n   * For e, where e is subnormal or 4*(e^4) might not be precisely expressible as\n   * a f32 values, this approach breaks down, because the rule of all co-factor\n   * definitions of determinant being equal doesn't hold in these cases.\n   *\n   * The general solution for this is to calculate all the permutations of the\n   * operations in the worked out formula for determinant.\n   * For 3x3 this is tractable, but for 4x4 this works out to ~23! permutations\n   * that need to be calculated.\n   * Thus, CTS testing and the spec definition of accuracy is restricted to the\n   * space that the simple implementation is valid.\n   */\n  determinantIntervalImpl(x) {\n    const dim = x.length;\n    assert(\n      x[0].length === dim && (dim === 2 || dim === 3 || dim === 4),\n      `determinantInterval only defined for 2x2, 3x3 and 4x4 matrices`\n    );\n    switch (dim) {\n      case 2:\n        return this.determinant2x2Interval(x);\n      case 3:\n        return this.determinant3x3Interval(x);\n      case 4:\n        return this.determinant4x4Interval(x);\n    }\n    unreachable(\n      \"determinantInterval called on x, where which has an unexpected dimension of '${dim}'\"\n    );\n  }\n\n  /** Calculate an acceptance interval for determinant(x) */\n\n\n  DistanceIntervalScalarOp = {\n    impl: (x, y) => {\n      return this.lengthInterval(this.subtractionInterval(x, y));\n    }\n  };\n\n  DistanceIntervalVectorOp = {\n    impl: (x, y) => {\n      return this.lengthInterval(\n        this.runScalarPairToIntervalOpVectorComponentWise(\n          this.toVector(x),\n          this.toVector(y),\n          this.SubtractionIntervalOp\n        )\n      );\n    }\n  };\n\n  distanceIntervalImpl(\n  x,\n  y)\n  {\n    if (x instanceof Array && y instanceof Array) {\n      assert(\n        x.length === y.length,\n        `distanceInterval requires both params to have the same number of elements`\n      );\n      return this.runVectorPairToIntervalOp(\n        this.toVector(x),\n        this.toVector(y),\n        this.DistanceIntervalVectorOp\n      );\n    } else if (!(x instanceof Array) && !(y instanceof Array)) {\n      return this.runScalarPairToIntervalOp(\n        this.toInterval(x),\n        this.toInterval(y),\n        this.DistanceIntervalScalarOp\n      );\n    }\n    unreachable(\n      `distanceInterval requires both params to both the same type, either scalars or vectors`\n    );\n  }\n\n  /** Calculate an acceptance interval of distance(x, y) */\n\n\n\n\n\n  // This op is implemented differently for f32 and f16.\n  DivisionIntervalOpBuilder() {\n    const constants = this.constants();\n    const domain_x = [this.toInterval([constants.negative.min, constants.positive.max])];\n    const domain_y =\n    this.kind === 'f32' || this.kind === 'abstract' ?\n    [this.toInterval([-(2 ** 126), -(2 ** -126)]), this.toInterval([2 ** -126, 2 ** 126])] :\n    [this.toInterval([-(2 ** 14), -(2 ** -14)]), this.toInterval([2 ** -14, 2 ** 14])];\n    return {\n      impl: (x, y) => {\n        if (y === 0) {\n          return constants.unboundedInterval;\n        }\n        return this.ulpInterval(x / y, 2.5);\n      },\n      extrema: (x, y) => {\n        // division has a discontinuity at y = 0.\n        if (y.contains(0)) {\n          y = this.toInterval(0);\n        }\n        return [x, y];\n      },\n      domain: () => {\n        return { x: domain_x, y: domain_y };\n      }\n    };\n  }\n\n  divisionIntervalImpl(x, y) {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.DivisionIntervalOpBuilder()\n    );\n  }\n\n  /** Calculate an acceptance interval of x / y */\n\n\n\n\n\n  DotIntervalOp = {\n    impl: (x, y) => {\n      // dot(x, y) = sum of x[i] * y[i]\n      const multiplications = this.runScalarPairToIntervalOpVectorComponentWise(\n        this.toVector(x),\n        this.toVector(y),\n        this.MultiplicationIntervalOp\n      );\n\n      // vec2 doesn't require permutations, since a + b = b + a for floats\n      if (multiplications.length === 2) {\n        return this.additionInterval(multiplications[0], multiplications[1]);\n      }\n\n      // The spec does not state the ordering of summation, so all the\n      // permutations are calculated and their results spanned, since addition\n      // of more than two floats is not transitive, i.e. a + b + c is not\n      // guaranteed to equal b + a + c\n      const permutations = calculatePermutations(multiplications);\n      return this.spanIntervals(\n        ...permutations.map((p) => p.reduce((prev, cur) => this.additionInterval(prev, cur)))\n      );\n    }\n  };\n\n  dotIntervalImpl(\n  x,\n  y)\n  {\n    assert(\n      x.length === y.length,\n      `dot not defined for vectors with different lengths, x = ${x}, y = ${y}`\n    );\n    return this.runVectorPairToIntervalOp(this.toVector(x), this.toVector(y), this.DotIntervalOp);\n  }\n\n  /** Calculated the acceptance interval for dot(x, y) */\n\n\n\n\n\n  ExpIntervalOp = {\n    impl: (n) => {\n      assert(this.kind === 'f32' || this.kind === 'f16');\n      const ulp_error = this.kind === 'f32' ? 3 + 2 * Math.abs(n) : 1 + 2 * Math.abs(n);\n      return this.ulpInterval(Math.exp(n), ulp_error);\n    }\n  };\n\n  expIntervalImpl(x) {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.ExpIntervalOp);\n  }\n\n  /** Calculate an acceptance interval for exp(x) */\n\n\n  Exp2IntervalOp = {\n    impl: (n) => {\n      assert(this.kind === 'f32' || this.kind === 'f16');\n      const ulp_error = this.kind === 'f32' ? 3 + 2 * Math.abs(n) : 1 + 2 * Math.abs(n);\n      return this.ulpInterval(Math.pow(2, n), ulp_error);\n    }\n  };\n\n  exp2IntervalImpl(x) {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.Exp2IntervalOp);\n  }\n\n  /** Calculate an acceptance interval for exp2(x) */\n\n\n  /**\n   * faceForward(x, y, z) = select(-x, x, dot(z, y) < 0.0)\n   *\n   * This builtin selects from two discrete results (delta rounding/flushing),\n   * so the majority of the framework code is not appropriate, since the\n   * framework attempts to span results.\n   *\n   * Thus, a bespoke implementation is used instead of\n   * defining an Op and running that through the framework.\n   */\n  faceForwardIntervalsImpl(\n  x,\n  y,\n  z)\n  {\n    const x_vec = this.toVector(x);\n    // Running vector through this.runScalarToIntervalOpComponentWise to make\n    // sure that flushing/rounding is handled, since toVector does not perform\n    // those operations.\n    const positive_x = this.runScalarToIntervalOpComponentWise(x_vec, {\n      impl: (i) => {\n        return this.toInterval(i);\n      }\n    });\n    const negative_x = this.runScalarToIntervalOpComponentWise(x_vec, this.NegationIntervalOp);\n\n    const dot_interval = this.dotInterval(z, y);\n\n    const results = [];\n\n    if (!dot_interval.isFinite()) {\n      // dot calculation went out of bounds\n      // Inserting undefined in the result, so that the test running framework\n      // is aware of this potential OOB.\n      // For const-eval tests, it means that the test case should be skipped,\n      // since the shader will fail to compile.\n      // For non-const-eval the undefined should be stripped out of the possible\n      // results.\n\n      results.push(undefined);\n    }\n\n    // Because the result of dot can be an interval, it might span across 0, thus\n    // it is possible that both -x and x are valid responses.\n    if (dot_interval.begin < 0 || dot_interval.end < 0) {\n      results.push(positive_x);\n    }\n\n    if (dot_interval.begin >= 0 || dot_interval.end >= 0) {\n      results.push(negative_x);\n    }\n\n    assert(\n      results.length > 0 || results.every((r) => r === undefined),\n      `faceForwardInterval selected neither positive x or negative x for the result, this shouldn't be possible`\n    );\n    return results;\n  }\n\n  /** Calculate the acceptance intervals for faceForward(x, y, z) */\n\n\n\n\n\n\n  FloorIntervalOp = {\n    impl: (n) => {\n      return this.correctlyRoundedInterval(Math.floor(n));\n    }\n  };\n\n  floorIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.FloorIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of floor(x) */\n\n\n  FmaIntervalOp = {\n    impl: (x, y, z) => {\n      return this.additionInterval(this.multiplicationInterval(x, y), z);\n    }\n  };\n\n  fmaIntervalImpl(x, y, z) {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.toInterval(z),\n      this.FmaIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval for fma(x, y, z) */\n\n\n  FractIntervalOp = {\n    impl: (n) => {\n      // fract(x) = x - floor(x) is defined in the spec.\n      // For people coming from a non-graphics background this will cause some\n      // unintuitive results. For example,\n      // fract(-1.1) is not 0.1 or -0.1, but instead 0.9.\n      // This is how other shading languages operate and allows for a desirable\n      // wrap around in graphics programming.\n      const result = this.subtractionInterval(n, this.floorInterval(n));\n      assert(\n        // negative.subnormal.min instead of 0, because FTZ can occur\n        // selectively during the calculation\n        this.toInterval([this.constants().negative.subnormal.min, 1.0]).contains(result),\n        `fract(${n}) interval [${result}] unexpectedly extends beyond [~0.0, 1.0]`\n      );\n      if (result.contains(1)) {\n        // Very small negative numbers can lead to catastrophic cancellation,\n        // thus calculating a fract of 1.0, which is technically not a\n        // fractional part, so some implementations clamp the result to next\n        // nearest number.\n        return this.spanIntervals(result, this.toInterval(this.constants().positive.less_than_one));\n      }\n      return result;\n    }\n  };\n\n  fractIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.FractIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of fract(x) */\n\n\n  InverseSqrtIntervalOp = {\n    impl: (n) => {\n      return this.ulpInterval(1 / Math.sqrt(n), 2);\n    },\n    domain: () => {\n      return this.constants().greaterThanZeroInterval;\n    }\n  };\n\n  inverseSqrtIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.InverseSqrtIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of inverseSqrt(x) */\n\n\n  LdexpIntervalOp = {\n    impl: (e1, e2) => {\n      assert(Number.isInteger(e2), 'the second param of ldexp must be an integer');\n      // Spec explicitly calls indeterminate value if e2 > bias + 1\n      if (e2 > this.constants().bias + 1) {\n        return this.constants().unboundedInterval;\n      }\n      // The spec says the result of ldexp(e1, e2) = e1 * 2 ^ e2, and the\n      // accuracy is correctly rounded to the true value, so the inheritance\n      // framework does not need to be invoked to determine endpoints.\n      // Instead, the value at a higher precision is calculated and passed to\n      // correctlyRoundedInterval.\n      const result = e1 * 2 ** e2;\n      if (!Number.isFinite(result)) {\n        // Overflowed TS's number type, so definitely out of bounds\n        return this.constants().unboundedInterval;\n      }\n      // The result may be zero if e2 + bias <= 0, but we can't simply span the interval to 0.0.\n      // For example, for f32 input e1 = 2**120 and e2 = -130, e2 + bias = -3 <= 0, but\n      // e1 * 2 ** e2 = 2**-10, so the valid result is 2**-10 or 0.0, instead of [0.0, 2**-10].\n      // Always return the correctly-rounded interval, and special examination should be taken when\n      // using the result.\n      return this.correctlyRoundedInterval(result);\n    }\n  };\n\n  ldexpIntervalImpl(e1, e2) {\n    // Only round and flush e1, as e2 is of integer type (i32 or abstract integer) and should be\n    // precise.\n    return this.roundAndFlushScalarToInterval(e1, {\n      impl: (e1) => this.LdexpIntervalOp.impl(e1, e2)\n    });\n  }\n\n  /**\n   * Calculate an acceptance interval of ldexp(e1, e2), where e2 is integer\n   *\n   * Spec indicate that the result may be zero if e2 + bias <= 0, no matter how large\n   * was e1 * 2 ** e2, i.e. the actual valid result is correctlyRounded(e1 * 2 ** e2) or 0.0, if\n   * e2 + bias <= 0. Such discontinious flush-to-zero behavior is hard to be expressed using\n   * FPInterval, therefore in the situation of e2 + bias <= 0 the returned interval would be just\n   * correctlyRounded(e1 * 2 ** e2), and special examination should be taken when using the result.\n   *\n   */\n\n\n  LengthIntervalScalarOp = {\n    impl: (n) => {\n      return this.sqrtInterval(this.multiplicationInterval(n, n));\n    }\n  };\n\n  LengthIntervalVectorOp = {\n    impl: (n) => {\n      return this.sqrtInterval(this.dotInterval(n, n));\n    }\n  };\n\n  lengthIntervalImpl(n) {\n    if (n instanceof Array) {\n      return this.runVectorToIntervalOp(this.toVector(n), this.LengthIntervalVectorOp);\n    } else {\n      return this.runScalarToIntervalOp(this.toInterval(n), this.LengthIntervalScalarOp);\n    }\n  }\n\n  /** Calculate an acceptance interval of length(x) */\n\n\n\n\n  LogIntervalOp = {\n    impl: (n) => {\n      assert(this.kind === 'f32' || this.kind === 'f16');\n      const abs_error = this.kind === 'f32' ? 2 ** -21 : 2 ** -7;\n      if (n >= 0.5 && n <= 2.0) {\n        return this.absoluteErrorInterval(Math.log(n), abs_error);\n      }\n      return this.ulpInterval(Math.log(n), 3);\n    },\n    domain: () => {\n      return this.constants().greaterThanZeroInterval;\n    }\n  };\n\n  logIntervalImpl(x) {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.LogIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of log(x) */\n\n\n  Log2IntervalOp = {\n    impl: (n) => {\n      assert(this.kind === 'f32' || this.kind === 'f16');\n      const abs_error = this.kind === 'f32' ? 2 ** -21 : 2 ** -7;\n      if (n >= 0.5 && n <= 2.0) {\n        return this.absoluteErrorInterval(Math.log2(n), abs_error);\n      }\n      return this.ulpInterval(Math.log2(n), 3);\n    },\n    domain: () => {\n      return this.constants().greaterThanZeroInterval;\n    }\n  };\n\n  log2IntervalImpl(x) {\n    return this.runScalarToIntervalOp(this.toInterval(x), this.Log2IntervalOp);\n  }\n\n  /** Calculate an acceptance interval of log2(x) */\n\n\n  MaxIntervalOp = {\n    impl: (x, y) => {\n      // If both of the inputs are subnormal, then either of the inputs can be returned\n      if (this.isSubnormal(x) && this.isSubnormal(y)) {\n        return this.correctlyRoundedInterval(\n          this.spanIntervals(this.toInterval(x), this.toInterval(y))\n        );\n      }\n\n      return this.correctlyRoundedInterval(Math.max(x, y));\n    }\n  };\n\n  maxIntervalImpl(x, y) {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.MaxIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of max(x, y) */\n\n\n\n\n\n  MinIntervalOp = {\n    impl: (x, y) => {\n      // If both of the inputs are subnormal, then either of the inputs can be returned\n      if (this.isSubnormal(x) && this.isSubnormal(y)) {\n        return this.correctlyRoundedInterval(\n          this.spanIntervals(this.toInterval(x), this.toInterval(y))\n        );\n      }\n\n      return this.correctlyRoundedInterval(Math.min(x, y));\n    }\n  };\n\n  minIntervalImpl(x, y) {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.MinIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of min(x, y) */\n\n\n\n\n\n  MixImpreciseIntervalOp = {\n    impl: (x, y, z) => {\n      // x + (y - x) * z =\n      //  x + t, where t = (y - x) * z\n      const t = this.multiplicationInterval(this.subtractionInterval(y, x), z);\n      return this.additionInterval(x, t);\n    }\n  };\n\n  mixImpreciseIntervalImpl(x, y, z) {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.toInterval(z),\n      this.MixImpreciseIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of mix(x, y, z) using x + (y - x) * z */\n\n\n  MixPreciseIntervalOp = {\n    impl: (x, y, z) => {\n      // x * (1.0 - z) + y * z =\n      //   t + s, where t = x * (1.0 - z), s = y * z\n      const t = this.multiplicationInterval(x, this.subtractionInterval(1.0, z));\n      const s = this.multiplicationInterval(y, z);\n      return this.additionInterval(t, s);\n    }\n  };\n\n  mixPreciseIntervalImpl(x, y, z) {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.toInterval(z),\n      this.MixPreciseIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of mix(x, y, z) using x * (1.0 - z) + y * z */\n\n\n  /** All acceptance interval functions for mix(x, y, z) */\n\n\n  modfIntervalImpl(n) {\n    const fract = this.correctlyRoundedInterval(n % 1.0);\n    const whole = this.correctlyRoundedInterval(n - n % 1.0);\n    return { fract, whole };\n  }\n\n  /** Calculate an acceptance interval of modf(x) */\n\n\n  MultiplicationInnerOp = {\n    impl: (x, y) => {\n      return this.correctlyRoundedInterval(x * y);\n    }\n  };\n\n  MultiplicationIntervalOp = {\n    impl: (x, y) => {\n      return this.roundAndFlushScalarPairToInterval(x, y, this.MultiplicationInnerOp);\n    }\n  };\n\n  multiplicationIntervalImpl(x, y) {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.MultiplicationIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x * y */\n\n\n\n\n\n  /**\n   * @returns the vector result of multiplying the given vector by the given\n   *          scalar\n   */\n  multiplyVectorByScalar(v, c) {\n    return this.toVector(v.map((x) => this.multiplicationInterval(x, c)));\n  }\n\n  multiplicationMatrixScalarIntervalImpl(mat, scalar) {\n    return this.runScalarPairToIntervalOpScalarMatrixComponentWise(\n      this.toInterval(scalar),\n      this.toMatrix(mat),\n      this.MultiplicationIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x * y, when x is a matrix and y is a scalar */\n\n\n\n\n\n  multiplicationScalarMatrixIntervalImpl(scalar, mat) {\n    return this.multiplicationMatrixScalarInterval(mat, scalar);\n  }\n\n  /** Calculate an acceptance interval of x * y, when x is a scalar and y is a matrix */\n\n\n\n\n\n  multiplicationMatrixMatrixIntervalImpl(\n  mat_x,\n  mat_y)\n  {\n    const x_cols = mat_x.length;\n    const x_rows = mat_x[0].length;\n    const y_cols = mat_y.length;\n    const y_rows = mat_y[0].length;\n    assert(x_cols === y_rows, `'mat${x_cols}x${x_rows} * mat${y_cols}x${y_rows}' is not defined`);\n\n    const x_transposed = this.transposeInterval(mat_x);\n\n    let oob_result = false;\n    const result = [...Array(y_cols)].map((_) => [...Array(x_rows)]);\n    mat_y.forEach((y, i) => {\n      x_transposed.forEach((x, j) => {\n        result[i][j] = this.dotInterval(x, y);\n        if (!oob_result && !result[i][j].isFinite()) {\n          oob_result = true;\n        }\n      });\n    });\n\n    if (oob_result) {\n      return this.constants().unboundedMatrix[result.length][\n      result[0].length];\n\n    }\n    return result;\n  }\n\n  /** Calculate an acceptance interval of x * y, when x is a matrix and y is a matrix */\n\n\n\n\n\n  multiplicationMatrixVectorIntervalImpl(\n  x,\n  y)\n  {\n    const cols = x.length;\n    const rows = x[0].length;\n    assert(y.length === cols, `'mat${cols}x${rows} * vec${y.length}' is not defined`);\n\n    return this.transposeInterval(x).map((e) => this.dotInterval(e, y));\n  }\n\n  /** Calculate an acceptance interval of x * y, when x is a matrix and y is a vector */\n\n\n\n\n\n  multiplicationVectorMatrixIntervalImpl(\n  x,\n  y)\n  {\n    const cols = y.length;\n    const rows = y[0].length;\n    assert(x.length === rows, `'vec${x.length} * mat${cols}x${rows}' is not defined`);\n\n    return y.map((e) => this.dotInterval(x, e));\n  }\n\n  /** Calculate an acceptance interval of x * y, when x is a vector and y is a matrix */\n\n\n\n\n\n  NegationIntervalOp = {\n    impl: (n) => {\n      return this.correctlyRoundedInterval(-n);\n    }\n  };\n\n  negationIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.NegationIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of -x */\n\n\n  NormalizeIntervalOp = {\n    impl: (n) => {\n      const length = this.lengthInterval(n);\n      const result = this.toVector(n.map((e) => this.divisionInterval(e, length)));\n      if (result.some((r) => !r.isFinite())) {\n        return this.constants().unboundedVector[result.length];\n      }\n      return result;\n    }\n  };\n\n  normalizeIntervalImpl(n) {\n    return this.runVectorToVectorOp(this.toVector(n), this.NormalizeIntervalOp);\n  }\n\n\n\n  PowIntervalOp = {\n    // pow(x, y) has no explicit domain restrictions, but inherits the x <= 0\n    // domain restriction from log2(x). Invoking log2Interval(x) in impl will\n    // enforce this, so there is no need to wrap the impl call here.\n    impl: (x, y) => {\n      return this.exp2Interval(this.multiplicationInterval(y, this.log2Interval(x)));\n    }\n  };\n\n  powIntervalImpl(x, y) {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.PowIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of pow(x, y) */\n\n\n\n\n\n  RadiansIntervalOp = {\n    impl: (n) => {\n      return this.multiplicationInterval(n, 0.017453292519943295474);\n    }\n  };\n\n  radiansIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.RadiansIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of radians(x) */\n\n\n  ReflectIntervalOp = {\n    impl: (x, y) => {\n      assert(\n        x.length === y.length,\n        `ReflectIntervalOp received x (${x}) and y (${y}) with different numbers of elements`\n      );\n\n      // reflect(x, y) = x - 2.0 * dot(x, y) * y\n      //               = x - t * y, t = 2.0 * dot(x, y)\n      // x = incident vector\n      // y = normal of reflecting surface\n      const t = this.multiplicationInterval(2.0, this.dotInterval(x, y));\n      const rhs = this.multiplyVectorByScalar(y, t);\n      const result = this.runScalarPairToIntervalOpVectorComponentWise(\n        this.toVector(x),\n        rhs,\n        this.SubtractionIntervalOp\n      );\n\n      if (result.some((r) => !r.isFinite())) {\n        return this.constants().unboundedVector[result.length];\n      }\n      return result;\n    }\n  };\n\n  reflectIntervalImpl(x, y) {\n    assert(\n      x.length === y.length,\n      `reflect is only defined for vectors with the same number of elements`\n    );\n    return this.runVectorPairToVectorOp(this.toVector(x), this.toVector(y), this.ReflectIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of reflect(x, y) */\n\n\n\n\n\n  /**\n   * refract is a singular function in the sense that it is the only builtin that\n   * takes in (FPVector, FPVector, F32/F16) and returns FPVector and is basically\n   * defined in terms of other functions.\n   *\n   * Instead of implementing all the framework code to integrate it with its\n   * own operation type, etc, it instead has a bespoke implementation that is a\n   * composition of other builtin functions that use the framework.\n   */\n  refractIntervalImpl(i, s, r) {\n    assert(\n      i.length === s.length,\n      `refract is only defined for vectors with the same number of elements`\n    );\n\n    const r_squared = this.multiplicationInterval(r, r);\n    const dot = this.dotInterval(s, i);\n    const dot_squared = this.multiplicationInterval(dot, dot);\n    const one_minus_dot_squared = this.subtractionInterval(1, dot_squared);\n    const k = this.subtractionInterval(\n      1.0,\n      this.multiplicationInterval(r_squared, one_minus_dot_squared)\n    );\n\n    if (!k.isFinite() || k.containsZeroOrSubnormals()) {\n      // There is a discontinuity at k == 0, due to sqrt(k) being calculated, so exiting early\n      return this.constants().unboundedVector[this.toVector(i).length];\n    }\n\n    if (k.end < 0.0) {\n      // if k is negative, then the zero vector is the valid response\n      return this.constants().zeroVector[this.toVector(i).length];\n    }\n\n    const dot_times_r = this.multiplicationInterval(dot, r);\n    const k_sqrt = this.sqrtInterval(k);\n    const t = this.additionInterval(dot_times_r, k_sqrt); // t = r * dot(i, s) + sqrt(k)\n\n    const result = this.runScalarPairToIntervalOpVectorComponentWise(\n      this.multiplyVectorByScalar(i, r),\n      this.multiplyVectorByScalar(s, t),\n      this.SubtractionIntervalOp\n    ); // (i * r) - (s * t)\n\n    if (result.some((r) => !r.isFinite())) {\n      return this.constants().unboundedVector[result.length];\n    }\n    return result;\n  }\n\n  /** Calculate acceptance interval vectors of reflect(i, s, r) */\n\n\n\n\n\n\n  RemainderIntervalOp = {\n    impl: (x, y) => {\n      // x % y = x - y * trunc(x/y)\n      return this.subtractionInterval(\n        x,\n        this.multiplicationInterval(y, this.truncInterval(this.divisionInterval(x, y)))\n      );\n    }\n  };\n\n  /** Calculate an acceptance interval for x % y */\n  remainderIntervalImpl(x, y) {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.RemainderIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval for x % y */\n\n\n  RoundIntervalOp = {\n    impl: (n) => {\n      const k = Math.floor(n);\n      const diff_before = n - k;\n      const diff_after = k + 1 - n;\n      if (diff_before < diff_after) {\n        return this.correctlyRoundedInterval(k);\n      } else if (diff_before > diff_after) {\n        return this.correctlyRoundedInterval(k + 1);\n      }\n\n      // n is in the middle of two integers.\n      // The tie breaking rule is 'k if k is even, k + 1 if k is odd'\n      if (k % 2 === 0) {\n        return this.correctlyRoundedInterval(k);\n      }\n      return this.correctlyRoundedInterval(k + 1);\n    }\n  };\n\n  roundIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.RoundIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of round(x) */\n\n\n  /**\n   * The definition of saturate does not specify which version of clamp to use.\n   * Using min-max here, since it has wider acceptance intervals, that include\n   * all of median's.\n   */\n  saturateIntervalImpl(n) {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(n),\n      this.toInterval(0.0),\n      this.toInterval(1.0),\n      this.ClampMinMaxIntervalOp\n    );\n  }\n\n  /*** Calculate an acceptance interval of saturate(n) as clamp(n, 0.0, 1.0) */\n\n\n  SignIntervalOp = {\n    impl: (n) => {\n      if (n > 0.0) {\n        return this.correctlyRoundedInterval(1.0);\n      }\n      if (n < 0.0) {\n        return this.correctlyRoundedInterval(-1.0);\n      }\n\n      return this.correctlyRoundedInterval(0.0);\n    }\n  };\n\n  signIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.SignIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of sign(x) */\n\n\n  SinIntervalOp = {\n    impl: (n) => {\n      assert(this.kind === 'f32' || this.kind === 'f16');\n      const abs_error = this.kind === 'f32' ? 2 ** -11 : 2 ** -7;\n      return this.absoluteErrorInterval(Math.sin(n), abs_error);\n    },\n    domain: () => {\n      return this.constants().negPiToPiInterval;\n    }\n  };\n\n  sinIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.SinIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of sin(x) */\n\n\n  SinhIntervalOp = {\n    impl: (n) => {\n      // sinh(x) = (exp(x) - exp(-x)) * 0.5\n      const minus_n = this.negationInterval(n);\n      return this.multiplicationInterval(\n        this.subtractionInterval(this.expInterval(n), this.expInterval(minus_n)),\n        0.5\n      );\n    }\n  };\n\n  sinhIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.SinhIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of sinh(x) */\n\n\n  SmoothStepOp = {\n    impl: (low, high, x) => {\n      // For clamp(foo, 0.0, 1.0) the different implementations of clamp provide\n      // the same value, so arbitrarily picking the minmax version to use.\n      // t = clamp((x - low) / (high - low), 0.0, 1.0)\n\n      const t = this.clampMedianInterval(\n        this.divisionInterval(\n          this.subtractionInterval(x, low),\n          this.subtractionInterval(high, low)),\n        0.0,\n        1.0);\n      // Inherited from t * t * (3.0 - 2.0 * t)\n\n      return this.multiplicationInterval(\n        t,\n        this.multiplicationInterval(t,\n        this.subtractionInterval(3.0,\n        this.multiplicationInterval(2.0, t))));\n    }\n  };\n\n  smoothStepIntervalImpl(low, high, x) {\n    return this.runScalarTripleToIntervalOp(\n      this.toInterval(low),\n      this.toInterval(high),\n      this.toInterval(x),\n      this.SmoothStepOp\n    );\n  }\n\n  /** Calculate an acceptance interval of smoothStep(low, high, x) */\n\n\n  SqrtIntervalOp = {\n    impl: (n) => {\n      return this.divisionInterval(1.0, this.inverseSqrtInterval(n));\n    }\n  };\n\n  sqrtIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.SqrtIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of sqrt(x) */\n\n\n  StepIntervalOp = {\n    impl: (edge, x) => {\n      if (edge <= x) {\n        return this.correctlyRoundedInterval(1.0);\n      }\n      return this.correctlyRoundedInterval(0.0);\n    }\n  };\n\n  stepIntervalImpl(edge, x) {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(edge),\n      this.toInterval(x),\n      this.StepIntervalOp\n    );\n  }\n\n  /**\n   * Calculate an acceptance 'interval' for step(edge, x)\n   *\n   * step only returns two possible values, so its interval requires special\n   * interpretation in CTS tests.\n   * This interval will be one of four values: [0, 0], [0, 1], [1, 1] & [-∞, +∞].\n   * [0, 0] and [1, 1] indicate that the correct answer in point they encapsulate.\n   * [0, 1] should not be treated as a span, i.e. 0.1 is acceptable, but instead\n   * indicate either 0.0 or 1.0 are acceptable answers.\n   * [-∞, +∞] is treated as unbounded interval, since an unbounded or\n   * infinite value was passed in.\n   */\n\n\n  SubtractionIntervalOp = {\n    impl: (x, y) => {\n      return this.correctlyRoundedInterval(x - y);\n    }\n  };\n\n  subtractionIntervalImpl(x, y) {\n    return this.runScalarPairToIntervalOp(\n      this.toInterval(x),\n      this.toInterval(y),\n      this.SubtractionIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x - y */\n\n\n\n\n\n  subtractionMatrixMatrixIntervalImpl(x, y) {\n    return this.runScalarPairToIntervalOpMatrixMatrixComponentWise(\n      this.toMatrix(x),\n      this.toMatrix(y),\n      this.SubtractionIntervalOp\n    );\n  }\n\n  /** Calculate an acceptance interval of x - y, when x and y are matrices */\n\n\n\n\n\n  TanIntervalOp = {\n    impl: (n) => {\n      return this.divisionInterval(this.sinInterval(n), this.cosInterval(n));\n    }\n  };\n\n  tanIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.TanIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of tan(x) */\n\n\n  TanhIntervalOp = {\n    impl: (n) => {\n      return this.divisionInterval(this.sinhInterval(n), this.coshInterval(n));\n    }\n  };\n\n  tanhIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.TanhIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of tanh(x) */\n\n\n  TransposeIntervalOp = {\n    impl: (m) => {\n      const num_cols = m.length;\n      const num_rows = m[0].length;\n      const result = [...Array(num_rows)].map((_) => [...Array(num_cols)]);\n\n      for (let i = 0; i < num_cols; i++) {\n        for (let j = 0; j < num_rows; j++) {\n          result[j][i] = this.correctlyRoundedInterval(m[i][j]);\n        }\n      }\n      return this.toMatrix(result);\n    }\n  };\n\n  transposeIntervalImpl(m) {\n    return this.runMatrixToMatrixOp(this.toMatrix(m), this.TransposeIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of transpose(m) */\n\n\n  TruncIntervalOp = {\n    impl: (n) => {\n      return this.correctlyRoundedInterval(Math.trunc(n));\n    }\n  };\n\n  truncIntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.TruncIntervalOp);\n  }\n\n  /** Calculate an acceptance interval of trunc(x) */\n\n}\n\n// Pre-defined values that get used multiple times in _constants' initializers. Cannot use FPTraits members, since this\n// executes before they are defined.\nconst kF32UnboundedInterval = new FPInterval(\n  'f32',\n  Number.NEGATIVE_INFINITY,\n  Number.POSITIVE_INFINITY\n);\nconst kF32ZeroInterval = new FPInterval('f32', 0);\n\nclass F32Traits extends FPTraits {\n  static _constants = {\n    positive: {\n      min: kValue.f32.positive.min,\n      max: kValue.f32.positive.max,\n      infinity: kValue.f32.positive.infinity,\n      nearest_max: kValue.f32.positive.nearest_max,\n      less_than_one: kValue.f32.positive.less_than_one,\n      subnormal: {\n        min: kValue.f32.positive.subnormal.min,\n        max: kValue.f32.positive.subnormal.max\n      },\n      pi: {\n        whole: kValue.f32.positive.pi.whole,\n        three_quarters: kValue.f32.positive.pi.three_quarters,\n        half: kValue.f32.positive.pi.half,\n        third: kValue.f32.positive.pi.third,\n        quarter: kValue.f32.positive.pi.quarter,\n        sixth: kValue.f32.positive.pi.sixth\n      },\n      e: kValue.f32.positive.e\n    },\n    negative: {\n      min: kValue.f32.negative.min,\n      max: kValue.f32.negative.max,\n      infinity: kValue.f32.negative.infinity,\n      nearest_min: kValue.f32.negative.nearest_min,\n      less_than_one: kValue.f32.negative.less_than_one,\n      subnormal: {\n        min: kValue.f32.negative.subnormal.min,\n        max: kValue.f32.negative.subnormal.max\n      },\n      pi: {\n        whole: kValue.f32.negative.pi.whole,\n        three_quarters: kValue.f32.negative.pi.three_quarters,\n        half: kValue.f32.negative.pi.half,\n        third: kValue.f32.negative.pi.third,\n        quarter: kValue.f32.negative.pi.quarter,\n        sixth: kValue.f32.negative.pi.sixth\n      }\n    },\n    bias: 127,\n    unboundedInterval: kF32UnboundedInterval,\n    zeroInterval: kF32ZeroInterval,\n    // Have to use the constants.ts values here, because values defined in the\n    // initializer cannot be referenced in the initializer\n    negPiToPiInterval: new FPInterval(\n      'f32',\n      kValue.f32.negative.pi.whole,\n      kValue.f32.positive.pi.whole\n    ),\n    greaterThanZeroInterval: new FPInterval(\n      'f32',\n      kValue.f32.positive.subnormal.min,\n      kValue.f32.positive.max\n    ),\n    negOneToOneInterval: new FPInterval('f32', -1, 1),\n    zeroVector: {\n      2: [kF32ZeroInterval, kF32ZeroInterval],\n      3: [kF32ZeroInterval, kF32ZeroInterval, kF32ZeroInterval],\n      4: [kF32ZeroInterval, kF32ZeroInterval, kF32ZeroInterval, kF32ZeroInterval]\n    },\n    unboundedVector: {\n      2: [kF32UnboundedInterval, kF32UnboundedInterval],\n      3: [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n      4: [\n      kF32UnboundedInterval,\n      kF32UnboundedInterval,\n      kF32UnboundedInterval,\n      kF32UnboundedInterval]\n\n    },\n    unboundedMatrix: {\n      2: {\n        2: [\n        [kF32UnboundedInterval, kF32UnboundedInterval],\n        [kF32UnboundedInterval, kF32UnboundedInterval]],\n\n        3: [\n        [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n        [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval]],\n\n        4: [\n        [\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval],\n\n        [\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval]]\n\n\n      },\n      3: {\n        2: [\n        [kF32UnboundedInterval, kF32UnboundedInterval],\n        [kF32UnboundedInterval, kF32UnboundedInterval],\n        [kF32UnboundedInterval, kF32UnboundedInterval]],\n\n        3: [\n        [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n        [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n        [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval]],\n\n        4: [\n        [\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval],\n\n        [\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval],\n\n        [\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval]]\n\n\n      },\n      4: {\n        2: [\n        [kF32UnboundedInterval, kF32UnboundedInterval],\n        [kF32UnboundedInterval, kF32UnboundedInterval],\n        [kF32UnboundedInterval, kF32UnboundedInterval],\n        [kF32UnboundedInterval, kF32UnboundedInterval]],\n\n        3: [\n        [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n        [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n        [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval],\n        [kF32UnboundedInterval, kF32UnboundedInterval, kF32UnboundedInterval]],\n\n        4: [\n        [\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval],\n\n        [\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval],\n\n        [\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval],\n\n        [\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval,\n        kF32UnboundedInterval]]\n\n\n      }\n    }\n  };\n\n  constructor() {\n    super('f32');\n  }\n\n  constants() {\n    return F32Traits._constants;\n  }\n\n  // Utilities - Overrides\n  quantize = quantizeToF32;\n  correctlyRounded = correctlyRoundedF32;\n  isFinite = isFiniteF32;\n  isSubnormal = isSubnormalNumberF32;\n  flushSubnormal = flushSubnormalNumberF32;\n  oneULP = oneULPF32;\n  scalarBuilder = f32;\n  scalarRange = scalarF32Range;\n  sparseScalarRange = sparseScalarF32Range;\n  vectorRange = vectorF32Range;\n  sparseVectorRange = sparseVectorF32Range;\n  sparseMatrixRange = sparseMatrixF32Range;\n\n  // Framework - Fundamental Error Intervals - Overrides\n  absoluteErrorInterval = this.absoluteErrorIntervalImpl.bind(this);\n  correctlyRoundedInterval = this.correctlyRoundedIntervalImpl.bind(this);\n  correctlyRoundedMatrix = this.correctlyRoundedMatrixImpl.bind(this);\n  ulpInterval = this.ulpIntervalImpl.bind(this);\n\n  // Framework - API - Overrides\n  absInterval = this.absIntervalImpl.bind(this);\n  acosInterval = this.acosIntervalImpl.bind(this);\n  acoshAlternativeInterval = this.acoshAlternativeIntervalImpl.bind(this);\n  acoshPrimaryInterval = this.acoshPrimaryIntervalImpl.bind(this);\n  acoshIntervals = [this.acoshAlternativeInterval, this.acoshPrimaryInterval];\n  additionInterval = this.additionIntervalImpl.bind(this);\n  additionMatrixMatrixInterval = this.additionMatrixMatrixIntervalImpl.bind(this);\n  asinInterval = this.asinIntervalImpl.bind(this);\n  asinhInterval = this.asinhIntervalImpl.bind(this);\n  atanInterval = this.atanIntervalImpl.bind(this);\n  atan2Interval = this.atan2IntervalImpl.bind(this);\n  atanhInterval = this.atanhIntervalImpl.bind(this);\n  ceilInterval = this.ceilIntervalImpl.bind(this);\n  clampMedianInterval = this.clampMedianIntervalImpl.bind(this);\n  clampMinMaxInterval = this.clampMinMaxIntervalImpl.bind(this);\n  clampIntervals = [this.clampMedianInterval, this.clampMinMaxInterval];\n  cosInterval = this.cosIntervalImpl.bind(this);\n  coshInterval = this.coshIntervalImpl.bind(this);\n  crossInterval = this.crossIntervalImpl.bind(this);\n  degreesInterval = this.degreesIntervalImpl.bind(this);\n  determinantInterval = this.determinantIntervalImpl.bind(this);\n  distanceInterval = this.distanceIntervalImpl.bind(this);\n  divisionInterval = this.divisionIntervalImpl.bind(this);\n  dotInterval = this.dotIntervalImpl.bind(this);\n  expInterval = this.expIntervalImpl.bind(this);\n  exp2Interval = this.exp2IntervalImpl.bind(this);\n  faceForwardIntervals = this.faceForwardIntervalsImpl.bind(this);\n  floorInterval = this.floorIntervalImpl.bind(this);\n  fmaInterval = this.fmaIntervalImpl.bind(this);\n  fractInterval = this.fractIntervalImpl.bind(this);\n  inverseSqrtInterval = this.inverseSqrtIntervalImpl.bind(this);\n  ldexpInterval = this.ldexpIntervalImpl.bind(this);\n  lengthInterval = this.lengthIntervalImpl.bind(this);\n  logInterval = this.logIntervalImpl.bind(this);\n  log2Interval = this.log2IntervalImpl.bind(this);\n  maxInterval = this.maxIntervalImpl.bind(this);\n  minInterval = this.minIntervalImpl.bind(this);\n  mixImpreciseInterval = this.mixImpreciseIntervalImpl.bind(this);\n  mixPreciseInterval = this.mixPreciseIntervalImpl.bind(this);\n  mixIntervals = [this.mixImpreciseInterval, this.mixPreciseInterval];\n  modfInterval = this.modfIntervalImpl.bind(this);\n  multiplicationInterval = this.multiplicationIntervalImpl.bind(this);\n  multiplicationMatrixMatrixInterval =\n  this.multiplicationMatrixMatrixIntervalImpl.bind(this);\n  multiplicationMatrixScalarInterval =\n  this.multiplicationMatrixScalarIntervalImpl.bind(this);\n  multiplicationScalarMatrixInterval =\n  this.multiplicationScalarMatrixIntervalImpl.bind(this);\n  multiplicationMatrixVectorInterval =\n  this.multiplicationMatrixVectorIntervalImpl.bind(this);\n  multiplicationVectorMatrixInterval =\n  this.multiplicationVectorMatrixIntervalImpl.bind(this);\n  negationInterval = this.negationIntervalImpl.bind(this);\n  normalizeInterval = this.normalizeIntervalImpl.bind(this);\n  powInterval = this.powIntervalImpl.bind(this);\n  radiansInterval = this.radiansIntervalImpl.bind(this);\n  reflectInterval = this.reflectIntervalImpl.bind(this);\n  refractInterval = this.refractIntervalImpl.bind(this);\n  remainderInterval = this.remainderIntervalImpl.bind(this);\n  roundInterval = this.roundIntervalImpl.bind(this);\n  saturateInterval = this.saturateIntervalImpl.bind(this);\n  signInterval = this.signIntervalImpl.bind(this);\n  sinInterval = this.sinIntervalImpl.bind(this);\n  sinhInterval = this.sinhIntervalImpl.bind(this);\n  smoothStepInterval = this.smoothStepIntervalImpl.bind(this);\n  sqrtInterval = this.sqrtIntervalImpl.bind(this);\n  stepInterval = this.stepIntervalImpl.bind(this);\n  subtractionInterval = this.subtractionIntervalImpl.bind(this);\n  subtractionMatrixMatrixInterval =\n  this.subtractionMatrixMatrixIntervalImpl.bind(this);\n  tanInterval = this.tanIntervalImpl.bind(this);\n  tanhInterval = this.tanhIntervalImpl.bind(this);\n  transposeInterval = this.transposeIntervalImpl.bind(this);\n  truncInterval = this.truncIntervalImpl.bind(this);\n\n  // Framework - Cases\n\n  // U32 -> Interval is used for testing f32 specific unpack* functions\n  /**\n   * @returns a Case for the param and the interval generator provided.\n   * The Case will use an interval comparator for matching results.\n   * @param param the param to pass in\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  makeU32ToVectorCase(\n  param,\n  filter,\n  ...ops)\n  {\n    param = Math.trunc(param);\n\n    const vectors = ops.map((o) => o(param));\n    if (filter === 'finite' && vectors.some((v) => !v.every((e) => e.isFinite()))) {\n      return undefined;\n    }\n    return {\n      input: u32(param),\n      expected: anyOf(...vectors)\n    };\n  }\n\n  /**\n   * @returns an array of Cases for operations over a range of inputs\n   * @param params array of inputs to try\n   * @param filter what interval filtering to apply\n   * @param ops callbacks that implement generating an acceptance interval\n   */\n  generateU32ToIntervalCases(\n  params,\n  filter,\n  ...ops)\n  {\n    return params.reduce((cases, e) => {\n      const c = this.makeU32ToVectorCase(e, filter, ...ops);\n      if (c !== undefined) {\n        cases.push(c);\n      }\n      return cases;\n    }, new Array());\n  }\n\n  // Framework - API\n\n  QuantizeToF16IntervalOp = {\n    impl: (n) => {\n      const rounded = correctlyRoundedF16(n);\n      const flushed = addFlushedIfNeededF16(rounded);\n      return this.spanIntervals(...flushed.map((f) => this.toInterval(f)));\n    }\n  };\n\n  quantizeToF16IntervalImpl(n) {\n    return this.runScalarToIntervalOp(this.toInterval(n), this.QuantizeToF16IntervalOp);\n  }\n\n  /** Calculate an acceptance interval of quantizeToF16(x) */\n  quantizeToF16Interval = this.quantizeToF16IntervalImpl.bind(this);\n\n  /**\n   * Once-allocated ArrayBuffer/views to avoid overhead of allocation when\n   * converting between numeric formats\n   *\n   * unpackData* is shared between all the unpack*Interval functions, so to\n   * avoid re-entrancy problems, they should not call each other or themselves\n   * directly or indirectly.\n   */\n  unpackData = new ArrayBuffer(4);\n  unpackDataU32 = new Uint32Array(this.unpackData);\n  unpackDataU16 = new Uint16Array(this.unpackData);\n  unpackDataU8 = new Uint8Array(this.unpackData);\n  unpackDataI16 = new Int16Array(this.unpackData);\n  unpackDataI8 = new Int8Array(this.unpackData);\n  unpackDataF16 = new Float16Array(this.unpackData);\n\n  unpack2x16floatIntervalImpl(n) {\n    assert(\n      n >= kValue.u32.min && n <= kValue.u32.max,\n      'unpack2x16floatInterval only accepts valid u32 values'\n    );\n    this.unpackDataU32[0] = n;\n    if (this.unpackDataF16.some((f) => !isFiniteF16(f))) {\n      return [this.constants().unboundedInterval, this.constants().unboundedInterval];\n    }\n\n    const result = [\n    this.quantizeToF16Interval(this.unpackDataF16[0]),\n    this.quantizeToF16Interval(this.unpackDataF16[1])];\n\n\n    if (result.some((r) => !r.isFinite())) {\n      return [this.constants().unboundedInterval, this.constants().unboundedInterval];\n    }\n    return result;\n  }\n\n  /** Calculate an acceptance interval vector for unpack2x16float(x) */\n  unpack2x16floatInterval = this.unpack2x16floatIntervalImpl.bind(this);\n\n  unpack2x16snormIntervalImpl(n) {\n    assert(\n      n >= kValue.u32.min && n <= kValue.u32.max,\n      'unpack2x16snormInterval only accepts valid u32 values'\n    );\n    const op = (n) => {\n      return this.ulpInterval(Math.max(n / 32767, -1), 3);\n    };\n\n    this.unpackDataU32[0] = n;\n    return [op(this.unpackDataI16[0]), op(this.unpackDataI16[1])];\n  }\n\n  /** Calculate an acceptance interval vector for unpack2x16snorm(x) */\n  unpack2x16snormInterval = this.unpack2x16snormIntervalImpl.bind(this);\n\n  unpack2x16unormIntervalImpl(n) {\n    assert(\n      n >= kValue.u32.min && n <= kValue.u32.max,\n      'unpack2x16unormInterval only accepts valid u32 values'\n    );\n    const op = (n) => {\n      return this.ulpInterval(n / 65535, 3);\n    };\n\n    this.unpackDataU32[0] = n;\n    return [op(this.unpackDataU16[0]), op(this.unpackDataU16[1])];\n  }\n\n  /** Calculate an acceptance interval vector for unpack2x16unorm(x) */\n  unpack2x16unormInterval = this.unpack2x16unormIntervalImpl.bind(this);\n\n  unpack4x8snormIntervalImpl(n) {\n    assert(\n      n >= kValue.u32.min && n <= kValue.u32.max,\n      'unpack4x8snormInterval only accepts valid u32 values'\n    );\n    const op = (n) => {\n      return this.ulpInterval(Math.max(n / 127, -1), 3);\n    };\n    this.unpackDataU32[0] = n;\n    return [\n    op(this.unpackDataI8[0]),\n    op(this.unpackDataI8[1]),\n    op(this.unpackDataI8[2]),\n    op(this.unpackDataI8[3])];\n\n  }\n\n  /** Calculate an acceptance interval vector for unpack4x8snorm(x) */\n  unpack4x8snormInterval = this.unpack4x8snormIntervalImpl.bind(this);\n\n  unpack4x8unormIntervalImpl(n) {\n    assert(\n      n >= kValue.u32.min && n <= kValue.u32.max,\n      'unpack4x8unormInterval only accepts valid u32 values'\n    );\n    const op = (n) => {\n      return this.ulpInterval(n / 255, 3);\n    };\n\n    this.unpackDataU32[0] = n;\n    return [\n    op(this.unpackDataU8[0]),\n    op(this.unpackDataU8[1]),\n    op(this.unpackDataU8[2]),\n    op(this.unpackDataU8[3])];\n\n  }\n\n  /** Calculate an acceptance interval vector for unpack4x8unorm(x) */\n  unpack4x8unormInterval = this.unpack4x8unormIntervalImpl.bind(this);\n}\n\n// Need to separately allocate f32 traits, so they can be referenced by\n// FPAbstractTraits for forwarding.\nconst kF32Traits = new F32Traits();\n\n// Pre-defined values that get used multiple times in _constants' initializers. Cannot use FPTraits members, since this\n// executes before they are defined.\nconst kAbstractUnboundedInterval = new FPInterval(\n  'abstract',\n  Number.NEGATIVE_INFINITY,\n  Number.POSITIVE_INFINITY\n);\nconst kAbstractZeroInterval = new FPInterval('abstract', 0);\n\n// This is implementation is incomplete\nclass FPAbstractTraits extends FPTraits {\n  static _constants = {\n    positive: {\n      min: kValue.f64.positive.min,\n      max: kValue.f64.positive.max,\n      infinity: kValue.f64.positive.infinity,\n      nearest_max: kValue.f64.positive.nearest_max,\n      less_than_one: kValue.f64.positive.less_than_one,\n      subnormal: {\n        min: kValue.f64.positive.subnormal.min,\n        max: kValue.f64.positive.subnormal.max\n      },\n      pi: {\n        whole: kValue.f64.positive.pi.whole,\n        three_quarters: kValue.f64.positive.pi.three_quarters,\n        half: kValue.f64.positive.pi.half,\n        third: kValue.f64.positive.pi.third,\n        quarter: kValue.f64.positive.pi.quarter,\n        sixth: kValue.f64.positive.pi.sixth\n      },\n      e: kValue.f64.positive.e\n    },\n    negative: {\n      min: kValue.f64.negative.min,\n      max: kValue.f64.negative.max,\n      infinity: kValue.f64.negative.infinity,\n      nearest_min: kValue.f64.negative.nearest_min,\n      less_than_one: kValue.f64.negative.less_than_one,\n      subnormal: {\n        min: kValue.f64.negative.subnormal.min,\n        max: kValue.f64.negative.subnormal.max\n      },\n      pi: {\n        whole: kValue.f64.negative.pi.whole,\n        three_quarters: kValue.f64.negative.pi.three_quarters,\n        half: kValue.f64.negative.pi.half,\n        third: kValue.f64.negative.pi.third,\n        quarter: kValue.f64.negative.pi.quarter,\n        sixth: kValue.f64.negative.pi.sixth\n      }\n    },\n    bias: 1023,\n    unboundedInterval: kAbstractUnboundedInterval,\n    zeroInterval: kAbstractZeroInterval,\n    // Have to use the constants.ts values here, because values defined in the\n    // initializer cannot be referenced in the initializer\n    negPiToPiInterval: new FPInterval(\n      'abstract',\n      kValue.f64.negative.pi.whole,\n      kValue.f64.positive.pi.whole\n    ),\n    greaterThanZeroInterval: new FPInterval(\n      'abstract',\n      kValue.f64.positive.subnormal.min,\n      kValue.f64.positive.max\n    ),\n    negOneToOneInterval: new FPInterval('abstract', -1, 1),\n\n    zeroVector: {\n      2: [kAbstractZeroInterval, kAbstractZeroInterval],\n      3: [kAbstractZeroInterval, kAbstractZeroInterval, kAbstractZeroInterval],\n      4: [\n      kAbstractZeroInterval,\n      kAbstractZeroInterval,\n      kAbstractZeroInterval,\n      kAbstractZeroInterval]\n\n    },\n    unboundedVector: {\n      2: [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n      3: [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n      4: [\n      kAbstractUnboundedInterval,\n      kAbstractUnboundedInterval,\n      kAbstractUnboundedInterval,\n      kAbstractUnboundedInterval]\n\n    },\n    unboundedMatrix: {\n      2: {\n        2: [\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval]],\n\n        3: [\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval]],\n\n        4: [\n        [\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval],\n\n        [\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval]]\n\n\n      },\n      3: {\n        2: [\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval]],\n\n        3: [\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval]],\n\n        4: [\n        [\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval],\n\n        [\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval],\n\n        [\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval]]\n\n\n      },\n      4: {\n        2: [\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval]],\n\n        3: [\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval],\n        [kAbstractUnboundedInterval, kAbstractUnboundedInterval, kAbstractUnboundedInterval]],\n\n        4: [\n        [\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval],\n\n        [\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval],\n\n        [\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval],\n\n        [\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval,\n        kAbstractUnboundedInterval]]\n\n\n      }\n    }\n  };\n\n  constructor() {\n    super('abstract');\n  }\n\n  constants() {\n    return FPAbstractTraits._constants;\n  }\n\n  // Utilities - Overrides\n  // number is represented as a f64 internally, so all number values are already\n  // quantized to f64\n  quantize = (n) => {\n    return n;\n  };\n  correctlyRounded = correctlyRoundedF64;\n  isFinite = Number.isFinite;\n  isSubnormal = isSubnormalNumberF64;\n  flushSubnormal = flushSubnormalNumberF64;\n  oneULP = (_target, _mode = 'flush') => {\n    unreachable(`'FPAbstractTraits.oneULP should never be called`);\n  };\n  scalarBuilder = abstractFloat;\n  scalarRange = scalarF64Range;\n  sparseScalarRange = sparseScalarF64Range;\n  vectorRange = vectorF64Range;\n  sparseVectorRange = sparseVectorF64Range;\n  sparseMatrixRange = sparseMatrixF64Range;\n\n  // Framework - Fundamental Error Intervals - Overrides\n  absoluteErrorInterval = this.unimplementedAbsoluteErrorInterval.bind(this); // Should use FP.f32 instead\n  correctlyRoundedInterval = this.correctlyRoundedIntervalImpl.bind(this);\n  correctlyRoundedMatrix = this.correctlyRoundedMatrixImpl.bind(this);\n  ulpInterval = this.unimplementedUlpInterval.bind(this); // Should use FP.f32 instead\n\n  // Framework - API - Overrides\n  absInterval = this.absIntervalImpl.bind(this);\n  acosInterval = this.unimplementedScalarToInterval.bind(this, 'acosInterval');\n  acoshAlternativeInterval = this.unimplementedScalarToInterval.bind(\n    this,\n    'acoshAlternativeInterval'\n  );\n  acoshPrimaryInterval = this.unimplementedScalarToInterval.bind(\n    this,\n    'acoshPrimaryInterval'\n  );\n  acoshIntervals = [this.acoshAlternativeInterval, this.acoshPrimaryInterval];\n  additionInterval = this.unimplementedScalarPairToInterval.bind(\n    this,\n    'additionInterval'\n  );\n  additionMatrixMatrixInterval = this.unimplementedMatrixPairToMatrix.bind(\n    this,\n    'additionMatrixMatrixInterval'\n  );\n  asinInterval = this.unimplementedScalarToInterval.bind(this, 'asinInterval');\n  asinhInterval = this.unimplementedScalarToInterval.bind(this, 'asinhInterval');\n  atanInterval = this.unimplementedScalarToInterval.bind(this, 'atanInterval');\n  atan2Interval = this.unimplementedScalarPairToInterval.bind(\n    this,\n    'atan2Interval'\n  );\n  atanhInterval = this.unimplementedScalarToInterval.bind(this, 'atanhInterval');\n  ceilInterval = this.ceilIntervalImpl.bind(this);\n  clampMedianInterval = this.clampMedianIntervalImpl.bind(this);\n  clampMinMaxInterval = this.clampMinMaxIntervalImpl.bind(this);\n  clampIntervals = [this.clampMedianInterval, this.clampMinMaxInterval];\n  cosInterval = this.unimplementedScalarToInterval.bind(this, 'cosInterval');\n  coshInterval = this.unimplementedScalarToInterval.bind(this, 'coshInterval');\n  crossInterval = this.unimplementedVectorPairToVector.bind(this, 'crossInterval');\n  degreesInterval = this.unimplementedScalarToInterval.bind(\n    this,\n    'degreesInterval'\n  );\n  determinantInterval = this.unimplementedMatrixToInterval.bind(\n    this,\n    'determinant'\n  );\n  distanceInterval = this.unimplementedDistance.bind(this);\n  divisionInterval = this.unimplementedScalarPairToInterval.bind(\n    this,\n    'divisionInterval'\n  );\n  dotInterval = this.unimplementedVectorPairToInterval.bind(this, 'dotInterval');\n  expInterval = this.unimplementedScalarToInterval.bind(this, 'expInterval');\n  exp2Interval = this.unimplementedScalarToInterval.bind(this, 'exp2Interval');\n  faceForwardIntervals = this.unimplementedFaceForward.bind(this);\n  floorInterval = this.floorIntervalImpl.bind(this);\n  fmaInterval = this.unimplementedScalarTripleToInterval.bind(this, 'fmaInterval');\n  fractInterval = this.unimplementedScalarToInterval.bind(this, 'fractInterval');\n  inverseSqrtInterval = this.unimplementedScalarToInterval.bind(\n    this,\n    'inverseSqrtInterval'\n  );\n  ldexpInterval = this.ldexpIntervalImpl.bind(this);\n  lengthInterval = this.unimplementedLength.bind(this);\n  logInterval = this.unimplementedScalarToInterval.bind(this, 'logInterval');\n  log2Interval = this.unimplementedScalarToInterval.bind(this, 'log2Interval');\n  maxInterval = this.maxIntervalImpl.bind(this);\n  minInterval = this.minIntervalImpl.bind(this);\n  mixImpreciseInterval = this.unimplementedScalarTripleToInterval.bind(\n    this,\n    'mixImpreciseInterval'\n  );\n  mixPreciseInterval = this.unimplementedScalarTripleToInterval.bind(\n    this,\n    'mixPreciseInterval'\n  );\n  mixIntervals = [this.mixImpreciseInterval, this.mixPreciseInterval];\n  modfInterval = this.modfIntervalImpl.bind(this);\n  multiplicationInterval = this.unimplementedScalarPairToInterval.bind(\n    this,\n    'multiplicationInterval'\n  );\n  multiplicationMatrixMatrixInterval = this.unimplementedMatrixPairToMatrix.bind(\n    this,\n    'multiplicationMatrixMatrixInterval'\n  );\n  multiplicationMatrixScalarInterval = this.unimplementedMatrixScalarToMatrix.bind(\n    this,\n    'multiplicationMatrixScalarInterval'\n  );\n  multiplicationScalarMatrixInterval = this.unimplementedScalarMatrixToMatrix.bind(\n    this,\n    'multiplicationScalarMatrixInterval'\n  );\n  multiplicationMatrixVectorInterval = this.unimplementedMatrixVectorToVector.bind(\n    this,\n    'multiplicationMatrixVectorInterval'\n  );\n  multiplicationVectorMatrixInterval = this.unimplementedVectorMatrixToVector.bind(\n    this,\n    'multiplicationVectorMatrixInterval'\n  );\n  negationInterval = this.negationIntervalImpl.bind(this);\n  normalizeInterval = this.unimplementedVectorToVector.bind(\n    this,\n    'normalizeInterval'\n  );\n  powInterval = this.unimplementedScalarPairToInterval.bind(this, 'powInterval');\n  radiansInterval = this.unimplementedScalarToInterval.bind(this, 'radiansImpl');\n  reflectInterval = this.unimplementedVectorPairToVector.bind(\n    this,\n    'reflectInterval'\n  );\n  refractInterval = this.unimplementedRefract.bind(this);\n  remainderInterval = this.unimplementedScalarPairToInterval.bind(\n    this,\n    'remainderInterval'\n  );\n  roundInterval = this.roundIntervalImpl.bind(this);\n  saturateInterval = this.saturateIntervalImpl.bind(this);\n  signInterval = this.signIntervalImpl.bind(this);\n  sinInterval = this.unimplementedScalarToInterval.bind(this, 'sinInterval');\n  sinhInterval = this.unimplementedScalarToInterval.bind(this, 'sinhInterval');\n  smoothStepInterval = this.unimplementedScalarTripleToInterval.bind(\n    this,\n    'smoothStepInterval'\n  );\n  sqrtInterval = this.unimplementedScalarToInterval.bind(this, 'sqrtInterval');\n  stepInterval = this.stepIntervalImpl.bind(this);\n  subtractionInterval = this.unimplementedScalarPairToInterval.bind(\n    this,\n    'subtractionInterval'\n  );\n  subtractionMatrixMatrixInterval = this.unimplementedMatrixPairToMatrix.bind(\n    this,\n    'subtractionMatrixMatrixInterval'\n  );\n  tanInterval = this.unimplementedScalarToInterval.bind(this, 'tanInterval');\n  tanhInterval = this.unimplementedScalarToInterval.bind(this, 'tanhInterval');\n  transposeInterval = this.transposeIntervalImpl.bind(this);\n  truncInterval = this.truncIntervalImpl.bind(this);\n}\n\n// Pre-defined values that get used multiple times in _constants' initializers. Cannot use FPTraits members, since this\n// executes before they are defined.\nconst kF16UnboundedInterval = new FPInterval(\n  'f16',\n  Number.NEGATIVE_INFINITY,\n  Number.POSITIVE_INFINITY\n);\nconst kF16ZeroInterval = new FPInterval('f16', 0);\n\n// This is implementation is incomplete\nclass F16Traits extends FPTraits {\n  static _constants = {\n    positive: {\n      min: kValue.f16.positive.min,\n      max: kValue.f16.positive.max,\n      infinity: kValue.f16.positive.infinity,\n      nearest_max: kValue.f16.positive.nearest_max,\n      less_than_one: kValue.f16.positive.less_than_one,\n      subnormal: {\n        min: kValue.f16.positive.subnormal.min,\n        max: kValue.f16.positive.subnormal.max\n      },\n      pi: {\n        whole: kValue.f16.positive.pi.whole,\n        three_quarters: kValue.f16.positive.pi.three_quarters,\n        half: kValue.f16.positive.pi.half,\n        third: kValue.f16.positive.pi.third,\n        quarter: kValue.f16.positive.pi.quarter,\n        sixth: kValue.f16.positive.pi.sixth\n      },\n      e: kValue.f16.positive.e\n    },\n    negative: {\n      min: kValue.f16.negative.min,\n      max: kValue.f16.negative.max,\n      infinity: kValue.f16.negative.infinity,\n      nearest_min: kValue.f16.negative.nearest_min,\n      less_than_one: kValue.f16.negative.less_than_one,\n      subnormal: {\n        min: kValue.f16.negative.subnormal.min,\n        max: kValue.f16.negative.subnormal.max\n      },\n      pi: {\n        whole: kValue.f16.negative.pi.whole,\n        three_quarters: kValue.f16.negative.pi.three_quarters,\n        half: kValue.f16.negative.pi.half,\n        third: kValue.f16.negative.pi.third,\n        quarter: kValue.f16.negative.pi.quarter,\n        sixth: kValue.f16.negative.pi.sixth\n      }\n    },\n    bias: 15,\n    unboundedInterval: kF16UnboundedInterval,\n    zeroInterval: kF16ZeroInterval,\n    // Have to use the constants.ts values here, because values defined in the\n    // initializer cannot be referenced in the initializer\n    negPiToPiInterval: new FPInterval(\n      'f16',\n      kValue.f16.negative.pi.whole,\n      kValue.f16.positive.pi.whole\n    ),\n    greaterThanZeroInterval: new FPInterval(\n      'f16',\n      kValue.f16.positive.subnormal.min,\n      kValue.f16.positive.max\n    ),\n    negOneToOneInterval: new FPInterval('f16', -1, 1),\n\n    zeroVector: {\n      2: [kF16ZeroInterval, kF16ZeroInterval],\n      3: [kF16ZeroInterval, kF16ZeroInterval, kF16ZeroInterval],\n      4: [kF16ZeroInterval, kF16ZeroInterval, kF16ZeroInterval, kF16ZeroInterval]\n    },\n    unboundedVector: {\n      2: [kF16UnboundedInterval, kF16UnboundedInterval],\n      3: [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n      4: [\n      kF16UnboundedInterval,\n      kF16UnboundedInterval,\n      kF16UnboundedInterval,\n      kF16UnboundedInterval]\n\n    },\n    unboundedMatrix: {\n      2: {\n        2: [\n        [kF16UnboundedInterval, kF16UnboundedInterval],\n        [kF16UnboundedInterval, kF16UnboundedInterval]],\n\n        3: [\n        [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n        [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval]],\n\n        4: [\n        [\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval],\n\n        [\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval]]\n\n\n      },\n      3: {\n        2: [\n        [kF16UnboundedInterval, kF16UnboundedInterval],\n        [kF16UnboundedInterval, kF16UnboundedInterval],\n        [kF16UnboundedInterval, kF16UnboundedInterval]],\n\n        3: [\n        [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n        [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n        [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval]],\n\n        4: [\n        [\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval],\n\n        [\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval],\n\n        [\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval]]\n\n\n      },\n      4: {\n        2: [\n        [kF16UnboundedInterval, kF16UnboundedInterval],\n        [kF16UnboundedInterval, kF16UnboundedInterval],\n        [kF16UnboundedInterval, kF16UnboundedInterval],\n        [kF16UnboundedInterval, kF16UnboundedInterval]],\n\n        3: [\n        [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n        [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n        [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval],\n        [kF16UnboundedInterval, kF16UnboundedInterval, kF16UnboundedInterval]],\n\n        4: [\n        [\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval],\n\n        [\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval],\n\n        [\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval],\n\n        [\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval,\n        kF16UnboundedInterval]]\n\n\n      }\n    }\n  };\n\n  constructor() {\n    super('f16');\n  }\n\n  constants() {\n    return F16Traits._constants;\n  }\n\n  // Utilities - Overrides\n  quantize = quantizeToF16;\n  correctlyRounded = correctlyRoundedF16;\n  isFinite = isFiniteF16;\n  isSubnormal = isSubnormalNumberF16;\n  flushSubnormal = flushSubnormalNumberF16;\n  oneULP = oneULPF16;\n  scalarBuilder = f16;\n  scalarRange = scalarF16Range;\n  sparseScalarRange = sparseScalarF16Range;\n  vectorRange = vectorF16Range;\n  sparseVectorRange = sparseVectorF16Range;\n  sparseMatrixRange = sparseMatrixF16Range;\n\n  // Framework - Fundamental Error Intervals - Overrides\n  absoluteErrorInterval = this.absoluteErrorIntervalImpl.bind(this);\n  correctlyRoundedInterval = this.correctlyRoundedIntervalImpl.bind(this);\n  correctlyRoundedMatrix = this.correctlyRoundedMatrixImpl.bind(this);\n  ulpInterval = this.ulpIntervalImpl.bind(this);\n\n  // Framework - API - Overrides\n  absInterval = this.absIntervalImpl.bind(this);\n  acosInterval = this.acosIntervalImpl.bind(this);\n  acoshAlternativeInterval = this.acoshAlternativeIntervalImpl.bind(this);\n  acoshPrimaryInterval = this.acoshPrimaryIntervalImpl.bind(this);\n  acoshIntervals = [this.acoshAlternativeInterval, this.acoshPrimaryInterval];\n  additionInterval = this.additionIntervalImpl.bind(this);\n  additionMatrixMatrixInterval = this.additionMatrixMatrixIntervalImpl.bind(this);\n  asinInterval = this.asinIntervalImpl.bind(this);\n  asinhInterval = this.asinhIntervalImpl.bind(this);\n  atanInterval = this.atanIntervalImpl.bind(this);\n  atan2Interval = this.atan2IntervalImpl.bind(this);\n  atanhInterval = this.atanhIntervalImpl.bind(this);\n  ceilInterval = this.ceilIntervalImpl.bind(this);\n  clampMedianInterval = this.clampMedianIntervalImpl.bind(this);\n  clampMinMaxInterval = this.clampMinMaxIntervalImpl.bind(this);\n  clampIntervals = [this.clampMedianInterval, this.clampMinMaxInterval];\n  cosInterval = this.cosIntervalImpl.bind(this);\n  coshInterval = this.coshIntervalImpl.bind(this);\n  crossInterval = this.crossIntervalImpl.bind(this);\n  degreesInterval = this.degreesIntervalImpl.bind(this);\n  determinantInterval = this.determinantIntervalImpl.bind(this);\n  distanceInterval = this.distanceIntervalImpl.bind(this);\n  divisionInterval = this.divisionIntervalImpl.bind(this);\n  dotInterval = this.dotIntervalImpl.bind(this);\n  expInterval = this.expIntervalImpl.bind(this);\n  exp2Interval = this.exp2IntervalImpl.bind(this);\n  faceForwardIntervals = this.faceForwardIntervalsImpl.bind(this);\n  floorInterval = this.floorIntervalImpl.bind(this);\n  fmaInterval = this.fmaIntervalImpl.bind(this);\n  fractInterval = this.fractIntervalImpl.bind(this);\n  inverseSqrtInterval = this.inverseSqrtIntervalImpl.bind(this);\n  ldexpInterval = this.ldexpIntervalImpl.bind(this);\n  lengthInterval = this.lengthIntervalImpl.bind(this);\n  logInterval = this.logIntervalImpl.bind(this);\n  log2Interval = this.log2IntervalImpl.bind(this);\n  maxInterval = this.maxIntervalImpl.bind(this);\n  minInterval = this.minIntervalImpl.bind(this);\n  mixImpreciseInterval = this.mixImpreciseIntervalImpl.bind(this);\n  mixPreciseInterval = this.mixPreciseIntervalImpl.bind(this);\n  mixIntervals = [this.mixImpreciseInterval, this.mixPreciseInterval];\n  modfInterval = this.modfIntervalImpl.bind(this);\n  multiplicationInterval = this.multiplicationIntervalImpl.bind(this);\n  multiplicationMatrixMatrixInterval =\n  this.multiplicationMatrixMatrixIntervalImpl.bind(this);\n  multiplicationMatrixScalarInterval =\n  this.multiplicationMatrixScalarIntervalImpl.bind(this);\n  multiplicationScalarMatrixInterval =\n  this.multiplicationScalarMatrixIntervalImpl.bind(this);\n  multiplicationMatrixVectorInterval =\n  this.multiplicationMatrixVectorIntervalImpl.bind(this);\n  multiplicationVectorMatrixInterval =\n  this.multiplicationVectorMatrixIntervalImpl.bind(this);\n  negationInterval = this.negationIntervalImpl.bind(this);\n  normalizeInterval = this.normalizeIntervalImpl.bind(this);\n  powInterval = this.powIntervalImpl.bind(this);\n  radiansInterval = this.radiansIntervalImpl.bind(this);\n  reflectInterval = this.reflectIntervalImpl.bind(this);\n  refractInterval = this.refractIntervalImpl.bind(this);\n  remainderInterval = this.remainderIntervalImpl.bind(this);\n  roundInterval = this.roundIntervalImpl.bind(this);\n  saturateInterval = this.saturateIntervalImpl.bind(this);\n  signInterval = this.signIntervalImpl.bind(this);\n  sinInterval = this.sinIntervalImpl.bind(this);\n  sinhInterval = this.sinhIntervalImpl.bind(this);\n  smoothStepInterval = this.smoothStepIntervalImpl.bind(this);\n  sqrtInterval = this.sqrtIntervalImpl.bind(this);\n  stepInterval = this.stepIntervalImpl.bind(this);\n  subtractionInterval = this.subtractionIntervalImpl.bind(this);\n  subtractionMatrixMatrixInterval =\n  this.subtractionMatrixMatrixIntervalImpl.bind(this);\n  tanInterval = this.tanIntervalImpl.bind(this);\n  tanhInterval = this.tanhIntervalImpl.bind(this);\n  transposeInterval = this.transposeIntervalImpl.bind(this);\n  truncInterval = this.truncIntervalImpl.bind(this);\n}\n\nexport const FP = {\n  f32: kF32Traits,\n  f16: new F16Traits(),\n  abstract: new FPAbstractTraits()\n};\n\n/** @returns the floating-point traits for `type` */\nexport function fpTraitsFor(type) {\n  switch (type.kind) {\n    case 'abstract-float':\n      return FP.abstract;\n    case 'f32':\n      return FP.f32;\n    case 'f16':\n      return FP.f16;\n    default:\n      unreachable(`unsupported type: ${type}`);\n  }\n}\n\n/** @returns true if the value `value` is representable with `type` */\nexport function isRepresentable(value, type) {\n  if (!Number.isFinite(value)) {\n    return false;\n  }\n  if (isFloatType(type)) {\n    const constants = fpTraitsFor(type).constants();\n    return value >= constants.negative.min && value <= constants.positive.max;\n  }\n\n  assert(false, `isRepresentable() is not yet implemented for type ${type}`);\n}"],"mappings":"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","ignoreList":[]}