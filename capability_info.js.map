{"version":3,"file":"capability_info.js","names":["keysOf","makeTable","makeTableRenameAndFilter","numericKeysOf","assertTypeTrue","unreachable","GPUConst","kMaxUnsignedLongValue","kMaxUnsignedLongLongValue","kMaxQueryCount","kQueryTypeInfo","feature","undefined","kQueryTypes","kBufferSizeAlignment","kBufferUsageCopyInfo","BufferUsage","COPY_SRC","COPY_DST","kBufferUsageCopy","kBufferUsageKeys","kBufferUsageInfo","kBufferUsages","Object","values","kAllBufferUsageBits","reduce","previousSet","currentUsage","kErrorScopeFilterInfo","generatable","kErrorScopeFilters","kGeneratableErrorScopeFilters","filter","e","kCanvasTextureFormats","kCanvasAlphaModesInfo","kCanvasAlphaModes","kCanvasColorSpacesInfo","kCanvasColorSpaces","kTextureDimensionInfo","kTextureDimensions","kTextureAspectInfo","kTextureAspects","kCompareFunctionInfo","kCompareFunctions","kStencilOperationInfo","kStencilOperations","kTextureUsageTypeInfo","Number","TextureUsage","TEXTURE_BINDING","STORAGE_BINDING","RENDER_ATTACHMENT","kTextureUsageType","kTextureUsageCopyInfo","kTextureUsageCopy","kTextureUsageInfo","kTextureUsages","kTextureViewDimensionInfo","storage","kTextureViewDimensions","kVertexFormatInfo","kVertexFormats","kBindableResources","kMinDynamicBufferOffsetAlignment","kPerStageBindingLimits","class","maxLimit","kPerPipelineBindingLimits","maxDynamicLimit","kBindingKind","uniformBuf","resource","perStageLimitClass","perPipelineLimitClass","storageBuf","filtSamp","sampler","nonFiltSamp","compareSamp","sampledTex","sampledTexMS","readonlyStorageTex","writeonlyStorageTex","readwriteStorageTex","kValidStagesAll","validStages","ShaderStage","VERTEX","FRAGMENT","COMPUTE","kValidStagesStorageWrite","bufferBindingTypeInfo","d","type","usage","UNIFORM","STORAGE","kBufferBindingTypes","samplerBindingTypeInfo","kSamplerBindingTypes","sampledTextureBindingTypeInfo","multisampled","kTextureSampleTypes","storageTextureBindingTypeInfo","access","kStorageTextureAccessValues","texBindingTypeInfo","texture","storageTexture","bindingTypeInfo","buffer","bufferBindingEntries","includeUndefined","samplerBindingEntries","textureBindingEntries","sampleType","storageTextureBindingEntries","format","sampledAndStorageBindingEntries","allBindingEntries","kShaderStageKeys","keys","kShaderStages","kShaderStageCombinations","kShaderStageCombinationsWithStage","kTextureSampleCounts","kMipmapFilterModes","kAddressModes","kBlendFactors","IsDualSourceBlendingFactor","blendFactor","kBlendOperations","kPrimitiveTopology","kIndexFormat","kLimitInfoKeys","kLimitInfoDefaults","kLimitInfoData","kFeatureLevels","kLimitKeys","kLimitInfoCore","default","kLimitInfoCompatibility","kLimitInfos","core","compatibility","kLimitClasses","fromEntries","entries","map","k","c","getDefaultLimits","featureLevel","getDefaultLimitsForAdapter","adapter","isCompatibilityMode","kLimits","kMaxColorAttachmentsToTest","kDrawIndirectParametersSize","kDrawIndexedIndirectParametersSize","kFeatureNameInfo","kFeatureNames","kKnownWGSLLanguageFeatures"],"sources":["../../src/webgpu/capability_info.ts"],"sourcesContent":["/**\n* AUTO-GENERATED - DO NOT EDIT. Source: https://github.com/gpuweb/cts\n**/ // MAINTENANCE_TODO: The generated Typedoc for this file is hard to navigate because it's\n// alphabetized. Consider using namespaces or renames to fix this?\n\nimport {\n  keysOf,\n  makeTable,\n  makeTableRenameAndFilter,\n  numericKeysOf } from\n\n'../common/util/data_tables.js';\nimport { assertTypeTrue } from '../common/util/types.js';\nimport { unreachable } from '../common/util/util.js';\n\nimport { GPUConst, kMaxUnsignedLongValue, kMaxUnsignedLongLongValue } from './constants.js';\n\n// Base device limits can be found in constants.ts.\n\n// Queries\n\n/** Maximum number of queries in GPUQuerySet, by spec. */\nexport const kMaxQueryCount = 4096;\n/** Per-GPUQueryType info. */\n\n\n\n\n\nexport const kQueryTypeInfo =\n\n\n{\n  'occlusion': { feature: undefined },\n  'timestamp': { feature: 'timestamp-query' }\n};\n/** List of all GPUQueryType values. */\nexport const kQueryTypes = keysOf(kQueryTypeInfo);\n\n// Buffers\n\n/** Required alignment of a GPUBuffer size, by spec. */\nexport const kBufferSizeAlignment = 4;\n\n/** Per-GPUBufferUsage copy info. */\nexport const kBufferUsageCopyInfo =\n\n\n{\n  'COPY_NONE': 0,\n  'COPY_SRC': GPUConst.BufferUsage.COPY_SRC,\n  'COPY_DST': GPUConst.BufferUsage.COPY_DST,\n  'COPY_SRC_DST': GPUConst.BufferUsage.COPY_SRC | GPUConst.BufferUsage.COPY_DST\n};\n/** List of all GPUBufferUsage copy values. */\nexport const kBufferUsageCopy = keysOf(kBufferUsageCopyInfo);\n\n/** Per-GPUBufferUsage keys and info. */\n\nexport const kBufferUsageKeys = keysOf(GPUConst.BufferUsage);\nexport const kBufferUsageInfo =\n\n{\n  ...GPUConst.BufferUsage\n};\n\n/** List of all GPUBufferUsage values. */\nexport const kBufferUsages = Object.values(GPUConst.BufferUsage);\nexport const kAllBufferUsageBits = kBufferUsages.reduce(\n  (previousSet, currentUsage) => previousSet | currentUsage,\n  0\n);\n\n// Errors\n\n/** Per-GPUErrorFilter info. */\nexport const kErrorScopeFilterInfo =\n\n\n\n\n{\n  'internal': { generatable: false },\n  'out-of-memory': { generatable: true },\n  'validation': { generatable: true }\n};\n/** List of all GPUErrorFilter values. */\nexport const kErrorScopeFilters = keysOf(kErrorScopeFilterInfo);\nexport const kGeneratableErrorScopeFilters = kErrorScopeFilters.filter(\n  (e) => kErrorScopeFilterInfo[e].generatable\n);\n\n// Canvases\n\n// The formats of GPUTextureFormat for canvas context.\nexport const kCanvasTextureFormats = ['bgra8unorm', 'rgba8unorm', 'rgba16float'];\n\n// The alpha mode for canvas context.\nexport const kCanvasAlphaModesInfo =\n\n{\n  'opaque': {},\n  'premultiplied': {}\n};\nexport const kCanvasAlphaModes = keysOf(kCanvasAlphaModesInfo);\n\n// The color spaces for canvas context\nexport const kCanvasColorSpacesInfo =\n\n{\n  'srgb': {},\n  'display-p3': {}\n};\nexport const kCanvasColorSpaces = keysOf(kCanvasColorSpacesInfo);\n\n// Textures (except for texture format info)\n\n/** Per-GPUTextureDimension info. */\nexport const kTextureDimensionInfo =\n\n{\n  '1d': {},\n  '2d': {},\n  '3d': {}\n};\n/** List of all GPUTextureDimension values. */\nexport const kTextureDimensions = keysOf(kTextureDimensionInfo);\n\n/** Per-GPUTextureAspect info. */\nexport const kTextureAspectInfo =\n\n{\n  'all': {},\n  'depth-only': {},\n  'stencil-only': {}\n};\n/** List of all GPUTextureAspect values. */\nexport const kTextureAspects = keysOf(kTextureAspectInfo);\n\n// Misc\n\n/** Per-GPUCompareFunction info. */\nexport const kCompareFunctionInfo =\n\n\n{\n  'never': {},\n  'less': {},\n  'equal': {},\n  'less-equal': {},\n  'greater': {},\n  'not-equal': {},\n  'greater-equal': {},\n  'always': {}\n};\n/** List of all GPUCompareFunction values. */\nexport const kCompareFunctions = keysOf(kCompareFunctionInfo);\n\n/** Per-GPUStencilOperation info. */\nexport const kStencilOperationInfo =\n\n\n{\n  'keep': {},\n  'zero': {},\n  'replace': {},\n  'invert': {},\n  'increment-clamp': {},\n  'decrement-clamp': {},\n  'increment-wrap': {},\n  'decrement-wrap': {}\n};\n/** List of all GPUStencilOperation values. */\nexport const kStencilOperations = keysOf(kStencilOperationInfo);\n\n// More textures (except for texture format info)\n\n/** Per-GPUTextureUsage type info. */\nexport const kTextureUsageTypeInfo =\n\n\n{\n  'texture': Number(GPUConst.TextureUsage.TEXTURE_BINDING),\n  'storage': Number(GPUConst.TextureUsage.STORAGE_BINDING),\n  'render': Number(GPUConst.TextureUsage.RENDER_ATTACHMENT)\n};\n/** List of all GPUTextureUsage type values. */\nexport const kTextureUsageType = keysOf(kTextureUsageTypeInfo);\n\n/** Per-GPUTextureUsage copy info. */\nexport const kTextureUsageCopyInfo =\n\n\n{\n  'none': 0,\n  'src': Number(GPUConst.TextureUsage.COPY_SRC),\n  'dst': Number(GPUConst.TextureUsage.COPY_DST),\n  'src-dest': Number(GPUConst.TextureUsage.COPY_SRC) | Number(GPUConst.TextureUsage.COPY_DST)\n};\n/** List of all GPUTextureUsage copy values. */\nexport const kTextureUsageCopy = keysOf(kTextureUsageCopyInfo);\n\n/** Per-GPUTextureUsage info. */\nexport const kTextureUsageInfo =\n\n{\n  [GPUConst.TextureUsage.COPY_SRC]: {},\n  [GPUConst.TextureUsage.COPY_DST]: {},\n  [GPUConst.TextureUsage.TEXTURE_BINDING]: {},\n  [GPUConst.TextureUsage.STORAGE_BINDING]: {},\n  [GPUConst.TextureUsage.RENDER_ATTACHMENT]: {}\n};\n/** List of all GPUTextureUsage values. */\nexport const kTextureUsages = numericKeysOf(kTextureUsageInfo);\n\n// Texture View\n\n/** Per-GPUTextureViewDimension info. */\n\n\n\n\n\n/** Per-GPUTextureViewDimension info. */\nexport const kTextureViewDimensionInfo =\n\n\n{\n  '1d': { storage: true },\n  '2d': { storage: true },\n  '2d-array': { storage: true },\n  'cube': { storage: false },\n  'cube-array': { storage: false },\n  '3d': { storage: true }\n};\n/** List of all GPUTextureDimension values. */\nexport const kTextureViewDimensions = keysOf(kTextureViewDimensionInfo);\n\n// Vertex formats\n\n/** Per-GPUVertexFormat info. */\n// Exists just for documentation. Otherwise could be inferred by `makeTable`.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/** Per-GPUVertexFormat info. */\nexport const kVertexFormatInfo =\n\n\nmakeTable(\n  ['bytesPerComponent', 'type', 'componentCount', 'byteSize', 'wgslType'],\n  [,,,,], {\n    // 8 bit components\n    'uint8': [1, 'uint', 1, 1, 'u32'],\n    'uint8x2': [1, 'uint', 2, 2, 'vec2<u32>'],\n    'uint8x4': [1, 'uint', 4, 4, 'vec4<u32>'],\n    'sint8': [1, 'sint', 1, 1, 'i32'],\n    'sint8x2': [1, 'sint', 2, 2, 'vec2<i32>'],\n    'sint8x4': [1, 'sint', 4, 4, 'vec4<i32>'],\n    'unorm8': [1, 'unorm', 1, 1, 'f32'],\n    'unorm8x2': [1, 'unorm', 2, 2, 'vec2<f32>'],\n    'unorm8x4': [1, 'unorm', 4, 4, 'vec4<f32>'],\n    'snorm8': [1, 'snorm', 1, 1, 'f32'],\n    'snorm8x2': [1, 'snorm', 2, 2, 'vec2<f32>'],\n    'snorm8x4': [1, 'snorm', 4, 4, 'vec4<f32>'],\n    // 16 bit components\n    'uint16': [2, 'uint', 1, 2, 'u32'],\n    'uint16x2': [2, 'uint', 2, 4, 'vec2<u32>'],\n    'uint16x4': [2, 'uint', 4, 8, 'vec4<u32>'],\n    'sint16': [2, 'sint', 1, 2, 'i32'],\n    'sint16x2': [2, 'sint', 2, 4, 'vec2<i32>'],\n    'sint16x4': [2, 'sint', 4, 8, 'vec4<i32>'],\n    'unorm16': [2, 'unorm', 1, 2, 'f32'],\n    'unorm16x2': [2, 'unorm', 2, 4, 'vec2<f32>'],\n    'unorm16x4': [2, 'unorm', 4, 8, 'vec4<f32>'],\n    'snorm16': [2, 'snorm', 1, 2, 'f32'],\n    'snorm16x2': [2, 'snorm', 2, 4, 'vec2<f32>'],\n    'snorm16x4': [2, 'snorm', 4, 8, 'vec4<f32>'],\n    'float16': [2, 'float', 1, 2, 'f32'],\n    'float16x2': [2, 'float', 2, 4, 'vec2<f32>'],\n    'float16x4': [2, 'float', 4, 8, 'vec4<f32>'],\n    // 32 bit components\n    'float32': [4, 'float', 1, 4, 'f32'],\n    'float32x2': [4, 'float', 2, 8, 'vec2<f32>'],\n    'float32x3': [4, 'float', 3, 12, 'vec3<f32>'],\n    'float32x4': [4, 'float', 4, 16, 'vec4<f32>'],\n    'uint32': [4, 'uint', 1, 4, 'u32'],\n    'uint32x2': [4, 'uint', 2, 8, 'vec2<u32>'],\n    'uint32x3': [4, 'uint', 3, 12, 'vec3<u32>'],\n    'uint32x4': [4, 'uint', 4, 16, 'vec4<u32>'],\n    'sint32': [4, 'sint', 1, 4, 'i32'],\n    'sint32x2': [4, 'sint', 2, 8, 'vec2<i32>'],\n    'sint32x3': [4, 'sint', 3, 12, 'vec3<i32>'],\n    'sint32x4': [4, 'sint', 4, 16, 'vec4<i32>'],\n    // 32 bit packed\n    'unorm10-10-10-2': ['packed', 'unorm', 4, 4, 'vec4<f32>'],\n    'unorm8x4-bgra': ['packed', 'unorm', 4, 4, 'vec4<f32>']\n  });\n/** List of all GPUVertexFormat values. */\nexport const kVertexFormats = keysOf(kVertexFormatInfo);\n\n// Typedefs for bindings\n\n/**\n * Classes of `PerShaderStage` binding limits. Two bindings with the same class\n * count toward the same `PerShaderStage` limit(s) in the spec (if any).\n */\n\n\n\n\n\n\n\n\n/**\n * Classes of `PerPipelineLayout` binding limits. Two bindings with the same class\n * count toward the same `PerPipelineLayout` limit(s) in the spec (if any).\n */\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/**\n * Types of resource binding which have distinct binding rules, by spec\n * (e.g. filtering vs non-filtering sampler, multisample vs non-multisample texture).\n */\n\nexport const kBindableResources = [\n'uniformBuf',\n'storageBuf',\n'filtSamp',\n'nonFiltSamp',\n'compareSamp',\n'sampledTex',\n'sampledTexMS',\n'readonlyStorageTex',\n'writeonlyStorageTex',\n'readwriteStorageTex',\n'errorBuf',\n'errorSamp',\n'errorTex'];\n\nassertTypeTrue();\n\n// Bindings\n\n/** Dynamic buffer offsets require offset to be divisible by 256, by spec. */\nexport const kMinDynamicBufferOffsetAlignment = 256;\n\n/** Default `PerShaderStage` binding limits, by spec. */\nexport const kPerStageBindingLimits =\n\n\n\n\n\n\n\n\n{\n  'uniformBuf': { class: 'uniformBuf', maxLimit: 'maxUniformBuffersPerShaderStage' },\n  'storageBuf': { class: 'storageBuf', maxLimit: 'maxStorageBuffersPerShaderStage' },\n  'sampler': { class: 'sampler', maxLimit: 'maxSamplersPerShaderStage' },\n  'sampledTex': { class: 'sampledTex', maxLimit: 'maxSampledTexturesPerShaderStage' },\n  'readonlyStorageTex': { class: 'readonlyStorageTex', maxLimit: 'maxStorageTexturesPerShaderStage' },\n  'writeonlyStorageTex': { class: 'writeonlyStorageTex', maxLimit: 'maxStorageTexturesPerShaderStage' },\n  'readwriteStorageTex': { class: 'readwriteStorageTex', maxLimit: 'maxStorageTexturesPerShaderStage' }\n};\n\n/**\n * Default `PerPipelineLayout` binding limits, by spec.\n */\nexport const kPerPipelineBindingLimits =\n\n\n\n\n\n\n\n\n\n\n{\n  'uniformBuf': { class: 'uniformBuf', maxDynamicLimit: 'maxDynamicUniformBuffersPerPipelineLayout' },\n  'storageBuf': { class: 'storageBuf', maxDynamicLimit: 'maxDynamicStorageBuffersPerPipelineLayout' },\n  'sampler': { class: 'sampler', maxDynamicLimit: '' },\n  'sampledTex': { class: 'sampledTex', maxDynamicLimit: '' },\n  'readonlyStorageTex': { class: 'readonlyStorageTex', maxDynamicLimit: '' },\n  'writeonlyStorageTex': { class: 'writeonlyStorageTex', maxDynamicLimit: '' },\n  'readwriteStorageTex': { class: 'readwriteStorageTex', maxDynamicLimit: '' }\n};\n\n\n\n\n\n\n\n\nconst kBindingKind =\n\n\n{\n  uniformBuf: { resource: 'uniformBuf', perStageLimitClass: kPerStageBindingLimits.uniformBuf, perPipelineLimitClass: kPerPipelineBindingLimits.uniformBuf },\n  storageBuf: { resource: 'storageBuf', perStageLimitClass: kPerStageBindingLimits.storageBuf, perPipelineLimitClass: kPerPipelineBindingLimits.storageBuf },\n  filtSamp: { resource: 'filtSamp', perStageLimitClass: kPerStageBindingLimits.sampler, perPipelineLimitClass: kPerPipelineBindingLimits.sampler },\n  nonFiltSamp: { resource: 'nonFiltSamp', perStageLimitClass: kPerStageBindingLimits.sampler, perPipelineLimitClass: kPerPipelineBindingLimits.sampler },\n  compareSamp: { resource: 'compareSamp', perStageLimitClass: kPerStageBindingLimits.sampler, perPipelineLimitClass: kPerPipelineBindingLimits.sampler },\n  sampledTex: { resource: 'sampledTex', perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex },\n  sampledTexMS: { resource: 'sampledTexMS', perStageLimitClass: kPerStageBindingLimits.sampledTex, perPipelineLimitClass: kPerPipelineBindingLimits.sampledTex },\n  readonlyStorageTex: { resource: 'readonlyStorageTex', perStageLimitClass: kPerStageBindingLimits.readonlyStorageTex, perPipelineLimitClass: kPerPipelineBindingLimits.readonlyStorageTex },\n  writeonlyStorageTex: { resource: 'writeonlyStorageTex', perStageLimitClass: kPerStageBindingLimits.writeonlyStorageTex, perPipelineLimitClass: kPerPipelineBindingLimits.writeonlyStorageTex },\n  readwriteStorageTex: { resource: 'readwriteStorageTex', perStageLimitClass: kPerStageBindingLimits.readwriteStorageTex, perPipelineLimitClass: kPerPipelineBindingLimits.readwriteStorageTex }\n};\n\n// Binding type info\n\nconst kValidStagesAll = {\n  validStages:\n  GPUConst.ShaderStage.VERTEX | GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE\n};\nconst kValidStagesStorageWrite = {\n  validStages: GPUConst.ShaderStage.FRAGMENT | GPUConst.ShaderStage.COMPUTE\n};\n\n/** Binding type info (including class limits) for the specified GPUBufferBindingLayout. */\nexport function bufferBindingTypeInfo(d) {\n\n  switch (d.type ?? 'uniform') {\n    case 'uniform':return { usage: GPUConst.BufferUsage.UNIFORM, ...kBindingKind.uniformBuf, ...kValidStagesAll };\n    case 'storage':return { usage: GPUConst.BufferUsage.STORAGE, ...kBindingKind.storageBuf, ...kValidStagesStorageWrite };\n    case 'read-only-storage':return { usage: GPUConst.BufferUsage.STORAGE, ...kBindingKind.storageBuf, ...kValidStagesAll };\n  }\n}\n/** List of all GPUBufferBindingType values. */\nexport const kBufferBindingTypes = ['uniform', 'storage', 'read-only-storage'];\nassertTypeTrue();\n\n/** Binding type info (including class limits) for the specified GPUSamplerBindingLayout. */\nexport function samplerBindingTypeInfo(d) {\n\n  switch (d.type ?? 'filtering') {\n    case 'filtering':return { ...kBindingKind.filtSamp, ...kValidStagesAll };\n    case 'non-filtering':return { ...kBindingKind.nonFiltSamp, ...kValidStagesAll };\n    case 'comparison':return { ...kBindingKind.compareSamp, ...kValidStagesAll };\n  }\n}\n/** List of all GPUSamplerBindingType values. */\nexport const kSamplerBindingTypes = ['filtering', 'non-filtering', 'comparison'];\nassertTypeTrue();\n\n/** Binding type info (including class limits) for the specified GPUTextureBindingLayout. */\nexport function sampledTextureBindingTypeInfo(d) {\n\n  if (d.multisampled) {\n    return { usage: GPUConst.TextureUsage.TEXTURE_BINDING, ...kBindingKind.sampledTexMS, ...kValidStagesAll };\n  } else {\n    return { usage: GPUConst.TextureUsage.TEXTURE_BINDING, ...kBindingKind.sampledTex, ...kValidStagesAll };\n  }\n}\n/** List of all GPUTextureSampleType values. */\nexport const kTextureSampleTypes = [\n'float',\n'unfilterable-float',\n'depth',\n'sint',\n'uint'];\n\nassertTypeTrue();\n\n/** Binding type info (including class limits) for the specified GPUStorageTextureBindingLayout. */\nexport function storageTextureBindingTypeInfo(d) {\n  switch (d.access) {\n    case undefined:\n    case 'write-only':\n      return {\n        usage: GPUConst.TextureUsage.STORAGE_BINDING,\n        ...kBindingKind.writeonlyStorageTex,\n        ...kValidStagesStorageWrite\n      };\n    case 'read-only':\n      return {\n        usage: GPUConst.TextureUsage.STORAGE_BINDING,\n        ...kBindingKind.readonlyStorageTex,\n        ...kValidStagesAll\n      };\n    case 'read-write':\n      return {\n        usage: GPUConst.TextureUsage.STORAGE_BINDING,\n        ...kBindingKind.readwriteStorageTex,\n        ...kValidStagesStorageWrite\n      };\n  }\n}\n/** List of all GPUStorageTextureAccess values. */\nexport const kStorageTextureAccessValues = ['read-only', 'read-write', 'write-only'];\nassertTypeTrue();\n\n/** GPUBindGroupLayoutEntry, but only the \"union\" fields, not the common fields. */\n\n/** Binding type info (including class limits) for the specified BGLEntry. */\nexport function texBindingTypeInfo(e) {\n  if (e.texture !== undefined) return sampledTextureBindingTypeInfo(e.texture);\n  if (e.storageTexture !== undefined) return storageTextureBindingTypeInfo(e.storageTexture);\n  unreachable();\n}\n/** BindingTypeInfo (including class limits) for the specified BGLEntry. */\nexport function bindingTypeInfo(e) {\n  if (e.buffer !== undefined) return bufferBindingTypeInfo(e.buffer);\n  if (e.texture !== undefined) return sampledTextureBindingTypeInfo(e.texture);\n  if (e.sampler !== undefined) return samplerBindingTypeInfo(e.sampler);\n  if (e.storageTexture !== undefined) return storageTextureBindingTypeInfo(e.storageTexture);\n  unreachable('GPUBindGroupLayoutEntry has no BindingLayout');\n}\n\n/**\n * Generate a list of possible buffer-typed BGLEntry values.\n *\n * Note: Generates different `type` options, but not `hasDynamicOffset` options.\n */\nexport function bufferBindingEntries(includeUndefined) {\n  return [\n  ...(includeUndefined ? [{ buffer: { type: undefined } }] : []),\n  { buffer: { type: 'uniform' } },\n  { buffer: { type: 'storage' } },\n  { buffer: { type: 'read-only-storage' } }];\n\n}\n/** Generate a list of possible sampler-typed BGLEntry values. */\nexport function samplerBindingEntries(includeUndefined) {\n  return [\n  ...(includeUndefined ? [{ sampler: { type: undefined } }] : []),\n  { sampler: { type: 'comparison' } },\n  { sampler: { type: 'filtering' } },\n  { sampler: { type: 'non-filtering' } }];\n\n}\n/**\n * Generate a list of possible texture-typed BGLEntry values.\n *\n * Note: Generates different `multisampled` options, but not `sampleType` or `viewDimension` options.\n */\nexport function textureBindingEntries(includeUndefined) {\n  return [\n  ...(includeUndefined ?\n  [{ texture: { multisampled: undefined, sampleType: 'unfilterable-float' } }] :\n  []),\n  { texture: { multisampled: false, sampleType: 'unfilterable-float' } },\n  { texture: { multisampled: true, sampleType: 'unfilterable-float' } }];\n\n}\n/**\n * Generate a list of possible storageTexture-typed BGLEntry values.\n *\n * Note: Generates different `access` options, but not `format` or `viewDimension` options.\n */\nexport function storageTextureBindingEntries() {\n  return [\n  { storageTexture: { access: 'write-only', format: 'r32float' } },\n  { storageTexture: { access: 'read-only', format: 'r32float' } },\n  { storageTexture: { access: 'read-write', format: 'r32float' } }];\n\n}\n/** Generate a list of possible texture-or-storageTexture-typed BGLEntry values. */\nexport function sampledAndStorageBindingEntries(includeUndefined) {\n  return [...textureBindingEntries(includeUndefined), ...storageTextureBindingEntries()];\n}\n/**\n * Generate a list of possible BGLEntry values of every type, but not variants with different:\n * - buffer.hasDynamicOffset\n * - texture.sampleType\n * - texture.viewDimension\n * - storageTexture.viewDimension\n */\nexport function allBindingEntries(includeUndefined) {\n  return [\n  ...bufferBindingEntries(includeUndefined),\n  ...samplerBindingEntries(includeUndefined),\n  ...sampledAndStorageBindingEntries(includeUndefined)];\n\n}\n\n// Shader stages\n\n/** List of all GPUShaderStage values. */\n\nexport const kShaderStageKeys = Object.keys(GPUConst.ShaderStage);\nexport const kShaderStages = [\nGPUConst.ShaderStage.VERTEX,\nGPUConst.ShaderStage.FRAGMENT,\nGPUConst.ShaderStage.COMPUTE];\n\n/** List of all possible combinations of GPUShaderStage values. */\nexport const kShaderStageCombinations = [0, 1, 2, 3, 4, 5, 6, 7];\nexport const kShaderStageCombinationsWithStage = [\n1, 2, 3, 4, 5, 6, 7];\n\n\n/**\n * List of all possible texture sampleCount values.\n *\n * MAINTENANCE_TODO: Switch existing tests to use kTextureSampleCounts\n */\nexport const kTextureSampleCounts = [1, 4];\n\n// Sampler info\n\n/** List of all mipmap filter modes. */\nexport const kMipmapFilterModes = ['nearest', 'linear'];\nassertTypeTrue();\n\n/** List of address modes. */\nexport const kAddressModes = [\n'clamp-to-edge',\n'repeat',\n'mirror-repeat'];\n\nassertTypeTrue();\n\n// Blend factors and Blend components\n\n/** List of all GPUBlendFactor values. */\nexport const kBlendFactors = [\n'zero',\n'one',\n'src',\n'one-minus-src',\n'src-alpha',\n'one-minus-src-alpha',\n'dst',\n'one-minus-dst',\n'dst-alpha',\n'one-minus-dst-alpha',\n'src-alpha-saturated',\n'constant',\n'one-minus-constant',\n'src1',\n'one-minus-src1',\n'src1-alpha',\n'one-minus-src1-alpha'];\n\n\n/** Check if `blendFactor` belongs to the blend factors in the extension \"dual-source-blending\". */\nexport function IsDualSourceBlendingFactor(blendFactor) {\n  switch (blendFactor) {\n    case 'src1':\n    case 'one-minus-src1':\n    case 'src1-alpha':\n    case 'one-minus-src1-alpha':\n      return true;\n    default:\n      return false;\n  }\n}\n\n/** List of all GPUBlendOperation values. */\nexport const kBlendOperations = [\n'add',\n'subtract',\n'reverse-subtract',\n'min',\n'max'];\n\n\n// Primitive topologies\nexport const kPrimitiveTopology = [\n'point-list',\n'line-list',\n'line-strip',\n'triangle-list',\n'triangle-strip'];\n\nassertTypeTrue();\n\nexport const kIndexFormat = ['uint16', 'uint32'];\nassertTypeTrue();\n\n/** Info for each entry of GPUSupportedLimits */\nconst [kLimitInfoKeys, kLimitInfoDefaults, kLimitInfoData] =\n[\n['class', 'core', 'compatibility', 'maximumValue'],\n['maximum',,, kMaxUnsignedLongValue], {\n  'maxTextureDimension1D': [, 8192, 4096],\n  'maxTextureDimension2D': [, 8192, 4096],\n  'maxTextureDimension3D': [, 2048, 1024],\n  'maxTextureArrayLayers': [, 256, 256],\n\n  'maxBindGroups': [, 4, 4],\n  'maxBindGroupsPlusVertexBuffers': [, 24, 24],\n  'maxBindingsPerBindGroup': [, 1000, 1000],\n  'maxDynamicUniformBuffersPerPipelineLayout': [, 8, 8],\n  'maxDynamicStorageBuffersPerPipelineLayout': [, 4, 4],\n  'maxSampledTexturesPerShaderStage': [, 16, 16],\n  'maxSamplersPerShaderStage': [, 16, 16],\n  'maxStorageBuffersPerShaderStage': [, 8, 4],\n  'maxStorageTexturesPerShaderStage': [, 4, 4],\n  'maxUniformBuffersPerShaderStage': [, 12, 12],\n\n  'maxUniformBufferBindingSize': [, 65536, 16384, kMaxUnsignedLongLongValue],\n  'maxStorageBufferBindingSize': [, 134217728, 134217728, kMaxUnsignedLongLongValue],\n  'minUniformBufferOffsetAlignment': ['alignment', 256, 256],\n  'minStorageBufferOffsetAlignment': ['alignment', 256, 256],\n\n  'maxVertexBuffers': [, 8, 8],\n  'maxBufferSize': [, 268435456, 268435456, kMaxUnsignedLongLongValue],\n  'maxVertexAttributes': [, 16, 16],\n  'maxVertexBufferArrayStride': [, 2048, 2048],\n  'maxInterStageShaderVariables': [, 16, 15],\n\n  'maxColorAttachments': [, 8, 4],\n  'maxColorAttachmentBytesPerSample': [, 32, 32],\n\n  'maxComputeWorkgroupStorageSize': [, 16384, 16384],\n  'maxComputeInvocationsPerWorkgroup': [, 256, 128],\n  'maxComputeWorkgroupSizeX': [, 256, 128],\n  'maxComputeWorkgroupSizeY': [, 256, 128],\n  'maxComputeWorkgroupSizeZ': [, 64, 64],\n  'maxComputeWorkgroupsPerDimension': [, 65535, 65535]\n}];\n\n/**\n * Feature levels corresponding to core WebGPU and WebGPU\n * in compatibility mode. They can be passed to\n * getDefaultLimits though if you have access to an adapter\n * it's preferred to use getDefaultLimitsForAdapter.\n */\nexport const kFeatureLevels = ['core', 'compatibility'];\n\n\nconst kLimitKeys = ['class', 'default', 'maximumValue'];\n\nconst kLimitInfoCore = makeTableRenameAndFilter(\n  { default: 'core' },\n  kLimitKeys,\n  kLimitInfoKeys,\n  kLimitInfoDefaults,\n  kLimitInfoData\n);\n\nconst kLimitInfoCompatibility = makeTableRenameAndFilter(\n  { default: 'compatibility' },\n  kLimitKeys,\n  kLimitInfoKeys,\n  kLimitInfoDefaults,\n  kLimitInfoData\n);\n\nconst kLimitInfos = {\n  core: kLimitInfoCore,\n  compatibility: kLimitInfoCompatibility\n};\n\nexport const kLimitClasses = Object.fromEntries(\n  Object.entries(kLimitInfoCore).map(([k, { class: c }]) => [k, c])\n);\n\nexport function getDefaultLimits(featureLevel) {\n  return kLimitInfos[featureLevel];\n}\n\nexport function getDefaultLimitsForAdapter(adapter) {\n  // MAINTENANCE_TODO: Remove casts when GPUAdapter IDL has isCompatibilityMode.\n  return getDefaultLimits(\n    adapter.isCompatibilityMode ?\n    'compatibility' :\n    'core'\n  );\n}\n\n/** List of all entries of GPUSupportedLimits. */\nexport const kLimits = keysOf(kLimitInfoCore);\n\n/**\n * The number of color attachments to test.\n * The CTS needs to generate a consistent list of tests.\n * We can't use any default limits since they different from core to compat mode\n * So, tests should use this value and filter out any values that are out of\n * range for the current device.\n *\n * The test in maxColorAttachments.spec.ts tests that kMaxColorAttachmentsToTest\n * is large enough to cover all devices tested.\n */\nexport const kMaxColorAttachmentsToTest = 32;\n\n/** The size of indirect draw parameters in the indirectBuffer of drawIndirect */\nexport const kDrawIndirectParametersSize = 4;\n/** The size of indirect drawIndexed parameters in the indirectBuffer of drawIndexedIndirect */\nexport const kDrawIndexedIndirectParametersSize = 5;\n\n/** Per-GPUFeatureName info. */\nexport const kFeatureNameInfo =\n\n\n{\n  'bgra8unorm-storage': {},\n  'depth-clip-control': {},\n  'depth32float-stencil8': {},\n  'texture-compression-bc': {},\n  'texture-compression-bc-sliced-3d': {},\n  'texture-compression-etc2': {},\n  'texture-compression-astc': {},\n  'texture-compression-astc-sliced-3d': {},\n  'timestamp-query': {},\n  'indirect-first-instance': {},\n  'shader-f16': {},\n  'rg11b10ufloat-renderable': {},\n  'float32-filterable': {},\n  'float32-blendable': {},\n  'clip-distances': {},\n  'dual-source-blending': {}\n};\n/** List of all GPUFeatureName values. */\nexport const kFeatureNames = keysOf(kFeatureNameInfo);\n\n/** List of all known WGSL language features */\nexport const kKnownWGSLLanguageFeatures = [\n'readonly_and_readwrite_storage_textures',\n'packed_4x8_integer_dot_product',\n'unrestricted_pointer_parameters',\n'pointer_composite_access'];"],"mappings":"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","ignoreList":[]}